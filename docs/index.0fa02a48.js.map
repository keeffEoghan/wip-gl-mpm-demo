{"mappings":"C,A,W,S,E,C,E,O,G,E,U,C,E,O,C,C,C,IqFA+B,E0CAH,EnFQxB,EACA,EAkFA,EG7EA,E,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,A,W,I,E,S,C,E,O,a,Y,a,a,a,a,a,W,a,Y,a,Y,a,c,a,c,a,iB,E,E,S,C,C,C,E,I,I,E,O,I,C,G,E,E,E,E,M,C,E,E,C,C,C,C,E,C,C,C,C,C,C,E,C,C,O,C,E,S,E,C,E,I,E,A,M,U,E,O,Q,K,C,G,C,C,S,E,C,C,C,E,G,E,E,C,S,E,C,S,A,E,K,E,E,C,S,E,C,C,C,E,O,G,I,S,M,A,U,O,C,K,S,M,A,U,O,C,K,S,M,A,U,O,C,K,U,M,A,W,O,C,K,W,M,A,Y,O,C,K,Y,O,A,K,I,C,K,S,M,A,U,O,C,C,C,S,E,C,C,C,C,C,E,E,E,O,C,I,E,gB,E,G,qB,E,C,I,E,C,K,S,Y,a,a,a,qB,U,S,C,S,E,C,C,C,E,I,G,G,E,M,C,G,E,I,E,O,C,C,S,I,I,C,I,C,U,I,C,K,C,E,C,I,C,K,C,C,E,I,C,S,C,C,C,C,S,E,C,C,C,E,I,C,M,C,E,I,C,I,C,E,I,C,M,C,E,A,C,S,E,C,C,C,C,C,E,I,C,I,C,E,I,C,I,C,E,I,C,O,C,C,C,S,I,I,E,A,Q,E,A,C,E,K,E,C,E,Q,G,E,sC,I,C,G,G,E,O,C,C,E,C,I,E,yC,I,C,U,A,E,C,C,E,C,S,C,S,I,I,E,A,Q,E,A,C,E,K,E,C,E,Q,G,E,oC,I,C,G,G,E,O,C,C,E,C,I,E,mC,I,C,U,A,E,C,C,E,C,S,C,S,E,C,C,C,E,I,E,E,K,C,M,E,E,E,E,E,C,Q,I,E,E,I,C,C,C,E,O,C,I,C,C,C,E,C,I,C,G,I,E,O,C,K,C,I,C,I,E,E,K,I,I,E,E,E,E,M,C,E,E,C,I,E,C,C,E,C,E,2B,I,C,G,G,E,O,C,C,E,E,I,O,I,E,iB,I,C,C,C,E,G,I,E,A,E,C,C,E,E,C,C,E,E,A,C,E,A,E,C,C,E,A,I,G,C,C,C,E,C,I,C,G,K,K,S,I,E,E,6B,I,C,C,C,E,E,G,C,C,C,E,C,I,C,C,C,E,E,E,C,C,E,C,A,A,a,O,K,K,G,U,G,C,C,E,A,C,C,C,C,E,C,K,C,I,C,I,E,I,G,C,O,O,I,C,G,O,C,S,C,E,I,E,C,C,E,C,E,K,C,O,C,S,C,E,E,K,C,E,M,C,C,C,E,G,C,C,S,E,C,E,E,W,C,G,C,S,E,C,C,C,E,I,E,I,E,E,e,C,G,G,E,C,A,Y,E,G,gB,C,E,C,S,E,C,C,C,C,C,C,C,E,E,E,I,E,yB,E,G,c,E,S,O,E,G,I,C,I,E,C,E,S,E,C,C,C,S,A,A,Q,G,A,Q,G,A,Q,E,E,A,Q,E,E,C,C,E,C,C,C,S,E,C,E,M,C,C,E,E,C,G,C,C,C,C,C,C,K,C,C,C,K,C,E,C,C,K,C,C,C,K,C,C,C,M,C,C,C,M,C,C,C,M,C,C,C,M,C,E,C,C,K,C,C,C,K,C,C,C,K,C,C,C,M,C,E,I,E,E,E,C,S,S,C,E,G,E,M,E,a,E,Q,S,C,C,C,C,C,E,G,E,E,G,I,E,U,S,C,C,C,C,C,E,K,G,E,sB,E,I,E,G,sB,O,I,C,G,I,G,E,iB,S,C,C,C,C,C,C,C,E,K,G,E,sB,E,I,E,G,sB,O,I,C,G,I,G,G,I,E,Y,S,C,E,O,I,C,G,O,C,S,C,E,E,E,O,C,I,E,sC,E,qB,E,E,E,K,S,C,C,C,C,C,E,E,E,I,E,yB,E,G,c,E,S,O,E,E,Y,E,a,S,C,C,C,E,E,I,E,yB,E,G,0B,E,I,S,C,C,C,E,G,G,A,C,A,E,C,I,G,E,4B,E,I,E,G,kC,E,M,E,Y,S,C,C,C,C,C,C,C,C,C,E,G,C,E,kB,C,E,E,c,E,C,I,E,E,E,gB,C,G,E,I,E,e,C,W,S,E,E,S,E,kC,G,I,E,E,E,G,A,C,S,C,C,C,E,E,O,C,S,C,E,I,E,C,C,E,I,C,C,G,E,C,I,E,E,K,C,E,I,C,C,G,E,C,E,M,C,I,C,G,E,S,C,C,E,M,C,C,E,O,C,S,C,C,E,E,O,C,K,C,E,C,M,C,I,C,E,E,C,E,G,E,E,C,A,E,K,C,M,O,C,S,C,E,I,C,E,M,C,C,G,I,E,iC,I,C,G,E,E,I,C,I,E,A,E,C,C,E,C,A,E,C,C,E,C,C,C,E,C,I,K,E,M,C,G,E,I,C,I,E,U,E,I,G,I,O,I,C,G,O,C,S,C,E,I,E,C,C,E,C,G,E,S,E,I,E,C,G,C,E,C,G,C,E,e,E,K,E,I,C,K,wD,E,K,C,O,C,S,C,E,G,E,M,C,M,C,E,C,E,E,E,M,C,G,M,6C,E,E,I,C,K,wD,I,E,E,E,M,C,O,C,S,C,E,I,E,E,O,C,E,yB,I,C,G,G,E,C,I,E,C,C,E,C,E,C,C,E,C,W,G,C,E,G,E,E,K,G,C,E,I,C,O,C,E,G,E,M,E,E,E,E,K,I,E,E,M,E,G,K,oB,E,E,K,I,E,E,K,mB,G,E,E,K,G,K,M,E,E,E,M,C,G,O,E,E,I,C,K,Y,G,A,a,O,U,O,M,C,Q,G,C,E,I,C,M,C,C,E,C,E,I,C,M,Q,G,C,K,C,Q,I,S,E,C,C,C,E,E,I,C,G,E,I,C,G,G,C,G,E,K,C,mB,E,Y,C,C,E,C,I,C,C,E,U,S,C,C,C,C,C,C,C,C,C,E,G,C,E,mB,C,E,E,W,E,C,I,E,E,iB,C,G,E,E,E,G,E,8C,A,E,E,E,C,E,C,I,C,2B,C,C,E,C,I,C,G,A,C,a,O,S,Q,G,C,K,E,O,E,uD,a,Q,G,C,E,K,G,E,K,C,E,C,E,S,E,e,E,a,S,C,C,C,C,C,C,C,E,S,E,C,C,C,E,O,I,C,G,O,C,S,C,E,C,C,E,E,C,G,C,C,C,E,C,E,G,E,O,C,C,E,E,M,C,I,E,E,E,C,G,E,E,O,C,C,E,E,M,C,I,E,E,E,C,G,E,I,E,E,E,E,W,C,C,E,E,E,E,M,E,E,E,E,O,E,I,E,E,a,C,C,E,E,E,E,M,E,E,E,E,O,E,E,S,C,U,E,M,E,U,E,O,E,a,E,M,E,a,E,O,A,E,kB,S,C,C,C,C,C,E,E,O,C,E,E,O,C,Q,C,c,C,E,6C,E,E,Y,C,a,C,M,C,E,iD,E,a,E,U,S,C,C,C,C,C,E,I,E,E,E,K,C,E,E,M,C,E,E,Q,C,E,E,G,G,E,c,E,E,G,G,E,c,C,yB,C,A,Q,E,K,E,A,Q,E,K,A,G,E,E,I,E,G,gF,A,I,E,O,C,I,G,A,I,G,E,A,O,E,S,E,A,O,E,S,E,A,O,E,S,E,A,O,E,S,C,+B,E,E,I,E,G,6D,E,E,O,G,A,C,G,C,E,E,sC,O,E,I,G,E,E,U,C,O,C,6B,E,A,O,E,S,E,A,O,E,S,C,8D,E,C,E,U,C,wD,I,E,E,M,C,I,E,E,E,G,E,E,G,C,C,E,C,C,I,E,G,E,E,G,E,E,E,O,C,G,E,uB,I,E,C,C,E,C,G,E,E,K,G,G,E,M,G,E,gC,E,E,M,G,E,M,E,E,c,G,E,c,E,E,I,G,E,I,C,mC,E,U,O,G,E,I,C,C,I,E,K,I,C,E,E,I,C,G,E,E,e,E,E,e,C,E,E,I,C,U,G,E,E,wE,M,E,O,E,E,I,A,M,E,U,E,E,A,C,E,O,C,G,C,G,E,oB,C,E,U,E,E,C,E,U,C,wD,E,Y,S,C,C,C,C,C,C,C,E,I,E,E,K,C,E,E,M,C,E,E,Q,C,E,E,G,G,E,c,E,E,G,G,E,c,C,yB,E,I,E,2B,E,A,Q,E,K,E,A,Q,E,K,C,uC,I,I,E,E,E,E,M,C,E,E,C,I,E,C,C,E,C,E,E,K,G,G,E,M,G,E,oC,E,U,G,E,C,E,U,C,mD,E,A,I,E,O,C,iD,I,I,E,E,M,C,E,E,E,G,E,E,C,I,E,C,C,E,C,G,E,C,I,E,G,E,E,G,E,E,E,O,C,G,E,uB,E,E,K,G,G,E,M,G,E,gC,E,E,M,G,E,M,E,E,c,G,E,c,E,E,I,G,E,I,C,mC,E,U,G,E,I,C,E,E,I,C,U,G,E,E,K,G,C,E,E,I,C,G,E,e,E,yE,E,O,E,E,I,C,C,C,C,C,G,E,E,S,E,C,C,C,E,I,C,E,C,I,I,C,I,C,E,I,C,I,C,C,C,S,E,C,E,O,E,O,C,M,Q,O,C,K,M,C,I,E,C,gB,E,O,S,C,C,C,E,O,I,E,E,I,A,C,S,E,C,E,G,A,I,E,M,C,M,E,C,I,E,E,M,C,G,E,E,M,C,E,M,C,G,G,E,M,C,G,I,G,C,A,M,G,A,M,C,E,M,C,I,E,E,M,C,E,E,M,C,I,I,C,I,E,4C,I,C,G,G,E,O,E,E,M,C,E,E,K,G,M,C,E,C,C,E,G,M,C,E,E,M,C,E,K,C,C,C,E,C,M,I,I,E,E,K,C,K,G,A,I,E,M,C,M,C,I,E,G,I,C,I,I,E,E,C,E,E,E,E,M,C,E,E,E,E,M,C,E,C,C,E,G,O,C,C,E,E,I,I,C,M,I,E,U,S,C,E,M,A,Y,O,G,C,E,S,E,a,C,E,M,S,E,C,C,C,Q,A,A,Y,O,E,I,E,E,G,A,U,O,G,A,W,O,E,I,E,E,G,M,O,C,G,I,E,E,E,G,C,S,C,C,C,E,O,E,E,E,I,E,I,I,a,E,O,E,C,E,kC,E,C,E,E,C,K,A,Y,O,sB,S,C,E,O,sB,E,E,S,C,E,O,W,E,G,E,O,A,Y,O,qB,S,C,E,O,qB,E,E,Y,E,E,A,a,O,a,Y,G,C,W,O,Y,G,E,E,W,M,C,I,I,E,S,E,C,Q,A,A,U,O,E,E,K,I,E,M,O,C,G,2B,E,C,S,E,C,Q,A,A,U,O,G,E,A,a,O,S,gC,S,a,C,I,C,C,S,E,C,C,C,E,I,I,E,M,G,E,E,E,E,E,E,C,C,E,C,E,G,O,C,C,S,E,C,E,I,E,E,O,E,A,C,E,K,G,E,K,E,E,A,C,E,G,G,E,K,E,G,E,E,A,C,E,E,G,E,K,E,G,E,E,A,C,E,C,G,E,K,E,A,C,G,C,E,G,C,C,S,I,I,E,E,E,W,M,E,A,G,S,E,C,E,I,E,A,S,C,E,I,I,E,G,G,U,G,G,G,G,E,O,E,O,C,E,G,E,C,C,E,I,E,Q,A,E,M,C,E,E,G,G,I,Y,E,C,S,E,C,E,C,C,E,E,U,G,E,C,I,C,E,C,M,C,M,E,K,E,U,S,C,C,C,E,I,E,K,O,G,K,K,E,I,U,E,G,E,G,K,M,K,E,I,W,E,G,E,G,K,M,K,E,I,W,E,E,G,E,G,K,M,K,E,I,Y,E,E,G,E,G,K,M,K,E,I,W,E,E,G,E,G,K,M,K,E,I,Y,E,E,G,E,G,K,M,K,E,I,a,E,E,G,E,G,K,S,O,I,Q,A,E,M,G,E,E,Q,C,E,G,C,E,S,S,C,E,E,E,M,C,C,C,C,I,E,G,C,E,I,C,I,I,E,S,C,C,C,E,I,E,C,C,E,8B,E,C,E,E,Y,C,M,E,I,E,E,E,C,C,E,kB,G,E,E,Y,C,O,E,E,Y,C,Q,I,E,C,C,E,iB,C,G,E,C,I,E,E,a,G,E,W,C,K,G,E,U,C,K,E,K,E,E,E,K,K,M,I,E,E,iB,G,G,E,e,C,M,G,E,oB,C,M,M,K,E,G,E,W,C,K,M,A,Q,E,sB,C,O,E,C,M,C,E,Q,C,E,E,E,G,E,U,C,E,E,E,G,E,K,C,O,I,E,E,S,C,K,G,E,U,C,E,E,E,E,K,K,G,E,Q,G,E,C,G,E,iB,C,G,E,a,C,G,E,A,I,C,C,E,E,E,Q,C,E,C,C,I,E,A,a,O,W,C,O,I,C,U,S,G,Y,I,C,U,U,G,O,I,C,U,S,C,E,E,C,E,G,C,E,C,I,E,E,a,G,E,E,S,C,K,I,E,a,C,O,E,W,C,M,G,E,U,C,M,E,K,E,E,E,K,K,G,E,Q,C,G,E,W,C,M,M,E,a,C,G,E,C,E,Q,E,C,M,C,U,C,E,Y,C,M,E,Y,C,M,E,Y,C,M,E,Y,C,M,C,U,E,Y,C,M,Y,E,Y,C,M,a,E,Y,C,M,W,O,I,C,G,M,C,S,C,E,M,C,C,C,C,E,A,G,e,E,e,E,oB,E,c,E,Y,C,O,c,E,Y,C,O,gB,E,Y,C,M,wB,E,Y,C,O,e,E,Y,C,O,oB,E,Y,C,O,gB,E,Y,C,O,e,E,Y,C,M,c,E,Y,C,O,kB,E,Y,C,O,sB,E,Y,C,O,kB,E,Y,C,O,oB,E,Y,C,O,K,E,Y,C,O,S,E,Y,C,M,O,E,Y,C,M,Q,E,Y,C,M,U,E,gB,C,C,E,S,E,C,E,M,C,C,G,A,U,O,G,M,O,C,E,K,G,M,O,C,E,M,G,A,U,O,E,M,E,E,K,C,M,G,E,M,C,M,E,C,M,O,C,E,I,G,E,E,I,C,C,C,I,E,S,C,E,O,O,I,C,G,G,C,S,C,E,O,C,C,E,A,E,E,E,C,M,S,C,E,I,I,E,E,C,E,E,E,M,C,E,C,C,E,C,E,I,C,E,M,E,O,C,E,Q,S,C,C,C,C,C,C,C,E,I,E,E,G,E,M,C,I,I,E,E,E,E,M,C,E,E,G,C,C,E,M,E,E,I,E,G,E,S,C,E,G,O,E,M,E,K,E,K,M,G,A,S,C,C,C,C,C,E,I,I,E,E,E,E,E,E,C,C,E,C,C,C,E,A,E,E,C,C,E,C,G,K,M,G,A,S,C,C,C,C,C,C,C,E,I,I,E,E,E,E,E,E,E,E,I,I,E,C,C,E,C,E,E,E,E,E,E,C,C,I,C,C,C,E,A,E,E,C,C,E,C,C,C,E,C,G,K,M,E,E,E,C,C,E,C,C,C,E,C,C,C,E,C,E,G,K,U,A,S,E,C,C,C,C,C,C,C,C,C,E,I,I,E,E,E,E,E,E,E,M,C,E,E,G,C,C,E,C,I,E,C,C,E,C,G,E,M,C,G,E,C,I,E,C,C,E,E,C,E,C,C,E,E,C,E,C,C,E,E,C,I,E,E,E,E,E,E,E,C,C,E,C,E,E,E,E,G,G,C,M,I,E,E,E,E,E,E,E,C,C,E,C,E,E,E,E,G,G,C,E,E,E,E,E,E,C,O,C,C,E,S,E,C,C,C,C,C,C,C,C,C,C,C,E,I,I,E,E,E,E,E,E,E,E,I,I,E,C,C,E,C,E,E,E,E,E,E,I,I,E,C,C,E,C,E,E,E,E,E,E,C,C,I,C,C,C,E,A,C,I,E,C,qB,K,sB,K,sB,K,sB,K,6B,K,uB,K,uB,K,wB,K,wB,K,uB,I,E,E,C,K,K,M,K,M,K,M,K,O,K,O,K,M,K,Q,I,E,E,C,Q,M,O,M,O,K,E,E,E,O,C,E,E,K,C,E,E,C,S,E,C,E,O,A,E,C,C,O,S,C,Q,C,I,C,G,A,C,S,E,C,C,C,E,I,I,E,E,E,E,M,C,E,E,C,C,E,C,C,C,E,A,C,S,E,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,I,E,E,E,E,E,E,E,E,I,I,E,E,E,E,E,E,C,C,I,C,C,C,E,E,E,E,E,A,C,C,C,K,C,E,C,C,K,C,E,C,C,K,C,E,C,C,K,C,E,C,C,K,C,E,C,C,K,C,E,C,C,K,C,E,I,E,C,O,E,M,E,M,E,K,E,U,E,S,E,Y,E,a,E,iB,E,e,C,E,E,I,a,G,E,I,Y,E,M,E,S,E,C,E,I,I,E,E,S,C,K,E,M,E,E,E,E,E,M,C,E,E,G,M,C,C,E,E,C,C,E,C,W,G,C,C,E,G,I,C,C,E,C,W,G,C,C,E,G,C,I,C,C,E,C,U,C,C,C,E,C,C,C,E,C,I,E,C,C,E,C,E,I,I,G,E,A,C,G,I,E,E,I,E,G,G,K,G,E,I,C,C,E,C,O,G,E,I,C,I,E,I,C,C,C,C,E,C,E,C,E,M,C,C,M,E,G,C,C,E,C,E,M,C,C,E,C,E,C,E,I,E,E,C,C,O,C,C,S,E,C,E,O,M,O,C,I,E,E,C,I,E,S,C,E,M,C,C,E,E,C,G,C,C,C,E,G,C,K,K,K,K,C,G,C,E,K,K,K,K,C,G,C,E,S,G,C,E,M,W,E,G,C,E,C,K,C,E,C,K,C,E,C,K,C,E,E,C,M,C,E,C,K,C,E,E,C,K,C,E,C,M,C,E,E,C,K,C,E,C,M,C,E,I,G,G,qB,G,G,mB,G,G,4B,G,G,e,G,G,oB,G,G,oB,G,O,I,C,G,M,C,C,G,G,G,G,G,G,E,G,E,A,C,E,C,K,C,E,E,C,K,C,E,E,C,M,C,E,E,C,K,C,E,E,C,K,C,E,I,G,E,C,S,G,C,E,O,M,O,C,I,C,A,I,E,M,E,A,U,O,C,C,E,A,C,C,S,G,C,W,M,O,C,I,A,I,E,M,E,E,C,C,E,E,C,S,G,C,E,O,O,S,C,Q,C,I,C,E,C,S,G,C,E,G,C,E,M,C,E,I,E,G,U,A,G,O,C,I,G,G,I,G,I,E,E,C,S,G,C,E,O,A,E,C,C,O,S,C,Q,C,I,C,G,A,C,S,G,C,C,C,E,O,E,S,C,A,Q,E,I,C,K,E,I,C,E,C,S,G,C,C,C,E,A,Q,E,I,E,E,I,C,E,G,E,Q,C,I,E,I,C,C,C,S,G,C,C,C,C,C,C,C,C,C,C,C,E,G,E,A,K,I,E,C,E,C,E,C,E,C,E,C,E,C,E,C,E,C,G,C,G,C,G,E,O,E,E,E,I,I,E,E,E,E,E,G,G,G,E,E,E,G,E,O,C,C,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,G,E,C,M,C,G,E,C,M,C,E,E,C,M,C,E,E,C,M,C,G,E,C,M,C,E,E,C,M,C,E,E,C,M,C,G,E,C,M,C,I,E,C,M,C,G,E,C,M,C,I,E,C,M,C,G,I,G,E,A,C,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,E,E,C,M,C,G,E,C,M,C,E,E,C,M,C,E,I,G,S,C,C,C,C,C,C,C,C,C,E,I,E,C,M,M,O,M,U,M,M,M,Q,M,gB,K,C,C,E,Q,E,C,E,K,C,K,E,E,2B,G,E,O,C,M,E,M,C,O,E,wB,E,C,E,O,C,K,E,I,E,E,C,O,I,C,G,O,C,S,C,E,C,C,C,C,E,C,C,C,G,I,E,E,E,C,E,S,E,C,E,I,C,E,C,I,I,C,Q,C,E,I,C,Y,C,E,I,C,M,C,M,I,C,K,C,E,I,C,M,C,E,E,O,E,C,I,C,K,C,C,K,C,C,C,C,S,E,C,E,I,E,E,Y,C,E,E,wC,E,gB,C,M,M,E,kB,C,G,E,Y,C,K,E,Q,C,E,O,C,C,E,E,C,C,E,iB,E,Q,E,S,C,M,C,W,E,I,C,Q,E,G,E,I,C,E,E,O,E,C,E,wB,C,W,I,E,E,O,O,I,C,G,O,C,S,C,E,G,C,C,E,C,K,C,I,A,G,C,C,E,C,O,S,C,C,C,E,I,E,I,E,E,kB,I,S,E,C,C,C,E,I,E,E,E,E,E,E,E,E,M,G,A,U,O,G,E,C,G,U,E,C,I,E,A,E,K,C,E,M,O,C,I,E,M,E,E,8B,E,A,E,C,C,E,C,E,A,E,C,C,E,A,K,W,G,C,E,E,A,E,A,E,M,A,E,U,G,C,E,A,E,A,E,K,A,E,W,G,C,E,A,E,A,E,M,A,C,C,W,I,E,S,C,A,E,M,C,E,+B,E,C,C,A,E,M,C,C,K,A,U,O,G,E,A,E,E,E,A,U,O,E,A,E,E,G,E,E,K,C,iD,E,E,E,G,E,E,G,E,G,G,E,mB,E,G,E,mB,C,6B,I,E,K,E,I,E,M,E,I,E,M,C,O,E,K,C,E,K,C,E,E,M,C,E,M,C,E,E,M,C,E,E,gB,C,M,E,Y,E,E,mB,C,M,E,E,G,E,A,I,E,Q,G,gC,E,O,E,C,E,K,C,I,E,E,E,M,C,E,E,K,C,E,E,M,C,E,C,E,C,E,E,E,E,M,C,C,C,E,M,C,C,C,Q,C,C,E,E,C,C,E,E,iB,G,E,E,G,E,M,C,S,C,C,C,E,I,E,E,E,E,A,E,E,E,A,E,G,S,I,E,K,E,I,E,M,G,E,E,G,E,G,G,E,mB,E,G,E,mB,C,6B,E,K,C,E,K,C,E,E,M,C,E,M,C,E,E,gB,C,M,E,Y,E,E,mB,C,M,E,M,C,E,G,E,A,I,E,Q,G,gC,E,O,E,C,E,K,C,I,E,E,E,M,C,E,E,K,C,E,E,M,C,E,C,E,C,E,E,G,C,E,E,S,C,e,E,a,C,E,E,O,E,C,E,K,C,E,K,A,E,E,O,C,W,E,M,E,E,C,E,M,W,E,G,O,C,E,E,Q,W,E,G,O,C,S,C,E,E,Y,C,E,kB,G,E,gB,C,M,E,Y,E,E,mB,C,M,E,M,C,E,K,C,E,M,C,G,E,gB,C,M,K,C,C,E,G,C,K,K,C,G,E,A,C,E,C,K,C,E,E,C,K,C,E,I,G,E,A,C,E,C,K,C,E,E,C,K,C,E,E,C,M,C,E,I,G,C,M,M,M,M,M,M,M,C,G,C,C,C,E,C,M,C,W,E,C,M,C,wB,E,C,M,C,wB,E,C,M,C,iC,E,C,M,C,c,I,G,C,a,W,S,Q,Y,Y,C,S,K,I,C,K,C,E,I,C,C,C,E,I,C,C,C,E,I,C,C,C,E,I,C,C,C,E,I,C,M,C,K,I,C,I,C,E,I,C,U,C,C,E,I,C,I,C,K,I,C,M,C,E,I,C,M,C,E,I,C,O,C,C,C,S,G,C,E,O,M,S,C,K,C,I,C,E,C,S,G,C,E,O,G,G,I,C,G,C,I,G,O,K,C,I,G,S,G,e,G,c,G,iB,G,a,G,e,G,a,G,c,G,a,G,Y,G,c,G,Y,G,Y,G,Y,G,uB,G,uB,G,e,G,gB,G,kB,G,iB,G,e,G,e,G,kB,G,iB,G,iB,G,c,G,W,G,U,G,c,G,O,G,O,G,W,G,Y,G,Q,G,S,G,Y,G,Q,G,S,G,G,G,G,G,G,G,G,G,G,G,G,G,gB,G,G,G,G,G,G,G,C,G,G,G,G,G,G,G,G,G,C,G,C,E,E,E,E,K,E,I,E,Y,I,sB,I,Y,I,sB,I,Y,I,sB,I,Y,I,sB,I,iB,M,2B,M,iB,M,2B,M,qB,G,E,G,C,iC,2C,2C,qD,iC,2C,2C,qD,C,G,C,M,I,K,I,I,I,M,I,I,I,K,I,M,I,O,I,K,I,Q,I,I,I,S,I,K,I,M,I,O,I,K,I,O,G,E,G,C,E,E,K,E,K,K,Q,K,U,K,U,K,iB,M,iB,M,O,I,E,G,C,K,M,K,K,E,G,C,G,K,I,I,E,S,G,C,E,O,M,O,C,I,E,I,E,E,C,S,G,C,E,O,E,I,C,S,C,C,C,S,A,I,G,G,I,G,E,E,E,G,C,E,C,S,G,C,C,C,C,C,C,C,E,I,C,O,C,E,I,C,U,C,E,I,C,O,C,E,I,C,M,C,C,C,S,G,C,E,O,G,C,C,E,O,E,E,U,E,E,O,A,C,C,S,G,C,E,O,I,G,C,E,C,E,C,E,E,C,S,G,C,C,C,E,I,E,E,I,C,G,A,I,E,C,I,E,E,I,C,M,C,O,I,G,C,E,G,E,G,E,E,C,G,A,I,E,C,I,E,E,I,C,O,I,G,E,O,C,E,U,C,E,O,C,E,C,G,A,I,E,O,I,G,C,E,C,E,C,E,G,G,A,I,E,O,I,G,A,I,E,A,I,E,A,I,E,G,I,I,E,C,E,E,C,E,E,C,E,E,E,E,E,I,C,M,C,E,E,C,I,E,E,I,C,E,C,G,A,I,E,I,C,E,C,O,G,A,I,E,I,C,E,C,O,G,A,I,E,I,C,E,C,O,G,A,I,E,I,C,C,E,C,E,I,E,E,I,C,G,G,C,E,C,C,E,G,G,C,E,C,C,C,M,I,E,I,G,E,G,E,I,C,O,C,E,G,E,I,C,U,C,E,G,E,I,C,O,C,C,O,I,G,E,E,E,E,C,I,G,I,G,C,E,C,E,C,E,W,G,G,S,C,C,C,E,G,C,E,wB,C,O,K,I,E,E,C,E,E,C,S,I,I,C,e,C,G,I,C,a,C,G,I,C,G,C,E,I,C,K,C,I,C,I,E,E,C,E,E,C,S,E,C,C,C,C,C,E,I,E,E,G,I,I,C,C,E,e,C,E,E,a,C,E,E,G,C,E,E,K,C,E,E,I,C,E,C,I,E,E,C,E,E,C,M,C,W,S,C,E,I,E,E,G,I,E,wB,C,c,G,E,wB,C,a,C,M,G,E,I,C,G,E,E,M,C,E,E,M,C,E,E,S,W,E,wB,C,W,C,M,E,e,E,O,W,I,E,E,E,E,M,C,G,A,I,G,E,M,C,K,G,C,E,M,C,E,G,E,M,C,K,G,C,E,M,C,E,G,C,C,E,C,E,C,C,E,C,E,I,E,E,I,E,E,E,E,E,E,M,C,E,E,C,I,E,C,C,E,C,E,wB,C,iB,C,E,Q,G,E,wB,C,iB,C,E,O,E,I,C,I,C,C,I,C,E,C,C,E,E,C,E,C,C,E,E,C,C,C,I,E,E,E,M,C,E,E,E,E,E,M,C,E,E,C,I,E,C,C,E,C,E,E,e,C,E,E,a,A,C,E,G,E,C,C,E,C,C,C,E,C,I,E,C,C,E,C,E,C,C,E,A,C,I,G,E,K,C,O,E,E,G,C,I,E,I,C,K,E,e,C,E,E,a,C,E,C,C,I,C,E,C,E,M,C,E,E,qB,W,O,E,M,A,E,M,W,E,I,C,K,C,E,G,I,I,E,E,E,E,M,C,I,E,wB,C,c,C,C,C,E,C,C,E,M,C,E,E,M,C,C,E,Q,W,E,M,C,E,E,M,C,C,C,C,E,G,mB,G,uB,S,G,C,C,C,E,I,I,E,E,E,E,M,C,E,E,G,C,C,E,G,E,O,E,O,E,C,O,S,C,E,I,E,E,E,A,S,C,E,I,E,E,E,E,E,G,C,E,E,C,E,E,E,C,E,E,C,E,A,a,O,O,E,O,gB,C,E,C,E,E,S,C,E,G,E,K,C,E,E,E,W,E,G,A,U,O,G,E,A,a,O,S,sD,E,E,S,a,C,G,qC,A,U,O,E,A,U,O,A,E,Q,E,A,Y,O,A,E,W,E,A,Y,O,A,E,qB,C,E,E,A,Y,O,A,E,U,E,A,Y,O,A,E,Y,C,E,A,C,E,C,E,M,E,E,W,C,G,O,E,E,E,E,C,W,E,E,E,E,M,E,c,G,C,E,E,E,S,C,E,e,I,E,E,U,C,E,I,C,E,S,+B,e,G,C,E,E,E,U,C,E,uB,G,C,E,E,E,kB,C,E,W,I,E,I,C,E,M,C,W,sC,E,E,M,E,Y,G,C,E,C,C,E,O,A,E,e,G,E,A,C,E,C,E,U,A,E,E,wB,E,K,C,6B,I,A,W,E,Q,C,W,G,E,E,E,G,C,E,C,G,C,E,C,E,A,a,O,S,mE,I,E,A,S,C,C,C,C,C,E,I,E,E,S,a,C,U,S,I,I,E,O,U,C,E,O,W,C,G,I,S,I,C,C,I,E,E,qB,G,E,E,K,C,E,I,C,E,E,M,C,E,G,A,C,E,K,C,E,E,E,M,C,E,C,Q,E,E,K,C,C,O,E,O,E,Q,E,I,E,K,E,M,O,O,M,G,E,W,C,G,I,S,I,G,E,K,C,Q,C,W,E,E,K,C,C,O,E,Q,C,I,I,S,I,E,A,Y,O,e,A,C,E,I,e,W,W,E,E,E,O,C,G,O,gB,C,S,E,C,G,I,C,O,E,U,W,E,E,U,G,O,mB,C,S,G,E,W,C,E,C,C,E,G,S,I,C,E,G,G,C,E,O,K,E,E,M,C,E,E,S,A,C,K,I,E,kB,E,C,E,kB,C,C,C,E,E,A,S,C,C,C,E,S,E,C,E,G,C,O,E,U,C,E,E,C,M,E,C,O,I,C,C,O,E,U,E,uB,E,qB,E,E,E,Q,A,E,C,G,E,O,E,U,E,W,E,mB,E,W,E,Q,E,O,E,U,C,G,I,E,4F,K,E,G,G,C,E,O,K,I,E,E,E,C,E,E,oB,G,E,E,a,G,E,A,S,C,C,C,E,I,E,C,E,S,E,C,E,E,I,C,E,S,iC,I,E,E,E,W,G,G,C,E,C,C,E,C,E,Y,C,E,C,M,E,C,C,M,C,C,C,C,I,I,E,E,E,E,U,C,M,C,E,E,C,I,E,E,U,C,E,C,G,C,E,G,O,E,S,G,E,M,C,I,E,+G,I,C,O,E,kB,C,O,C,G,C,W,E,Q,W,O,I,C,G,O,C,S,C,E,G,C,C,E,E,C,E,G,M,A,M,qC,E,E,C,C,E,E,G,G,C,E,O,K,I,G,E,C,G,C,E,E,C,G,C,C,G,S,C,E,I,E,C,C,E,Q,I,E,C,C,E,C,E,M,C,E,I,C,I,C,E,I,S,C,E,O,C,C,E,A,C,G,E,C,S,E,Y,E,c,E,iB,E,Y,E,a,E,U,E,kB,E,gB,C,E,E,E,U,C,E,G,E,G,E,I,E,E,kB,C,E,E,mB,C,E,C,K,E,K,E,c,E,e,E,iB,E,kB,E,mB,E,oB,E,W,E,U,A,E,E,C,S,K,U,E,M,G,O,E,U,E,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,E,I,E,E,E,C,E,S,E,C,E,I,C,E,C,I,I,C,M,C,E,Y,G,I,C,I,C,E,I,C,K,C,M,I,C,U,C,E,I,C,S,C,E,I,C,K,C,K,I,C,c,C,K,E,O,E,C,I,C,K,C,C,K,C,C,C,C,E,S,C,I,C,W,E,U,C,I,C,I,C,I,C,M,C,E,E,S,C,O,C,W,E,I,C,E,I,E,E,C,S,E,C,C,C,C,C,E,E,U,C,E,U,C,E,U,C,E,I,C,E,E,C,S,E,C,C,C,C,C,C,C,C,C,C,C,E,G,E,K,C,E,M,O,C,G,C,G,E,K,C,G,K,E,M,C,G,G,M,O,C,C,C,E,E,C,E,E,G,I,I,E,E,E,E,E,E,E,E,M,C,E,E,G,C,C,E,A,C,E,S,C,E,E,E,E,E,E,K,E,E,E,E,G,E,E,c,C,E,E,Q,C,E,M,G,A,U,O,C,C,E,C,C,E,S,C,E,I,E,E,S,C,E,K,C,E,M,E,E,E,G,E,E,E,G,E,E,c,C,E,E,Q,C,E,M,E,C,C,E,G,E,S,C,C,C,E,C,M,C,E,K,C,G,E,C,C,E,G,K,E,E,E,C,E,M,C,C,C,E,C,M,C,C,E,K,E,E,E,E,G,E,E,c,C,E,E,Q,C,I,E,K,C,uB,M,G,E,G,E,K,C,G,E,G,E,S,C,E,E,E,E,G,G,C,E,c,C,I,W,I,W,E,M,E,O,G,E,G,C,E,E,K,C,I,E,E,M,C,E,E,M,C,E,E,E,E,E,E,E,C,A,C,I,E,M,E,E,C,C,E,C,E,E,E,C,C,E,C,E,G,A,I,E,M,E,E,C,C,E,C,E,C,C,E,C,E,C,C,E,C,E,C,C,E,E,E,K,C,iB,E,K,C,G,E,E,I,G,K,E,S,C,E,I,E,E,S,C,E,K,C,E,G,E,E,E,I,C,E,E,E,E,G,E,E,E,G,E,E,c,C,E,E,Q,C,E,M,a,a,E,K,C,K,E,S,C,E,E,E,E,G,G,C,E,c,C,I,W,I,W,G,G,E,K,C,sB,C,S,E,C,E,E,W,G,E,G,I,E,E,M,C,E,E,sC,E,Y,C,G,E,M,C,K,O,C,C,E,E,C,A,C,O,E,O,E,C,E,kB,C,W,I,E,E,O,O,I,C,G,O,C,S,C,E,G,C,C,E,C,K,C,I,A,G,C,C,E,C,O,S,C,C,C,C,C,C,C,E,E,W,G,I,E,I,E,G,S,E,C,E,I,E,M,E,K,E,E,E,E,E,E,O,M,O,C,I,E,I,E,I,a,Y,E,E,A,U,O,E,E,A,E,E,I,E,I,C,E,S,4D,S,I,E,A,O,G,M,O,C,I,E,I,E,G,2B,E,E,I,E,U,I,E,S,C,E,K,C,E,wB,E,C,C,E,K,C,E,S,I,E,S,C,E,I,C,E,uB,E,C,C,E,I,C,E,c,I,E,I,C,E,S,C,S,qB,E,A,E,E,S,E,W,I,E,G,C,E,+C,E,A,E,E,M,G,E,I,G,E,E,E,E,E,E,E,I,G,E,U,C,E,I,C,E,G,E,K,C,G,K,E,K,C,E,E,S,C,E,E,U,C,G,E,O,E,C,E,K,C,I,C,E,U,C,C,C,E,K,C,A,E,C,C,S,E,C,C,C,E,E,E,E,U,E,E,U,C,+E,E,U,C,yB,E,wB,E,U,E,E,a,C,E,I,C,E,E,Q,C,C,E,E,C,C,E,G,E,G,E,S,C,S,E,O,C,E,E,O,C,S,C,C,C,E,I,E,E,A,E,C,G,C,E,G,E,I,G,E,I,a,Y,E,E,Q,G,M,O,C,G,C,G,E,M,C,G,G,A,U,O,C,C,E,C,C,I,E,E,S,C,E,K,C,E,M,E,E,E,G,E,E,G,E,Q,C,E,M,G,M,O,C,C,C,E,G,E,C,C,E,E,C,E,E,G,I,E,E,E,E,E,K,E,E,E,G,E,Q,C,E,M,E,K,C,uB,M,G,E,G,C,E,E,K,C,I,E,E,M,C,E,E,E,E,E,E,E,C,A,C,I,E,M,E,E,C,C,E,C,E,E,E,C,C,E,C,E,G,A,I,E,M,E,E,C,C,E,C,E,C,C,E,C,E,C,C,E,C,E,C,C,E,E,E,K,C,iB,I,E,M,O,C,E,I,E,E,K,C,E,E,I,E,E,E,S,C,E,E,G,E,E,E,I,C,E,E,E,E,E,M,E,E,E,G,E,Q,C,E,M,E,K,C,mC,O,C,E,E,O,E,C,E,K,C,E,K,A,E,E,O,C,W,E,E,E,C,E,a,S,C,C,C,E,I,E,E,G,G,O,G,C,E,I,E,E,E,E,I,G,E,E,E,M,E,E,C,G,C,E,c,S,C,E,E,I,C,E,E,M,W,E,G,O,C,G,E,O,C,E,E,U,S,C,S,A,G,E,O,Y,E,E,O,C,I,E,Q,W,E,G,O,C,S,C,E,E,M,C,E,Y,G,E,U,C,E,I,C,E,M,E,E,U,C,E,I,C,E,c,E,E,U,C,E,K,C,E,E,Y,C,C,E,E,E,E,S,C,E,O,E,a,C,E,G,E,A,S,C,C,C,C,C,C,C,E,I,E,C,E,E,E,E,C,M,K,O,I,E,S,E,C,E,I,C,E,C,I,C,C,I,C,E,C,C,I,C,I,C,M,C,E,I,C,Q,C,E,I,C,S,C,E,I,C,I,C,C,C,E,sB,E,C,E,M,C,I,E,E,S,C,I,C,W,I,C,M,C,I,E,E,I,E,E,C,S,E,C,C,C,C,C,C,C,C,C,C,C,C,C,E,G,E,M,C,I,G,E,C,I,E,E,C,E,G,C,C,E,I,E,I,C,E,E,I,C,G,C,E,E,sB,C,K,I,E,E,W,C,E,M,C,E,E,E,E,M,E,U,C,M,E,G,E,M,C,K,C,G,K,E,M,C,K,C,E,E,M,C,S,C,E,E,M,C,U,C,E,G,E,E,C,E,C,O,E,M,C,K,E,K,K,K,K,E,K,K,M,K,K,K,E,K,K,M,K,K,K,E,K,K,S,E,K,C,qC,C,E,M,C,K,C,C,C,E,I,C,E,E,A,O,G,C,C,E,sB,C,6E,I,E,E,E,I,E,E,M,C,U,C,A,O,E,I,E,O,G,C,I,C,G,E,S,C,E,I,E,E,G,E,E,C,E,E,I,E,E,M,C,S,A,C,I,G,C,E,C,E,I,G,C,E,C,E,I,G,C,E,C,C,C,E,Q,C,C,C,S,E,C,E,E,a,G,E,A,O,E,M,C,oC,O,C,C,E,E,C,C,E,M,C,O,G,E,M,C,I,C,M,C,O,S,C,C,C,E,I,E,E,M,C,K,M,C,G,E,I,E,E,O,E,S,E,C,E,G,G,G,A,U,O,E,E,G,E,Q,C,E,E,S,C,A,E,E,E,I,C,S,C,I,E,K,E,M,E,G,E,G,E,E,E,C,C,M,O,C,I,E,I,E,G,E,G,E,I,C,E,S,kC,S,G,E,M,O,C,E,E,I,G,E,I,E,G,mC,U,I,E,S,C,E,K,C,E,gC,E,C,C,E,K,C,E,c,I,E,S,C,E,S,C,E,oC,E,C,C,E,S,C,E,U,I,E,A,U,O,E,K,E,E,K,E,E,qC,E,A,E,E,K,E,S,I,E,S,C,E,I,C,E,uB,E,C,C,E,I,C,E,W,E,E,A,E,E,M,E,E,E,A,O,G,A,O,E,G,E,C,A,O,G,A,O,C,G,C,G,C,I,E,E,E,E,E,E,E,E,O,I,E,Q,C,E,E,S,C,E,E,I,C,K,O,C,C,O,E,a,G,E,G,E,S,C,W,E,S,C,E,E,O,C,S,C,C,C,E,O,E,O,C,E,G,C,E,E,O,C,W,E,E,E,C,E,a,S,C,E,I,E,E,G,G,O,G,C,E,I,E,E,M,C,K,M,C,E,C,G,O,C,E,E,E,E,M,G,G,E,G,C,E,c,S,C,E,E,I,C,E,E,Y,S,C,Q,A,A,Y,O,G,E,S,Y,E,E,S,C,I,E,M,W,E,G,O,C,E,C,C,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,I,E,E,a,C,E,A,M,G,E,E,E,E,E,E,C,C,E,C,I,G,I,E,E,E,C,E,E,C,O,G,M,C,E,M,E,W,K,U,K,Q,I,W,K,E,G,O,C,S,C,E,E,O,E,E,E,W,E,U,S,C,E,I,E,I,E,S,E,C,E,G,M,O,C,G,E,E,E,Q,E,E,Y,E,E,Q,C,O,G,E,Q,C,K,E,Y,C,C,E,E,M,C,E,E,K,C,E,E,S,C,G,E,S,C,M,C,G,E,A,U,O,E,oC,E,e,E,mC,E,Q,C,C,I,E,E,Q,A,C,E,Y,E,A,Y,O,G,A,a,E,S,C,E,Q,C,O,G,E,Q,C,G,E,Y,C,C,G,E,W,C,E,Q,G,E,Q,C,E,Q,C,E,Y,C,C,I,E,Q,C,E,M,C,E,Q,E,E,Y,C,C,E,M,E,Q,C,K,E,Y,C,C,E,E,E,U,C,E,M,C,E,E,K,C,G,E,S,C,G,E,S,C,E,E,Q,G,E,K,C,E,Q,C,S,C,S,C,E,S,C,E,Q,C,S,C,Q,E,W,G,C,E,M,C,A,E,E,M,A,E,U,G,C,E,K,C,A,E,E,K,A,E,c,G,C,E,S,C,A,E,E,S,A,E,c,I,E,E,S,I,E,uB,E,S,E,E,S,C,C,C,E,S,C,E,E,Q,C,K,I,I,E,O,I,C,G,E,E,E,E,M,C,E,E,E,G,O,C,C,C,E,G,E,4B,C,C,E,C,uB,G,G,E,M,O,C,G,8B,C,E,E,M,C,E,uB,E,E,M,C,E,uC,I,E,C,E,E,E,U,A,C,E,M,C,E,M,C,I,I,E,E,E,E,M,C,E,E,C,I,E,E,E,C,C,E,C,E,C,C,E,C,I,G,E,E,I,E,C,C,M,O,C,I,E,I,E,I,E,O,C,E,G,E,E,O,C,E,C,E,I,E,O,C,U,E,E,U,C,E,O,C,I,E,O,G,E,O,C,E,C,O,E,O,C,E,E,C,E,E,O,C,E,C,E,M,C,E,M,C,E,C,E,E,E,M,C,E,S,C,G,E,I,C,A,E,E,M,C,S,C,E,U,C,C,E,E,I,C,E,M,C,K,C,E,M,C,E,E,M,C,E,E,O,C,E,E,K,C,E,C,C,E,C,G,E,S,C,I,E,M,C,E,S,C,G,E,I,C,A,E,E,M,C,S,C,E,U,C,C,E,E,I,C,E,M,C,K,C,E,M,C,E,E,M,C,E,E,O,C,E,E,K,C,G,E,S,C,E,M,G,E,M,C,E,S,C,E,M,E,E,I,C,A,E,C,C,E,I,E,E,M,C,S,A,E,E,U,C,C,C,E,U,C,S,G,E,S,C,E,I,C,E,uB,E,I,C,C,C,E,I,C,E,E,I,C,E,M,C,K,C,E,M,C,A,E,C,E,M,E,C,E,E,M,C,A,E,C,E,M,E,C,E,E,O,C,A,E,C,E,O,E,C,E,E,K,C,E,E,E,I,E,G,E,I,E,E,gC,E,E,M,E,E,kB,E,E,M,E,G,E,M,E,I,oC,E,E,O,E,E,4B,E,C,E,O,E,C,C,E,sB,C,0D,M,G,E,E,E,0C,E,C,C,C,E,C,E,E,E,C,C,C,E,C,E,E,E,C,C,C,E,C,E,E,E,C,C,C,E,C,E,E,E,K,C,G,E,C,E,uC,E,C,I,I,E,E,E,E,O,C,M,C,E,E,C,C,C,E,E,E,O,C,E,G,E,O,C,E,C,O,G,E,O,C,E,C,M,O,E,O,G,C,C,O,E,Q,E,E,E,O,C,W,I,I,E,E,E,E,O,C,M,C,E,E,E,O,C,E,E,E,O,C,E,C,O,E,C,E,O,C,M,C,E,E,Y,G,E,Q,C,O,G,E,Q,C,K,E,Y,C,C,G,E,O,E,E,E,I,C,E,E,S,C,M,E,E,E,O,S,C,Q,A,A,Y,O,G,E,I,C,E,I,C,I,E,c,S,C,E,I,I,E,E,E,E,M,C,E,E,C,I,E,C,C,E,A,C,E,M,G,I,E,wB,C,G,E,M,C,K,C,E,O,I,S,C,E,G,I,E,U,E,I,E,I,E,E,kB,C,E,G,E,E,kB,C,M,E,U,C,E,E,S,C,E,G,I,E,U,E,G,E,E,S,O,C,I,I,E,I,E,E,E,E,M,C,E,E,C,I,E,C,C,E,A,C,E,M,E,E,uB,C,G,E,M,C,I,G,E,mB,C,E,E,I,C,E,I,C,E,U,C,E,M,C,E,O,E,G,E,O,E,E,wB,C,E,E,O,I,E,wB,C,G,E,c,C,E,E,C,C,E,C,C,E,C,C,E,C,E,C,E,Q,C,E,U,C,M,E,Q,C,M,C,M,E,E,U,C,M,K,C,E,U,C,E,E,M,I,W,E,G,O,C,S,C,E,E,O,E,E,E,W,C,E,S,I,O,E,uB,A,C,S,I,O,E,sB,A,C,S,I,I,C,E,C,E,E,I,C,U,C,E,C,I,C,Q,C,K,I,C,Y,C,C,E,I,C,K,C,E,I,C,M,C,E,I,C,S,C,G,I,C,S,C,E,I,E,I,E,I,C,G,C,E,oB,G,I,C,G,C,K,C,C,I,C,E,C,C,I,C,I,C,O,C,E,A,Q,E,S,C,S,C,W,I,I,E,I,E,I,C,U,C,E,E,E,E,M,C,E,E,C,I,E,C,C,E,A,C,E,M,E,E,uB,C,G,E,U,C,M,E,M,C,M,E,E,mB,C,E,E,I,C,E,I,C,E,U,C,E,M,C,E,M,E,G,E,O,E,E,wB,C,E,E,O,I,E,wB,C,G,E,c,C,E,E,C,C,E,C,C,E,C,C,E,C,E,C,I,I,E,E,M,C,E,E,E,E,E,wB,C,G,I,E,E,W,C,I,C,Q,E,E,E,U,C,M,E,M,C,M,E,E,U,C,M,K,E,E,S,C,O,C,W,I,E,I,I,E,kB,C,I,C,G,E,I,C,S,G,E,U,C,K,E,kB,C,M,E,E,S,C,O,C,W,G,I,C,G,C,C,I,E,I,I,G,E,U,G,E,U,C,K,E,kB,C,O,E,oB,C,I,C,G,E,I,C,G,C,I,C,I,C,Y,G,I,C,Q,C,O,G,I,C,Q,C,K,I,C,Y,C,C,G,C,C,I,C,E,C,G,O,C,C,I,C,E,C,C,E,Q,E,E,E,C,E,E,E,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,E,I,E,C,E,E,C,E,S,E,C,C,C,C,C,C,C,E,I,C,I,C,E,I,C,E,C,E,I,C,Q,C,E,I,C,I,C,C,C,S,E,C,C,C,E,I,I,E,E,E,E,M,C,E,E,G,C,C,E,C,E,G,E,E,C,C,C,C,E,C,Q,C,E,Q,C,M,C,E,I,C,E,C,S,E,C,C,C,C,C,E,I,E,A,Q,E,E,E,E,C,C,E,C,G,C,E,C,I,E,E,G,C,G,E,E,Y,C,G,E,Y,C,E,G,E,a,C,G,E,W,C,E,E,E,E,G,C,C,E,C,C,C,O,C,C,I,E,C,E,E,E,C,E,E,S,E,C,C,C,E,I,C,E,C,I,I,C,M,C,E,I,C,M,C,E,I,C,O,C,K,I,C,Q,C,E,C,I,C,U,C,E,C,I,C,Q,C,E,E,O,E,C,I,C,K,C,C,c,E,gB,C,C,C,C,S,E,C,C,C,C,C,E,I,E,E,E,E,M,E,M,E,E,E,M,E,M,E,E,E,O,C,E,a,G,G,E,Y,C,E,G,E,Y,C,E,G,E,I,E,E,E,E,M,C,E,E,C,I,E,C,C,E,C,E,kB,C,E,C,C,E,C,C,C,E,C,C,E,W,C,G,E,S,C,E,E,E,G,C,E,M,E,E,G,C,E,M,E,G,I,E,E,mB,C,E,M,C,E,O,E,C,E,K,C,a,C,C,E,I,E,E,Q,C,I,E,E,E,E,E,E,G,E,E,gB,C,E,G,C,G,E,I,C,E,I,I,E,E,E,E,I,C,E,E,C,I,E,E,I,C,O,C,M,I,E,K,E,E,I,E,E,E,E,C,G,E,kB,C,E,G,G,C,I,E,E,I,A,C,E,I,C,G,C,E,E,O,C,M,G,E,E,E,I,E,E,E,E,C,G,E,kB,C,E,G,G,C,I,E,E,mB,C,E,M,C,E,O,E,C,E,K,C,e,C,C,E,I,E,E,U,C,I,E,E,E,E,E,E,C,E,E,e,C,E,E,G,E,E,I,E,E,I,C,E,E,C,E,I,E,E,iB,C,E,E,I,E,G,Q,E,O,G,E,mB,C,W,I,E,E,O,E,O,C,S,C,E,E,K,C,a,C,G,C,E,E,K,C,a,A,C,G,C,E,E,qB,C,W,I,E,E,O,E,O,C,S,C,E,E,K,C,e,C,G,C,E,E,K,C,e,A,C,G,C,G,C,M,W,I,E,E,Y,C,I,C,G,E,G,O,C,G,E,C,E,E,G,O,C,G,E,C,E,E,O,C,S,C,E,E,a,C,E,O,C,G,E,M,C,E,E,C,E,E,W,C,C,E,Q,S,C,C,C,C,C,C,C,E,E,O,C,G,E,wB,G,E,O,C,G,E,0B,G,I,E,C,C,E,C,G,C,E,C,C,E,C,C,C,E,I,E,C,C,E,C,G,I,E,Q,G,C,G,O,E,I,E,I,E,E,G,O,E,W,G,E,E,E,G,G,C,C,C,E,C,C,E,E,I,C,G,E,E,C,Q,W,G,E,Q,G,E,Q,E,E,C,E,a,C,E,O,E,I,E,E,O,C,G,E,M,C,E,G,E,W,E,C,C,C,E,M,C,C,Q,E,I,E,Y,C,C,C,E,M,C,E,O,C,C,E,M,C,C,O,C,C,E,M,C,C,E,M,C,E,O,I,C,C,C,E,M,C,E,M,G,E,Y,C,C,C,E,M,C,E,O,C,C,E,M,C,C,O,C,C,E,M,C,C,C,E,E,Q,W,E,C,E,E,C,E,I,I,E,E,E,E,M,C,E,E,E,C,C,E,C,K,C,C,E,C,U,C,G,C,S,C,E,M,C,E,Q,C,E,I,C,A,G,E,O,E,K,G,K,E,C,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,C,a,K,Y,K,K,K,K,I,E,E,C,O,M,M,M,O,K,E,E,C,Q,K,O,I,E,E,E,C,O,K,yB,K,wB,K,wB,K,uB,I,E,G,E,C,K,E,Q,K,E,E,C,M,K,M,M,O,M,U,K,E,E,C,M,K,U,K,kB,K,I,K,K,K,M,M,U,M,O,K,E,E,C,C,C,E,Q,G,E,I,C,M,E,K,C,O,E,iB,E,C,E,O,C,E,K,C,I,E,E,sB,E,C,E,O,C,C,C,a,C,K,E,E,mB,G,E,E,C,M,K,gB,K,G,E,E,C,O,K,O,K,gB,K,I,E,6B,E,E,E,C,gB,M,iB,M,iB,M,iB,K,G,E,4B,E,E,E,C,U,M,0B,M,8B,K,G,E,8B,E,E,E,C,mB,M,mB,M,oB,M,oB,K,G,E,6B,E,C,C,C,W,C,K,E,I,E,M,S,C,K,C,I,C,E,Y,C,Q,O,I,C,G,O,C,S,C,E,I,E,C,C,E,C,E,O,C,I,G,C,C,C,E,C,C,C,G,I,E,O,I,C,E,C,E,c,C,E,I,E,E,C,O,I,C,G,O,C,S,C,E,C,C,C,C,E,C,C,C,G,I,E,E,C,O,I,C,G,O,C,S,C,E,C,C,C,C,E,C,C,C,G,I,E,E,C,O,I,C,G,O,C,S,C,E,C,C,C,C,E,C,C,C,G,I,E,E,C,O,I,C,G,O,C,S,C,E,C,C,C,C,E,C,C,C,G,I,E,E,C,O,I,C,G,O,C,S,C,E,C,C,C,C,E,C,C,C,G,I,E,E,M,C,S,C,C,C,E,I,E,C,C,E,C,O,A,O,G,A,O,G,A,O,G,A,O,G,A,O,G,A,Q,G,E,Q,E,C,A,Q,G,A,Q,C,E,C,C,E,C,E,A,Q,G,E,O,C,S,E,C,C,E,C,K,C,C,E,C,K,C,E,C,G,S,I,I,C,c,C,K,I,C,M,C,K,I,C,I,C,K,I,C,U,C,C,E,I,C,gB,C,C,E,I,C,K,C,C,E,I,C,e,C,E,I,C,U,C,M,I,C,K,C,E,I,C,M,C,E,I,C,Q,C,C,C,S,E,C,C,C,E,E,c,C,E,c,C,E,M,C,E,M,C,E,I,C,E,I,C,E,U,C,E,U,C,E,gB,C,E,gB,C,E,K,C,E,K,C,E,e,C,E,e,C,E,U,C,E,U,C,E,K,C,E,K,C,E,M,C,E,M,C,E,Q,C,E,Q,A,C,S,E,C,C,C,E,G,A,U,O,G,G,G,qB,I,E,I,C,E,gB,C,U,4B,E,gB,C,E,gB,E,U,I,E,I,C,E,K,C,U,wB,E,K,C,E,K,E,c,I,E,K,C,E,S,C,C,E,E,E,E,C,oC,E,e,C,E,S,E,e,I,E,S,C,E,U,C,E,sB,E,U,C,C,C,E,U,C,E,S,E,C,I,E,E,I,C,E,E,iB,E,C,C,A,U,G,A,Y,C,E,4F,E,E,sB,E,C,C,A,e,G,A,Y,C,E,wG,E,E,mB,E,C,C,A,W,G,A,W,G,A,kB,C,E,6F,E,S,C,E,E,wB,E,I,C,C,C,E,A,C,I,E,E,K,C,E,E,M,C,E,E,Q,C,E,C,C,C,U,G,E,M,O,C,E,K,G,E,K,C,M,E,E,0B,E,E,K,C,E,C,E,E,K,C,E,C,I,E,K,C,M,G,E,A,C,E,E,K,C,E,A,E,G,G,E,8B,E,C,G,E,G,G,G,E,c,C,iB,E,G,G,G,E,c,C,oB,W,G,E,A,C,E,E,E,M,A,G,G,G,E,c,C,kB,U,G,E,A,C,E,E,K,A,G,G,G,E,c,C,iB,W,G,E,A,C,E,E,M,A,G,G,G,E,c,C,kB,a,I,E,A,C,E,E,Q,A,E,G,G,E,8B,E,C,I,E,K,C,A,E,E,E,M,C,A,E,E,E,Q,C,A,E,E,I,E,C,E,G,W,E,C,I,E,E,M,C,E,E,mB,E,C,C,A,U,G,A,kB,C,E,6F,E,S,C,E,E,0B,I,E,E,c,C,C,C,E,A,C,E,M,C,C,C,E,C,K,G,C,C,S,C,G,C,E,I,C,C,C,E,A,E,K,G,C,E,U,C,C,C,E,E,C,C,C,C,G,E,E,Q,C,E,C,E,M,C,C,G,C,E,E,Q,G,E,C,E,M,C,E,C,E,M,C,E,c,C,E,C,E,Q,C,A,E,G,G,E,E,Q,G,E,C,E,M,C,C,yD,C,S,E,C,E,E,W,C,M,E,K,E,E,W,C,M,E,gB,E,E,W,C,M,E,U,E,E,W,C,K,E,e,C,C,S,I,E,I,C,I,E,I,C,O,C,E,I,C,O,C,E,I,C,I,C,K,I,C,S,C,C,E,I,C,O,C,K,I,C,S,C,C,C,C,S,E,C,C,C,E,I,E,K,G,G,G,E,E,I,E,I,C,E,S,2B,E,E,G,M,G,C,E,O,C,A,E,E,C,A,E,M,G,C,E,O,C,A,E,E,C,A,E,G,E,I,G,C,E,E,I,A,G,E,C,E,U,E,a,W,0D,E,I,C,C,E,C,E,4D,I,E,E,a,C,E,E,c,A,C,E,K,C,E,K,E,E,E,O,C,E,M,C,E,M,E,E,E,O,C,E,S,C,C,E,E,E,O,E,G,E,O,C,G,E,O,E,G,E,O,C,G,E,K,C,G,E,K,E,G,E,M,C,G,E,M,E,E,kC,M,G,G,G,E,G,E,Q,C,E,Q,E,E,E,I,C,E,S,G,A,O,E,I,E,C,E,I,C,G,E,O,G,G,G,E,Q,C,E,Q,E,E,A,S,C,C,C,E,I,E,E,M,C,O,E,I,E,K,K,K,K,K,K,K,K,I,E,E,S,C,E,I,C,G,E,G,C,G,E,I,C,E,K,M,M,E,I,C,E,G,K,S,E,K,C,uD,C,E,E,G,E,S,C,E,E,S,C,C,O,G,E,G,C,I,E,E,E,E,E,E,E,E,I,C,M,O,C,I,A,O,E,I,E,C,E,I,C,G,E,E,I,E,E,K,C,E,E,M,A,A,C,I,E,M,E,E,C,C,E,C,E,C,C,E,G,E,A,I,E,M,C,+C,E,E,E,G,E,C,C,E,C,E,C,C,E,C,E,C,C,E,C,E,C,C,E,C,E,S,C,E,E,K,C,E,E,M,C,E,E,Q,C,E,E,M,C,E,c,C,E,C,E,C,E,S,C,C,E,A,S,C,C,C,C,C,C,C,C,C,C,C,E,I,I,E,E,K,C,E,E,M,C,E,E,Q,C,E,G,E,E,E,G,E,E,E,E,E,E,E,E,I,I,E,E,E,E,E,E,I,I,E,E,E,E,E,E,C,C,I,C,C,C,E,E,E,E,E,E,E,C,G,E,E,E,E,E,E,E,E,E,M,C,M,G,A,G,K,I,G,K,I,G,K,G,A,G,K,I,G,K,G,E,O,C,E,E,O,C,E,M,C,E,K,C,E,O,C,K,C,E,M,C,E,O,C,M,C,E,Q,C,O,G,G,K,G,E,O,C,E,E,K,C,E,K,C,E,M,C,E,M,C,E,Q,C,O,G,G,K,G,E,O,C,E,E,K,C,E,Y,C,E,M,C,E,a,C,E,Q,C,O,G,G,K,G,E,O,C,E,E,K,C,E,U,C,E,M,C,E,W,C,E,Q,C,O,G,G,G,C,I,E,E,K,E,C,C,E,C,M,C,E,E,M,E,E,M,C,E,E,Q,C,E,E,C,C,E,C,E,E,G,C,C,E,C,E,C,M,C,G,E,I,I,E,E,K,C,G,E,E,E,E,E,E,M,C,E,E,G,C,C,E,C,I,E,G,E,G,E,O,C,E,E,G,G,G,E,G,E,S,C,E,E,K,C,E,E,M,C,E,E,Q,C,E,E,M,C,E,c,C,E,C,E,C,E,S,C,C,C,O,E,K,C,E,K,E,E,E,M,C,E,M,E,E,E,Q,C,E,Q,E,C,A,C,O,E,I,C,E,E,U,C,O,C,sB,E,2C,Q,E,I,E,E,E,U,C,O,C,2B,E,+C,C,S,E,C,C,C,C,C,C,C,C,C,E,I,E,E,O,C,E,E,I,C,E,E,c,C,E,E,M,C,E,E,I,C,E,E,K,C,E,E,M,C,E,G,E,E,a,C,E,E,E,E,E,E,G,E,U,C,E,uB,C,E,E,E,E,E,E,E,G,E,S,E,I,E,iB,C,E,E,E,E,E,O,C,E,O,C,E,I,E,a,C,E,E,E,E,E,E,E,E,E,C,I,E,E,C,S,I,O,E,G,I,I,C,C,S,E,C,E,E,S,E,E,Q,C,E,I,E,E,I,C,G,E,I,C,E,C,S,I,E,I,C,I,E,I,C,U,C,C,E,I,C,U,C,K,I,C,O,C,E,I,C,M,C,M,G,C,S,E,C,C,C,C,C,E,I,E,E,M,C,E,C,G,C,E,O,C,E,E,K,C,E,K,C,E,E,M,C,E,M,C,E,E,Q,C,E,Q,C,C,C,S,E,C,C,C,E,I,E,K,G,G,G,E,E,E,M,C,E,C,I,G,E,E,G,E,O,C,O,G,E,E,G,M,O,C,E,M,E,I,I,E,E,M,C,E,E,E,E,M,C,E,E,E,E,E,M,C,E,C,I,G,E,K,G,E,E,M,G,E,E,E,C,C,E,E,E,O,E,G,O,E,E,E,M,C,E,C,I,G,E,E,G,E,O,C,E,E,E,E,M,C,E,E,E,U,E,C,A,Q,E,c,E,A,Q,E,c,E,A,Q,E,c,E,A,Q,E,c,A,G,E,E,K,C,G,G,E,M,C,G,E,qG,C,S,E,C,C,C,E,I,I,E,E,M,C,E,E,E,E,M,C,E,E,C,G,C,C,C,E,C,Q,A,S,C,C,C,C,C,E,I,E,E,O,C,E,E,I,C,E,E,c,C,E,E,M,C,E,E,I,C,E,E,K,C,E,E,M,C,E,G,E,E,U,C,E,E,E,E,E,G,E,U,C,E,oB,C,E,E,E,E,E,E,G,E,S,E,I,E,c,C,E,E,E,E,O,C,E,O,C,E,E,I,E,U,C,E,E,E,E,E,E,E,E,G,K,E,C,C,E,C,E,E,C,C,I,E,E,C,S,I,I,E,E,G,I,I,E,E,I,C,G,E,O,C,E,I,I,E,E,E,G,E,E,E,M,C,E,C,K,O,C,C,S,E,C,E,I,I,E,E,M,C,E,E,E,E,M,C,E,E,C,C,E,E,E,C,C,E,E,C,C,E,C,K,E,I,C,E,C,S,I,I,C,S,C,K,I,C,S,C,K,I,C,K,C,M,I,C,K,C,M,I,C,W,C,E,I,C,U,C,C,E,I,C,U,C,I,C,S,E,C,C,C,E,G,Q,E,C,I,E,E,G,C,E,S,C,E,G,E,S,C,C,C,E,E,C,G,O,C,E,S,G,C,G,U,G,C,E,U,C,C,C,C,C,G,Q,E,C,I,E,E,G,C,E,S,C,E,G,E,S,C,C,C,E,A,C,I,E,E,K,C,E,E,K,C,G,S,E,C,I,E,E,I,A,A,C,U,O,G,E,S,C,E,G,E,E,C,C,E,E,M,O,C,K,E,S,C,C,C,E,C,G,E,S,C,C,C,E,C,G,E,C,C,C,C,E,C,C,E,C,C,C,C,E,C,C,K,C,G,U,E,C,I,E,E,K,C,E,S,C,E,G,E,C,C,E,A,C,G,U,E,C,I,E,E,K,C,E,S,C,E,G,E,C,C,E,A,C,C,G,E,K,C,E,E,K,C,E,gB,E,C,I,E,E,W,C,E,A,U,O,G,G,G,G,E,c,C,wC,E,W,C,E,W,A,C,G,W,E,C,I,E,C,E,O,O,E,M,E,I,S,E,S,C,E,M,C,E,uB,E,U,C,C,C,E,M,C,C,E,U,C,C,E,E,C,E,K,K,U,E,E,U,C,E,M,C,K,K,S,E,M,O,C,E,M,E,uB,E,U,C,C,E,E,C,E,K,S,E,K,C,sB,E,G,Q,G,C,E,S,C,I,C,C,C,S,E,C,C,C,E,E,a,C,E,M,E,S,E,E,a,C,E,M,E,S,E,E,a,C,E,M,E,K,E,E,a,C,E,M,E,K,E,E,8B,E,E,a,C,E,M,E,W,E,E,U,G,E,I,C,M,E,U,E,E,c,C,G,C,I,E,E,G,C,E,G,E,e,C,G,M,I,G,C,W,O,I,G,S,G,C,E,E,I,C,I,E,I,C,O,C,E,I,C,c,C,K,I,C,E,C,I,I,C,Q,C,E,I,C,M,C,E,I,C,O,C,E,a,G,I,C,I,C,G,I,C,S,C,E,I,C,O,C,I,E,E,O,E,C,I,C,K,C,C,K,C,C,C,C,S,G,C,E,E,a,C,O,E,W,C,E,M,C,E,O,C,C,S,K,I,E,E,C,E,C,E,E,W,C,E,M,C,E,O,E,E,W,C,K,K,C,S,G,C,E,I,E,E,O,C,E,E,mC,I,E,E,I,C,E,E,M,C,G,I,E,a,C,A,M,G,E,W,C,E,M,E,C,E,C,M,E,a,C,G,E,O,C,K,E,M,C,K,E,M,C,K,E,Q,C,E,O,E,C,E,E,C,C,E,Y,E,Q,E,G,S,C,C,K,W,A,I,C,S,E,E,I,E,A,I,C,I,C,G,E,E,C,I,I,E,E,E,G,E,E,C,I,E,E,C,E,C,G,E,C,G,E,S,C,E,Q,C,E,I,C,E,C,E,C,E,C,I,C,E,E,K,C,G,I,E,K,C,wC,E,O,E,E,e,C,E,G,C,E,e,C,E,C,E,A,I,C,I,C,E,E,a,C,A,M,G,E,W,C,A,I,C,M,C,A,I,C,O,C,C,O,C,E,O,W,I,C,S,E,C,E,O,W,E,I,C,Q,E,G,G,I,C,C,G,E,O,E,C,E,mB,C,W,I,E,E,O,O,I,C,I,O,C,S,C,E,G,E,C,E,C,K,C,I,A,G,C,C,E,C,S,S,C,C,C,E,I,E,I,G,M,S,E,C,C,C,E,I,E,E,O,C,E,I,C,G,I,E,I,M,A,U,O,E,A,U,O,E,E,E,A,E,E,A,E,G,E,E,A,E,E,A,E,G,G,E,I,C,E,S,qC,E,E,G,E,E,I,E,E,E,G,E,U,E,C,E,O,C,A,C,E,K,E,C,E,C,E,E,O,C,E,O,C,E,E,G,E,S,C,E,E,G,E,c,C,E,c,C,E,K,C,E,K,C,E,M,C,E,M,C,G,G,E,E,M,E,E,M,K,E,G,E,O,E,C,E,K,C,I,C,G,E,c,C,E,I,C,E,K,C,E,M,C,E,U,C,C,E,E,E,M,C,C,C,E,c,C,C,E,I,C,C,C,E,I,C,C,E,G,C,C,C,E,S,C,C,E,G,C,C,C,E,S,C,C,E,K,C,C,C,E,K,C,C,E,K,C,C,C,E,K,C,C,C,Q,E,C,E,E,C,C,E,E,Y,G,E,E,G,E,Q,C,S,C,C,C,C,C,C,C,E,E,C,C,E,2B,I,E,A,E,E,E,A,E,E,E,A,E,E,E,I,O,E,E,G,E,K,C,E,E,M,C,E,E,E,G,E,K,C,E,K,E,A,C,E,K,E,C,E,E,E,M,C,E,M,E,A,C,E,M,E,C,E,E,E,E,I,G,E,I,E,E,M,G,E,M,E,E,c,G,E,c,C,4C,E,G,G,G,G,E,E,K,E,E,K,E,E,E,M,E,E,M,C,wC,E,E,O,C,G,E,uB,E,E,I,E,E,O,E,E,S,C,sB,G,G,E,E,K,E,E,G,K,E,G,C,E,E,M,C,S,C,C,C,E,I,E,A,E,E,E,A,E,G,E,G,I,E,K,E,I,E,M,C,O,C,C,E,K,C,E,K,C,E,E,M,C,E,M,C,E,G,G,I,I,E,E,E,O,E,E,E,E,C,I,E,G,E,E,G,E,G,C,G,C,E,M,E,U,C,K,E,E,M,C,E,E,E,E,M,C,E,I,C,K,C,O,K,E,O,E,C,E,K,C,I,C,G,E,c,C,E,I,C,E,E,C,E,C,E,E,C,E,E,S,C,Y,E,Q,C,E,E,O,E,C,E,K,C,E,K,A,E,E,O,C,W,E,M,E,E,C,E,W,S,C,C,C,C,C,C,C,C,C,C,C,E,I,E,I,G,M,C,E,C,E,E,C,C,E,E,S,G,I,E,A,M,G,S,E,C,C,C,C,C,C,C,C,C,C,C,E,I,E,E,E,O,C,I,E,I,C,G,E,E,E,E,E,E,C,C,E,C,I,G,A,U,O,G,G,G,A,U,O,G,G,E,E,C,C,E,C,G,E,C,C,E,C,G,E,C,C,E,C,G,E,C,C,E,C,G,E,C,C,E,C,G,E,C,C,E,C,Q,G,E,E,G,E,E,G,U,E,C,I,E,E,K,C,I,E,M,O,C,I,A,I,E,M,C,uC,E,E,E,E,E,E,E,A,U,O,C,C,E,E,C,C,C,C,E,C,mC,E,C,C,E,C,G,E,C,C,E,C,C,C,E,C,M,I,E,E,E,E,E,E,E,C,C,E,C,Q,E,K,C,qC,C,I,E,A,E,G,E,I,E,E,E,E,E,E,E,C,C,E,C,E,E,C,I,E,E,C,C,E,E,E,Q,C,W,E,e,E,E,E,E,K,G,E,E,M,E,oE,G,E,U,C,E,O,C,A,C,C,C,E,C,K,E,C,E,E,E,O,C,C,C,E,C,O,C,E,W,C,E,E,E,G,E,c,C,C,C,E,C,c,C,E,K,C,C,C,E,C,K,C,E,M,C,C,C,E,C,M,C,G,G,E,E,E,E,E,E,E,C,C,E,C,A,M,G,I,E,E,O,K,E,O,E,C,E,K,C,I,C,G,E,c,C,E,I,C,E,K,C,E,M,C,E,U,C,C,E,E,E,M,C,C,C,E,c,C,C,E,I,C,C,C,E,I,C,C,E,G,C,C,C,E,S,C,C,E,G,C,C,C,E,S,C,C,E,K,C,C,C,E,K,C,C,E,K,C,C,C,E,K,C,C,E,E,E,E,E,E,E,C,C,E,E,O,C,C,O,E,E,E,E,E,E,G,E,Q,C,S,C,C,C,C,C,C,C,C,C,E,E,C,C,E,2B,E,A,U,O,G,I,C,A,E,C,G,G,G,E,E,gB,I,E,A,E,E,E,A,E,E,E,A,E,E,E,I,O,E,E,G,E,K,C,E,E,M,C,E,E,E,G,E,K,C,E,K,E,A,C,E,K,E,C,E,E,E,M,C,E,M,E,A,C,E,M,E,C,E,E,E,E,I,G,E,I,E,E,M,G,E,M,E,E,c,G,E,c,C,4C,E,G,G,G,G,E,E,K,E,E,K,E,E,E,M,E,E,M,C,wC,E,E,O,C,G,E,uB,E,E,I,E,E,O,E,E,S,C,sB,G,G,E,E,A,M,E,E,E,G,K,E,G,C,E,E,M,C,S,C,E,I,E,A,E,E,G,I,E,K,E,E,K,C,E,K,C,E,E,M,C,E,M,C,E,G,G,I,I,E,E,E,E,E,E,I,I,E,E,E,O,E,E,E,E,E,U,C,A,M,E,E,E,M,C,G,E,G,E,E,E,M,C,E,I,C,M,O,K,E,O,E,C,E,K,C,I,C,G,E,c,C,E,I,C,E,K,C,E,M,C,C,E,C,E,E,E,E,E,S,C,c,E,Q,C,E,E,O,E,C,E,K,C,E,K,A,E,E,O,C,W,E,M,E,E,C,E,M,W,I,I,E,E,E,G,E,E,E,a,C,A,M,G,E,W,C,K,M,E,C,E,C,K,E,I,O,C,I,E,S,C,E,E,Y,C,C,E,W,S,C,E,O,I,E,Q,W,I,I,E,E,E,G,E,E,C,I,E,E,C,E,C,I,E,S,C,E,E,I,C,G,E,C,E,C,K,C,E,I,O,C,S,C,E,E,O,C,E,a,G,E,W,C,E,M,C,E,O,E,I,I,E,E,E,G,E,E,G,A,C,E,O,C,G,C,G,G,G,A,O,E,M,C,E,U,C,K,E,E,c,C,E,K,E,E,E,M,E,E,E,E,c,C,E,I,C,W,I,I,E,E,E,E,E,E,E,U,C,A,M,E,E,E,c,C,E,K,E,E,E,M,E,E,E,E,c,C,E,I,C,M,E,E,O,C,E,M,C,E,E,Q,W,I,I,E,E,E,G,E,E,C,I,E,E,C,E,C,I,E,S,C,E,E,I,C,G,E,C,E,C,M,E,a,C,A,M,G,E,W,C,K,M,E,W,C,M,K,C,C,C,E,E,E,E,W,E,K,C,I,E,E,E,E,G,E,G,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,C,C,C,C,E,I,E,C,I,K,K,K,M,C,E,O,I,E,E,C,O,C,E,C,Q,S,U,A,C,E,Q,E,E,I,C,S,E,2B,E,E,I,C,U,U,E,wB,E,E,I,C,W,I,E,C,Q,C,S,E,C,C,C,C,C,E,I,C,M,C,E,I,C,O,C,E,I,C,Y,C,E,I,E,E,E,E,G,E,E,K,C,E,E,M,E,I,E,E,K,C,E,E,M,E,I,C,K,C,E,I,C,M,C,C,C,S,E,C,E,I,E,O,E,E,O,C,Q,C,M,G,E,Y,E,E,Y,C,a,C,M,G,C,S,E,C,C,C,C,C,E,G,G,G,E,O,C,C,I,E,E,O,C,Q,C,E,K,G,C,E,E,K,E,E,K,G,C,E,E,M,E,E,I,G,I,E,kD,E,Q,E,C,K,C,I,E,E,Y,C,a,C,E,E,K,G,G,E,M,G,E,8C,E,Q,E,C,E,C,S,E,C,C,C,E,I,E,O,C,E,oB,C,M,E,E,M,C,E,O,C,Q,C,O,C,G,E,uB,C,M,E,M,E,Y,C,a,C,Y,E,C,S,E,C,E,I,E,K,E,K,E,K,E,C,C,U,O,I,E,E,I,C,W,G,C,E,A,E,E,M,A,G,E,I,C,E,W,2B,I,E,E,S,C,M,A,c,G,E,E,E,A,O,I,A,gB,G,E,E,E,G,O,E,M,4B,A,iB,G,E,E,E,O,E,K,C,sC,I,E,E,E,E,C,S,E,C,C,C,C,C,C,C,C,C,E,G,E,C,I,E,E,Q,C,C,M,E,O,E,O,E,K,C,G,O,E,Q,C,Q,C,E,I,E,K,E,K,C,I,E,E,M,C,C,M,E,O,E,O,C,G,O,E,a,C,Q,C,E,I,E,M,K,E,C,S,E,C,E,O,G,C,E,O,E,E,Y,A,C,C,S,E,C,C,C,C,C,E,I,E,O,C,E,O,C,M,C,E,G,E,Y,E,E,Y,C,M,C,E,G,E,K,C,E,E,M,C,E,C,E,sB,E,E,I,C,a,W,E,iB,E,E,I,C,Q,W,I,E,E,E,C,E,S,I,I,C,E,C,I,C,C,I,C,E,C,C,I,C,I,C,W,C,E,iB,G,I,C,K,C,E,I,C,M,C,E,I,C,gB,C,E,C,I,C,e,C,K,I,C,iB,C,K,I,C,sB,C,I,C,S,E,C,E,E,gB,C,O,C,G,E,E,e,E,E,E,iB,E,E,E,sB,C,C,S,E,C,E,I,E,E,W,C,E,E,uC,E,iB,C,G,E,W,C,K,E,gB,G,O,C,C,E,E,C,A,C,S,E,C,E,E,e,C,M,E,W,E,I,E,E,E,gB,C,I,E,E,E,E,M,C,E,E,E,A,M,E,C,C,E,E,I,E,E,M,C,E,E,mB,C,E,E,E,oB,C,M,A,M,E,K,K,G,E,oB,C,M,M,K,K,G,E,oB,C,M,M,K,K,G,E,oB,C,M,M,K,K,G,E,M,E,e,E,E,M,E,iB,E,E,M,E,sB,E,I,E,E,sB,C,O,E,a,I,A,Q,G,E,K,C,qD,E,C,E,E,E,e,C,M,E,I,C,E,I,C,W,C,M,E,G,C,E,I,C,E,Q,E,C,S,E,C,C,C,E,I,E,I,E,S,E,C,C,C,E,E,E,I,G,E,wD,I,E,E,E,E,E,E,C,E,E,C,E,E,K,E,C,E,E,O,E,Q,E,E,E,K,E,K,E,K,E,C,E,G,A,U,O,E,E,A,E,E,E,A,E,G,O,G,E,C,G,E,I,C,E,S,qC,U,E,C,I,E,A,E,K,C,E,M,O,C,I,E,M,E,E,iC,E,C,C,E,C,E,C,C,E,A,K,W,G,C,E,E,A,E,M,A,E,U,G,C,E,A,E,K,A,E,W,G,C,E,A,E,M,A,E,C,U,G,W,C,G,M,O,C,E,A,E,K,E,A,E,M,G,E,A,I,E,M,E,E,kB,C,yC,C,I,e,G,E,A,C,E,A,E,A,E,U,A,E,E,8B,iB,I,E,C,C,A,E,Y,C,E,S,c,I,E,A,E,S,C,G,E,E,iB,E,C,C,A,U,G,A,Y,C,E,wF,E,E,sB,E,C,C,A,e,G,A,Y,C,E,qG,A,e,G,A,Y,G,E,E,2B,C,4E,E,W,C,A,U,G,A,Y,C,I,E,E,wB,C,gG,E,W,E,K,C,E,E,uB,gB,I,E,A,E,W,C,E,O,C,I,E,E,C,E,E,O,C,I,E,E,C,E,E,Q,C,W,E,E,K,C,A,E,W,C,E,oC,E,K,C,A,E,W,C,E,wC,K,C,iB,G,wB,C,G,E,C,C,E,C,C,C,A,E,Y,E,A,E,mB,A,C,G,E,mB,C,+C,U,I,A,W,O,A,E,K,C,E,A,E,K,E,E,A,E,K,C,E,C,I,Y,I,A,W,O,A,E,O,C,E,A,E,O,E,E,A,E,O,C,E,C,I,iB,I,A,W,O,A,E,Y,C,E,E,A,E,Y,E,E,A,E,Y,C,E,C,E,E,C,G,M,E,E,E,I,E,K,E,K,E,K,E,K,G,M,O,C,G,E,E,G,C,Q,G,E,E,C,E,G,M,I,E,E,E,A,M,G,E,E,E,E,C,C,E,C,E,E,E,E,E,G,E,E,kB,E,E,M,E,E,4F,E,E,M,E,E,mB,C,6C,E,G,C,C,E,C,K,C,E,G,C,C,E,C,M,C,E,E,E,G,G,C,G,C,E,E,E,E,E,Q,S,E,E,E,E,G,G,C,G,C,E,E,E,E,C,E,U,Q,E,E,E,E,G,C,G,C,G,G,G,C,E,E,E,E,E,gB,gB,E,E,C,C,E,C,C,E,C,C,G,E,uF,I,E,K,I,E,E,E,E,M,C,E,E,G,E,C,C,E,C,E,G,E,C,C,C,E,E,C,C,E,C,O,E,G,O,C,C,C,E,C,O,C,Q,C,M,G,G,C,C,E,C,Y,E,G,O,C,C,C,E,C,Y,C,a,C,M,G,E,gC,E,e,C,C,E,E,C,C,E,C,O,C,C,I,E,E,C,C,C,E,C,O,C,Q,C,M,C,C,E,C,C,C,E,C,O,C,Q,C,I,C,A,A,Q,E,E,E,E,I,E,qE,C,O,E,E,E,G,E,C,G,E,O,E,A,O,E,O,C,Q,C,M,E,E,Y,E,A,Q,E,Y,C,a,C,M,C,mD,E,E,E,G,E,C,G,E,Y,E,A,Q,E,Y,C,a,C,M,C,qD,E,E,E,G,E,C,G,E,O,E,A,Q,E,O,C,Q,C,M,E,E,Y,E,A,Q,E,Y,C,a,C,M,C,2D,E,G,E,K,C,E,E,M,C,E,E,gB,C,E,E,e,C,E,E,iB,C,E,E,sB,C,E,E,K,C,E,G,C,G,E,K,C,E,G,E,O,C,E,G,E,Y,C,E,G,E,K,C,E,K,C,E,M,C,E,M,C,E,G,C,Q,E,gB,G,E,E,G,E,E,C,O,S,C,C,C,E,E,E,I,G,E,0D,I,E,K,G,C,A,E,E,G,E,K,G,C,A,E,G,E,G,G,I,E,K,E,I,E,M,C,O,E,I,I,E,E,gB,C,E,E,E,E,M,C,E,E,E,C,C,E,C,E,G,O,E,E,e,C,E,G,E,E,iB,C,E,G,E,E,sB,C,E,G,E,K,C,E,K,C,E,E,M,C,E,M,C,E,E,G,C,E,U,c,a,E,Q,W,E,G,E,E,E,I,S,C,E,E,M,C,C,Y,C,E,E,C,E,C,O,E,E,C,e,S,C,E,G,A,Y,O,G,A,gB,E,S,C,C,I,E,E,Y,C,G,a,E,O,C,C,O,I,E,O,E,W,S,C,E,I,E,M,G,S,E,C,E,E,A,E,E,O,C,E,I,E,wD,I,E,E,E,C,M,I,E,E,E,E,K,E,O,E,Q,E,E,G,A,U,O,E,E,A,E,O,G,E,C,G,E,I,C,E,S,qC,U,E,C,I,E,A,E,K,C,E,M,O,C,I,E,M,E,E,iC,E,C,C,E,G,C,C,E,C,mC,E,C,C,E,A,K,W,G,C,E,A,E,A,E,M,A,E,U,G,E,A,E,A,E,K,C,W,G,E,A,E,M,G,E,mB,W,G,C,E,A,E,A,E,M,A,E,C,U,G,W,C,G,M,O,C,E,A,E,K,E,A,E,M,G,E,A,I,E,M,E,E,kB,C,yC,C,I,e,G,E,A,C,E,A,E,A,E,U,A,E,E,8B,c,I,E,K,C,A,E,S,C,E,sB,E,A,E,S,E,gB,I,E,A,E,W,C,E,K,C,A,E,W,C,E,sC,U,G,C,E,K,C,A,E,K,A,E,Y,G,C,E,O,C,A,E,O,A,E,iB,G,C,E,Y,C,A,E,Y,A,C,M,E,E,G,G,G,M,O,C,G,I,E,E,E,E,C,E,E,M,C,E,E,C,C,E,C,C,C,E,M,E,C,E,K,C,E,M,G,I,E,C,O,E,O,E,K,C,E,I,E,E,E,E,E,E,C,C,E,C,E,U,C,E,C,I,E,E,E,K,C,M,E,M,E,E,E,M,C,E,E,C,I,E,C,C,E,C,E,A,Y,O,G,A,gB,E,S,C,oB,E,G,E,K,C,E,E,K,G,G,E,M,G,E,0B,E,K,C,E,C,C,O,M,K,C,C,E,A,C,C,I,E,E,E,E,E,E,C,I,I,E,E,E,E,M,C,E,E,E,K,C,E,C,M,C,A,M,E,E,I,E,K,C,C,C,E,C,K,C,E,O,C,C,C,E,C,O,C,E,Y,C,C,C,E,C,Y,E,C,C,E,C,C,C,E,C,G,C,C,E,C,E,E,C,O,E,E,C,M,E,O,E,M,C,E,C,O,E,G,E,E,C,M,E,O,S,C,E,I,E,E,A,E,E,G,E,E,G,G,E,c,C,+B,I,E,K,C,O,E,I,E,E,K,C,I,E,E,E,E,M,C,E,E,C,C,E,C,M,C,G,I,E,E,E,E,E,E,C,C,E,C,M,C,G,O,E,K,C,E,M,C,E,C,E,U,kB,Q,W,E,O,C,S,C,E,E,O,E,E,C,E,E,M,W,E,G,O,C,E,E,Q,W,E,G,C,K,E,I,C,K,E,K,C,C,E,E,G,O,C,S,C,E,E,W,C,E,iB,G,E,E,E,C,E,E,E,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,E,M,C,E,C,I,M,S,M,mB,K,C,C,E,gB,G,E,G,C,M,E,G,C,O,I,E,E,sB,C,E,E,kB,C,E,E,uB,C,E,C,M,C,E,Q,E,O,A,E,E,C,E,E,E,C,E,C,E,E,C,E,S,E,C,E,O,E,O,C,I,I,C,S,E,C,C,C,C,C,E,I,E,E,G,E,I,C,G,C,C,E,C,C,C,E,C,C,C,E,C,C,E,C,C,C,S,E,C,C,C,C,C,E,I,E,E,G,E,I,C,G,M,O,C,I,C,C,E,C,E,K,G,C,C,E,C,E,K,I,C,C,E,C,C,C,E,C,E,C,C,E,C,C,C,E,G,M,E,G,M,E,G,a,C,E,E,E,E,E,E,G,wB,C,M,M,E,E,G,oB,C,E,E,E,E,E,E,G,K,C,G,E,G,Y,K,E,G,a,C,E,E,E,E,G,Y,C,G,E,G,G,C,C,E,C,E,C,E,C,E,E,E,G,M,E,G,W,M,E,G,G,M,E,G,G,G,E,G,O,E,G,gB,C,E,E,E,E,G,O,E,G,O,E,G,iB,C,E,C,E,E,E,G,M,E,G,c,I,E,G,c,C,I,E,G,E,E,G,oB,C,K,K,K,K,E,E,G,oB,C,K,K,K,K,E,E,G,M,E,G,U,C,E,E,E,kB,C,E,mB,C,E,E,G,G,C,E,E,E,kB,C,E,mB,C,E,I,E,C,G,E,Q,E,Q,E,K,E,Q,E,K,E,S,E,O,E,O,E,W,E,K,C,I,E,S,E,Y,E,W,E,M,E,a,E,E,E,C,U,E,a,G,W,G,e,E,W,G,Q,E,gB,E,E,E,Q,C,W,E,W,C,C,G,I,E,U,C,C,K,C,E,U,C,E,E,c,C,S,C,S,A,A,I,E,C,E,C,E,E,S,C,E,O,A,M,C,E,I,I,E,E,S,I,I,E,A,W,I,E,E,E,E,C,E,E,C,S,I,I,E,E,C,E,E,C,O,E,W,E,I,C,K,C,E,G,W,E,C,I,W,I,E,I,I,O,E,I,C,G,U,M,C,I,E,I,C,E,K,E,I,C,K,C,E,G,Y,E,I,C,M,C,E,S,W,O,G,C,E,M,C,E,O,E,I,C,K,I,G,G,G,C,C,E,C,S,I,I,E,I,E,I,E,E,Q,C,E,E,Q,C,S,E,C,C,C,E,E,E,E,I,E,G,C,E,G,I,C,O,E,W,E,K,C,E,G,W,E,C,I,E,G,C,M,E,K,E,K,E,I,S,C,C,C,C,C,E,E,E,G,E,E,E,I,E,I,E,S,W,O,I,G,C,E,C,I,E,I,E,C,E,M,C,O,E,K,S,C,E,I,I,E,E,E,E,M,C,E,E,G,C,C,E,G,E,O,C,C,E,C,I,E,I,I,O,E,I,C,G,E,I,C,G,C,E,M,E,K,S,C,C,C,E,I,E,E,C,S,I,I,E,I,E,M,C,O,E,I,C,G,C,C,E,G,E,I,I,E,E,E,E,E,E,I,I,E,I,E,E,Q,C,O,C,C,E,C,E,E,C,I,E,S,W,O,G,C,Y,E,I,G,K,I,I,C,C,E,E,M,E,K,W,I,E,G,W,E,I,E,I,E,E,Q,C,E,E,Q,C,O,E,E,C,K,W,O,E,K,C,E,G,Y,I,A,E,K,W,O,E,K,C,E,G,Y,I,A,E,S,W,I,E,I,O,G,C,E,Q,E,G,E,G,C,M,E,K,I,I,E,C,C,E,E,Q,W,I,E,C,gB,E,W,C,O,I,C,G,O,C,S,C,E,E,I,C,I,E,K,C,C,E,C,Q,G,I,G,E,I,C,K,I,E,G,G,O,C,K,O,O,C,K,O,O,C,K,O,O,A,S,K,C,K,E,M,C,I,K,C,K,E,C,C,I,E,E,I,C,E,E,M,A,C,E,E,C,I,E,O,C,I,I,E,E,G,E,E,M,C,C,M,I,E,O,I,C,G,O,C,S,C,E,C,C,E,C,E,G,C,E,I,E,G,E,Q,C,W,E,K,C,E,G,E,U,C,E,Y,G,E,O,C,E,E,U,E,E,M,C,S,C,C,C,C,C,E,E,Q,E,K,I,C,K,C,iB,E,G,I,I,C,O,C,K,E,E,wB,C,E,G,I,E,E,I,C,C,E,E,E,O,C,C,E,O,I,C,G,O,C,S,C,E,M,O,C,C,C,E,I,C,C,E,C,E,G,C,E,I,C,I,G,C,C,E,C,E,G,C,E,O,C,I,G,G,I,E,E,S,C,C,E,O,I,C,G,O,C,S,C,E,C,C,E,C,E,G,C,K,S,C,C,C,E,E,G,E,M,C,S,C,C,C,E,O,E,I,E,K,E,I,E,C,O,E,O,C,E,K,C,E,O,C,C,O,E,G,C,E,E,I,E,S,E,K,C,E,K,G,C,E,I,C,M,C,E,I,I,M,E,O,E,G,C,E,K,C,E,I,C,M,E,O,E,G,C,E,O,C,E,I,C,M,E,O,E,G,C,O,E,I,C,M,E,O,E,I,C,M,C,E,G,E,I,C,G,A,M,E,O,E,I,C,Q,E,M,E,O,E,I,C,G,C,S,C,E,O,E,M,C,E,E,E,C,E,E,W,C,C,E,I,E,C,E,O,E,W,C,S,C,E,I,E,E,E,C,G,G,K,E,O,C,C,E,C,I,E,E,K,C,E,C,O,G,C,E,E,K,C,E,C,I,C,E,C,C,E,C,E,E,E,C,C,S,E,C,C,C,C,C,E,I,E,A,E,M,C,O,C,E,E,K,G,O,I,C,G,O,C,S,C,E,E,I,C,E,I,G,I,E,A,C,C,E,C,M,C,E,G,M,O,C,G,E,E,I,E,K,E,I,G,M,E,E,I,E,I,E,I,G,E,E,C,S,E,C,C,C,C,C,C,C,E,I,E,E,E,E,M,C,E,E,E,C,E,E,W,C,G,C,E,E,G,C,E,U,C,sB,E,I,E,E,S,C,E,E,U,C,E,E,U,C,E,E,E,M,C,E,G,E,G,C,E,S,G,E,M,E,M,E,U,E,M,E,K,E,oB,M,I,E,kB,G,E,E,qB,E,I,E,+B,E,S,E,oB,M,W,G,E,E,qB,E,M,E,I,E,Q,E,K,G,E,I,C,S,E,C,C,C,C,C,E,I,E,E,M,C,E,E,E,C,E,E,O,C,E,E,I,C,E,E,O,C,E,E,I,C,E,E,I,C,E,U,E,O,C,S,C,E,I,E,E,E,E,G,I,C,K,E,K,A,G,G,K,E,C,E,C,C,E,C,E,C,C,E,C,I,E,E,C,C,E,C,M,C,S,C,E,O,E,G,C,E,I,E,I,G,E,E,I,C,E,G,C,S,C,C,C,E,O,E,M,E,I,E,G,G,I,C,O,I,C,E,I,C,C,E,C,I,E,K,E,G,C,S,C,C,C,E,O,E,I,E,K,C,G,I,C,K,K,K,C,E,E,G,C,E,I,G,I,E,E,I,C,E,M,E,I,G,E,G,K,E,E,E,I,C,G,I,C,E,W,C,C,E,C,M,I,C,E,Y,C,C,E,C,M,E,I,E,I,E,K,E,E,I,C,C,E,C,I,E,K,E,I,E,I,E,I,E,G,I,O,I,C,E,K,E,M,E,E,E,iB,E,E,C,S,E,C,C,C,C,C,C,C,E,I,E,E,M,C,E,E,O,C,E,E,O,C,E,E,E,C,G,O,I,C,I,O,C,S,C,E,I,E,C,C,E,C,G,C,G,E,I,I,E,E,M,C,E,G,G,C,C,E,C,C,I,E,C,C,E,C,G,G,E,E,E,W,E,M,E,E,Y,E,M,E,E,I,C,G,I,C,E,W,E,M,I,C,E,Y,E,O,E,E,I,E,I,E,I,M,G,E,G,C,I,E,C,C,E,C,E,E,I,C,C,E,C,I,E,K,E,G,C,S,C,C,C,E,O,E,I,E,K,C,G,I,C,K,I,M,E,E,I,C,C,E,C,I,E,K,E,I,E,I,E,K,E,C,S,E,C,C,C,E,G,C,E,U,C,E,G,C,E,M,C,U,C,0B,C,C,S,E,C,C,C,C,C,C,C,C,C,E,I,E,E,E,E,E,M,C,E,E,K,C,E,E,O,C,E,E,K,C,E,E,O,C,S,U,A,A,a,O,Y,a,mB,C,S,E,C,E,E,E,E,G,G,I,I,K,A,U,O,E,E,E,W,E,K,E,E,a,I,E,E,E,E,G,G,I,E,4B,E,E,e,E,M,C,S,E,C,E,E,E,a,I,I,E,K,I,E,E,E,mB,E,I,E,2B,E,M,E,E,gB,C,S,E,C,E,I,E,E,G,C,E,Y,E,E,Y,E,K,E,I,C,E,Y,E,I,C,G,E,C,G,G,G,C,E,M,E,E,G,E,E,I,E,E,S,E,S,M,C,E,E,E,M,C,E,G,M,E,E,G,C,E,Y,I,E,E,K,G,E,G,E,M,E,K,E,K,I,E,E,K,G,E,G,E,I,C,M,E,K,E,I,C,S,E,C,C,C,C,C,C,C,C,C,E,I,E,E,M,C,E,O,C,S,C,E,I,E,E,E,I,C,E,E,U,C,E,C,G,E,C,G,C,E,G,O,E,E,M,C,E,E,K,C,G,C,E,I,O,I,E,E,W,C,G,E,Q,C,W,E,M,C,E,E,S,qB,E,G,E,C,E,O,I,C,I,G,O,C,S,C,E,C,C,E,C,E,G,C,E,I,E,E,E,A,S,C,C,C,C,C,E,I,E,E,E,C,E,E,G,C,E,a,E,E,G,C,E,U,C,I,E,K,E,E,K,C,E,E,M,C,E,C,E,C,C,E,C,C,E,C,C,E,C,C,C,E,C,S,a,S,S,C,S,I,E,O,E,Y,E,4B,E,O,I,E,E,E,I,C,G,E,E,I,C,E,G,C,E,I,C,K,G,E,E,M,E,W,E,K,E,W,E,K,E,G,C,S,C,E,O,E,I,E,M,C,C,E,A,G,I,C,M,K,E,e,M,I,E,Y,E,wB,C,E,E,E,E,U,C,E,M,C,E,M,C,C,K,E,S,E,I,E,S,E,I,E,G,C,S,C,E,O,E,I,E,I,C,C,E,C,G,G,I,C,I,K,E,C,I,E,E,O,C,E,M,E,c,E,K,E,U,C,6B,C,E,E,C,K,E,Y,E,K,C,C,S,I,E,M,E,Y,E,6B,E,K,E,gB,O,G,G,C,S,C,C,C,E,O,E,I,E,M,C,C,E,A,G,I,C,M,K,E,mB,E,I,E,K,G,G,C,S,C,C,C,E,O,E,I,E,I,C,C,E,C,G,G,I,C,I,I,C,A,I,E,I,A,I,E,K,E,M,E,M,E,M,I,E,U,I,E,K,E,E,I,C,G,A,S,C,E,O,G,K,M,K,M,K,M,O,C,M,M,K,M,K,M,O,C,M,M,K,M,K,M,O,C,S,O,C,C,E,E,I,C,I,E,E,E,C,S,E,C,C,C,C,C,C,C,C,C,C,C,E,I,I,E,E,M,C,E,E,E,C,E,C,E,E,E,E,E,M,C,E,E,C,I,E,E,E,C,C,E,C,E,E,I,C,E,E,I,C,I,C,E,E,I,C,I,C,E,E,Q,C,E,C,G,E,E,C,G,C,E,S,I,E,E,O,C,M,I,G,C,C,E,C,Q,C,C,C,E,C,C,C,I,E,A,E,I,C,G,Y,G,E,C,G,C,E,G,S,G,G,G,C,I,E,E,K,C,G,E,O,C,M,E,oB,E,I,E,U,E,A,Q,G,A,Q,E,C,E,O,C,A,Y,O,G,C,A,Q,G,C,A,c,E,S,E,A,gB,E,S,A,G,A,Q,G,C,A,gB,E,S,E,A,oB,E,S,A,C,E,+B,E,E,U,E,I,E,E,I,C,E,Q,E,E,K,C,E,C,Q,E,E,E,c,E,I,E,a,E,I,C,E,a,M,G,A,Q,G,A,Q,G,A,Q,E,C,E,Q,C,W,E,O,C,E,G,8B,E,E,U,E,E,O,C,A,Q,G,A,I,E,M,E,A,Q,G,A,I,E,M,E,A,Q,G,A,K,E,M,C,qC,E,E,U,C,G,I,E,E,M,C,G,C,qB,M,S,C,K,C,I,C,G,M,E,C,A,C,Q,E,E,E,Q,G,C,E,C,E,E,E,iB,E,M,E,U,E,K,K,C,O,G,K,K,A,I,E,E,W,C,E,S,W,E,E,U,E,E,O,C,E,I,E,M,G,E,W,E,E,U,E,E,K,K,M,M,E,O,C,E,I,E,M,E,E,M,C,G,G,E,M,E,A,E,E,W,E,E,U,E,E,K,K,M,M,E,O,C,E,I,E,M,E,E,M,C,G,G,E,M,E,A,E,E,W,E,E,U,E,E,K,K,M,M,E,O,C,E,I,E,M,E,E,M,C,G,G,E,M,E,A,E,E,W,E,E,U,E,E,K,K,M,M,A,I,E,E,W,C,E,U,W,E,E,U,E,E,O,C,E,I,E,M,G,E,W,E,E,U,E,E,K,K,M,K,A,I,E,E,W,C,E,S,W,E,E,U,E,E,O,C,E,I,E,M,G,E,W,E,E,U,E,E,K,K,M,M,K,M,E,O,C,E,I,E,M,E,E,M,C,G,G,E,M,E,A,E,E,W,E,E,U,E,E,K,K,M,M,K,M,E,O,C,E,I,E,M,E,E,M,C,G,G,E,M,E,A,E,E,W,E,E,U,E,E,K,K,M,M,K,M,E,O,C,E,I,E,M,E,E,M,C,G,G,E,M,E,A,E,E,W,E,E,U,E,E,I,C,E,G,G,I,E,E,M,C,G,C,I,M,S,C,K,C,I,C,G,M,E,E,G,M,S,C,K,C,I,C,G,E,E,E,W,E,I,E,I,E,K,C,Q,C,E,E,M,C,E,E,K,C,G,C,E,I,S,E,E,G,C,E,Q,C,I,E,E,C,G,I,C,A,Q,G,E,C,M,O,C,G,2C,E,M,E,K,E,+B,E,I,E,a,M,Q,I,E,C,M,O,C,G,4C,E,M,E,K,E,mC,E,I,E,a,M,E,Q,C,W,S,E,C,C,C,E,E,M,C,E,E,oC,E,O,E,C,S,E,C,C,C,E,I,G,E,C,M,O,C,G,8C,E,iB,E,e,E,W,E,e,E,O,E,I,0B,E,C,S,E,C,C,C,C,C,E,M,O,C,G,E,E,M,E,E,M,C,G,G,E,M,E,E,E,uB,C,A,I,E,G,M,E,G,E,E,W,C,I,E,M,E,c,E,a,E,a,E,Y,E,E,yC,C,A,I,E,G,M,E,E,E,U,C,C,S,E,C,E,E,C,M,O,C,G,iC,E,U,E,kB,E,wB,C,A,O,E,K,M,E,I,uB,E,U,C,C,O,G,K,K,K,K,E,S,G,K,M,M,K,M,E,E,S,G,K,M,M,K,M,E,E,S,G,K,M,M,K,M,K,M,E,E,S,G,K,M,M,E,U,G,K,M,M,E,E,U,G,K,M,M,E,E,U,G,K,M,M,E,E,U,G,K,M,M,E,E,S,G,K,M,M,E,G,S,G,K,M,M,E,M,K,M,M,E,M,C,G,I,E,E,O,G,K,M,K,M,I,E,E,G,C,E,a,E,E,c,E,I,E,a,E,I,C,E,c,Q,M,K,K,M,E,K,K,M,M,K,M,E,K,E,E,K,M,M,K,M,E,K,E,E,K,M,M,K,M,E,K,E,E,K,M,K,E,K,K,M,M,E,K,E,E,K,M,M,E,K,E,E,K,M,M,E,K,E,E,K,M,M,E,Y,K,M,M,E,Y,K,M,M,E,W,C,G,K,E,O,C,W,E,I,G,I,E,G,A,M,E,M,C,G,C,E,E,W,E,I,E,K,I,E,K,G,C,E,M,E,G,E,E,M,C,G,C,oB,E,K,M,O,C,G,E,U,E,E,S,C,E,O,E,I,E,K,C,C,E,A,G,I,E,K,E,wB,E,M,E,6B,E,K,E,E,S,C,E,O,E,I,E,K,E,I,E,G,G,I,E,K,E,K,M,G,E,E,C,I,I,E,E,C,E,E,C,E,E,E,E,E,E,M,O,C,G,E,I,C,C,C,E,E,E,I,C,E,G,C,E,I,E,M,G,E,I,C,E,G,I,G,E,O,E,O,C,K,E,G,C,S,C,C,C,E,O,E,M,C,C,E,A,G,I,C,M,K,E,G,C,S,C,C,C,E,O,E,I,C,C,E,C,G,G,I,C,K,E,E,W,E,I,E,I,E,I,C,K,M,G,E,I,K,C,G,E,C,M,O,C,G,sC,E,C,I,E,E,G,G,E,O,E,O,C,K,E,M,E,K,E,I,E,I,C,E,E,W,E,I,E,I,E,M,G,E,I,C,C,C,S,E,C,C,C,C,C,C,C,E,I,E,E,E,E,E,E,E,E,E,E,M,C,E,E,E,C,E,E,I,C,E,E,I,C,G,E,E,Q,C,E,E,G,C,E,U,E,E,c,E,E,O,A,G,C,E,C,E,E,E,M,C,E,G,E,c,E,E,M,E,I,E,qB,E,sB,E,E,G,G,E,E,I,E,I,G,I,M,E,K,E,e,M,I,E,oB,W,E,G,C,gB,E,I,E,M,C,Q,C,gB,E,G,C,yB,A,E,G,M,E,I,E,qB,E,mB,M,G,S,E,C,E,I,E,C,C,E,Q,A,E,A,E,U,E,E,c,E,E,O,C,E,M,C,E,G,E,M,C,E,G,E,G,C,E,I,E,C,I,E,E,I,E,E,I,G,E,E,K,C,E,E,G,C,E,U,E,E,c,E,E,O,A,G,C,E,C,E,E,E,M,C,E,G,E,Q,C,W,E,O,E,E,M,C,E,Q,wB,E,O,E,E,M,C,E,E,M,uB,K,E,E,G,C,E,I,I,E,Q,C,W,E,M,C,E,E,M,uB,I,G,G,A,U,O,E,C,G,A,I,E,M,M,E,M,E,M,E,I,C,K,I,E,E,I,E,E,U,E,I,E,E,Q,E,E,Q,E,G,E,Q,G,C,E,S,C,S,I,S,I,E,E,+B,C,E,E,E,E,O,E,a,E,C,K,C,S,I,E,E,6B,C,E,E,E,E,C,K,C,G,A,S,E,E,K,E,M,E,M,I,E,U,I,E,M,G,C,S,I,S,I,E,E,iB,C,E,E,E,E,O,E,a,C,K,C,S,I,E,E,e,C,E,E,E,C,K,C,G,A,S,E,E,K,E,M,E,M,I,E,U,I,E,M,G,C,G,C,A,U,O,G,G,C,E,A,U,O,G,E,M,E,Q,I,E,Y,E,Q,I,E,M,I,G,C,S,E,C,C,C,C,C,C,C,C,C,E,I,E,I,E,E,I,C,O,G,O,E,Q,C,W,E,U,C,E,U,C,E,O,C,E,I,C,E,U,C,G,G,C,E,U,C,E,G,C,E,M,C,U,C,0B,E,E,E,E,E,G,E,O,G,I,A,C,S,E,C,C,C,C,C,C,C,E,E,E,G,E,M,C,E,O,C,E,E,M,C,G,C,W,E,O,C,M,C,E,G,M,E,E,M,C,G,C,W,E,M,C,G,C,iB,E,E,M,C,G,C,kB,E,E,E,E,E,U,C,W,M,C,C,I,E,E,E,E,E,Q,C,W,M,C,C,E,C,G,E,E,E,E,E,C,S,E,C,C,C,C,C,C,C,E,S,I,M,C,C,C,E,O,C,K,E,E,G,E,E,E,E,E,U,C,G,E,E,E,E,E,Q,C,E,C,G,E,E,E,E,E,C,S,E,C,C,C,C,C,C,C,E,E,E,G,I,E,E,U,C,E,E,G,G,E,E,G,E,C,E,M,C,K,C,E,E,O,C,E,I,E,E,K,G,E,E,K,G,S,E,C,E,O,E,U,E,G,E,O,A,C,S,E,C,E,M,C,E,E,C,G,E,E,K,C,O,E,M,E,I,K,M,E,K,E,I,K,I,E,K,E,I,E,I,E,E,Y,E,E,E,E,E,O,E,E,gB,E,E,E,E,E,W,E,E,E,E,E,K,C,G,E,O,E,E,E,O,G,E,E,E,E,C,E,C,G,E,E,M,C,E,O,C,E,E,O,E,E,E,M,C,G,C,W,E,O,C,M,C,E,G,M,E,E,M,C,G,C,W,E,O,C,M,C,E,G,M,E,E,M,C,G,C,W,E,M,C,G,C,iB,E,E,M,C,G,C,kB,E,E,E,E,E,U,C,G,E,E,E,E,E,U,C,I,E,E,E,E,E,Q,C,E,C,G,E,E,E,E,E,Q,C,E,C,G,E,E,E,E,O,C,I,E,E,M,C,G,C,M,E,E,M,C,O,C,M,C,E,G,E,E,G,C,E,O,E,E,G,C,E,I,E,K,E,E,M,C,E,C,e,E,a,O,E,K,E,I,E,I,E,K,E,I,C,S,C,E,O,E,E,E,E,E,E,G,I,E,M,E,iB,E,K,E,K,C,C,S,E,C,C,C,C,C,E,I,E,E,M,C,E,C,G,A,G,A,S,C,E,I,C,A,U,O,G,E,E,G,I,I,E,O,I,C,G,E,E,E,E,M,C,E,E,G,E,S,C,C,C,C,C,E,C,E,M,C,E,M,C,E,E,I,I,E,E,M,C,E,O,I,C,G,E,C,E,E,C,E,E,C,E,E,E,M,C,G,C,M,E,O,C,S,C,E,I,E,C,C,E,C,G,E,S,C,G,C,Y,O,G,C,E,C,C,E,C,E,K,C,E,E,I,E,G,E,M,E,G,E,O,C,E,G,E,O,C,E,G,E,U,A,K,C,O,E,E,I,E,K,O,G,I,S,E,G,K,K,S,E,I,E,K,K,K,S,M,O,C,I,E,I,E,I,G,K,K,S,E,E,I,C,G,C,E,I,C,G,E,O,C,E,C,I,E,e,C,E,C,Q,E,W,E,Q,E,I,E,O,S,C,C,C,E,E,O,C,S,C,E,I,E,C,C,E,C,G,E,S,C,I,I,E,E,M,C,E,G,E,E,I,E,I,E,K,E,C,G,O,E,M,C,E,C,C,M,C,K,E,Q,E,M,W,I,E,E,I,E,E,I,C,Q,E,E,I,C,W,E,E,K,G,E,G,E,G,I,E,E,M,C,E,E,E,C,E,E,I,C,E,E,O,C,E,E,iB,E,E,G,E,E,E,K,C,G,G,C,E,E,I,C,E,E,E,uB,E,E,E,I,C,E,uB,E,8B,I,I,E,E,E,E,a,C,E,E,C,I,E,E,G,C,E,U,C,I,E,K,E,E,I,C,E,W,E,I,C,E,4B,E,K,E,e,M,I,E,mB,E,wB,E,I,E,S,E,S,E,e,E,W,E,a,I,C,E,6B,E,K,E,mB,E,I,E,M,E,M,E,M,E,O,E,iB,E,G,G,E,E,6B,E,I,E,a,C,O,E,E,M,C,G,C,oB,E,M,C,G,C,W,E,M,C,G,C,gB,O,I,C,G,O,C,S,C,E,I,E,C,C,E,C,E,E,G,C,E,I,G,E,E,K,G,E,M,E,K,E,W,E,U,E,Y,E,K,E,I,E,I,E,K,E,G,E,M,E,M,E,I,E,K,E,I,G,O,I,C,G,O,C,S,C,E,I,E,E,E,C,C,E,C,E,C,C,E,C,E,E,K,G,G,E,E,I,E,K,E,G,C,I,E,E,M,C,E,E,M,C,G,C,E,I,G,E,E,M,C,G,C,E,I,G,E,E,E,S,C,E,O,E,I,E,G,G,K,E,E,S,C,E,O,E,I,E,K,E,I,E,I,G,I,C,K,E,M,E,E,S,C,E,O,E,I,E,O,E,I,E,G,G,I,C,M,K,E,I,M,E,E,G,C,E,I,G,E,E,G,C,E,I,G,E,E,K,E,I,E,I,E,K,E,M,E,M,E,K,E,K,E,E,G,E,O,E,I,Q,S,C,C,C,C,C,C,C,C,C,E,I,E,G,C,E,K,C,E,I,C,G,O,I,C,E,M,E,O,C,S,C,E,E,E,E,E,G,G,O,C,S,C,E,E,E,E,E,G,I,E,A,S,C,C,C,C,C,C,C,C,C,E,I,E,E,E,E,E,E,E,E,E,E,E,E,E,E,M,C,E,E,O,C,E,Q,C,W,I,E,C,G,G,G,G,G,G,G,G,G,M,C,M,C,G,S,E,C,E,O,I,C,G,O,C,S,C,E,E,O,C,E,O,C,I,E,sB,E,I,E,U,C,E,C,E,G,E,E,G,I,E,A,S,C,C,C,E,I,E,E,M,C,G,A,U,O,C,C,G,E,A,U,O,C,C,G,C,C,G,O,I,C,E,O,E,M,C,E,O,K,I,E,E,M,C,E,O,I,C,G,G,E,M,C,G,A,U,O,C,C,C,C,E,C,C,C,I,I,E,E,C,E,E,E,E,M,C,E,E,E,A,U,O,C,C,C,C,E,C,C,+D,E,I,C,C,A,E,C,C,C,C,E,C,C,C,C,E,C,E,O,C,C,C,O,I,E,E,G,E,A,S,C,C,C,E,I,E,E,M,C,E,E,O,C,G,M,E,C,I,E,C,C,G,Q,A,G,E,E,c,C,G,E,O,C,E,8B,G,S,C,C,C,E,I,E,E,I,C,G,E,E,M,C,E,G,C,E,W,C,Q,G,I,E,E,O,C,O,E,G,C,E,I,G,E,U,E,G,C,E,I,G,E,W,C,I,G,S,C,C,C,E,I,E,E,M,C,E,G,C,E,W,C,Q,Q,I,E,E,O,C,O,E,G,C,E,I,G,E,I,I,E,G,C,E,I,G,E,I,I,M,E,C,I,C,M,C,E,O,K,I,E,C,C,G,C,O,G,E,S,C,C,C,E,I,E,E,M,C,E,G,E,E,M,C,E,E,W,C,E,E,G,C,E,mB,E,K,E,Q,C,W,E,M,C,E,I,E,K,E,6B,G,E,G,C,E,Q,G,I,E,E,O,C,O,E,G,C,E,I,G,E,I,E,U,E,I,I,E,G,C,E,I,G,E,I,E,W,E,I,I,C,E,E,E,G,E,A,S,C,C,C,C,C,E,I,E,E,M,C,E,E,O,C,S,E,C,E,G,K,E,C,I,E,E,E,C,C,E,C,E,W,C,E,S,W,E,E,U,E,I,E,C,E,E,A,E,E,C,C,E,A,E,E,C,C,M,U,G,E,A,E,E,K,C,E,O,C,G,E,W,E,E,U,G,E,C,E,W,G,E,A,E,E,M,C,E,O,C,G,E,W,E,E,U,G,E,C,E,I,G,C,G,G,E,O,C,C,G,G,E,U,C,C,G,G,E,O,C,S,C,C,C,E,I,E,E,M,C,O,C,E,C,C,U,G,C,E,E,G,C,E,I,G,I,E,E,I,E,E,M,W,G,C,E,E,G,C,E,I,G,I,E,E,C,E,E,E,E,A,E,C,G,K,E,C,I,E,C,C,E,C,E,G,E,S,C,C,C,E,I,E,E,M,C,E,G,E,Q,C,W,E,M,C,E,E,Y,E,c,W,E,G,I,E,E,M,C,O,C,E,E,G,C,E,Q,E,E,G,C,E,Q,E,E,G,C,c,E,I,E,Y,I,E,I,G,I,E,K,E,E,G,C,e,E,I,E,a,I,E,I,G,I,E,K,O,E,Q,C,W,E,M,C,E,E,Q,E,M,W,E,G,C,E,E,E,E,A,G,O,I,E,O,C,E,O,E,E,O,C,E,U,C,E,U,E,E,U,C,E,O,C,E,O,E,E,O,E,C,Q,A,E,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,I,E,E,M,C,O,C,M,C,E,E,E,G,C,E,I,I,E,G,C,E,I,I,A,G,I,C,I,E,E,I,G,E,C,I,E,E,E,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,I,E,E,M,C,E,G,E,E,M,C,O,C,O,E,G,C,E,I,G,C,C,E,E,E,G,C,E,I,G,C,C,E,E,C,E,C,M,C,S,E,Y,E,G,C,E,E,E,G,E,A,S,C,C,C,E,I,E,E,M,C,E,E,O,C,E,C,E,E,C,E,E,A,W,G,A,Q,E,C,I,E,E,G,C,O,O,G,A,O,E,M,C,I,C,E,E,S,C,E,E,E,C,E,E,G,C,E,G,S,C,E,I,E,E,M,C,U,A,E,E,I,C,G,M,E,C,G,A,Q,E,C,E,C,E,I,E,E,G,C,O,G,E,S,C,C,C,E,I,E,E,M,C,E,G,O,E,G,C,E,M,C,G,C,W,E,I,E,C,O,I,I,E,C,E,E,A,W,G,M,E,C,I,E,C,C,G,C,G,E,Q,C,E,G,G,C,I,E,E,Q,C,E,M,C,E,C,G,E,E,W,C,G,E,C,C,M,I,E,E,W,C,G,E,C,E,E,O,C,E,mB,E,U,G,I,E,G,S,C,C,C,E,G,E,C,I,E,E,I,C,G,O,E,Q,C,E,C,C,O,E,Q,C,K,I,G,O,E,K,C,E,C,C,G,M,E,C,E,C,E,I,E,C,C,G,C,O,G,E,S,C,C,C,E,I,E,E,M,C,E,E,Y,C,E,E,Q,C,E,E,M,C,E,G,E,E,G,C,Q,E,E,G,C,E,I,E,K,E,E,I,C,G,I,C,E,I,E,iB,E,M,I,C,E,I,E,gB,E,M,O,E,Q,C,W,E,M,C,E,I,C,I,E,K,E,mB,G,E,K,C,G,E,I,C,E,I,C,G,I,C,E,kB,E,O,E,Q,C,E,C,E,Q,A,E,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,O,E,G,C,E,M,C,G,C,e,E,M,C,Q,C,gB,E,M,C,G,C,6B,G,I,I,S,E,C,C,C,E,G,K,E,C,I,E,A,E,C,C,E,C,O,E,E,M,C,E,E,S,C,E,E,O,C,C,G,G,E,W,E,E,U,E,G,S,C,C,C,E,O,G,C,E,M,C,C,E,C,E,C,G,K,E,C,I,E,C,C,E,C,O,G,E,S,C,C,C,E,I,E,E,M,C,E,G,O,I,E,M,C,E,E,Q,C,W,E,M,C,E,E,M,W,E,I,C,E,C,G,E,C,G,E,O,G,S,C,C,C,E,O,E,M,C,E,C,G,G,E,O,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,O,E,G,C,E,M,C,G,C,e,E,M,C,G,C,uB,E,M,G,E,O,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,O,E,G,C,E,M,C,G,C,e,E,M,C,G,C,2B,G,O,I,C,I,E,E,G,C,G,E,A,W,G,M,E,C,I,E,C,C,G,C,O,E,S,C,E,E,gB,C,E,E,mB,E,U,E,G,S,C,C,C,E,O,C,C,E,A,E,C,G,M,E,C,I,E,C,C,G,C,O,G,E,S,C,C,C,E,I,E,E,S,C,S,C,E,E,M,C,E,G,O,E,Q,C,W,E,M,C,E,E,O,E,qC,O,I,C,G,G,E,G,C,E,I,E,I,E,Q,A,E,A,G,G,A,E,K,C,G,S,C,C,C,E,O,E,G,C,E,Q,C,Y,G,G,W,O,C,G,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,I,E,E,Q,C,O,E,G,C,E,I,E,a,E,G,E,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,O,E,G,C,E,M,C,G,C,e,E,M,C,G,C,0B,G,I,I,E,A,W,G,M,E,C,I,E,A,E,C,C,G,C,O,E,K,C,E,E,O,C,A,U,O,G,G,E,uB,E,U,E,G,W,O,C,E,C,G,M,E,C,I,E,C,C,G,C,O,G,E,S,C,C,C,E,I,E,E,M,C,E,G,O,E,Q,C,W,E,M,C,E,U,E,gB,E,Q,E,O,E,M,uB,G,C,E,C,G,E,C,G,G,G,C,G,S,A,E,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,I,E,E,G,C,E,Q,C,c,E,M,E,O,E,Q,C,W,E,M,C,E,E,M,iD,G,C,G,G,S,C,C,C,E,O,E,G,C,E,Q,C,a,G,I,E,G,W,O,E,G,O,E,Q,C,W,E,O,C,C,C,G,C,C,I,E,I,G,E,O,E,E,O,C,E,U,E,E,U,C,E,O,E,E,O,C,S,C,C,C,E,I,E,E,Q,Q,A,E,M,C,E,G,C,E,I,E,c,E,M,C,O,E,G,C,E,I,E,gB,G,O,E,Q,C,W,E,O,C,C,C,G,C,Q,A,E,I,G,E,O,C,E,U,C,E,O,C,S,C,C,C,E,O,E,G,C,E,M,C,G,C,e,E,M,C,G,C,uB,G,I,I,M,C,S,E,U,E,M,E,U,E,G,C,G,O,E,I,E,U,E,e,E,O,C,C,E,E,G,G,E,A,E,M,C,E,A,E,O,C,E,C,E,E,O,C,S,C,E,I,E,E,G,S,E,C,C,C,E,G,K,E,C,I,E,E,C,C,E,C,C,C,C,E,C,G,W,O,C,E,M,G,K,E,C,I,E,C,C,E,A,C,C,C,E,C,G,E,S,C,C,C,E,O,E,E,E,E,M,C,E,G,E,C,C,O,G,K,G,K,G,K,G,K,G,K,G,K,G,K,G,K,G,K,G,K,G,O,E,S,C,E,O,E,W,C,E,U,E,A,E,U,E,C,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,U,E,e,gB,E,E,U,C,G,C,E,M,G,O,E,S,C,E,O,E,gB,C,E,G,W,E,A,E,U,E,E,C,E,A,E,S,C,C,C,C,C,E,I,E,E,S,C,Y,C,O,E,Q,C,W,E,M,C,E,E,O,E,W,E,oB,O,I,C,I,G,E,G,C,E,I,E,I,E,M,G,O,E,S,C,E,O,E,O,C,E,I,A,I,E,M,E,A,U,O,C,C,E,E,A,U,O,C,C,E,E,C,C,E,E,C,C,E,C,0B,A,E,U,E,C,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,M,C,W,C,I,E,M,E,uB,E,0B,E,mB,E,Q,E,M,iC,G,C,E,G,C,I,E,O,E,G,C,I,E,O,A,E,M,G,O,E,S,C,E,E,W,C,E,S,a,A,E,U,E,I,E,W,E,E,M,C,E,G,C,E,a,E,E,Q,C,E,G,C,E,W,E,E,M,C,E,G,C,E,a,E,E,Q,C,E,G,C,O,E,gB,C,E,G,E,U,A,E,U,E,E,gB,C,E,G,E,Y,A,E,U,E,E,gB,C,E,G,E,U,A,E,U,E,E,gB,C,E,G,E,Y,A,E,U,E,E,O,C,A,K,G,O,C,E,K,G,sD,E,K,E,I,A,E,U,E,C,E,C,E,C,E,C,E,C,E,C,E,C,E,C,E,C,A,E,S,C,C,C,C,C,E,I,E,E,S,C,U,C,S,E,C,C,C,E,I,E,E,G,C,I,E,E,Q,E,I,E,I,E,E,I,E,I,G,O,E,Q,C,W,E,M,C,E,E,O,E,W,E,I,E,E,oB,O,I,C,I,G,C,C,E,Q,C,W,E,M,C,E,E,Y,E,c,wC,G,I,E,E,M,O,E,E,M,O,E,Q,C,W,I,E,E,S,C,wB,C,E,M,C,E,E,Y,E,S,E,Y,sD,G,I,E,E,G,C,E,I,E,K,E,E,G,C,E,I,E,M,S,K,M,C,E,E,G,C,E,I,E,K,E,E,G,C,E,I,E,M,S,K,A,E,M,G,O,E,S,C,Q,A,A,U,O,G,E,gB,C,E,E,W,E,A,E,U,E,C,C,C,E,C,C,C,E,C,E,A,U,O,G,E,gB,C,E,G,C,E,E,O,A,E,U,E,E,gB,C,E,K,C,E,E,S,A,E,U,E,C,C,C,E,G,C,C,C,C,E,K,C,C,O,E,Y,C,yB,A,E,U,C,E,S,C,C,C,C,C,E,I,E,E,S,C,c,C,E,E,G,G,E,E,G,G,E,E,I,C,U,E,e,O,E,Q,C,W,S,E,C,C,C,C,C,E,E,M,C,E,E,O,E,W,E,oB,O,I,C,G,C,E,E,I,C,E,G,E,M,C,E,I,C,E,Y,E,c,W,G,E,E,I,C,E,O,E,Q,E,E,I,C,E,S,E,S,G,E,I,C,E,I,E,I,E,I,E,M,E,I,C,E,I,E,I,E,S,E,I,E,I,E,Y,E,G,C,E,E,A,E,M,G,O,E,S,C,E,O,E,O,C,E,I,A,I,E,M,C,iC,A,E,U,E,E,E,S,C,E,M,C,C,C,E,A,E,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,M,C,W,C,I,E,M,E,c,iC,G,E,E,S,C,E,O,E,G,C,I,E,I,E,I,E,E,M,G,O,E,S,C,E,O,E,W,C,E,S,E,A,E,U,E,A,E,C,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,U,E,c,uB,G,E,G,C,E,K,E,M,G,O,E,S,C,E,E,W,C,E,S,E,A,E,U,E,I,E,E,G,E,O,E,E,G,E,E,E,S,E,E,I,C,G,O,E,gB,C,E,G,E,O,A,E,U,E,E,W,C,E,S,E,O,A,E,U,E,E,W,C,E,S,E,Q,A,E,U,E,C,E,C,E,C,E,E,A,E,S,C,C,C,C,C,E,I,E,E,S,C,Y,C,O,E,Q,C,W,S,I,E,M,C,E,M,S,C,I,C,I,C,U,I,uB,C,E,E,Y,E,e,E,c,E,O,E,W,E,I,G,C,E,G,C,Y,E,I,E,I,E,Q,I,M,E,G,C,E,U,E,G,C,a,E,I,E,c,A,E,M,G,K,G,O,E,S,C,E,E,W,C,E,S,E,A,E,U,E,I,E,E,I,E,O,E,E,K,E,O,E,E,K,E,O,O,E,gB,C,E,G,E,Q,A,E,U,E,E,gB,C,E,G,E,S,A,E,U,E,E,gB,C,E,G,E,S,A,E,U,E,C,I,G,K,K,E,C,E,C,E,C,E,C,E,C,E,C,A,E,S,C,C,C,C,C,E,I,E,E,S,C,U,C,S,E,C,E,O,E,Q,C,W,E,M,C,E,M,E,Q,E,O,E,I,E,O,E,I,W,E,I,E,oB,O,I,C,I,G,E,G,C,I,E,Q,E,I,E,I,E,I,E,K,K,C,O,E,Q,C,W,E,M,C,E,E,Y,E,c,W,E,G,C,I,G,K,K,E,Q,E,S,E,S,A,E,M,G,O,E,S,C,E,E,W,C,E,S,E,A,E,U,E,I,E,A,E,E,M,C,E,A,E,E,K,C,O,E,W,C,E,S,E,U,A,E,U,E,E,W,C,E,S,E,S,A,E,U,E,C,E,E,A,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,Y,E,c,W,E,G,C,E,G,C,E,a,E,G,C,E,Y,A,E,M,G,O,E,S,C,E,I,E,E,M,A,U,E,E,K,S,G,C,E,I,E,E,O,C,C,C,E,E,A,E,U,E,C,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,e,E,Y,oB,G,E,G,C,E,c,K,I,K,E,M,G,O,E,S,C,E,O,E,O,C,A,U,O,G,G,E,a,C,E,E,G,E,a,C,E,C,yD,E,a,C,E,C,Q,E,a,C,E,C,A,E,U,E,C,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,U,E,gB,E,K,E,a,C,E,C,K,E,K,E,a,C,E,C,qB,G,C,E,M,G,O,E,S,C,E,O,E,gB,C,E,G,E,A,E,U,E,E,C,E,A,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,Y,E,W,2C,G,E,G,C,E,oB,E,M,G,O,E,S,C,E,O,E,O,C,E,I,A,I,E,M,C,oC,A,E,U,E,E,G,C,S,C,E,M,C,C,C,E,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,M,C,W,C,I,E,M,E,c,qB,G,E,E,S,C,E,M,K,E,I,E,G,E,E,M,G,O,E,S,C,E,E,O,C,A,U,O,G,E,E,A,E,U,E,I,E,U,E,E,K,C,E,E,C,C,E,M,C,O,E,O,C,A,U,O,G,G,G,G,E,yD,A,E,U,E,C,E,E,A,E,S,C,C,C,C,C,E,O,E,Q,C,W,E,M,C,E,E,Y,E,c,0B,G,C,E,G,C,c,E,K,E,Y,E,G,C,K,E,W,A,E,C,G,G,E,A,S,C,C,C,C,C,E,I,E,E,E,M,C,E,E,O,C,S,E,C,E,G,K,E,C,I,E,E,E,C,C,C,E,E,E,Q,C,W,E,M,C,E,C,E,C,E,E,Y,G,G,I,E,G,W,O,C,G,O,E,E,C,E,C,C,G,K,E,C,I,E,C,C,E,C,O,G,E,S,C,C,C,E,I,E,E,M,C,E,G,E,E,G,C,E,M,C,O,C,O,E,K,O,E,Q,C,W,E,E,M,C,M,C,W,E,C,E,C,I,E,I,E,O,C,K,G,C,E,C,O,I,C,I,E,E,I,E,E,I,E,K,O,G,I,G,I,E,E,O,C,E,E,C,E,E,C,K,G,E,G,S,C,C,C,E,O,E,I,C,E,I,E,I,G,G,E,O,E,G,E,O,C,G,E,U,E,G,E,U,C,G,E,O,E,G,E,O,C,S,C,C,C,E,I,E,E,E,E,M,C,M,C,E,E,E,M,C,E,G,E,G,C,E,I,I,E,E,E,M,C,E,G,E,G,C,E,I,I,I,E,E,Y,E,I,E,O,E,Q,C,W,G,I,E,O,A,G,E,G,C,E,I,G,C,K,E,K,E,Q,E,Q,C,C,E,E,E,G,S,E,C,E,I,E,C,C,E,C,G,C,C,C,E,C,C,C,C,E,I,E,E,K,I,E,O,I,C,G,M,C,E,E,C,Y,E,K,E,O,E,M,E,M,E,S,K,Q,K,O,C,E,W,C,C,E,G,E,O,C,A,S,C,E,I,E,E,E,M,C,E,E,O,C,G,M,E,C,I,E,C,C,C,C,G,A,C,C,E,G,S,C,C,C,E,O,C,E,E,M,C,C,M,G,M,E,C,I,E,C,C,G,C,E,G,E,S,C,C,C,E,O,E,M,C,E,E,E,C,O,C,E,E,G,E,Q,E,E,A,E,M,C,E,A,E,O,C,E,C,E,O,I,C,G,O,C,S,C,E,I,E,E,C,C,E,C,G,A,U,O,G,A,W,O,E,E,G,W,O,C,Q,G,A,Y,O,E,C,I,E,E,S,A,A,C,c,G,A,gB,E,E,G,S,C,E,O,E,I,C,E,G,A,gB,G,A,oB,G,E,O,C,E,K,C,M,C,E,6D,E,I,A,E,U,E,E,G,S,C,E,O,E,I,C,E,K,C,E,C,I,E,Y,C,6B,E,I,A,E,U,C,M,E,G,E,G,S,C,E,O,E,M,C,G,C,I,E,E,M,C,S,C,E,O,E,O,C,A,U,O,C,C,E,E,A,W,O,C,C,E,C,mB,E,E,U,E,C,C,E,A,G,I,G,E,Y,C,wC,E,I,A,E,U,C,C,E,K,C,E,C,C,E,C,C,G,O,I,C,G,O,C,S,C,E,I,E,C,C,E,A,C,C,C,E,C,G,E,S,C,C,C,E,O,E,M,C,E,E,E,G,G,E,O,C,E,Q,C,E,G,C,C,E,O,E,E,O,E,C,G,E,sB,E,E,M,C,Q,C,C,I,E,C,E,E,E,O,C,U,C,G,C,S,C,E,I,E,E,M,C,E,C,O,E,G,C,C,E,C,G,G,G,E,M,C,E,C,I,E,E,M,C,E,S,C,C,W,E,S,E,M,C,Q,A,G,C,E,O,C,I,G,K,K,K,S,C,C,C,E,O,E,I,C,E,G,E,M,C,C,C,C,C,O,E,E,M,C,C,E,E,U,E,E,A,E,M,C,E,A,E,O,C,E,C,E,O,I,C,G,O,C,S,C,E,I,E,C,C,E,C,E,E,E,C,G,E,I,E,G,G,G,E,K,C,E,E,M,C,E,S,C,E,M,C,E,M,C,E,C,I,E,I,C,M,C,I,E,E,S,C,G,G,E,E,K,C,E,E,M,C,E,E,I,C,O,G,E,O,C,A,U,O,G,E,8B,E,A,E,U,E,a,E,C,I,E,E,Q,A,C,E,M,C,O,E,K,C,E,A,U,O,E,E,C,C,G,E,O,C,E,I,E,M,C,G,E,M,E,E,kC,E,A,E,U,E,G,O,C,S,C,C,C,E,E,E,M,E,C,C,C,E,C,C,C,E,A,C,G,K,C,E,G,E,M,E,E,S,C,E,M,C,E,M,C,M,C,E,C,I,E,S,C,E,M,E,E,O,C,C,C,E,iC,E,I,A,E,U,E,I,E,A,E,E,M,C,E,O,C,G,E,iC,E,I,A,E,U,E,I,E,A,E,E,M,C,E,O,C,G,G,E,I,iC,E,uC,A,E,U,E,I,E,A,E,E,I,C,E,O,C,C,C,S,C,G,E,G,G,E,+B,E,qB,A,E,U,E,I,E,C,C,E,U,C,E,C,C,S,I,E,gB,C,E,I,C,E,8B,E,A,E,U,E,E,C,C,E,I,C,E,I,E,A,E,E,O,C,E,Q,C,W,Y,I,E,O,C,A,I,G,E,yC,E,8B,A,E,U,E,E,O,C,G,E,kC,E,I,A,E,U,G,I,E,A,E,U,C,E,C,S,S,U,a,O,O,S,C,O,I,C,G,O,C,S,C,E,E,O,C,E,O,C,I,E,sB,E,4B,E,2B,E,I,E,E,G,E,M,C,E,E,K,C,E,E,I,C,E,E,U,C,E,E,I,C,G,E,K,C,E,M,C,E,E,M,C,E,E,O,C,C,C,C,C,C,E,C,G,S,C,C,C,E,I,E,E,W,C,G,K,E,O,C,C,E,C,I,E,C,S,C,C,E,O,O,I,C,G,O,C,S,C,E,C,C,E,C,C,C,E,A,G,E,M,G,E,M,C,E,I,C,E,M,E,E,I,C,E,I,E,E,M,C,U,C,C,E,C,E,C,E,G,O,I,C,G,O,C,S,C,E,I,E,C,C,E,A,C,C,C,E,C,G,E,S,C,C,C,E,I,E,E,M,C,E,G,E,E,M,C,E,E,S,C,E,E,Y,C,E,E,M,C,E,Q,C,W,E,M,C,E,E,a,E,uB,E,oB,E,I,E,M,E,c,E,M,E,c,E,a,E,I,E,4B,E,a,E,yB,E,W,C,I,E,gB,8B,E,I,G,I,E,C,S,E,G,C,C,E,E,E,I,C,C,E,K,C,E,O,I,C,G,O,C,S,C,E,C,C,E,C,E,G,C,G,C,C,E,C,G,I,E,E,M,C,E,E,I,C,S,E,C,E,E,C,C,E,C,I,E,I,E,M,C,O,E,M,E,I,E,M,E,Q,C,S,E,I,E,iB,M,I,E,K,E,I,E,U,S,E,I,E,c,E,K,M,E,K,E,I,E,U,0B,E,K,E,K,C,I,E,I,a,E,2B,C,C,E,C,E,C,C,I,E,a,G,K,C,G,G,C,S,C,E,O,C,C,E,A,G,I,C,K,M,S,G,G,C,S,C,C,C,E,O,C,C,E,C,I,E,oB,E,I,E,a,E,M,G,I,C,I,U,M,E,I,E,a,E,I,E,iB,M,I,E,Y,S,E,I,E,c,E,Y,I,E,c,E,I,E,O,C,I,E,U,E,U,E,U,C,M,E,gB,E,Q,E,U,E,U,E,W,E,M,E,I,C,M,E,Q,C,K,E,kB,E,K,K,C,E,G,G,E,O,E,E,A,E,M,C,E,A,E,O,C,E,C,E,O,I,C,G,O,C,S,C,E,I,E,C,C,E,A,C,C,C,E,C,G,S,C,C,C,Q,A,A,U,O,G,A,W,O,E,G,E,E,I,C,E,E,G,O,I,C,G,O,C,S,C,E,I,E,C,C,E,A,C,C,C,E,C,G,E,S,C,C,C,E,O,E,M,C,E,E,E,G,G,C,E,E,E,E,E,G,O,A,S,C,C,C,E,I,E,E,I,C,O,G,E,E,G,E,E,E,E,O,E,E,E,E,E,W,E,E,E,E,G,E,E,E,E,K,E,E,E,E,E,C,E,C,G,I,E,E,M,C,O,C,M,C,E,G,G,E,E,M,C,E,C,e,E,c,E,M,C,O,C,E,E,E,E,E,M,C,O,M,C,E,E,M,C,G,C,kB,I,E,E,M,C,G,C,M,E,E,G,C,E,O,E,E,G,C,E,I,E,K,E,E,I,C,G,I,C,E,mB,I,C,E,I,E,I,E,K,E,I,C,S,C,E,O,E,E,E,E,E,E,G,I,E,K,E,mB,C,O,I,C,E,K,E,M,C,G,E,E,M,C,O,C,gB,E,M,C,G,E,E,E,M,C,G,C,iB,E,E,G,A,S,C,C,C,E,I,E,E,I,C,Q,E,C,E,O,C,K,I,E,E,M,C,E,E,O,C,S,E,C,E,I,E,E,M,C,E,C,G,E,G,C,E,M,C,I,E,E,M,C,E,G,C,E,E,E,E,O,E,E,W,E,E,W,C,M,C,E,G,G,O,I,C,E,K,G,O,C,S,C,E,I,E,A,E,K,C,E,C,M,C,E,G,E,G,E,O,C,S,C,C,C,E,E,G,C,E,I,C,E,C,I,E,I,E,G,E,G,C,E,I,C,I,E,E,G,E,E,E,E,C,E,C,G,C,G,G,G,G,G,C,O,C,S,C,E,I,E,E,I,C,E,C,G,E,G,C,E,I,C,I,E,G,E,M,C,E,G,G,O,I,C,E,Q,E,O,C,S,C,E,I,E,E,Q,C,E,C,M,C,E,G,M,O,C,I,C,E,I,E,I,G,G,E,E,G,C,E,Q,C,I,E,E,C,G,I,E,G,O,I,C,E,U,E,O,C,S,C,E,I,E,E,U,C,E,C,M,C,E,G,E,E,W,C,G,O,I,C,I,G,O,C,S,C,E,E,G,C,E,I,E,C,C,E,C,E,G,E,Q,E,E,G,C,E,G,C,a,E,Q,C,M,C,E,I,E,I,E,I,O,I,C,E,K,E,M,C,I,E,E,gB,E,I,C,E,iB,E,M,E,M,C,O,C,O,E,O,C,K,E,E,G,A,S,C,C,C,E,I,E,E,I,C,Q,E,C,E,O,C,I,E,E,G,I,E,C,E,E,C,E,O,I,C,E,O,E,O,C,S,C,E,E,G,E,O,C,E,C,O,A,G,I,E,E,E,E,O,E,E,C,G,I,E,E,W,C,E,C,E,S,E,C,E,O,E,U,E,G,E,O,A,C,G,E,O,C,E,E,C,E,E,U,E,G,C,E,C,C,E,G,E,E,E,I,E,E,E,M,E,K,C,Q,E,E,K,C,Q,C,O,E,C,E,C,C,E,E,E,E,G,E,E,E,E,K,C,S,C,E,M,C,E,E,G,E,O,E,E,E,O,G,E,E,E,E,C,E,M,E,U,C,E,E,Y,C,E,E,gB,C,E,I,E,E,M,C,O,C,G,E,U,E,G,E,O,C,E,E,E,E,U,C,I,E,E,M,C,E,G,G,E,E,M,C,E,C,e,E,c,E,M,C,O,C,E,E,E,E,E,M,C,O,M,C,E,E,M,C,G,C,kB,I,E,E,M,C,G,C,M,E,E,G,C,E,O,E,E,G,C,E,I,E,K,E,E,I,C,G,I,C,E,sB,I,C,E,I,E,I,E,K,E,I,C,S,C,E,O,E,E,E,E,E,E,G,I,E,K,E,sB,C,C,O,I,C,E,K,E,M,C,G,E,E,M,C,O,C,gB,E,M,C,G,E,E,E,M,C,G,C,iB,E,E,G,E,E,O,G,C,Q,W,E,M,C,O,C,O,E,C,E,C,C,E,E,E,E,E,E,E,E,E,C,E,E,E,E,E,E,G,E,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,E,S,E,C,E,A,O,E,I,E,E,E,qB,C,qH,E,O,E,A,O,E,I,C,gB,C,E,C,O,C,uC,E,E,I,C,gB,C,E,C,O,C,Q,C,I,C,E,Q,C,W,E,iB,E,E,A,O,G,A,O,E,gF,O,G,E,E,S,C,uI,E,A,O,E,kE,I,I,E,E,E,E,E,E,E,gB,C,E,E,iB,C,E,K,E,G,E,E,I,E,I,C,E,S,oC,E,A,E,E,C,C,E,A,E,E,C,C,E,G,G,E,E,gB,C,kC,E,G,G,E,E,iB,C,kC,E,A,E,C,E,K,E,E,gB,C,C,E,E,A,E,C,E,M,E,E,iB,C,C,E,E,E,I,E,M,I,A,O,E,E,a,W,+E,O,G,E,a,a,kF,E,E,G,E,G,E,gB,C,iC,E,E,G,E,G,E,iB,C,kC,I,I,E,E,E,E,O,I,A,O,E,E,I,W,G,O,G,C,E,G,I,a,E,G,E,Y,C,E,oD,E,E,U,E,E,yC,E,W,C,K,G,E,U,C,E,E,E,E,K,E,G,C,C,O,S,C,M,S,A,A,G,gB,G,E,M,C,C,Y,A,E,W,A,E,W,E,E,E,G,G,E,E,C,E,E,E,E,K,C,I,C,E,E,E,G,E,E,I,C,G,E,M,C,G,E,C,G,E,C,G,E,C,G,C,E,S,C,C,G,K,S,K,G,A,I,G,M,C,C,G,E,M,G,G,K,M,C,G,E,I,C,I,K,I,I,E,G,M,C,E,G,E,E,E,C,I,E,E,C,E,C,G,E,E,K,E,C,E,K,G,G,E,M,E,C,S,K,C,I,G,M,C,G,C,G,E,I,C,G,C,C,S,K,K,E,M,C,I,G,K,C,S,G,C,E,E,c,G,E,C,E,K,G,O,C,S,C,E,G,E,C,S,G,C,E,E,Q,G,E,C,E,E,O,G,E,O,G,E,O,G,E,O,G,E,O,G,E,O,G,E,O,G,G,E,O,G,E,K,C,O,G,K,G,O,C,S,C,E,G,E,C,S,G,C,E,S,E,C,C,C,E,I,E,C,E,E,C,E,O,O,I,C,G,O,C,S,C,E,I,E,C,C,E,C,G,E,S,C,G,C,C,C,E,C,E,K,C,E,G,M,C,G,G,M,O,C,G,C,I,I,E,E,E,E,M,C,E,E,G,E,S,C,C,C,E,E,C,C,C,E,C,E,K,C,E,G,M,C,C,C,C,E,C,C,G,C,Q,E,O,C,C,C,E,C,C,E,+B,E,I,C,E,S,+B,I,E,E,E,O,E,C,E,C,G,E,E,E,Q,E,C,E,C,G,E,E,E,U,E,C,E,C,G,E,E,A,S,C,E,I,E,E,C,E,G,S,E,C,E,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,O,I,C,G,O,C,S,C,E,C,C,E,I,E,C,C,C,E,A,E,C,C,O,O,E,Q,C,O,E,U,C,O,E,O,C,O,E,G,C,Y,G,E,O,C,E,G,E,O,C,M,C,E,O,C,O,C,E,O,C,E,C,O,E,O,C,E,E,E,S,E,S,E,Q,E,W,E,iB,E,W,E,U,Q,G,C,E,G,C,E,G,A,E,C,E,G,C,G,E,C,Q,E,Q,E,M,C,E,E,E,O,C,E,E,E,E,G,E,E,I,C,E,E,K,C,E,E,K,C,E,E,C,O,E,S,C,C,C,E,I,E,G,G,E,K,C,gB,A,Y,O,E,O,E,I,C,I,C,K,E,G,G,A,Y,O,G,G,A,U,O,E,I,E,E,E,E,E,E,E,I,C,I,C,K,E,Q,I,M,O,C,G,O,E,I,C,I,C,E,E,Q,I,E,E,E,E,M,C,E,E,E,I,C,I,C,C,C,E,C,E,Q,G,A,U,O,E,C,G,E,E,O,E,I,C,I,C,A,S,C,E,K,E,M,C,G,E,I,C,M,O,C,E,A,E,G,A,E,E,M,I,M,O,C,G,O,E,I,C,I,C,Q,G,E,M,C,O,E,I,C,I,C,E,E,M,C,E,C,M,E,Q,W,E,O,E,C,E,C,K,G,gB,C,G,G,C,G,G,gB,C,G,G,C,I,I,G,E,M,C,G,C,Y,E,M,C,I,C,K,E,c,G,S,G,C,C,C,E,I,E,E,E,K,C,I,G,I,E,E,K,C,I,E,U,C,C,C,C,E,E,E,C,C,C,E,E,E,C,C,C,E,E,E,C,C,C,E,E,G,G,O,U,I,E,U,C,C,E,K,E,G,K,Y,I,E,Y,C,A,E,E,O,E,G,M,E,C,C,E,8C,E,K,C,E,C,S,G,C,S,E,I,C,E,W,4C,G,I,C,G,K,C,O,W,I,E,G,G,G,E,G,E,+B,E,C,E,C,S,I,I,E,G,G,E,C,E,C,E,C,E,C,G,M,C,E,C,G,M,E,E,G,M,E,G,I,C,C,C,C,S,K,I,E,E,Q,C,E,E,W,A,C,C,C,E,C,C,C,E,C,C,C,E,C,C,C,E,C,E,E,a,C,E,gB,C,E,kB,C,C,C,E,C,C,C,E,C,E,kB,C,E,c,C,E,iB,C,E,mB,C,C,C,E,C,C,C,E,C,E,mB,A,C,S,K,E,I,E,E,E,I,C,K,K,E,K,C,I,E,C,S,K,E,O,G,K,E,K,C,O,G,G,E,M,E,C,S,K,M,A,C,I,C,E,G,C,K,I,G,E,G,C,M,S,C,E,G,E,A,U,O,G,E,yC,gB,G,G,E,W,E,A,oB,E,oB,C,I,I,E,E,E,E,E,E,G,E,C,Y,E,W,C,K,C,E,A,E,G,S,G,E,S,G,K,E,E,K,E,M,C,I,C,K,G,Q,E,M,C,I,C,K,G,K,E,M,C,I,C,K,G,K,G,C,G,O,S,C,E,O,E,M,C,E,M,C,E,C,E,E,S,S,C,E,O,E,M,C,E,C,E,E,Q,E,Q,C,K,E,U,C,a,E,M,C,Y,E,M,C,gB,E,U,C,I,E,S,C,W,E,M,G,G,S,C,C,C,M,E,O,E,I,C,E,W,wC,G,I,Q,O,G,E,K,O,E,G,K,K,U,E,G,K,K,U,E,G,K,S,E,K,C,2D,C,O,E,I,C,G,C,O,W,I,I,E,E,E,E,M,C,E,E,G,C,C,E,G,E,C,C,C,E,C,C,C,E,M,C,E,C,E,G,G,M,C,C,C,E,O,E,a,S,C,E,O,E,U,C,O,C,E,W,K,C,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","sources":["<anon>","demo/index.mjs","demo/demo.mjs",".yarn/cache/regl-npm-2.1.0-12a0de3f80-14932c484f.zip/node_modules/regl/dist/regl.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/setc.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/muln.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/compile/emit.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/comp.js",".yarn/cache/@thi.ng-compose-npm-3.0.12-65ace59bbe-0d42b982a3.zip/node_modules/@thi.ng/compose/comp.js",".yarn/cache/@thi.ng-errors-npm-2.5.15-688f6546b0-5319ff4eeb.zip/node_modules/@thi.ng/errors/illegal-arity.js",".yarn/cache/@thi.ng-errors-npm-2.5.15-688f6546b0-5319ff4eeb.zip/node_modules/@thi.ng/errors/deferror.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/ensure.js",".yarn/cache/@thi.ng-checks-npm-3.6.11-da3f52c439-784dfa7d03.zip/node_modules/@thi.ng/checks/implements-function.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/map.js",".yarn/cache/@thi.ng-checks-npm-3.6.11-da3f52c439-784dfa7d03.zip/node_modules/@thi.ng/checks/is-iterable.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/compr.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/iterator.js",".yarn/cache/@thi.ng-api-npm-8.11.9-7c5222768d-97f46bc612.zip/node_modules/@thi.ng/api/api.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/push.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/reduce.js",".yarn/cache/@thi.ng-api-npm-8.11.9-7c5222768d-97f46bc612.zip/node_modules/@thi.ng/api/fn.js",".yarn/cache/@thi.ng-checks-npm-3.6.11-da3f52c439-784dfa7d03.zip/node_modules/@thi.ng/checks/is-arraylike.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/reduced.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/map-indexed.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/range.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/str.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/take.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/transduce.js",".yarn/cache/@thi.ng-transducers-npm-9.2.2-62b935dc75-730650435c.zip/node_modules/@thi.ng/transducers/zip.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/vop.js",".yarn/cache/@thi.ng-errors-npm-2.5.15-688f6546b0-5319ff4eeb.zip/node_modules/@thi.ng/errors/unsupported.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/compile/templates.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/divn.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/invert.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a35091342b.zip/node_modules/@epok.tech/fn-lists/map.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a35091342b.zip/node_modules/@epok.tech/fn-lists/reduce.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a35091342b.zip/node_modules/@epok.tech/fn-lists/each.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a35091342b.zip/node_modules/@epok.tech/fn-lists/wrap.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a35091342b.zip/node_modules/@epok.tech/fn-lists/wrap-index.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a35091342b.zip/node_modules/@epok.tech/fn-lists/range.js",".yarn/cache/fps-indicator-npm-1.3.0-177059c5c8-914d88ae33.zip/node_modules/fps-indicator/index.js",".yarn/cache/raf-npm-3.4.1-c25d48d76e-337f0853c9.zip/node_modules/raf/index.js",".yarn/cache/performance-now-npm-2.1.0-45e3ce7e49-22c54de06f.zip/node_modules/performance-now/lib/performance-now.js",".yarn/cache/performance-now-npm-2.1.0-45e3ce7e49-22c54de06f.zip/node_modules/performance-now/src/performance-now.coffee",".yarn/cache/process-npm-0.11.10-aeb3b641ae-40c3ce4b7e.zip/node_modules/process/browser.js",".yarn/cache/right-now-npm-1.0.0-cd931eff88-e7a7e95d49.zip/node_modules/right-now/browser.js",".yarn/cache/to-css-npm-1.2.1-5be0e741ee-5f0b1cc106.zip/node_modules/to-css/src/index.js",".yarn/cache/repeat-string-npm-1.6.1-bc8e388655-87fa21bfdb.zip/node_modules/repeat-string/index.js",".yarn/cache/object-assign-npm-4.1.1-1004ad6dec-1f4df99451.zip/node_modules/object-assign/index.js",".yarn/cache/arrify-npm-1.0.1-affafba9fe-c35c8d1a81.zip/node_modules/arrify/index.js","../gl-gpgpu/src/index.js","../gl-gpgpu/src/api.js","../gl-gpgpu/src/const.js",".yarn/cache/@epok.tech-gl-screen-triangle-npm-1.2.1-49978ae6b0-652badecc0.zip/node_modules/@epok.tech/gl-screen-triangle/dist/esm/index.js","../gl-gpgpu/src/index.vert.glsl","../gl-gpgpu/src/maps.js","../gl-gpgpu/src/data.js","../gl-gpgpu/src/size.js","../gl-gpgpu/src/uniforms.js",".yarn/cache/@thi.ng-vectors-npm-7.11.6-4b45a6cc4d-bfc1e2e2c1.zip/node_modules/@thi.ng/vectors/setc.js","../gl-gpgpu/src/step.js","../gl-gpgpu/src/macros.js",".yarn/cache/@epok.tech-is-type-npm-0.1.0-e4ecb8732b-1360df0e0f.zip/node_modules/@epok.tech/is-type/type.js","src/index.mjs",".yarn/cache/@epok.tech-fn-time-npm-0.2.1-4ea264980d-cb567d32a7.zip/node_modules/@epok.tech/fn-time/dist/es/index.js",".yarn/cache/@thi.ng-math-npm-5.11.7-4232640f7d-accf5b681b.zip/node_modules/@thi.ng/math/interval.js",".yarn/cache/@thi.ng-vectors-npm-7.12.0-dae47d2b1f-6d9e3e6044.zip/node_modules/@thi.ng/vectors/addn.js",".yarn/cache/@thi.ng-math-npm-5.11.7-4232640f7d-accf5b681b.zip/node_modules/@thi.ng/math/angle.js",".yarn/cache/@thi.ng-math-npm-5.11.7-4232640f7d-accf5b681b.zip/node_modules/@thi.ng/math/api.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/hsl/hsl.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/defcolor.js",".yarn/cache/@thi.ng-checks-npm-3.6.13-01afa64108-ddc6b3f0f0.zip/node_modules/@thi.ng/checks/implements-function.js",".yarn/cache/@thi.ng-checks-npm-3.6.13-01afa64108-ddc6b3f0f0.zip/node_modules/@thi.ng/checks/is-arraylike.js",".yarn/cache/@thi.ng-checks-npm-3.6.13-01afa64108-ddc6b3f0f0.zip/node_modules/@thi.ng/checks/is-number.js",".yarn/cache/@thi.ng-checks-npm-3.6.13-01afa64108-ddc6b3f0f0.zip/node_modules/@thi.ng/checks/is-string.js",".yarn/cache/@thi.ng-errors-npm-2.5.17-0a615b05f3-87d459d825.zip/node_modules/@thi.ng/errors/illegal-arguments.js",".yarn/cache/@thi.ng-errors-npm-2.5.17-0a615b05f3-87d459d825.zip/node_modules/@thi.ng/errors/deferror.js",".yarn/cache/@thi.ng-math-npm-5.11.11-89215e142c-402b284279.zip/node_modules/@thi.ng/math/api.js",".yarn/cache/@thi.ng-math-npm-5.11.11-89215e142c-402b284279.zip/node_modules/@thi.ng/math/prec.js",".yarn/cache/@thi.ng-strings-npm-3.8.6-3e50ed163e-8bbb0d5ab6.zip/node_modules/@thi.ng/strings/vector.js",".yarn/cache/@thi.ng-memoize-npm-3.3.13-14b5f239a1-eadd69e085.zip/node_modules/@thi.ng/memoize/memoizej.js",".yarn/cache/@thi.ng-strings-npm-3.8.6-3e50ed163e-8bbb0d5ab6.zip/node_modules/@thi.ng/strings/float.js",".yarn/cache/@thi.ng-strings-npm-3.8.6-3e50ed163e-8bbb0d5ab6.zip/node_modules/@thi.ng/strings/pad-left.js",".yarn/cache/@thi.ng-strings-npm-3.8.6-3e50ed163e-8bbb0d5ab6.zip/node_modules/@thi.ng/strings/repeat.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/buffer.js",".yarn/cache/@thi.ng-api-npm-8.11.11-28167783da-f2d1b9ea0c.zip/node_modules/@thi.ng/api/typedarray.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/clamp.js",".yarn/cache/@thi.ng-math-npm-5.11.11-89215e142c-402b284279.zip/node_modules/@thi.ng/math/interval.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/compile/emit.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/comp.js",".yarn/cache/@thi.ng-compose-npm-3.0.14-0461a82366-49c370e3a9.zip/node_modules/@thi.ng/compose/comp.js",".yarn/cache/@thi.ng-errors-npm-2.5.17-0a615b05f3-87d459d825.zip/node_modules/@thi.ng/errors/illegal-arity.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/ensure.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/map.js",".yarn/cache/@thi.ng-checks-npm-3.6.13-01afa64108-ddc6b3f0f0.zip/node_modules/@thi.ng/checks/is-iterable.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/compr.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/iterator.js",".yarn/cache/@thi.ng-api-npm-8.11.11-28167783da-f2d1b9ea0c.zip/node_modules/@thi.ng/api/api.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/push.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/reduce.js",".yarn/cache/@thi.ng-api-npm-8.11.11-28167783da-f2d1b9ea0c.zip/node_modules/@thi.ng/api/fn.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/reduced.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/map-indexed.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/range.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/str.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/take.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/transduce.js",".yarn/cache/@thi.ng-transducers-npm-9.2.6-b9003df111-561399acd0.zip/node_modules/@thi.ng/transducers/zip.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/vop.js",".yarn/cache/@thi.ng-errors-npm-2.5.17-0a615b05f3-87d459d825.zip/node_modules/@thi.ng/errors/unsupported.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/compile/templates.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/compile/accessors.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/eqdelta.js",".yarn/cache/@thi.ng-math-npm-5.11.11-89215e142c-402b284279.zip/node_modules/@thi.ng/math/eqdelta.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/iterator.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/rand-minmax.js",".yarn/cache/@thi.ng-random-npm-4.1.1-b4db06d9cc-793c20afe0.zip/node_modules/@thi.ng/random/system.js",".yarn/cache/@thi.ng-random-npm-4.1.1-b4db06d9cc-793c20afe0.zip/node_modules/@thi.ng/random/wrapped.js",".yarn/cache/@thi.ng-random-npm-4.1.1-b4db06d9cc-793c20afe0.zip/node_modules/@thi.ng/random/arandom.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/set.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/convert.js",".yarn/cache/@thi.ng-checks-npm-3.6.13-01afa64108-ddc6b3f0f0.zip/node_modules/@thi.ng/checks/is-array.js",".yarn/cache/@thi.ng-errors-npm-2.5.17-0a615b05f3-87d459d825.zip/node_modules/@thi.ng/errors/assert.js",".yarn/cache/@parcel-node-resolver-core-npm-3.3.0-53804df663-9a27317635.zip/node_modules/@parcel/node-resolver-core/lib/_empty.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/css/parse-css.js",".yarn/cache/@thi.ng-binary-npm-3.4.34-4537c4b1bb-b45a6d7a3b.zip/node_modules/@thi.ng/binary/rotate.js",".yarn/cache/@thi.ng-binary-npm-3.4.34-4537c4b1bb-b45a6d7a3b.zip/node_modules/@thi.ng/binary/splat.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/api.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/api/constants.js",".yarn/cache/@thi.ng-strings-npm-3.8.6-3e50ed163e-8bbb0d5ab6.zip/node_modules/@thi.ng/strings/percent.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/api/names.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/api/system.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/int/int-srgb.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/setc.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/internal/ensure.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/hsv/hsv-hsl.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/clamp.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/lab/lab-lch.js",".yarn/cache/@thi.ng-math-npm-5.11.11-89215e142c-402b284279.zip/node_modules/@thi.ng/math/angle.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/lab/lab-rgb.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/lab/lab-xyz.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/xyz/xyz-rgb.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/internal/matrix-ops.js",".yarn/cache/@thi.ng-vectors-npm-7.12.4-079fb1db54-ef86aab4ad.zip/node_modules/@thi.ng/vectors/dots.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/rgb/rgb-hsl.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/rgb/rgb-hcv.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/rgb/rgb-srgb.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/linear.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/hsl/hsl-rgb.js",".yarn/cache/@thi.ng-color-npm-5.7.7-7353ab3598-f0e2d1b324.zip/node_modules/@thi.ng/color/rgb/hue-rgb.js",".yarn/cache/gsl-const-npm-1.0.2-aa478f68bf-0853865459.zip/node_modules/gsl-const/main.js","../gl-gpgpu/src/index-forms/index.js","src/grid/index.frag.glsl","src/grid-to-points/index.frag.glsl","src/points-to-grid/index.vert.glsl","src/points-to-grid/index.frag.glsl","src/grid-to-screen/index.frag.glsl","src/points-to-screen/index.vert.glsl","src/points-to-screen/index.frag.glsl","demo/grid-fade/index.frag.glsl","demo/grid-fade-to-screen/index.frag.glsl","demo/optical-flow/index.frag.glsl","demo/optical-flow-to-grid/index.frag.glsl"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  /**\n * @todo Notice that `grid.detail` and `gridToPoints.gpgpu.scale` seem linearly\n *   connected to affect performance, probably because `pointsToGrid` tends to\n *   overlap more and cause more blending when the ratio of points to cells is\n *   high...?\n *   In any case, a way to decouple this would be to have a separate set of\n *   tracer points for rendering only that just follow the grid forces, so there\n *   can be more rendered points for the number of material points.\n *\n * @todo Fix grid artefacts:\n * - One clearer cause is `gridToPoints.positionAdjust[1] = 1`;\n *   explore, isolate, identify.\n * - One possible lesser cause is `grid.limit = 1e8`; probably to do with\n *   points crossing cells coinciding with time-step, seems to be helped by\n *   tweaking `passes` higher or lower (higher increases accuracy, lower seems\n *   to let points jump cells).\n */ var $96e5255f782a85cd$exports = {};\n(function(global, factory) {\n    $96e5255f782a85cd$exports = factory();\n})($96e5255f782a85cd$exports, function() {\n    \"use strict\";\n    var isTypedArray = function(x) {\n        return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;\n    };\n    var extend = function(base, opts) {\n        var keys = Object.keys(opts);\n        for(var i = 0; i < keys.length; ++i)base[keys[i]] = opts[keys[i]];\n        return base;\n    };\n    // Error checking and parameter validation.\n    //\n    // Statements for the form `check.someProcedure(...)` get removed by\n    // a browserify transform for optimized/minified bundles.\n    //\n    /* globals atob */ var endl = \"\\n\";\n    // only used for extracting shader names.  if atob not present, then errors\n    // will be slightly crappier\n    function decodeB64(str) {\n        if (typeof atob !== \"undefined\") return atob(str);\n        return \"base64:\" + str;\n    }\n    function raise(message) {\n        var error = new Error(\"(regl) \" + message);\n        console.error(error);\n        throw error;\n    }\n    function check(pred, message) {\n        if (!pred) raise(message);\n    }\n    function encolon(message) {\n        if (message) return \": \" + message;\n        return \"\";\n    }\n    function checkParameter(param, possibilities, message) {\n        if (!(param in possibilities)) raise(\"unknown parameter (\" + param + \")\" + encolon(message) + \". possible values: \" + Object.keys(possibilities).join());\n    }\n    function checkIsTypedArray(data, message) {\n        if (!isTypedArray(data)) raise(\"invalid parameter type\" + encolon(message) + \". must be a typed array\");\n    }\n    function standardTypeEh(value, type) {\n        switch(type){\n            case \"number\":\n                return typeof value === \"number\";\n            case \"object\":\n                return typeof value === \"object\";\n            case \"string\":\n                return typeof value === \"string\";\n            case \"boolean\":\n                return typeof value === \"boolean\";\n            case \"function\":\n                return typeof value === \"function\";\n            case \"undefined\":\n                return typeof value === \"undefined\";\n            case \"symbol\":\n                return typeof value === \"symbol\";\n        }\n    }\n    function checkTypeOf(value, type, message) {\n        if (!standardTypeEh(value, type)) raise(\"invalid parameter type\" + encolon(message) + \". expected \" + type + \", got \" + typeof value);\n    }\n    function checkNonNegativeInt(value, message) {\n        if (!(value >= 0 && (value | 0) === value)) raise(\"invalid parameter type, (\" + value + \")\" + encolon(message) + \". must be a nonnegative integer\");\n    }\n    function checkOneOf(value, list, message) {\n        if (list.indexOf(value) < 0) raise(\"invalid value\" + encolon(message) + \". must be one of: \" + list);\n    }\n    var constructorKeys = [\n        \"gl\",\n        \"canvas\",\n        \"container\",\n        \"attributes\",\n        \"pixelRatio\",\n        \"extensions\",\n        \"optionalExtensions\",\n        \"profile\",\n        \"onDone\"\n    ];\n    function checkConstructor(obj) {\n        Object.keys(obj).forEach(function(key) {\n            if (constructorKeys.indexOf(key) < 0) raise('invalid regl constructor argument \"' + key + '\". must be one of ' + constructorKeys);\n        });\n    }\n    function leftPad(str, n) {\n        str = str + \"\";\n        while(str.length < n)str = \" \" + str;\n        return str;\n    }\n    function ShaderFile() {\n        this.name = \"unknown\";\n        this.lines = [];\n        this.index = {};\n        this.hasErrors = false;\n    }\n    function ShaderLine(number, line) {\n        this.number = number;\n        this.line = line;\n        this.errors = [];\n    }\n    function ShaderError(fileNumber, lineNumber, message) {\n        this.file = fileNumber;\n        this.line = lineNumber;\n        this.message = message;\n    }\n    function guessCommand() {\n        var error = new Error();\n        var stack = (error.stack || error).toString();\n        var pat = /compileProcedure.*\\n\\s*at.*\\((.*)\\)/.exec(stack);\n        if (pat) return pat[1];\n        var pat2 = /compileProcedure.*\\n\\s*at\\s+(.*)(\\n|$)/.exec(stack);\n        if (pat2) return pat2[1];\n        return \"unknown\";\n    }\n    function guessCallSite() {\n        var error = new Error();\n        var stack = (error.stack || error).toString();\n        var pat = /at REGLCommand.*\\n\\s+at.*\\((.*)\\)/.exec(stack);\n        if (pat) return pat[1];\n        var pat2 = /at REGLCommand.*\\n\\s+at\\s+(.*)\\n/.exec(stack);\n        if (pat2) return pat2[1];\n        return \"unknown\";\n    }\n    function parseSource(source, command) {\n        var lines = source.split(\"\\n\");\n        var lineNumber = 1;\n        var fileNumber = 0;\n        var files = {\n            unknown: new ShaderFile(),\n            0: new ShaderFile()\n        };\n        files.unknown.name = files[0].name = command || guessCommand();\n        files.unknown.lines.push(new ShaderLine(0, \"\"));\n        for(var i = 0; i < lines.length; ++i){\n            var line = lines[i];\n            var parts = /^\\s*#\\s*(\\w+)\\s+(.+)\\s*$/.exec(line);\n            if (parts) switch(parts[1]){\n                case \"line\":\n                    var lineNumberInfo = /(\\d+)(\\s+\\d+)?/.exec(parts[2]);\n                    if (lineNumberInfo) {\n                        lineNumber = lineNumberInfo[1] | 0;\n                        if (lineNumberInfo[2]) {\n                            fileNumber = lineNumberInfo[2] | 0;\n                            if (!(fileNumber in files)) files[fileNumber] = new ShaderFile();\n                        }\n                    }\n                    break;\n                case \"define\":\n                    var nameInfo = /SHADER_NAME(_B64)?\\s+(.*)$/.exec(parts[2]);\n                    if (nameInfo) files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];\n                    break;\n            }\n            files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));\n        }\n        Object.keys(files).forEach(function(fileNumber) {\n            var file = files[fileNumber];\n            file.lines.forEach(function(line) {\n                file.index[line.number] = line;\n            });\n        });\n        return files;\n    }\n    function parseErrorLog(errLog) {\n        var result = [];\n        errLog.split(\"\\n\").forEach(function(errMsg) {\n            if (errMsg.length < 5) return;\n            var parts = /^ERROR:\\s+(\\d+):(\\d+):\\s*(.*)$/.exec(errMsg);\n            if (parts) result.push(new ShaderError(parts[1] | 0, parts[2] | 0, parts[3].trim()));\n            else if (errMsg.length > 0) result.push(new ShaderError(\"unknown\", 0, errMsg));\n        });\n        return result;\n    }\n    function annotateFiles(files, errors) {\n        errors.forEach(function(error) {\n            var file = files[error.file];\n            if (file) {\n                var line = file.index[error.line];\n                if (line) {\n                    line.errors.push(error);\n                    file.hasErrors = true;\n                    return;\n                }\n            }\n            files.unknown.hasErrors = true;\n            files.unknown.lines[0].errors.push(error);\n        });\n    }\n    function checkShaderError(gl, shader, source, type, command) {\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            var errLog = gl.getShaderInfoLog(shader);\n            var typeName = type === gl.FRAGMENT_SHADER ? \"fragment\" : \"vertex\";\n            checkCommandType(source, \"string\", typeName + \" shader source must be a string\", command);\n            var files = parseSource(source, command);\n            var errors = parseErrorLog(errLog);\n            annotateFiles(files, errors);\n            Object.keys(files).forEach(function(fileNumber) {\n                var file = files[fileNumber];\n                if (!file.hasErrors) return;\n                var strings = [\n                    \"\"\n                ];\n                var styles = [\n                    \"\"\n                ];\n                function push(str, style) {\n                    strings.push(str);\n                    styles.push(style || \"\");\n                }\n                push(\"file number \" + fileNumber + \": \" + file.name + \"\\n\", \"color:red;text-decoration:underline;font-weight:bold\");\n                file.lines.forEach(function(line) {\n                    if (line.errors.length > 0) {\n                        push(leftPad(line.number, 4) + \"|  \", \"background-color:yellow; font-weight:bold\");\n                        push(line.line + endl, \"color:red; background-color:yellow; font-weight:bold\");\n                        // try to guess token\n                        var offset = 0;\n                        line.errors.forEach(function(error) {\n                            var message = error.message;\n                            var token = /^\\s*'(.*)'\\s*:\\s*(.*)$/.exec(message);\n                            if (token) {\n                                var tokenPat = token[1];\n                                message = token[2];\n                                switch(tokenPat){\n                                    case \"assign\":\n                                        tokenPat = \"=\";\n                                        break;\n                                }\n                                offset = Math.max(line.line.indexOf(tokenPat, offset), 0);\n                            } else offset = 0;\n                            push(leftPad(\"| \", 6));\n                            push(leftPad(\"^^^\", offset + 3) + endl, \"font-weight:bold\");\n                            push(leftPad(\"| \", 6));\n                            push(message + endl, \"font-weight:bold\");\n                        });\n                        push(leftPad(\"| \", 6) + endl);\n                    } else {\n                        push(leftPad(line.number, 4) + \"|  \");\n                        push(line.line + endl, \"color:red\");\n                    }\n                });\n                if (typeof document !== \"undefined\" && !window.chrome) {\n                    styles[0] = strings.join(\"%c\");\n                    console.log.apply(console, styles);\n                } else console.log(strings.join(\"\"));\n            });\n            check.raise(\"Error compiling \" + typeName + \" shader, \" + files[0].name);\n        }\n    }\n    function checkLinkError(gl, program, fragShader, vertShader, command) {\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var errLog = gl.getProgramInfoLog(program);\n            var fragParse = parseSource(fragShader, command);\n            var vertParse = parseSource(vertShader, command);\n            var header = 'Error linking program with vertex shader, \"' + vertParse[0].name + '\", and fragment shader \"' + fragParse[0].name + '\"';\n            if (typeof document !== \"undefined\") console.log(\"%c\" + header + endl + \"%c\" + errLog, \"color:red;text-decoration:underline;font-weight:bold\", \"color:red\");\n            else console.log(header + endl + errLog);\n            check.raise(header);\n        }\n    }\n    function saveCommandRef(object) {\n        object._commandRef = guessCommand();\n    }\n    function saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {\n        saveCommandRef(opts);\n        function id(str) {\n            if (str) return stringStore.id(str);\n            return 0;\n        }\n        opts._fragId = id(opts.static.frag);\n        opts._vertId = id(opts.static.vert);\n        function addProps(dict, set) {\n            Object.keys(set).forEach(function(u) {\n                dict[stringStore.id(u)] = true;\n            });\n        }\n        var uniformSet = opts._uniformSet = {};\n        addProps(uniformSet, uniforms.static);\n        addProps(uniformSet, uniforms.dynamic);\n        var attributeSet = opts._attributeSet = {};\n        addProps(attributeSet, attributes.static);\n        addProps(attributeSet, attributes.dynamic);\n        opts._hasCount = \"count\" in opts.static || \"count\" in opts.dynamic || \"elements\" in opts.static || \"elements\" in opts.dynamic;\n    }\n    function commandRaise(message, command) {\n        var callSite = guessCallSite();\n        raise(message + \" in command \" + (command || guessCommand()) + (callSite === \"unknown\" ? \"\" : \" called from \" + callSite));\n    }\n    function checkCommand(pred, message, command) {\n        if (!pred) commandRaise(message, command || guessCommand());\n    }\n    function checkParameterCommand(param, possibilities, message, command) {\n        if (!(param in possibilities)) commandRaise(\"unknown parameter (\" + param + \")\" + encolon(message) + \". possible values: \" + Object.keys(possibilities).join(), command || guessCommand());\n    }\n    function checkCommandType(value, type, message, command) {\n        if (!standardTypeEh(value, type)) commandRaise(\"invalid parameter type\" + encolon(message) + \". expected \" + type + \", got \" + typeof value, command || guessCommand());\n    }\n    function checkOptional(block) {\n        block();\n    }\n    function checkFramebufferFormat(attachment, texFormats, rbFormats) {\n        if (attachment.texture) checkOneOf(attachment.texture._texture.internalformat, texFormats, \"unsupported texture format for attachment\");\n        else checkOneOf(attachment.renderbuffer._renderbuffer.format, rbFormats, \"unsupported renderbuffer format for attachment\");\n    }\n    var GL_CLAMP_TO_EDGE = 0x812F;\n    var GL_NEAREST = 0x2600;\n    var GL_NEAREST_MIPMAP_NEAREST = 0x2700;\n    var GL_LINEAR_MIPMAP_NEAREST = 0x2701;\n    var GL_NEAREST_MIPMAP_LINEAR = 0x2702;\n    var GL_LINEAR_MIPMAP_LINEAR = 0x2703;\n    var GL_BYTE = 5120;\n    var GL_UNSIGNED_BYTE = 5121;\n    var GL_SHORT = 5122;\n    var GL_UNSIGNED_SHORT = 5123;\n    var GL_INT = 5124;\n    var GL_UNSIGNED_INT = 5125;\n    var GL_FLOAT = 5126;\n    var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n    var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n    var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\n    var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;\n    var GL_HALF_FLOAT_OES = 0x8D61;\n    var TYPE_SIZE = {};\n    TYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;\n    TYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;\n    TYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;\n    function pixelSize(type, channels) {\n        if (type === GL_UNSIGNED_SHORT_5_5_5_1 || type === GL_UNSIGNED_SHORT_4_4_4_4 || type === GL_UNSIGNED_SHORT_5_6_5) return 2;\n        else if (type === GL_UNSIGNED_INT_24_8_WEBGL) return 4;\n        else return TYPE_SIZE[type] * channels;\n    }\n    function isPow2(v) {\n        return !(v & v - 1) && !!v;\n    }\n    function checkTexture2D(info, mipData, limits) {\n        var i;\n        var w = mipData.width;\n        var h = mipData.height;\n        var c = mipData.channels;\n        // Check texture shape\n        check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, \"invalid texture shape\");\n        // check wrap mode\n        if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) check(isPow2(w) && isPow2(h), \"incompatible wrap mode for texture, both width and height must be power of 2\");\n        if (mipData.mipmask === 1) {\n            if (w !== 1 && h !== 1) check(info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR, \"min filter requires mipmap\");\n        } else {\n            // texture must be power of 2\n            check(isPow2(w) && isPow2(h), \"texture must be a square power of 2 to support mipmapping\");\n            check(mipData.mipmask === (w << 1) - 1, \"missing or incomplete mipmap data\");\n        }\n        if (mipData.type === GL_FLOAT) {\n            if (limits.extensions.indexOf(\"oes_texture_float_linear\") < 0) check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST, \"filter not supported, must enable oes_texture_float_linear\");\n            check(!info.genMipmaps, \"mipmap generation not supported with float textures\");\n        }\n        // check image complete\n        var mipimages = mipData.images;\n        for(i = 0; i < 16; ++i){\n            if (mipimages[i]) {\n                var mw = w >> i;\n                var mh = h >> i;\n                check(mipData.mipmask & 1 << i, \"missing mipmap data\");\n                var img = mipimages[i];\n                check(img.width === mw && img.height === mh, \"invalid shape for mip images\");\n                check(img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type, \"incompatible type for mip image\");\n                if (img.compressed) ;\n                else if (img.data) {\n                    // check(img.data.byteLength === mw * mh *\n                    // Math.max(pixelSize(img.type, c), img.unpackAlignment),\n                    var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;\n                    check(img.data.byteLength === rowSize * mh, \"invalid data for image, buffer size is inconsistent with image format\");\n                } else if (img.element) ;\n                else img.copy;\n            } else if (!info.genMipmaps) check((mipData.mipmask & 1 << i) === 0, \"extra mipmap data\");\n        }\n        if (mipData.compressed) check(!info.genMipmaps, \"mipmap generation for compressed images not supported\");\n    }\n    function checkTextureCube(texture, info, faces, limits) {\n        var w = texture.width;\n        var h = texture.height;\n        var c = texture.channels;\n        // Check texture shape\n        check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, \"invalid texture shape\");\n        check(w === h, \"cube map must be square\");\n        check(info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE, \"wrap mode not supported by cube map\");\n        for(var i = 0; i < faces.length; ++i){\n            var face = faces[i];\n            check(face.width === w && face.height === h, \"inconsistent cube map face shape\");\n            if (info.genMipmaps) {\n                check(!face.compressed, \"can not generate mipmap for compressed textures\");\n                check(face.mipmask === 1, \"can not specify mipmaps and generate mipmaps\");\n            }\n            var mipmaps = face.images;\n            for(var j = 0; j < 16; ++j){\n                var img = mipmaps[j];\n                if (img) {\n                    var mw = w >> j;\n                    var mh = h >> j;\n                    check(face.mipmask & 1 << j, \"missing mipmap data\");\n                    check(img.width === mw && img.height === mh, \"invalid shape for mip images\");\n                    check(img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type, \"incompatible type for mip image\");\n                    if (img.compressed) ;\n                    else if (img.data) check(img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c), img.unpackAlignment), \"invalid data for image, buffer size is inconsistent with image format\");\n                    else if (img.element) ;\n                    else img.copy;\n                }\n            }\n        }\n    }\n    var check$1 = extend(check, {\n        optional: checkOptional,\n        raise: raise,\n        commandRaise: commandRaise,\n        command: checkCommand,\n        parameter: checkParameter,\n        commandParameter: checkParameterCommand,\n        constructor: checkConstructor,\n        type: checkTypeOf,\n        commandType: checkCommandType,\n        isTypedArray: checkIsTypedArray,\n        nni: checkNonNegativeInt,\n        oneOf: checkOneOf,\n        shaderError: checkShaderError,\n        linkError: checkLinkError,\n        callSite: guessCallSite,\n        saveCommandRef: saveCommandRef,\n        saveDrawInfo: saveDrawCommandInfo,\n        framebufferFormat: checkFramebufferFormat,\n        guessCommand: guessCommand,\n        texture2D: checkTexture2D,\n        textureCube: checkTextureCube\n    });\n    var VARIABLE_COUNTER = 0;\n    var DYN_FUNC = 0;\n    var DYN_CONSTANT = 5;\n    var DYN_ARRAY = 6;\n    function DynamicVariable(type, data) {\n        this.id = VARIABLE_COUNTER++;\n        this.type = type;\n        this.data = data;\n    }\n    function escapeStr(str) {\n        return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n    }\n    function splitParts(str) {\n        if (str.length === 0) return [];\n        var firstChar = str.charAt(0);\n        var lastChar = str.charAt(str.length - 1);\n        if (str.length > 1 && firstChar === lastChar && (firstChar === '\"' || firstChar === \"'\")) return [\n            '\"' + escapeStr(str.substr(1, str.length - 2)) + '\"'\n        ];\n        var parts = /\\[(false|true|null|\\d+|'[^']*'|\"[^\"]*\")\\]/.exec(str);\n        if (parts) return splitParts(str.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str.substr(parts.index + parts[0].length)));\n        var subparts = str.split(\".\");\n        if (subparts.length === 1) return [\n            '\"' + escapeStr(str) + '\"'\n        ];\n        var result = [];\n        for(var i = 0; i < subparts.length; ++i)result = result.concat(splitParts(subparts[i]));\n        return result;\n    }\n    function toAccessorString(str) {\n        return \"[\" + splitParts(str).join(\"][\") + \"]\";\n    }\n    function defineDynamic(type, data) {\n        return new DynamicVariable(type, toAccessorString(data + \"\"));\n    }\n    function isDynamic(x) {\n        return typeof x === \"function\" && !x._reglType || x instanceof DynamicVariable;\n    }\n    function unbox(x, path) {\n        if (typeof x === \"function\") return new DynamicVariable(DYN_FUNC, x);\n        else if (typeof x === \"number\" || typeof x === \"boolean\") return new DynamicVariable(DYN_CONSTANT, x);\n        else if (Array.isArray(x)) return new DynamicVariable(DYN_ARRAY, x.map(function(y, i) {\n            return unbox(y, path + \"[\" + i + \"]\");\n        }));\n        else if (x instanceof DynamicVariable) return x;\n        check$1(false, \"invalid option type in uniform \" + path);\n    }\n    var dynamic = {\n        DynamicVariable: DynamicVariable,\n        define: defineDynamic,\n        isDynamic: isDynamic,\n        unbox: unbox,\n        accessor: toAccessorString\n    };\n    /* globals requestAnimationFrame, cancelAnimationFrame */ var raf = {\n        next: typeof requestAnimationFrame === \"function\" ? function(cb) {\n            return requestAnimationFrame(cb);\n        } : function(cb) {\n            return setTimeout(cb, 16);\n        },\n        cancel: typeof cancelAnimationFrame === \"function\" ? function(raf) {\n            return cancelAnimationFrame(raf);\n        } : clearTimeout\n    };\n    /* globals performance */ var clock = typeof performance !== \"undefined\" && performance.now ? function() {\n        return performance.now();\n    } : function() {\n        return +new Date();\n    };\n    function createStringStore() {\n        var stringIds = {\n            \"\": 0\n        };\n        var stringValues = [\n            \"\"\n        ];\n        return {\n            id: function(str) {\n                var result = stringIds[str];\n                if (result) return result;\n                result = stringIds[str] = stringValues.length;\n                stringValues.push(str);\n                return result;\n            },\n            str: function(id) {\n                return stringValues[id];\n            }\n        };\n    }\n    // Context and canvas creation helper functions\n    function createCanvas(element, onDone, pixelRatio) {\n        var canvas = document.createElement(\"canvas\");\n        extend(canvas.style, {\n            border: 0,\n            margin: 0,\n            padding: 0,\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\"\n        });\n        element.appendChild(canvas);\n        if (element === document.body) {\n            canvas.style.position = \"absolute\";\n            extend(element.style, {\n                margin: 0,\n                padding: 0\n            });\n        }\n        function resize() {\n            var w = window.innerWidth;\n            var h = window.innerHeight;\n            if (element !== document.body) {\n                var bounds = canvas.getBoundingClientRect();\n                w = bounds.right - bounds.left;\n                h = bounds.bottom - bounds.top;\n            }\n            canvas.width = pixelRatio * w;\n            canvas.height = pixelRatio * h;\n        }\n        var resizeObserver;\n        if (element !== document.body && typeof ResizeObserver === \"function\") {\n            // ignore 'ResizeObserver' is not defined\n            // eslint-disable-next-line\n            resizeObserver = new ResizeObserver(function() {\n                // setTimeout to avoid flicker\n                setTimeout(resize);\n            });\n            resizeObserver.observe(element);\n        } else window.addEventListener(\"resize\", resize, false);\n        function onDestroy() {\n            if (resizeObserver) resizeObserver.disconnect();\n            else window.removeEventListener(\"resize\", resize);\n            element.removeChild(canvas);\n        }\n        resize();\n        return {\n            canvas: canvas,\n            onDestroy: onDestroy\n        };\n    }\n    function createContext(canvas, contextAttributes) {\n        function get(name) {\n            try {\n                return canvas.getContext(name, contextAttributes);\n            } catch (e) {\n                return null;\n            }\n        }\n        return get(\"webgl\") || get(\"experimental-webgl\") || get(\"webgl-experimental\");\n    }\n    function isHTMLElement(obj) {\n        return typeof obj.nodeName === \"string\" && typeof obj.appendChild === \"function\" && typeof obj.getBoundingClientRect === \"function\";\n    }\n    function isWebGLContext(obj) {\n        return typeof obj.drawArrays === \"function\" || typeof obj.drawElements === \"function\";\n    }\n    function parseExtensions(input) {\n        if (typeof input === \"string\") return input.split();\n        check$1(Array.isArray(input), \"invalid extension array\");\n        return input;\n    }\n    function getElement(desc) {\n        if (typeof desc === \"string\") {\n            check$1(typeof document !== \"undefined\", \"not supported outside of DOM\");\n            return document.querySelector(desc);\n        }\n        return desc;\n    }\n    function parseArgs(args_) {\n        var args = args_ || {};\n        var element, container, canvas, gl;\n        var contextAttributes = {};\n        var extensions = [];\n        var optionalExtensions = [];\n        var pixelRatio = typeof window === \"undefined\" ? 1 : window.devicePixelRatio;\n        var profile = false;\n        var onDone = function(err) {\n            if (err) check$1.raise(err);\n        };\n        var onDestroy = function() {};\n        if (typeof args === \"string\") {\n            check$1(typeof document !== \"undefined\", \"selector queries only supported in DOM enviroments\");\n            element = document.querySelector(args);\n            check$1(element, \"invalid query string for element\");\n        } else if (typeof args === \"object\") {\n            if (isHTMLElement(args)) element = args;\n            else if (isWebGLContext(args)) {\n                gl = args;\n                canvas = gl.canvas;\n            } else {\n                check$1.constructor(args);\n                if (\"gl\" in args) gl = args.gl;\n                else if (\"canvas\" in args) canvas = getElement(args.canvas);\n                else if (\"container\" in args) container = getElement(args.container);\n                if (\"attributes\" in args) {\n                    contextAttributes = args.attributes;\n                    check$1.type(contextAttributes, \"object\", \"invalid context attributes\");\n                }\n                if (\"extensions\" in args) extensions = parseExtensions(args.extensions);\n                if (\"optionalExtensions\" in args) optionalExtensions = parseExtensions(args.optionalExtensions);\n                if (\"onDone\" in args) {\n                    check$1.type(args.onDone, \"function\", \"invalid or missing onDone callback\");\n                    onDone = args.onDone;\n                }\n                if (\"profile\" in args) profile = !!args.profile;\n                if (\"pixelRatio\" in args) {\n                    pixelRatio = +args.pixelRatio;\n                    check$1(pixelRatio > 0, \"invalid pixel ratio\");\n                }\n            }\n        } else check$1.raise(\"invalid arguments to regl\");\n        if (element) {\n            if (element.nodeName.toLowerCase() === \"canvas\") canvas = element;\n            else container = element;\n        }\n        if (!gl) {\n            if (!canvas) {\n                check$1(typeof document !== \"undefined\", \"must manually specify webgl context outside of DOM environments\");\n                var result = createCanvas(container || document.body, onDone, pixelRatio);\n                if (!result) return null;\n                canvas = result.canvas;\n                onDestroy = result.onDestroy;\n            }\n            // workaround for chromium bug, premultiplied alpha value is platform dependent\n            if (contextAttributes.premultipliedAlpha === undefined) contextAttributes.premultipliedAlpha = true;\n            gl = createContext(canvas, contextAttributes);\n        }\n        if (!gl) {\n            onDestroy();\n            onDone(\"webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org\");\n            return null;\n        }\n        return {\n            gl: gl,\n            canvas: canvas,\n            container: container,\n            extensions: extensions,\n            optionalExtensions: optionalExtensions,\n            pixelRatio: pixelRatio,\n            profile: profile,\n            onDone: onDone,\n            onDestroy: onDestroy\n        };\n    }\n    function createExtensionCache(gl, config) {\n        var extensions = {};\n        function tryLoadExtension(name_) {\n            check$1.type(name_, \"string\", \"extension name must be string\");\n            var name = name_.toLowerCase();\n            var ext;\n            try {\n                ext = extensions[name] = gl.getExtension(name);\n            } catch (e) {}\n            return !!ext;\n        }\n        for(var i = 0; i < config.extensions.length; ++i){\n            var name = config.extensions[i];\n            if (!tryLoadExtension(name)) {\n                config.onDestroy();\n                config.onDone('\"' + name + '\" extension is not supported by the current WebGL context, try upgrading your system or a different browser');\n                return null;\n            }\n        }\n        config.optionalExtensions.forEach(tryLoadExtension);\n        return {\n            extensions: extensions,\n            restore: function() {\n                Object.keys(extensions).forEach(function(name) {\n                    if (extensions[name] && !tryLoadExtension(name)) throw new Error(\"(regl): error restoring extension \" + name);\n                });\n            }\n        };\n    }\n    function loop(n, f) {\n        var result = Array(n);\n        for(var i = 0; i < n; ++i)result[i] = f(i);\n        return result;\n    }\n    var GL_BYTE$1 = 5120;\n    var GL_UNSIGNED_BYTE$2 = 5121;\n    var GL_SHORT$1 = 5122;\n    var GL_UNSIGNED_SHORT$1 = 5123;\n    var GL_INT$1 = 5124;\n    var GL_UNSIGNED_INT$1 = 5125;\n    var GL_FLOAT$2 = 5126;\n    function nextPow16(v) {\n        for(var i = 16; i <= 268435456; i *= 16){\n            if (v <= i) return i;\n        }\n        return 0;\n    }\n    function log2(v) {\n        var r, shift;\n        r = (v > 0xFFFF) << 4;\n        v >>>= r;\n        shift = (v > 0xFF) << 3;\n        v >>>= shift;\n        r |= shift;\n        shift = (v > 0xF) << 2;\n        v >>>= shift;\n        r |= shift;\n        shift = (v > 0x3) << 1;\n        v >>>= shift;\n        r |= shift;\n        return r | v >> 1;\n    }\n    function createPool() {\n        var bufferPool = loop(8, function() {\n            return [];\n        });\n        function alloc(n) {\n            var sz = nextPow16(n);\n            var bin = bufferPool[log2(sz) >> 2];\n            if (bin.length > 0) return bin.pop();\n            return new ArrayBuffer(sz);\n        }\n        function free(buf) {\n            bufferPool[log2(buf.byteLength) >> 2].push(buf);\n        }\n        function allocType(type, n) {\n            var result = null;\n            switch(type){\n                case GL_BYTE$1:\n                    result = new Int8Array(alloc(n), 0, n);\n                    break;\n                case GL_UNSIGNED_BYTE$2:\n                    result = new Uint8Array(alloc(n), 0, n);\n                    break;\n                case GL_SHORT$1:\n                    result = new Int16Array(alloc(2 * n), 0, n);\n                    break;\n                case GL_UNSIGNED_SHORT$1:\n                    result = new Uint16Array(alloc(2 * n), 0, n);\n                    break;\n                case GL_INT$1:\n                    result = new Int32Array(alloc(4 * n), 0, n);\n                    break;\n                case GL_UNSIGNED_INT$1:\n                    result = new Uint32Array(alloc(4 * n), 0, n);\n                    break;\n                case GL_FLOAT$2:\n                    result = new Float32Array(alloc(4 * n), 0, n);\n                    break;\n                default:\n                    return null;\n            }\n            if (result.length !== n) return result.subarray(0, n);\n            return result;\n        }\n        function freeType(array) {\n            free(array.buffer);\n        }\n        return {\n            alloc: alloc,\n            free: free,\n            allocType: allocType,\n            freeType: freeType\n        };\n    }\n    var pool = createPool();\n    // zero pool for initial zero data\n    pool.zero = createPool();\n    var GL_SUBPIXEL_BITS = 0x0D50;\n    var GL_RED_BITS = 0x0D52;\n    var GL_GREEN_BITS = 0x0D53;\n    var GL_BLUE_BITS = 0x0D54;\n    var GL_ALPHA_BITS = 0x0D55;\n    var GL_DEPTH_BITS = 0x0D56;\n    var GL_STENCIL_BITS = 0x0D57;\n    var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;\n    var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;\n    var GL_MAX_TEXTURE_SIZE = 0x0D33;\n    var GL_MAX_VIEWPORT_DIMS = 0x0D3A;\n    var GL_MAX_VERTEX_ATTRIBS = 0x8869;\n    var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\n    var GL_MAX_VARYING_VECTORS = 0x8DFC;\n    var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\n    var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\n    var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;\n    var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\n    var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\n    var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;\n    var GL_VENDOR = 0x1F00;\n    var GL_RENDERER = 0x1F01;\n    var GL_VERSION = 0x1F02;\n    var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;\n    var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;\n    var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;\n    var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;\n    var GL_TEXTURE_2D = 0x0DE1;\n    var GL_TEXTURE_CUBE_MAP = 0x8513;\n    var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\n    var GL_TEXTURE0 = 0x84C0;\n    var GL_RGBA = 0x1908;\n    var GL_FLOAT$1 = 0x1406;\n    var GL_UNSIGNED_BYTE$1 = 0x1401;\n    var GL_FRAMEBUFFER = 0x8D40;\n    var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;\n    var GL_COLOR_ATTACHMENT0 = 0x8CE0;\n    var GL_COLOR_BUFFER_BIT$1 = 0x4000;\n    var wrapLimits = function(gl, extensions) {\n        var maxAnisotropic = 1;\n        if (extensions.ext_texture_filter_anisotropic) maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        var maxDrawbuffers = 1;\n        var maxColorAttachments = 1;\n        if (extensions.webgl_draw_buffers) {\n            maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);\n            maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);\n        }\n        // detect if reading float textures is available (Safari doesn't support)\n        var readFloat = !!extensions.oes_texture_float;\n        if (readFloat) {\n            var readFloatTexture = gl.createTexture();\n            gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);\n            gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);\n            var fbo = gl.createFramebuffer();\n            gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);\n            gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);\n            gl.bindTexture(GL_TEXTURE_2D, null);\n            if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;\n            else {\n                gl.viewport(0, 0, 1, 1);\n                gl.clearColor(1.0, 0.0, 0.0, 1.0);\n                gl.clear(GL_COLOR_BUFFER_BIT$1);\n                var pixels = pool.allocType(GL_FLOAT$1, 4);\n                gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);\n                if (gl.getError()) readFloat = false;\n                else {\n                    gl.deleteFramebuffer(fbo);\n                    gl.deleteTexture(readFloatTexture);\n                    readFloat = pixels[0] === 1.0;\n                }\n                pool.freeType(pixels);\n            }\n        }\n        // detect non power of two cube textures support (IE doesn't support)\n        var isIE = typeof navigator !== \"undefined\" && (/MSIE/.test(navigator.userAgent) || /Trident\\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));\n        var npotTextureCube = true;\n        if (!isIE) {\n            var cubeTexture = gl.createTexture();\n            var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);\n            gl.activeTexture(GL_TEXTURE0);\n            gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);\n            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);\n            pool.freeType(data);\n            gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);\n            gl.deleteTexture(cubeTexture);\n            npotTextureCube = !gl.getError();\n        }\n        return {\n            // drawing buffer bit depth\n            colorBits: [\n                gl.getParameter(GL_RED_BITS),\n                gl.getParameter(GL_GREEN_BITS),\n                gl.getParameter(GL_BLUE_BITS),\n                gl.getParameter(GL_ALPHA_BITS)\n            ],\n            depthBits: gl.getParameter(GL_DEPTH_BITS),\n            stencilBits: gl.getParameter(GL_STENCIL_BITS),\n            subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),\n            // supported extensions\n            extensions: Object.keys(extensions).filter(function(ext) {\n                return !!extensions[ext];\n            }),\n            // max aniso samples\n            maxAnisotropic: maxAnisotropic,\n            // max draw buffers\n            maxDrawbuffers: maxDrawbuffers,\n            maxColorAttachments: maxColorAttachments,\n            // point and line size ranges\n            pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),\n            lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),\n            maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),\n            maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),\n            maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),\n            maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),\n            maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),\n            maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),\n            maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),\n            maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),\n            maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),\n            maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),\n            maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),\n            // vendor info\n            glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),\n            renderer: gl.getParameter(GL_RENDERER),\n            vendor: gl.getParameter(GL_VENDOR),\n            version: gl.getParameter(GL_VERSION),\n            // quirks\n            readFloat: readFloat,\n            npotTextureCube: npotTextureCube\n        };\n    };\n    function isNDArrayLike(obj) {\n        return !!obj && typeof obj === \"object\" && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === \"number\" && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));\n    }\n    var values = function(obj) {\n        return Object.keys(obj).map(function(key) {\n            return obj[key];\n        });\n    };\n    var flattenUtils = {\n        shape: arrayShape$1,\n        flatten: flattenArray\n    };\n    function flatten1D(array, nx, out) {\n        for(var i = 0; i < nx; ++i)out[i] = array[i];\n    }\n    function flatten2D(array, nx, ny, out) {\n        var ptr = 0;\n        for(var i = 0; i < nx; ++i){\n            var row = array[i];\n            for(var j = 0; j < ny; ++j)out[ptr++] = row[j];\n        }\n    }\n    function flatten3D(array, nx, ny, nz, out, ptr_) {\n        var ptr = ptr_;\n        for(var i = 0; i < nx; ++i){\n            var row = array[i];\n            for(var j = 0; j < ny; ++j){\n                var col = row[j];\n                for(var k = 0; k < nz; ++k)out[ptr++] = col[k];\n            }\n        }\n    }\n    function flattenRec(array, shape, level, out, ptr) {\n        var stride = 1;\n        for(var i = level + 1; i < shape.length; ++i)stride *= shape[i];\n        var n = shape[level];\n        if (shape.length - level === 4) {\n            var nx = shape[level + 1];\n            var ny = shape[level + 2];\n            var nz = shape[level + 3];\n            for(i = 0; i < n; ++i){\n                flatten3D(array[i], nx, ny, nz, out, ptr);\n                ptr += stride;\n            }\n        } else for(i = 0; i < n; ++i){\n            flattenRec(array[i], shape, level + 1, out, ptr);\n            ptr += stride;\n        }\n    }\n    function flattenArray(array, shape, type, out_) {\n        var sz = 1;\n        if (shape.length) for(var i = 0; i < shape.length; ++i)sz *= shape[i];\n        else sz = 0;\n        var out = out_ || pool.allocType(type, sz);\n        switch(shape.length){\n            case 0:\n                break;\n            case 1:\n                flatten1D(array, shape[0], out);\n                break;\n            case 2:\n                flatten2D(array, shape[0], shape[1], out);\n                break;\n            case 3:\n                flatten3D(array, shape[0], shape[1], shape[2], out, 0);\n                break;\n            default:\n                flattenRec(array, shape, 0, out, 0);\n        }\n        return out;\n    }\n    function arrayShape$1(array_) {\n        var shape = [];\n        for(var array = array_; array.length; array = array[0])shape.push(array.length);\n        return shape;\n    }\n    var arrayTypes = {\n        \"[object Int8Array]\": 5120,\n        \"[object Int16Array]\": 5122,\n        \"[object Int32Array]\": 5124,\n        \"[object Uint8Array]\": 5121,\n        \"[object Uint8ClampedArray]\": 5121,\n        \"[object Uint16Array]\": 5123,\n        \"[object Uint32Array]\": 5125,\n        \"[object Float32Array]\": 5126,\n        \"[object Float64Array]\": 5121,\n        \"[object ArrayBuffer]\": 5121\n    };\n    var int8 = 5120;\n    var int16 = 5122;\n    var int32 = 5124;\n    var uint8 = 5121;\n    var uint16 = 5123;\n    var uint32 = 5125;\n    var float = 5126;\n    var float32 = 5126;\n    var glTypes = {\n        int8: int8,\n        int16: int16,\n        int32: int32,\n        uint8: uint8,\n        uint16: uint16,\n        uint32: uint32,\n        float: float,\n        float32: float32\n    };\n    var dynamic$1 = 35048;\n    var stream = 35040;\n    var usageTypes = {\n        dynamic: dynamic$1,\n        stream: stream,\n        \"static\": 35044\n    };\n    var arrayFlatten = flattenUtils.flatten;\n    var arrayShape = flattenUtils.shape;\n    var GL_STATIC_DRAW = 0x88E4;\n    var GL_STREAM_DRAW = 0x88E0;\n    var GL_UNSIGNED_BYTE$3 = 5121;\n    var GL_FLOAT$3 = 5126;\n    var DTYPES_SIZES = [];\n    DTYPES_SIZES[5120] = 1 // int8\n    ;\n    DTYPES_SIZES[5122] = 2 // int16\n    ;\n    DTYPES_SIZES[5124] = 4 // int32\n    ;\n    DTYPES_SIZES[5121] = 1 // uint8\n    ;\n    DTYPES_SIZES[5123] = 2 // uint16\n    ;\n    DTYPES_SIZES[5125] = 4 // uint32\n    ;\n    DTYPES_SIZES[5126] = 4 // float32\n    ;\n    function typedArrayCode(data) {\n        return arrayTypes[Object.prototype.toString.call(data)] | 0;\n    }\n    function copyArray(out, inp) {\n        for(var i = 0; i < inp.length; ++i)out[i] = inp[i];\n    }\n    function transpose(result, data, shapeX, shapeY, strideX, strideY, offset) {\n        var ptr = 0;\n        for(var i = 0; i < shapeX; ++i)for(var j = 0; j < shapeY; ++j)result[ptr++] = data[strideX * i + strideY * j + offset];\n    }\n    function wrapBufferState(gl, stats, config, destroyBuffer) {\n        var bufferCount = 0;\n        var bufferSet = {};\n        function REGLBuffer(type) {\n            this.id = bufferCount++;\n            this.buffer = gl.createBuffer();\n            this.type = type;\n            this.usage = GL_STATIC_DRAW;\n            this.byteLength = 0;\n            this.dimension = 1;\n            this.dtype = GL_UNSIGNED_BYTE$3;\n            this.persistentData = null;\n            if (config.profile) this.stats = {\n                size: 0\n            };\n        }\n        REGLBuffer.prototype.bind = function() {\n            gl.bindBuffer(this.type, this.buffer);\n        };\n        REGLBuffer.prototype.destroy = function() {\n            destroy(this);\n        };\n        var streamPool = [];\n        function createStream(type, data) {\n            var buffer = streamPool.pop();\n            if (!buffer) buffer = new REGLBuffer(type);\n            buffer.bind();\n            initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);\n            return buffer;\n        }\n        function destroyStream(stream$$1) {\n            streamPool.push(stream$$1);\n        }\n        function initBufferFromTypedArray(buffer, data, usage) {\n            buffer.byteLength = data.byteLength;\n            gl.bufferData(buffer.type, data, usage);\n        }\n        function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {\n            var shape;\n            buffer.usage = usage;\n            if (Array.isArray(data)) {\n                buffer.dtype = dtype || GL_FLOAT$3;\n                if (data.length > 0) {\n                    var flatData;\n                    if (Array.isArray(data[0])) {\n                        shape = arrayShape(data);\n                        var dim = 1;\n                        for(var i = 1; i < shape.length; ++i)dim *= shape[i];\n                        buffer.dimension = dim;\n                        flatData = arrayFlatten(data, shape, buffer.dtype);\n                        initBufferFromTypedArray(buffer, flatData, usage);\n                        if (persist) buffer.persistentData = flatData;\n                        else pool.freeType(flatData);\n                    } else if (typeof data[0] === \"number\") {\n                        buffer.dimension = dimension;\n                        var typedData = pool.allocType(buffer.dtype, data.length);\n                        copyArray(typedData, data);\n                        initBufferFromTypedArray(buffer, typedData, usage);\n                        if (persist) buffer.persistentData = typedData;\n                        else pool.freeType(typedData);\n                    } else if (isTypedArray(data[0])) {\n                        buffer.dimension = data[0].length;\n                        buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;\n                        flatData = arrayFlatten(data, [\n                            data.length,\n                            data[0].length\n                        ], buffer.dtype);\n                        initBufferFromTypedArray(buffer, flatData, usage);\n                        if (persist) buffer.persistentData = flatData;\n                        else pool.freeType(flatData);\n                    } else check$1.raise(\"invalid buffer data\");\n                }\n            } else if (isTypedArray(data)) {\n                buffer.dtype = dtype || typedArrayCode(data);\n                buffer.dimension = dimension;\n                initBufferFromTypedArray(buffer, data, usage);\n                if (persist) buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));\n            } else if (isNDArrayLike(data)) {\n                shape = data.shape;\n                var stride = data.stride;\n                var offset = data.offset;\n                var shapeX = 0;\n                var shapeY = 0;\n                var strideX = 0;\n                var strideY = 0;\n                if (shape.length === 1) {\n                    shapeX = shape[0];\n                    shapeY = 1;\n                    strideX = stride[0];\n                    strideY = 0;\n                } else if (shape.length === 2) {\n                    shapeX = shape[0];\n                    shapeY = shape[1];\n                    strideX = stride[0];\n                    strideY = stride[1];\n                } else check$1.raise(\"invalid shape\");\n                buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;\n                buffer.dimension = shapeY;\n                var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);\n                transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, offset);\n                initBufferFromTypedArray(buffer, transposeData, usage);\n                if (persist) buffer.persistentData = transposeData;\n                else pool.freeType(transposeData);\n            } else if (data instanceof ArrayBuffer) {\n                buffer.dtype = GL_UNSIGNED_BYTE$3;\n                buffer.dimension = dimension;\n                initBufferFromTypedArray(buffer, data, usage);\n                if (persist) buffer.persistentData = new Uint8Array(new Uint8Array(data));\n            } else check$1.raise(\"invalid buffer data\");\n        }\n        function destroy(buffer) {\n            stats.bufferCount--;\n            // remove attribute link\n            destroyBuffer(buffer);\n            var handle = buffer.buffer;\n            check$1(handle, \"buffer must not be deleted already\");\n            gl.deleteBuffer(handle);\n            buffer.buffer = null;\n            delete bufferSet[buffer.id];\n        }\n        function createBuffer(options, type, deferInit, persistent) {\n            stats.bufferCount++;\n            var buffer = new REGLBuffer(type);\n            bufferSet[buffer.id] = buffer;\n            function reglBuffer(options) {\n                var usage = GL_STATIC_DRAW;\n                var data = null;\n                var byteLength = 0;\n                var dtype = 0;\n                var dimension = 1;\n                if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options) || options instanceof ArrayBuffer) data = options;\n                else if (typeof options === \"number\") byteLength = options | 0;\n                else if (options) {\n                    check$1.type(options, \"object\", \"buffer arguments must be an object, a number or an array\");\n                    if (\"data\" in options) {\n                        check$1(data === null || Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), \"invalid data for buffer\");\n                        data = options.data;\n                    }\n                    if (\"usage\" in options) {\n                        check$1.parameter(options.usage, usageTypes, \"invalid buffer usage\");\n                        usage = usageTypes[options.usage];\n                    }\n                    if (\"type\" in options) {\n                        check$1.parameter(options.type, glTypes, \"invalid buffer type\");\n                        dtype = glTypes[options.type];\n                    }\n                    if (\"dimension\" in options) {\n                        check$1.type(options.dimension, \"number\", \"invalid dimension\");\n                        dimension = options.dimension | 0;\n                    }\n                    if (\"length\" in options) {\n                        check$1.nni(byteLength, \"buffer length must be a nonnegative integer\");\n                        byteLength = options.length | 0;\n                    }\n                }\n                buffer.bind();\n                if (!data) {\n                    // #475\n                    if (byteLength) gl.bufferData(buffer.type, byteLength, usage);\n                    buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;\n                    buffer.usage = usage;\n                    buffer.dimension = dimension;\n                    buffer.byteLength = byteLength;\n                } else initBufferFromData(buffer, data, usage, dtype, dimension, persistent);\n                if (config.profile) buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];\n                return reglBuffer;\n            }\n            function setSubData(data, offset) {\n                check$1(offset + data.byteLength <= buffer.byteLength, \"invalid buffer subdata call, buffer is too small.  Can't write data of size \" + data.byteLength + \" starting from offset \" + offset + \" to a buffer of size \" + buffer.byteLength);\n                gl.bufferSubData(buffer.type, offset, data);\n            }\n            function subdata(data, offset_) {\n                var offset = (offset_ || 0) | 0;\n                var shape;\n                buffer.bind();\n                if (isTypedArray(data) || data instanceof ArrayBuffer) setSubData(data, offset);\n                else if (Array.isArray(data)) {\n                    if (data.length > 0) {\n                        if (typeof data[0] === \"number\") {\n                            var converted = pool.allocType(buffer.dtype, data.length);\n                            copyArray(converted, data);\n                            setSubData(converted, offset);\n                            pool.freeType(converted);\n                        } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n                            shape = arrayShape(data);\n                            var flatData = arrayFlatten(data, shape, buffer.dtype);\n                            setSubData(flatData, offset);\n                            pool.freeType(flatData);\n                        } else check$1.raise(\"invalid buffer data\");\n                    }\n                } else if (isNDArrayLike(data)) {\n                    shape = data.shape;\n                    var stride = data.stride;\n                    var shapeX = 0;\n                    var shapeY = 0;\n                    var strideX = 0;\n                    var strideY = 0;\n                    if (shape.length === 1) {\n                        shapeX = shape[0];\n                        shapeY = 1;\n                        strideX = stride[0];\n                        strideY = 0;\n                    } else if (shape.length === 2) {\n                        shapeX = shape[0];\n                        shapeY = shape[1];\n                        strideX = stride[0];\n                        strideY = stride[1];\n                    } else check$1.raise(\"invalid shape\");\n                    var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);\n                    var transposeData = pool.allocType(dtype, shapeX * shapeY);\n                    transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, data.offset);\n                    setSubData(transposeData, offset);\n                    pool.freeType(transposeData);\n                } else check$1.raise(\"invalid data for buffer subdata\");\n                return reglBuffer;\n            }\n            if (!deferInit) reglBuffer(options);\n            reglBuffer._reglType = \"buffer\";\n            reglBuffer._buffer = buffer;\n            reglBuffer.subdata = subdata;\n            if (config.profile) reglBuffer.stats = buffer.stats;\n            reglBuffer.destroy = function() {\n                destroy(buffer);\n            };\n            return reglBuffer;\n        }\n        function restoreBuffers() {\n            values(bufferSet).forEach(function(buffer) {\n                buffer.buffer = gl.createBuffer();\n                gl.bindBuffer(buffer.type, buffer.buffer);\n                gl.bufferData(buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);\n            });\n        }\n        if (config.profile) stats.getTotalBufferSize = function() {\n            var total = 0;\n            // TODO: Right now, the streams are not part of the total count.\n            Object.keys(bufferSet).forEach(function(key) {\n                total += bufferSet[key].stats.size;\n            });\n            return total;\n        };\n        return {\n            create: createBuffer,\n            createStream: createStream,\n            destroyStream: destroyStream,\n            clear: function() {\n                values(bufferSet).forEach(destroy);\n                streamPool.forEach(destroy);\n            },\n            getBuffer: function(wrapper) {\n                if (wrapper && wrapper._buffer instanceof REGLBuffer) return wrapper._buffer;\n                return null;\n            },\n            restore: restoreBuffers,\n            _initBuffer: initBufferFromData\n        };\n    }\n    var points = 0;\n    var point = 0;\n    var lines = 1;\n    var line = 1;\n    var triangles = 4;\n    var triangle = 4;\n    var primTypes = {\n        points: points,\n        point: point,\n        lines: lines,\n        line: line,\n        triangles: triangles,\n        triangle: triangle,\n        \"line loop\": 2,\n        \"line strip\": 3,\n        \"triangle strip\": 5,\n        \"triangle fan\": 6\n    };\n    var GL_POINTS = 0;\n    var GL_LINES = 1;\n    var GL_TRIANGLES = 4;\n    var GL_BYTE$2 = 5120;\n    var GL_UNSIGNED_BYTE$4 = 5121;\n    var GL_SHORT$2 = 5122;\n    var GL_UNSIGNED_SHORT$2 = 5123;\n    var GL_INT$2 = 5124;\n    var GL_UNSIGNED_INT$2 = 5125;\n    var GL_ELEMENT_ARRAY_BUFFER = 34963;\n    var GL_STREAM_DRAW$1 = 0x88E0;\n    var GL_STATIC_DRAW$1 = 0x88E4;\n    function wrapElementsState(gl, extensions, bufferState, stats) {\n        var elementSet = {};\n        var elementCount = 0;\n        var elementTypes = {\n            \"uint8\": GL_UNSIGNED_BYTE$4,\n            \"uint16\": GL_UNSIGNED_SHORT$2\n        };\n        if (extensions.oes_element_index_uint) elementTypes.uint32 = GL_UNSIGNED_INT$2;\n        function REGLElementBuffer(buffer) {\n            this.id = elementCount++;\n            elementSet[this.id] = this;\n            this.buffer = buffer;\n            this.primType = GL_TRIANGLES;\n            this.vertCount = 0;\n            this.type = 0;\n        }\n        REGLElementBuffer.prototype.bind = function() {\n            this.buffer.bind();\n        };\n        var bufferPool = [];\n        function createElementStream(data) {\n            var result = bufferPool.pop();\n            if (!result) result = new REGLElementBuffer(bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true, false)._buffer);\n            initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);\n            return result;\n        }\n        function destroyElementStream(elements) {\n            bufferPool.push(elements);\n        }\n        function initElements(elements, data, usage, prim, count, byteLength, type) {\n            elements.buffer.bind();\n            var dtype;\n            if (data) {\n                var predictedType = type;\n                if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$2 : GL_UNSIGNED_SHORT$2;\n                bufferState._initBuffer(elements.buffer, data, usage, predictedType, 3);\n            } else {\n                gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);\n                elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;\n                elements.buffer.usage = usage;\n                elements.buffer.dimension = 3;\n                elements.buffer.byteLength = byteLength;\n            }\n            dtype = type;\n            if (!type) {\n                switch(elements.buffer.dtype){\n                    case GL_UNSIGNED_BYTE$4:\n                    case GL_BYTE$2:\n                        dtype = GL_UNSIGNED_BYTE$4;\n                        break;\n                    case GL_UNSIGNED_SHORT$2:\n                    case GL_SHORT$2:\n                        dtype = GL_UNSIGNED_SHORT$2;\n                        break;\n                    case GL_UNSIGNED_INT$2:\n                    case GL_INT$2:\n                        dtype = GL_UNSIGNED_INT$2;\n                        break;\n                    default:\n                        check$1.raise(\"unsupported type for element array\");\n                }\n                elements.buffer.dtype = dtype;\n            }\n            elements.type = dtype;\n            // Check oes_element_index_uint extension\n            check$1(dtype !== GL_UNSIGNED_INT$2 || !!extensions.oes_element_index_uint, \"32 bit element buffers not supported, enable oes_element_index_uint first\");\n            // try to guess default primitive type and arguments\n            var vertCount = count;\n            if (vertCount < 0) {\n                vertCount = elements.buffer.byteLength;\n                if (dtype === GL_UNSIGNED_SHORT$2) vertCount >>= 1;\n                else if (dtype === GL_UNSIGNED_INT$2) vertCount >>= 2;\n            }\n            elements.vertCount = vertCount;\n            // try to guess primitive type from cell dimension\n            var primType = prim;\n            if (prim < 0) {\n                primType = GL_TRIANGLES;\n                var dimension = elements.buffer.dimension;\n                if (dimension === 1) primType = GL_POINTS;\n                if (dimension === 2) primType = GL_LINES;\n                if (dimension === 3) primType = GL_TRIANGLES;\n            }\n            elements.primType = primType;\n        }\n        function destroyElements(elements) {\n            stats.elementsCount--;\n            check$1(elements.buffer !== null, \"must not double destroy elements\");\n            delete elementSet[elements.id];\n            elements.buffer.destroy();\n            elements.buffer = null;\n        }\n        function createElements(options, persistent) {\n            var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);\n            var elements = new REGLElementBuffer(buffer._buffer);\n            stats.elementsCount++;\n            function reglElements(options) {\n                if (!options) {\n                    buffer();\n                    elements.primType = GL_TRIANGLES;\n                    elements.vertCount = 0;\n                    elements.type = GL_UNSIGNED_BYTE$4;\n                } else if (typeof options === \"number\") {\n                    buffer(options);\n                    elements.primType = GL_TRIANGLES;\n                    elements.vertCount = options | 0;\n                    elements.type = GL_UNSIGNED_BYTE$4;\n                } else {\n                    var data = null;\n                    var usage = GL_STATIC_DRAW$1;\n                    var primType = -1;\n                    var vertCount = -1;\n                    var byteLength = 0;\n                    var dtype = 0;\n                    if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) data = options;\n                    else {\n                        check$1.type(options, \"object\", \"invalid arguments for elements\");\n                        if (\"data\" in options) {\n                            data = options.data;\n                            check$1(Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), \"invalid data for element buffer\");\n                        }\n                        if (\"usage\" in options) {\n                            check$1.parameter(options.usage, usageTypes, \"invalid element buffer usage\");\n                            usage = usageTypes[options.usage];\n                        }\n                        if (\"primitive\" in options) {\n                            check$1.parameter(options.primitive, primTypes, \"invalid element buffer primitive\");\n                            primType = primTypes[options.primitive];\n                        }\n                        if (\"count\" in options) {\n                            check$1(typeof options.count === \"number\" && options.count >= 0, \"invalid vertex count for elements\");\n                            vertCount = options.count | 0;\n                        }\n                        if (\"type\" in options) {\n                            check$1.parameter(options.type, elementTypes, \"invalid buffer type\");\n                            dtype = elementTypes[options.type];\n                        }\n                        if (\"length\" in options) byteLength = options.length | 0;\n                        else {\n                            byteLength = vertCount;\n                            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) byteLength *= 2;\n                            else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) byteLength *= 4;\n                        }\n                    }\n                    initElements(elements, data, usage, primType, vertCount, byteLength, dtype);\n                }\n                return reglElements;\n            }\n            reglElements(options);\n            reglElements._reglType = \"elements\";\n            reglElements._elements = elements;\n            reglElements.subdata = function(data, offset) {\n                buffer.subdata(data, offset);\n                return reglElements;\n            };\n            reglElements.destroy = function() {\n                destroyElements(elements);\n            };\n            return reglElements;\n        }\n        return {\n            create: createElements,\n            createStream: createElementStream,\n            destroyStream: destroyElementStream,\n            getElements: function(elements) {\n                if (typeof elements === \"function\" && elements._elements instanceof REGLElementBuffer) return elements._elements;\n                return null;\n            },\n            clear: function() {\n                values(elementSet).forEach(destroyElements);\n            }\n        };\n    }\n    var FLOAT = new Float32Array(1);\n    var INT = new Uint32Array(FLOAT.buffer);\n    var GL_UNSIGNED_SHORT$4 = 5123;\n    function convertToHalfFloat(array) {\n        var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);\n        for(var i = 0; i < array.length; ++i){\n            if (isNaN(array[i])) ushorts[i] = 0xffff;\n            else if (array[i] === Infinity) ushorts[i] = 0x7c00;\n            else if (array[i] === -Infinity) ushorts[i] = 0xfc00;\n            else {\n                FLOAT[0] = array[i];\n                var x = INT[0];\n                var sgn = x >>> 31 << 15;\n                var exp = (x << 1 >>> 24) - 127;\n                var frac = x >> 13 & 1023;\n                if (exp < -24) // round non-representable denormals to 0\n                ushorts[i] = sgn;\n                else if (exp < -14) {\n                    // handle denormals\n                    var s = -14 - exp;\n                    ushorts[i] = sgn + (frac + 1024 >> s);\n                } else if (exp > 15) // round overflow to +/- Infinity\n                ushorts[i] = sgn + 0x7c00;\n                else // otherwise convert directly\n                ushorts[i] = sgn + (exp + 15 << 10) + frac;\n            }\n        }\n        return ushorts;\n    }\n    function isArrayLike(s) {\n        return Array.isArray(s) || isTypedArray(s);\n    }\n    var isPow2$1 = function(v) {\n        return !(v & v - 1) && !!v;\n    };\n    var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;\n    var GL_TEXTURE_2D$1 = 0x0DE1;\n    var GL_TEXTURE_CUBE_MAP$1 = 0x8513;\n    var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;\n    var GL_RGBA$1 = 0x1908;\n    var GL_ALPHA = 0x1906;\n    var GL_RGB = 0x1907;\n    var GL_LUMINANCE = 0x1909;\n    var GL_LUMINANCE_ALPHA = 0x190A;\n    var GL_RGBA4 = 0x8056;\n    var GL_RGB5_A1 = 0x8057;\n    var GL_RGB565 = 0x8D62;\n    var GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;\n    var GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;\n    var GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;\n    var GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;\n    var GL_DEPTH_COMPONENT = 0x1902;\n    var GL_DEPTH_STENCIL = 0x84F9;\n    var GL_SRGB_EXT = 0x8C40;\n    var GL_SRGB_ALPHA_EXT = 0x8C42;\n    var GL_HALF_FLOAT_OES$1 = 0x8D61;\n    var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\n    var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\n    var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\n    var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n    var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\n    var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\n    var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\n    var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\n    var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\n    var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\n    var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\n    var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\n    var GL_UNSIGNED_BYTE$5 = 0x1401;\n    var GL_UNSIGNED_SHORT$3 = 0x1403;\n    var GL_UNSIGNED_INT$3 = 0x1405;\n    var GL_FLOAT$4 = 0x1406;\n    var GL_TEXTURE_WRAP_S = 0x2802;\n    var GL_TEXTURE_WRAP_T = 0x2803;\n    var GL_REPEAT = 0x2901;\n    var GL_CLAMP_TO_EDGE$1 = 0x812F;\n    var GL_MIRRORED_REPEAT = 0x8370;\n    var GL_TEXTURE_MAG_FILTER = 0x2800;\n    var GL_TEXTURE_MIN_FILTER = 0x2801;\n    var GL_NEAREST$1 = 0x2600;\n    var GL_LINEAR = 0x2601;\n    var GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;\n    var GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;\n    var GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;\n    var GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;\n    var GL_GENERATE_MIPMAP_HINT = 0x8192;\n    var GL_DONT_CARE = 0x1100;\n    var GL_FASTEST = 0x1101;\n    var GL_NICEST = 0x1102;\n    var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;\n    var GL_UNPACK_ALIGNMENT = 0x0CF5;\n    var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;\n    var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\n    var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\n    var GL_BROWSER_DEFAULT_WEBGL = 0x9244;\n    var GL_TEXTURE0$1 = 0x84C0;\n    var MIPMAP_FILTERS = [\n        GL_NEAREST_MIPMAP_NEAREST$1,\n        GL_NEAREST_MIPMAP_LINEAR$1,\n        GL_LINEAR_MIPMAP_NEAREST$1,\n        GL_LINEAR_MIPMAP_LINEAR$1\n    ];\n    var CHANNELS_FORMAT = [\n        0,\n        GL_LUMINANCE,\n        GL_LUMINANCE_ALPHA,\n        GL_RGB,\n        GL_RGBA$1\n    ];\n    var FORMAT_CHANNELS = {};\n    FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;\n    FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;\n    FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;\n    FORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;\n    function objectName(str) {\n        return \"[object \" + str + \"]\";\n    }\n    var CANVAS_CLASS = objectName(\"HTMLCanvasElement\");\n    var OFFSCREENCANVAS_CLASS = objectName(\"OffscreenCanvas\");\n    var CONTEXT2D_CLASS = objectName(\"CanvasRenderingContext2D\");\n    var BITMAP_CLASS = objectName(\"ImageBitmap\");\n    var IMAGE_CLASS = objectName(\"HTMLImageElement\");\n    var VIDEO_CLASS = objectName(\"HTMLVideoElement\");\n    var PIXEL_CLASSES = Object.keys(arrayTypes).concat([\n        CANVAS_CLASS,\n        OFFSCREENCANVAS_CLASS,\n        CONTEXT2D_CLASS,\n        BITMAP_CLASS,\n        IMAGE_CLASS,\n        VIDEO_CLASS\n    ]);\n    // for every texture type, store\n    // the size in bytes.\n    var TYPE_SIZES = [];\n    TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;\n    TYPE_SIZES[GL_FLOAT$4] = 4;\n    TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;\n    TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;\n    TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;\n    var FORMAT_SIZES_SPECIAL = [];\n    FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;\n    FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;\n    FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;\n    FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;\n    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;\n    function isNumericArray(arr) {\n        return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === \"number\");\n    }\n    function isRectArray(arr) {\n        if (!Array.isArray(arr)) return false;\n        var width = arr.length;\n        if (width === 0 || !isArrayLike(arr[0])) return false;\n        return true;\n    }\n    function classString(x) {\n        return Object.prototype.toString.call(x);\n    }\n    function isCanvasElement(object) {\n        return classString(object) === CANVAS_CLASS;\n    }\n    function isOffscreenCanvas(object) {\n        return classString(object) === OFFSCREENCANVAS_CLASS;\n    }\n    function isContext2D(object) {\n        return classString(object) === CONTEXT2D_CLASS;\n    }\n    function isBitmap(object) {\n        return classString(object) === BITMAP_CLASS;\n    }\n    function isImageElement(object) {\n        return classString(object) === IMAGE_CLASS;\n    }\n    function isVideoElement(object) {\n        return classString(object) === VIDEO_CLASS;\n    }\n    function isPixelData(object) {\n        if (!object) return false;\n        var className = classString(object);\n        if (PIXEL_CLASSES.indexOf(className) >= 0) return true;\n        return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);\n    }\n    function typedArrayCode$1(data) {\n        return arrayTypes[Object.prototype.toString.call(data)] | 0;\n    }\n    function convertData(result, data) {\n        var n = data.length;\n        switch(result.type){\n            case GL_UNSIGNED_BYTE$5:\n            case GL_UNSIGNED_SHORT$3:\n            case GL_UNSIGNED_INT$3:\n            case GL_FLOAT$4:\n                var converted = pool.allocType(result.type, n);\n                converted.set(data);\n                result.data = converted;\n                break;\n            case GL_HALF_FLOAT_OES$1:\n                result.data = convertToHalfFloat(data);\n                break;\n            default:\n                check$1.raise(\"unsupported texture type, must specify a typed array\");\n        }\n    }\n    function preConvert(image, n) {\n        return pool.allocType(image.type === GL_HALF_FLOAT_OES$1 ? GL_FLOAT$4 : image.type, n);\n    }\n    function postConvert(image, data) {\n        if (image.type === GL_HALF_FLOAT_OES$1) {\n            image.data = convertToHalfFloat(data);\n            pool.freeType(data);\n        } else image.data = data;\n    }\n    function transposeData(image, array, strideX, strideY, strideC, offset) {\n        var w = image.width;\n        var h = image.height;\n        var c = image.channels;\n        var n = w * h * c;\n        var data = preConvert(image, n);\n        var p = 0;\n        for(var i = 0; i < h; ++i){\n            for(var j = 0; j < w; ++j)for(var k = 0; k < c; ++k)data[p++] = array[strideX * j + strideY * i + strideC * k + offset];\n        }\n        postConvert(image, data);\n    }\n    function getTextureSize(format, type, width, height, isMipmap, isCube) {\n        var s;\n        if (typeof FORMAT_SIZES_SPECIAL[format] !== \"undefined\") // we have a special array for dealing with weird color formats such as RGB5A1\n        s = FORMAT_SIZES_SPECIAL[format];\n        else s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];\n        if (isCube) s *= 6;\n        if (isMipmap) {\n            // compute the total size of all the mipmaps.\n            var total = 0;\n            var w = width;\n            while(w >= 1){\n                // we can only use mipmaps on a square image,\n                // so we can simply use the width and ignore the height:\n                total += s * w * w;\n                w /= 2;\n            }\n            return total;\n        } else return s * width * height;\n    }\n    function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats, config) {\n        // -------------------------------------------------------\n        // Initialize constants and parameter tables here\n        // -------------------------------------------------------\n        var mipmapHint = {\n            \"don't care\": GL_DONT_CARE,\n            \"dont care\": GL_DONT_CARE,\n            \"nice\": GL_NICEST,\n            \"fast\": GL_FASTEST\n        };\n        var wrapModes = {\n            \"repeat\": GL_REPEAT,\n            \"clamp\": GL_CLAMP_TO_EDGE$1,\n            \"mirror\": GL_MIRRORED_REPEAT\n        };\n        var magFilters = {\n            \"nearest\": GL_NEAREST$1,\n            \"linear\": GL_LINEAR\n        };\n        var minFilters = extend({\n            \"mipmap\": GL_LINEAR_MIPMAP_LINEAR$1,\n            \"nearest mipmap nearest\": GL_NEAREST_MIPMAP_NEAREST$1,\n            \"linear mipmap nearest\": GL_LINEAR_MIPMAP_NEAREST$1,\n            \"nearest mipmap linear\": GL_NEAREST_MIPMAP_LINEAR$1,\n            \"linear mipmap linear\": GL_LINEAR_MIPMAP_LINEAR$1\n        }, magFilters);\n        var colorSpace = {\n            \"none\": 0,\n            \"browser\": GL_BROWSER_DEFAULT_WEBGL\n        };\n        var textureTypes = {\n            \"uint8\": GL_UNSIGNED_BYTE$5,\n            \"rgba4\": GL_UNSIGNED_SHORT_4_4_4_4$1,\n            \"rgb565\": GL_UNSIGNED_SHORT_5_6_5$1,\n            \"rgb5 a1\": GL_UNSIGNED_SHORT_5_5_5_1$1\n        };\n        var textureFormats = {\n            \"alpha\": GL_ALPHA,\n            \"luminance\": GL_LUMINANCE,\n            \"luminance alpha\": GL_LUMINANCE_ALPHA,\n            \"rgb\": GL_RGB,\n            \"rgba\": GL_RGBA$1,\n            \"rgba4\": GL_RGBA4,\n            \"rgb5 a1\": GL_RGB5_A1,\n            \"rgb565\": GL_RGB565\n        };\n        var compressedTextureFormats = {};\n        if (extensions.ext_srgb) {\n            textureFormats.srgb = GL_SRGB_EXT;\n            textureFormats.srgba = GL_SRGB_ALPHA_EXT;\n        }\n        if (extensions.oes_texture_float) textureTypes.float32 = textureTypes.float = GL_FLOAT$4;\n        if (extensions.oes_texture_half_float) textureTypes[\"float16\"] = textureTypes[\"half float\"] = GL_HALF_FLOAT_OES$1;\n        if (extensions.webgl_depth_texture) {\n            extend(textureFormats, {\n                \"depth\": GL_DEPTH_COMPONENT,\n                \"depth stencil\": GL_DEPTH_STENCIL\n            });\n            extend(textureTypes, {\n                \"uint16\": GL_UNSIGNED_SHORT$3,\n                \"uint32\": GL_UNSIGNED_INT$3,\n                \"depth stencil\": GL_UNSIGNED_INT_24_8_WEBGL$1\n            });\n        }\n        if (extensions.webgl_compressed_texture_s3tc) extend(compressedTextureFormats, {\n            \"rgb s3tc dxt1\": GL_COMPRESSED_RGB_S3TC_DXT1_EXT,\n            \"rgba s3tc dxt1\": GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,\n            \"rgba s3tc dxt3\": GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,\n            \"rgba s3tc dxt5\": GL_COMPRESSED_RGBA_S3TC_DXT5_EXT\n        });\n        if (extensions.webgl_compressed_texture_atc) extend(compressedTextureFormats, {\n            \"rgb atc\": GL_COMPRESSED_RGB_ATC_WEBGL,\n            \"rgba atc explicit alpha\": GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n            \"rgba atc interpolated alpha\": GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n        });\n        if (extensions.webgl_compressed_texture_pvrtc) extend(compressedTextureFormats, {\n            \"rgb pvrtc 4bppv1\": GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n            \"rgb pvrtc 2bppv1\": GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n            \"rgba pvrtc 4bppv1\": GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n            \"rgba pvrtc 2bppv1\": GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\n        });\n        if (extensions.webgl_compressed_texture_etc1) compressedTextureFormats[\"rgb etc1\"] = GL_COMPRESSED_RGB_ETC1_WEBGL;\n        // Copy over all texture formats\n        var supportedCompressedFormats = Array.prototype.slice.call(gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));\n        Object.keys(compressedTextureFormats).forEach(function(name) {\n            var format = compressedTextureFormats[name];\n            if (supportedCompressedFormats.indexOf(format) >= 0) textureFormats[name] = format;\n        });\n        var supportedFormats = Object.keys(textureFormats);\n        limits.textureFormats = supportedFormats;\n        // associate with every format string its\n        // corresponding GL-value.\n        var textureFormatsInvert = [];\n        Object.keys(textureFormats).forEach(function(key) {\n            var val = textureFormats[key];\n            textureFormatsInvert[val] = key;\n        });\n        // associate with every type string its\n        // corresponding GL-value.\n        var textureTypesInvert = [];\n        Object.keys(textureTypes).forEach(function(key) {\n            var val = textureTypes[key];\n            textureTypesInvert[val] = key;\n        });\n        var magFiltersInvert = [];\n        Object.keys(magFilters).forEach(function(key) {\n            var val = magFilters[key];\n            magFiltersInvert[val] = key;\n        });\n        var minFiltersInvert = [];\n        Object.keys(minFilters).forEach(function(key) {\n            var val = minFilters[key];\n            minFiltersInvert[val] = key;\n        });\n        var wrapModesInvert = [];\n        Object.keys(wrapModes).forEach(function(key) {\n            var val = wrapModes[key];\n            wrapModesInvert[val] = key;\n        });\n        // colorFormats[] gives the format (channels) associated to an\n        // internalformat\n        var colorFormats = supportedFormats.reduce(function(color, key) {\n            var glenum = textureFormats[key];\n            if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL || extensions.ext_srgb && (glenum === GL_SRGB_EXT || glenum === GL_SRGB_ALPHA_EXT)) color[glenum] = glenum;\n            else if (glenum === GL_RGB5_A1 || key.indexOf(\"rgba\") >= 0) color[glenum] = GL_RGBA$1;\n            else color[glenum] = GL_RGB;\n            return color;\n        }, {});\n        function TexFlags() {\n            // format info\n            this.internalformat = GL_RGBA$1;\n            this.format = GL_RGBA$1;\n            this.type = GL_UNSIGNED_BYTE$5;\n            this.compressed = false;\n            // pixel storage\n            this.premultiplyAlpha = false;\n            this.flipY = false;\n            this.unpackAlignment = 1;\n            this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;\n            // shape info\n            this.width = 0;\n            this.height = 0;\n            this.channels = 0;\n        }\n        function copyFlags(result, other) {\n            result.internalformat = other.internalformat;\n            result.format = other.format;\n            result.type = other.type;\n            result.compressed = other.compressed;\n            result.premultiplyAlpha = other.premultiplyAlpha;\n            result.flipY = other.flipY;\n            result.unpackAlignment = other.unpackAlignment;\n            result.colorSpace = other.colorSpace;\n            result.width = other.width;\n            result.height = other.height;\n            result.channels = other.channels;\n        }\n        function parseFlags(flags, options) {\n            if (typeof options !== \"object\" || !options) return;\n            if (\"premultiplyAlpha\" in options) {\n                check$1.type(options.premultiplyAlpha, \"boolean\", \"invalid premultiplyAlpha\");\n                flags.premultiplyAlpha = options.premultiplyAlpha;\n            }\n            if (\"flipY\" in options) {\n                check$1.type(options.flipY, \"boolean\", \"invalid texture flip\");\n                flags.flipY = options.flipY;\n            }\n            if (\"alignment\" in options) {\n                check$1.oneOf(options.alignment, [\n                    1,\n                    2,\n                    4,\n                    8\n                ], \"invalid texture unpack alignment\");\n                flags.unpackAlignment = options.alignment;\n            }\n            if (\"colorSpace\" in options) {\n                check$1.parameter(options.colorSpace, colorSpace, \"invalid colorSpace\");\n                flags.colorSpace = colorSpace[options.colorSpace];\n            }\n            if (\"type\" in options) {\n                var type = options.type;\n                check$1(extensions.oes_texture_float || !(type === \"float\" || type === \"float32\"), \"you must enable the OES_texture_float extension in order to use floating point textures.\");\n                check$1(extensions.oes_texture_half_float || !(type === \"half float\" || type === \"float16\"), \"you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.\");\n                check$1(extensions.webgl_depth_texture || !(type === \"uint16\" || type === \"uint32\" || type === \"depth stencil\"), \"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.\");\n                check$1.parameter(type, textureTypes, \"invalid texture type\");\n                flags.type = textureTypes[type];\n            }\n            var w = flags.width;\n            var h = flags.height;\n            var c = flags.channels;\n            var hasChannels = false;\n            if (\"shape\" in options) {\n                check$1(Array.isArray(options.shape) && options.shape.length >= 2, \"shape must be an array\");\n                w = options.shape[0];\n                h = options.shape[1];\n                if (options.shape.length === 3) {\n                    c = options.shape[2];\n                    check$1(c > 0 && c <= 4, \"invalid number of channels\");\n                    hasChannels = true;\n                }\n                check$1(w >= 0 && w <= limits.maxTextureSize, \"invalid width\");\n                check$1(h >= 0 && h <= limits.maxTextureSize, \"invalid height\");\n            } else {\n                if (\"radius\" in options) {\n                    w = h = options.radius;\n                    check$1(w >= 0 && w <= limits.maxTextureSize, \"invalid radius\");\n                }\n                if (\"width\" in options) {\n                    w = options.width;\n                    check$1(w >= 0 && w <= limits.maxTextureSize, \"invalid width\");\n                }\n                if (\"height\" in options) {\n                    h = options.height;\n                    check$1(h >= 0 && h <= limits.maxTextureSize, \"invalid height\");\n                }\n                if (\"channels\" in options) {\n                    c = options.channels;\n                    check$1(c > 0 && c <= 4, \"invalid number of channels\");\n                    hasChannels = true;\n                }\n            }\n            flags.width = w | 0;\n            flags.height = h | 0;\n            flags.channels = c | 0;\n            var hasFormat = false;\n            if (\"format\" in options) {\n                var formatStr = options.format;\n                check$1(extensions.webgl_depth_texture || !(formatStr === \"depth\" || formatStr === \"depth stencil\"), \"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.\");\n                check$1.parameter(formatStr, textureFormats, \"invalid texture format\");\n                var internalformat = flags.internalformat = textureFormats[formatStr];\n                flags.format = colorFormats[internalformat];\n                if (formatStr in textureTypes) {\n                    if (!(\"type\" in options)) flags.type = textureTypes[formatStr];\n                }\n                if (formatStr in compressedTextureFormats) flags.compressed = true;\n                hasFormat = true;\n            }\n            // Reconcile channels and format\n            if (!hasChannels && hasFormat) flags.channels = FORMAT_CHANNELS[flags.format];\n            else if (hasChannels && !hasFormat) {\n                if (flags.channels !== CHANNELS_FORMAT[flags.format]) flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];\n            } else if (hasFormat && hasChannels) check$1(flags.channels === FORMAT_CHANNELS[flags.format], \"number of channels inconsistent with specified format\");\n        }\n        function setFlags(flags) {\n            gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);\n            gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);\n            gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);\n            gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);\n        }\n        // -------------------------------------------------------\n        // Tex image data\n        // -------------------------------------------------------\n        function TexImage() {\n            TexFlags.call(this);\n            this.xOffset = 0;\n            this.yOffset = 0;\n            // data\n            this.data = null;\n            this.needsFree = false;\n            // html element\n            this.element = null;\n            // copyTexImage info\n            this.needsCopy = false;\n        }\n        function parseImage(image, options) {\n            var data = null;\n            if (isPixelData(options)) data = options;\n            else if (options) {\n                check$1.type(options, \"object\", \"invalid pixel data type\");\n                parseFlags(image, options);\n                if (\"x\" in options) image.xOffset = options.x | 0;\n                if (\"y\" in options) image.yOffset = options.y | 0;\n                if (isPixelData(options.data)) data = options.data;\n            }\n            check$1(!image.compressed || data instanceof Uint8Array, \"compressed texture data must be stored in a uint8array\");\n            if (options.copy) {\n                check$1(!data, \"can not specify copy and data field for the same texture\");\n                var viewW = contextState.viewportWidth;\n                var viewH = contextState.viewportHeight;\n                image.width = image.width || viewW - image.xOffset;\n                image.height = image.height || viewH - image.yOffset;\n                image.needsCopy = true;\n                check$1(image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH, \"copy texture read out of bounds\");\n            } else if (!data) {\n                image.width = image.width || 1;\n                image.height = image.height || 1;\n                image.channels = image.channels || 4;\n            } else if (isTypedArray(data)) {\n                image.channels = image.channels || 4;\n                image.data = data;\n                if (!(\"type\" in options) && image.type === GL_UNSIGNED_BYTE$5) image.type = typedArrayCode$1(data);\n            } else if (isNumericArray(data)) {\n                image.channels = image.channels || 4;\n                convertData(image, data);\n                image.alignment = 1;\n                image.needsFree = true;\n            } else if (isNDArrayLike(data)) {\n                var array = data.data;\n                if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) image.type = typedArrayCode$1(array);\n                var shape = data.shape;\n                var stride = data.stride;\n                var shapeX, shapeY, shapeC, strideX, strideY, strideC;\n                if (shape.length === 3) {\n                    shapeC = shape[2];\n                    strideC = stride[2];\n                } else {\n                    check$1(shape.length === 2, \"invalid ndarray pixel data, must be 2 or 3D\");\n                    shapeC = 1;\n                    strideC = 1;\n                }\n                shapeX = shape[0];\n                shapeY = shape[1];\n                strideX = stride[0];\n                strideY = stride[1];\n                image.alignment = 1;\n                image.width = shapeX;\n                image.height = shapeY;\n                image.channels = shapeC;\n                image.format = image.internalformat = CHANNELS_FORMAT[shapeC];\n                image.needsFree = true;\n                transposeData(image, array, strideX, strideY, strideC, data.offset);\n            } else if (isCanvasElement(data) || isOffscreenCanvas(data) || isContext2D(data)) {\n                if (isCanvasElement(data) || isOffscreenCanvas(data)) image.element = data;\n                else image.element = data.canvas;\n                image.width = image.element.width;\n                image.height = image.element.height;\n                image.channels = 4;\n            } else if (isBitmap(data)) {\n                image.element = data;\n                image.width = data.width;\n                image.height = data.height;\n                image.channels = 4;\n            } else if (isImageElement(data)) {\n                image.element = data;\n                image.width = data.naturalWidth;\n                image.height = data.naturalHeight;\n                image.channels = 4;\n            } else if (isVideoElement(data)) {\n                image.element = data;\n                image.width = data.videoWidth;\n                image.height = data.videoHeight;\n                image.channels = 4;\n            } else if (isRectArray(data)) {\n                var w = image.width || data[0].length;\n                var h = image.height || data.length;\n                var c = image.channels;\n                if (isArrayLike(data[0][0])) c = c || data[0][0].length;\n                else c = c || 1;\n                var arrayShape = flattenUtils.shape(data);\n                var n = 1;\n                for(var dd = 0; dd < arrayShape.length; ++dd)n *= arrayShape[dd];\n                var allocData = preConvert(image, n);\n                flattenUtils.flatten(data, arrayShape, \"\", allocData);\n                postConvert(image, allocData);\n                image.alignment = 1;\n                image.width = w;\n                image.height = h;\n                image.channels = c;\n                image.format = image.internalformat = CHANNELS_FORMAT[c];\n                image.needsFree = true;\n            }\n            if (image.type === GL_FLOAT$4) check$1(limits.extensions.indexOf(\"oes_texture_float\") >= 0, \"oes_texture_float extension not enabled\");\n            else if (image.type === GL_HALF_FLOAT_OES$1) check$1(limits.extensions.indexOf(\"oes_texture_half_float\") >= 0, \"oes_texture_half_float extension not enabled\");\n        // do compressed texture  validation here.\n        }\n        function setImage(info, target, miplevel) {\n            var element = info.element;\n            var data = info.data;\n            var internalformat = info.internalformat;\n            var format = info.format;\n            var type = info.type;\n            var width = info.width;\n            var height = info.height;\n            setFlags(info);\n            if (element) gl.texImage2D(target, miplevel, format, format, type, element);\n            else if (info.compressed) gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);\n            else if (info.needsCopy) {\n                reglPoll();\n                gl.copyTexImage2D(target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);\n            } else gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data || null);\n        }\n        function setSubImage(info, target, x, y, miplevel) {\n            var element = info.element;\n            var data = info.data;\n            var internalformat = info.internalformat;\n            var format = info.format;\n            var type = info.type;\n            var width = info.width;\n            var height = info.height;\n            setFlags(info);\n            if (element) gl.texSubImage2D(target, miplevel, x, y, format, type, element);\n            else if (info.compressed) gl.compressedTexSubImage2D(target, miplevel, x, y, internalformat, width, height, data);\n            else if (info.needsCopy) {\n                reglPoll();\n                gl.copyTexSubImage2D(target, miplevel, x, y, info.xOffset, info.yOffset, width, height);\n            } else gl.texSubImage2D(target, miplevel, x, y, width, height, format, type, data);\n        }\n        // texImage pool\n        var imagePool = [];\n        function allocImage() {\n            return imagePool.pop() || new TexImage();\n        }\n        function freeImage(image) {\n            if (image.needsFree) pool.freeType(image.data);\n            TexImage.call(image);\n            imagePool.push(image);\n        }\n        // -------------------------------------------------------\n        // Mip map\n        // -------------------------------------------------------\n        function MipMap() {\n            TexFlags.call(this);\n            this.genMipmaps = false;\n            this.mipmapHint = GL_DONT_CARE;\n            this.mipmask = 0;\n            this.images = Array(16);\n        }\n        function parseMipMapFromShape(mipmap, width, height) {\n            var img = mipmap.images[0] = allocImage();\n            mipmap.mipmask = 1;\n            img.width = mipmap.width = width;\n            img.height = mipmap.height = height;\n            img.channels = mipmap.channels = 4;\n        }\n        function parseMipMapFromObject(mipmap, options) {\n            var imgData = null;\n            if (isPixelData(options)) {\n                imgData = mipmap.images[0] = allocImage();\n                copyFlags(imgData, mipmap);\n                parseImage(imgData, options);\n                mipmap.mipmask = 1;\n            } else {\n                parseFlags(mipmap, options);\n                if (Array.isArray(options.mipmap)) {\n                    var mipData = options.mipmap;\n                    for(var i = 0; i < mipData.length; ++i){\n                        imgData = mipmap.images[i] = allocImage();\n                        copyFlags(imgData, mipmap);\n                        imgData.width >>= i;\n                        imgData.height >>= i;\n                        parseImage(imgData, mipData[i]);\n                        mipmap.mipmask |= 1 << i;\n                    }\n                } else {\n                    imgData = mipmap.images[0] = allocImage();\n                    copyFlags(imgData, mipmap);\n                    parseImage(imgData, options);\n                    mipmap.mipmask = 1;\n                }\n            }\n            copyFlags(mipmap, mipmap.images[0]);\n            // For textures of the compressed format WEBGL_compressed_texture_s3tc\n            // we must have that\n            //\n            // \"When level equals zero width and height must be a multiple of 4.\n            // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. \"\n            //\n            // but we do not yet support having multiple mipmap levels for compressed textures,\n            // so we only test for level zero.\n            if (mipmap.compressed && (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0, \"for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4\");\n        }\n        function setMipMap(mipmap, target) {\n            var images = mipmap.images;\n            for(var i = 0; i < images.length; ++i){\n                if (!images[i]) return;\n                setImage(images[i], target, i);\n            }\n        }\n        var mipPool = [];\n        function allocMipMap() {\n            var result = mipPool.pop() || new MipMap();\n            TexFlags.call(result);\n            result.mipmask = 0;\n            for(var i = 0; i < 16; ++i)result.images[i] = null;\n            return result;\n        }\n        function freeMipMap(mipmap) {\n            var images = mipmap.images;\n            for(var i = 0; i < images.length; ++i){\n                if (images[i]) freeImage(images[i]);\n                images[i] = null;\n            }\n            mipPool.push(mipmap);\n        }\n        // -------------------------------------------------------\n        // Tex info\n        // -------------------------------------------------------\n        function TexInfo() {\n            this.minFilter = GL_NEAREST$1;\n            this.magFilter = GL_NEAREST$1;\n            this.wrapS = GL_CLAMP_TO_EDGE$1;\n            this.wrapT = GL_CLAMP_TO_EDGE$1;\n            this.anisotropic = 1;\n            this.genMipmaps = false;\n            this.mipmapHint = GL_DONT_CARE;\n        }\n        function parseTexInfo(info, options) {\n            if (\"min\" in options) {\n                var minFilter = options.min;\n                check$1.parameter(minFilter, minFilters);\n                info.minFilter = minFilters[minFilter];\n                if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !(\"faces\" in options)) info.genMipmaps = true;\n            }\n            if (\"mag\" in options) {\n                var magFilter = options.mag;\n                check$1.parameter(magFilter, magFilters);\n                info.magFilter = magFilters[magFilter];\n            }\n            var wrapS = info.wrapS;\n            var wrapT = info.wrapT;\n            if (\"wrap\" in options) {\n                var wrap = options.wrap;\n                if (typeof wrap === \"string\") {\n                    check$1.parameter(wrap, wrapModes);\n                    wrapS = wrapT = wrapModes[wrap];\n                } else if (Array.isArray(wrap)) {\n                    check$1.parameter(wrap[0], wrapModes);\n                    check$1.parameter(wrap[1], wrapModes);\n                    wrapS = wrapModes[wrap[0]];\n                    wrapT = wrapModes[wrap[1]];\n                }\n            } else {\n                if (\"wrapS\" in options) {\n                    var optWrapS = options.wrapS;\n                    check$1.parameter(optWrapS, wrapModes);\n                    wrapS = wrapModes[optWrapS];\n                }\n                if (\"wrapT\" in options) {\n                    var optWrapT = options.wrapT;\n                    check$1.parameter(optWrapT, wrapModes);\n                    wrapT = wrapModes[optWrapT];\n                }\n            }\n            info.wrapS = wrapS;\n            info.wrapT = wrapT;\n            if (\"anisotropic\" in options) {\n                var anisotropic = options.anisotropic;\n                check$1(typeof anisotropic === \"number\" && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic, \"aniso samples must be between 1 and \");\n                info.anisotropic = options.anisotropic;\n            }\n            if (\"mipmap\" in options) {\n                var hasMipMap = false;\n                switch(typeof options.mipmap){\n                    case \"string\":\n                        check$1.parameter(options.mipmap, mipmapHint, \"invalid mipmap hint\");\n                        info.mipmapHint = mipmapHint[options.mipmap];\n                        info.genMipmaps = true;\n                        hasMipMap = true;\n                        break;\n                    case \"boolean\":\n                        hasMipMap = info.genMipmaps = options.mipmap;\n                        break;\n                    case \"object\":\n                        check$1(Array.isArray(options.mipmap), \"invalid mipmap type\");\n                        info.genMipmaps = false;\n                        hasMipMap = true;\n                        break;\n                    default:\n                        check$1.raise(\"invalid mipmap type\");\n                }\n                if (hasMipMap && !(\"min\" in options)) info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;\n            }\n        }\n        function setTexInfo(info, target) {\n            gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);\n            gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);\n            gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);\n            gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);\n            if (extensions.ext_texture_filter_anisotropic) gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);\n            if (info.genMipmaps) {\n                gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);\n                gl.generateMipmap(target);\n            }\n        }\n        // -------------------------------------------------------\n        // Full texture object\n        // -------------------------------------------------------\n        var textureCount = 0;\n        var textureSet = {};\n        var numTexUnits = limits.maxTextureUnits;\n        var textureUnits = Array(numTexUnits).map(function() {\n            return null;\n        });\n        function REGLTexture(target) {\n            TexFlags.call(this);\n            this.mipmask = 0;\n            this.internalformat = GL_RGBA$1;\n            this.id = textureCount++;\n            this.refCount = 1;\n            this.target = target;\n            this.texture = gl.createTexture();\n            this.unit = -1;\n            this.bindCount = 0;\n            this.texInfo = new TexInfo();\n            if (config.profile) this.stats = {\n                size: 0\n            };\n        }\n        function tempBind(texture) {\n            gl.activeTexture(GL_TEXTURE0$1);\n            gl.bindTexture(texture.target, texture.texture);\n        }\n        function tempRestore() {\n            var prev = textureUnits[0];\n            if (prev) gl.bindTexture(prev.target, prev.texture);\n            else gl.bindTexture(GL_TEXTURE_2D$1, null);\n        }\n        function destroy(texture) {\n            var handle = texture.texture;\n            check$1(handle, \"must not double destroy texture\");\n            var unit = texture.unit;\n            var target = texture.target;\n            if (unit >= 0) {\n                gl.activeTexture(GL_TEXTURE0$1 + unit);\n                gl.bindTexture(target, null);\n                textureUnits[unit] = null;\n            }\n            gl.deleteTexture(handle);\n            texture.texture = null;\n            texture.params = null;\n            texture.pixels = null;\n            texture.refCount = 0;\n            delete textureSet[texture.id];\n            stats.textureCount--;\n        }\n        extend(REGLTexture.prototype, {\n            bind: function() {\n                var texture = this;\n                texture.bindCount += 1;\n                var unit = texture.unit;\n                if (unit < 0) {\n                    for(var i = 0; i < numTexUnits; ++i){\n                        var other = textureUnits[i];\n                        if (other) {\n                            if (other.bindCount > 0) continue;\n                            other.unit = -1;\n                        }\n                        textureUnits[i] = texture;\n                        unit = i;\n                        break;\n                    }\n                    if (unit >= numTexUnits) check$1.raise(\"insufficient number of texture units\");\n                    if (config.profile && stats.maxTextureUnits < unit + 1) stats.maxTextureUnits = unit + 1 // +1, since the units are zero-based\n                    ;\n                    texture.unit = unit;\n                    gl.activeTexture(GL_TEXTURE0$1 + unit);\n                    gl.bindTexture(texture.target, texture.texture);\n                }\n                return unit;\n            },\n            unbind: function() {\n                this.bindCount -= 1;\n            },\n            decRef: function() {\n                if (--this.refCount <= 0) destroy(this);\n            }\n        });\n        function createTexture2D(a, b) {\n            var texture = new REGLTexture(GL_TEXTURE_2D$1);\n            textureSet[texture.id] = texture;\n            stats.textureCount++;\n            function reglTexture2D(a, b) {\n                var texInfo = texture.texInfo;\n                TexInfo.call(texInfo);\n                var mipData = allocMipMap();\n                if (typeof a === \"number\") {\n                    if (typeof b === \"number\") parseMipMapFromShape(mipData, a | 0, b | 0);\n                    else parseMipMapFromShape(mipData, a | 0, a | 0);\n                } else if (a) {\n                    check$1.type(a, \"object\", \"invalid arguments to regl.texture\");\n                    parseTexInfo(texInfo, a);\n                    parseMipMapFromObject(mipData, a);\n                } else // empty textures get assigned a default shape of 1x1\n                parseMipMapFromShape(mipData, 1, 1);\n                if (texInfo.genMipmaps) mipData.mipmask = (mipData.width << 1) - 1;\n                texture.mipmask = mipData.mipmask;\n                copyFlags(texture, mipData);\n                check$1.texture2D(texInfo, mipData, limits);\n                texture.internalformat = mipData.internalformat;\n                reglTexture2D.width = mipData.width;\n                reglTexture2D.height = mipData.height;\n                tempBind(texture);\n                setMipMap(mipData, GL_TEXTURE_2D$1);\n                setTexInfo(texInfo, GL_TEXTURE_2D$1);\n                tempRestore();\n                freeMipMap(mipData);\n                if (config.profile) texture.stats.size = getTextureSize(texture.internalformat, texture.type, mipData.width, mipData.height, texInfo.genMipmaps, false);\n                reglTexture2D.format = textureFormatsInvert[texture.internalformat];\n                reglTexture2D.type = textureTypesInvert[texture.type];\n                reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];\n                reglTexture2D.min = minFiltersInvert[texInfo.minFilter];\n                reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];\n                reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];\n                return reglTexture2D;\n            }\n            function subimage(image, x_, y_, level_) {\n                check$1(!!image, \"must specify image data\");\n                var x = x_ | 0;\n                var y = y_ | 0;\n                var level = level_ | 0;\n                var imageData = allocImage();\n                copyFlags(imageData, texture);\n                imageData.width = 0;\n                imageData.height = 0;\n                parseImage(imageData, image);\n                imageData.width = imageData.width || (texture.width >> level) - x;\n                imageData.height = imageData.height || (texture.height >> level) - y;\n                check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, \"incompatible format for texture.subimage\");\n                check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, \"texture.subimage write out of bounds\");\n                check$1(texture.mipmask & 1 << level, \"missing mipmap data\");\n                check$1(imageData.data || imageData.element || imageData.needsCopy, \"missing image data\");\n                tempBind(texture);\n                setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);\n                tempRestore();\n                freeImage(imageData);\n                return reglTexture2D;\n            }\n            function resize(w_, h_) {\n                var w = w_ | 0;\n                var h = h_ | 0 || w;\n                if (w === texture.width && h === texture.height) return reglTexture2D;\n                reglTexture2D.width = texture.width = w;\n                reglTexture2D.height = texture.height = h;\n                tempBind(texture);\n                for(var i = 0; texture.mipmask >> i; ++i){\n                    var _w = w >> i;\n                    var _h = h >> i;\n                    if (!_w || !_h) break;\n                    gl.texImage2D(GL_TEXTURE_2D$1, i, texture.format, _w, _h, 0, texture.format, texture.type, null);\n                }\n                tempRestore();\n                // also, recompute the texture size.\n                if (config.profile) texture.stats.size = getTextureSize(texture.internalformat, texture.type, w, h, false, false);\n                return reglTexture2D;\n            }\n            reglTexture2D(a, b);\n            reglTexture2D.subimage = subimage;\n            reglTexture2D.resize = resize;\n            reglTexture2D._reglType = \"texture2d\";\n            reglTexture2D._texture = texture;\n            if (config.profile) reglTexture2D.stats = texture.stats;\n            reglTexture2D.destroy = function() {\n                texture.decRef();\n            };\n            return reglTexture2D;\n        }\n        function createTextureCube(a0, a1, a2, a3, a4, a5) {\n            var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);\n            textureSet[texture.id] = texture;\n            stats.cubeCount++;\n            var faces = new Array(6);\n            function reglTextureCube(a0, a1, a2, a3, a4, a5) {\n                var i;\n                var texInfo = texture.texInfo;\n                TexInfo.call(texInfo);\n                for(i = 0; i < 6; ++i)faces[i] = allocMipMap();\n                if (typeof a0 === \"number\" || !a0) {\n                    var s = a0 | 0 || 1;\n                    for(i = 0; i < 6; ++i)parseMipMapFromShape(faces[i], s, s);\n                } else if (typeof a0 === \"object\") {\n                    if (a1) {\n                        parseMipMapFromObject(faces[0], a0);\n                        parseMipMapFromObject(faces[1], a1);\n                        parseMipMapFromObject(faces[2], a2);\n                        parseMipMapFromObject(faces[3], a3);\n                        parseMipMapFromObject(faces[4], a4);\n                        parseMipMapFromObject(faces[5], a5);\n                    } else {\n                        parseTexInfo(texInfo, a0);\n                        parseFlags(texture, a0);\n                        if (\"faces\" in a0) {\n                            var faceInput = a0.faces;\n                            check$1(Array.isArray(faceInput) && faceInput.length === 6, \"cube faces must be a length 6 array\");\n                            for(i = 0; i < 6; ++i){\n                                check$1(typeof faceInput[i] === \"object\" && !!faceInput[i], \"invalid input for cube map face\");\n                                copyFlags(faces[i], texture);\n                                parseMipMapFromObject(faces[i], faceInput[i]);\n                            }\n                        } else for(i = 0; i < 6; ++i)parseMipMapFromObject(faces[i], a0);\n                    }\n                } else check$1.raise(\"invalid arguments to cube map\");\n                copyFlags(texture, faces[0]);\n                check$1.optional(function() {\n                    if (!limits.npotTextureCube) check$1(isPow2$1(texture.width) && isPow2$1(texture.height), \"your browser does not support non power or two texture dimensions\");\n                });\n                if (texInfo.genMipmaps) texture.mipmask = (faces[0].width << 1) - 1;\n                else texture.mipmask = faces[0].mipmask;\n                check$1.textureCube(texture, texInfo, faces, limits);\n                texture.internalformat = faces[0].internalformat;\n                reglTextureCube.width = faces[0].width;\n                reglTextureCube.height = faces[0].height;\n                tempBind(texture);\n                for(i = 0; i < 6; ++i)setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);\n                setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);\n                tempRestore();\n                if (config.profile) texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, texInfo.genMipmaps, true);\n                reglTextureCube.format = textureFormatsInvert[texture.internalformat];\n                reglTextureCube.type = textureTypesInvert[texture.type];\n                reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];\n                reglTextureCube.min = minFiltersInvert[texInfo.minFilter];\n                reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];\n                reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];\n                for(i = 0; i < 6; ++i)freeMipMap(faces[i]);\n                return reglTextureCube;\n            }\n            function subimage(face, image, x_, y_, level_) {\n                check$1(!!image, \"must specify image data\");\n                check$1(typeof face === \"number\" && face === (face | 0) && face >= 0 && face < 6, \"invalid face\");\n                var x = x_ | 0;\n                var y = y_ | 0;\n                var level = level_ | 0;\n                var imageData = allocImage();\n                copyFlags(imageData, texture);\n                imageData.width = 0;\n                imageData.height = 0;\n                parseImage(imageData, image);\n                imageData.width = imageData.width || (texture.width >> level) - x;\n                imageData.height = imageData.height || (texture.height >> level) - y;\n                check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, \"incompatible format for texture.subimage\");\n                check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, \"texture.subimage write out of bounds\");\n                check$1(texture.mipmask & 1 << level, \"missing mipmap data\");\n                check$1(imageData.data || imageData.element || imageData.needsCopy, \"missing image data\");\n                tempBind(texture);\n                setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);\n                tempRestore();\n                freeImage(imageData);\n                return reglTextureCube;\n            }\n            function resize(radius_) {\n                var radius = radius_ | 0;\n                if (radius === texture.width) return;\n                reglTextureCube.width = texture.width = radius;\n                reglTextureCube.height = texture.height = radius;\n                tempBind(texture);\n                for(var i = 0; i < 6; ++i)for(var j = 0; texture.mipmask >> j; ++j)gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i, j, texture.format, radius >> j, radius >> j, 0, texture.format, texture.type, null);\n                tempRestore();\n                if (config.profile) texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, false, true);\n                return reglTextureCube;\n            }\n            reglTextureCube(a0, a1, a2, a3, a4, a5);\n            reglTextureCube.subimage = subimage;\n            reglTextureCube.resize = resize;\n            reglTextureCube._reglType = \"textureCube\";\n            reglTextureCube._texture = texture;\n            if (config.profile) reglTextureCube.stats = texture.stats;\n            reglTextureCube.destroy = function() {\n                texture.decRef();\n            };\n            return reglTextureCube;\n        }\n        // Called when regl is destroyed\n        function destroyTextures() {\n            for(var i = 0; i < numTexUnits; ++i){\n                gl.activeTexture(GL_TEXTURE0$1 + i);\n                gl.bindTexture(GL_TEXTURE_2D$1, null);\n                textureUnits[i] = null;\n            }\n            values(textureSet).forEach(destroy);\n            stats.cubeCount = 0;\n            stats.textureCount = 0;\n        }\n        if (config.profile) stats.getTotalTextureSize = function() {\n            var total = 0;\n            Object.keys(textureSet).forEach(function(key) {\n                total += textureSet[key].stats.size;\n            });\n            return total;\n        };\n        function restoreTextures() {\n            for(var i = 0; i < numTexUnits; ++i){\n                var tex = textureUnits[i];\n                if (tex) {\n                    tex.bindCount = 0;\n                    tex.unit = -1;\n                    textureUnits[i] = null;\n                }\n            }\n            values(textureSet).forEach(function(texture) {\n                texture.texture = gl.createTexture();\n                gl.bindTexture(texture.target, texture.texture);\n                for(var i = 0; i < 32; ++i){\n                    if ((texture.mipmask & 1 << i) === 0) continue;\n                    if (texture.target === GL_TEXTURE_2D$1) gl.texImage2D(GL_TEXTURE_2D$1, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);\n                    else for(var j = 0; j < 6; ++j)gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);\n                }\n                setTexInfo(texture.texInfo, texture.target);\n            });\n        }\n        function refreshTextures() {\n            for(var i = 0; i < numTexUnits; ++i){\n                var tex = textureUnits[i];\n                if (tex) {\n                    tex.bindCount = 0;\n                    tex.unit = -1;\n                    textureUnits[i] = null;\n                }\n                gl.activeTexture(GL_TEXTURE0$1 + i);\n                gl.bindTexture(GL_TEXTURE_2D$1, null);\n                gl.bindTexture(GL_TEXTURE_CUBE_MAP$1, null);\n            }\n        }\n        return {\n            create2D: createTexture2D,\n            createCube: createTextureCube,\n            clear: destroyTextures,\n            getTexture: function(wrapper) {\n                return null;\n            },\n            restore: restoreTextures,\n            refresh: refreshTextures\n        };\n    }\n    var GL_RENDERBUFFER = 0x8D41;\n    var GL_RGBA4$1 = 0x8056;\n    var GL_RGB5_A1$1 = 0x8057;\n    var GL_RGB565$1 = 0x8D62;\n    var GL_DEPTH_COMPONENT16 = 0x81A5;\n    var GL_STENCIL_INDEX8 = 0x8D48;\n    var GL_DEPTH_STENCIL$1 = 0x84F9;\n    var GL_SRGB8_ALPHA8_EXT = 0x8C43;\n    var GL_RGBA32F_EXT = 0x8814;\n    var GL_RGBA16F_EXT = 0x881A;\n    var GL_RGB16F_EXT = 0x881B;\n    var FORMAT_SIZES = [];\n    FORMAT_SIZES[GL_RGBA4$1] = 2;\n    FORMAT_SIZES[GL_RGB5_A1$1] = 2;\n    FORMAT_SIZES[GL_RGB565$1] = 2;\n    FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;\n    FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;\n    FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;\n    FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;\n    FORMAT_SIZES[GL_RGBA32F_EXT] = 16;\n    FORMAT_SIZES[GL_RGBA16F_EXT] = 8;\n    FORMAT_SIZES[GL_RGB16F_EXT] = 6;\n    function getRenderbufferSize(format, width, height) {\n        return FORMAT_SIZES[format] * width * height;\n    }\n    var wrapRenderbuffers = function(gl, extensions, limits, stats, config) {\n        var formatTypes = {\n            \"rgba4\": GL_RGBA4$1,\n            \"rgb565\": GL_RGB565$1,\n            \"rgb5 a1\": GL_RGB5_A1$1,\n            \"depth\": GL_DEPTH_COMPONENT16,\n            \"stencil\": GL_STENCIL_INDEX8,\n            \"depth stencil\": GL_DEPTH_STENCIL$1\n        };\n        if (extensions.ext_srgb) formatTypes[\"srgba\"] = GL_SRGB8_ALPHA8_EXT;\n        if (extensions.ext_color_buffer_half_float) {\n            formatTypes[\"rgba16f\"] = GL_RGBA16F_EXT;\n            formatTypes[\"rgb16f\"] = GL_RGB16F_EXT;\n        }\n        if (extensions.webgl_color_buffer_float) formatTypes[\"rgba32f\"] = GL_RGBA32F_EXT;\n        var formatTypesInvert = [];\n        Object.keys(formatTypes).forEach(function(key) {\n            var val = formatTypes[key];\n            formatTypesInvert[val] = key;\n        });\n        var renderbufferCount = 0;\n        var renderbufferSet = {};\n        function REGLRenderbuffer(renderbuffer) {\n            this.id = renderbufferCount++;\n            this.refCount = 1;\n            this.renderbuffer = renderbuffer;\n            this.format = GL_RGBA4$1;\n            this.width = 0;\n            this.height = 0;\n            if (config.profile) this.stats = {\n                size: 0\n            };\n        }\n        REGLRenderbuffer.prototype.decRef = function() {\n            if (--this.refCount <= 0) destroy(this);\n        };\n        function destroy(rb) {\n            var handle = rb.renderbuffer;\n            check$1(handle, \"must not double destroy renderbuffer\");\n            gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n            gl.deleteRenderbuffer(handle);\n            rb.renderbuffer = null;\n            rb.refCount = 0;\n            delete renderbufferSet[rb.id];\n            stats.renderbufferCount--;\n        }\n        function createRenderbuffer(a, b) {\n            var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());\n            renderbufferSet[renderbuffer.id] = renderbuffer;\n            stats.renderbufferCount++;\n            function reglRenderbuffer(a, b) {\n                var w = 0;\n                var h = 0;\n                var format = GL_RGBA4$1;\n                if (typeof a === \"object\" && a) {\n                    var options = a;\n                    if (\"shape\" in options) {\n                        var shape = options.shape;\n                        check$1(Array.isArray(shape) && shape.length >= 2, \"invalid renderbuffer shape\");\n                        w = shape[0] | 0;\n                        h = shape[1] | 0;\n                    } else {\n                        if (\"radius\" in options) w = h = options.radius | 0;\n                        if (\"width\" in options) w = options.width | 0;\n                        if (\"height\" in options) h = options.height | 0;\n                    }\n                    if (\"format\" in options) {\n                        check$1.parameter(options.format, formatTypes, \"invalid renderbuffer format\");\n                        format = formatTypes[options.format];\n                    }\n                } else if (typeof a === \"number\") {\n                    w = a | 0;\n                    if (typeof b === \"number\") h = b | 0;\n                    else h = w;\n                } else if (!a) w = h = 1;\n                else check$1.raise(\"invalid arguments to renderbuffer constructor\");\n                // check shape\n                check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, \"invalid renderbuffer size\");\n                if (w === renderbuffer.width && h === renderbuffer.height && format === renderbuffer.format) return;\n                reglRenderbuffer.width = renderbuffer.width = w;\n                reglRenderbuffer.height = renderbuffer.height = h;\n                renderbuffer.format = format;\n                gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\n                gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);\n                check$1(gl.getError() === 0, \"invalid render buffer format\");\n                if (config.profile) renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\n                reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];\n                return reglRenderbuffer;\n            }\n            function resize(w_, h_) {\n                var w = w_ | 0;\n                var h = h_ | 0 || w;\n                if (w === renderbuffer.width && h === renderbuffer.height) return reglRenderbuffer;\n                // check shape\n                check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, \"invalid renderbuffer size\");\n                reglRenderbuffer.width = renderbuffer.width = w;\n                reglRenderbuffer.height = renderbuffer.height = h;\n                gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\n                gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);\n                check$1(gl.getError() === 0, \"invalid render buffer format\");\n                // also, recompute size.\n                if (config.profile) renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\n                return reglRenderbuffer;\n            }\n            reglRenderbuffer(a, b);\n            reglRenderbuffer.resize = resize;\n            reglRenderbuffer._reglType = \"renderbuffer\";\n            reglRenderbuffer._renderbuffer = renderbuffer;\n            if (config.profile) reglRenderbuffer.stats = renderbuffer.stats;\n            reglRenderbuffer.destroy = function() {\n                renderbuffer.decRef();\n            };\n            return reglRenderbuffer;\n        }\n        if (config.profile) stats.getTotalRenderbufferSize = function() {\n            var total = 0;\n            Object.keys(renderbufferSet).forEach(function(key) {\n                total += renderbufferSet[key].stats.size;\n            });\n            return total;\n        };\n        function restoreRenderbuffers() {\n            values(renderbufferSet).forEach(function(rb) {\n                rb.renderbuffer = gl.createRenderbuffer();\n                gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);\n                gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);\n            });\n            gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n        }\n        return {\n            create: createRenderbuffer,\n            clear: function() {\n                values(renderbufferSet).forEach(destroy);\n            },\n            restore: restoreRenderbuffers\n        };\n    };\n    // We store these constants so that the minifier can inline them\n    var GL_FRAMEBUFFER$1 = 0x8D40;\n    var GL_RENDERBUFFER$1 = 0x8D41;\n    var GL_TEXTURE_2D$2 = 0x0DE1;\n    var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;\n    var GL_COLOR_ATTACHMENT0$1 = 0x8CE0;\n    var GL_DEPTH_ATTACHMENT = 0x8D00;\n    var GL_STENCIL_ATTACHMENT = 0x8D20;\n    var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\n    var GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;\n    var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\n    var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\n    var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\n    var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\n    var GL_HALF_FLOAT_OES$2 = 0x8D61;\n    var GL_UNSIGNED_BYTE$6 = 0x1401;\n    var GL_FLOAT$5 = 0x1406;\n    var GL_RGB$1 = 0x1907;\n    var GL_RGBA$2 = 0x1908;\n    var GL_DEPTH_COMPONENT$1 = 0x1902;\n    var colorTextureFormatEnums = [\n        GL_RGB$1,\n        GL_RGBA$2\n    ];\n    // for every texture format, store\n    // the number of channels\n    var textureFormatChannels = [];\n    textureFormatChannels[GL_RGBA$2] = 4;\n    textureFormatChannels[GL_RGB$1] = 3;\n    // for every texture type, store\n    // the size in bytes.\n    var textureTypeSizes = [];\n    textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;\n    textureTypeSizes[GL_FLOAT$5] = 4;\n    textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;\n    var GL_RGBA4$2 = 0x8056;\n    var GL_RGB5_A1$2 = 0x8057;\n    var GL_RGB565$2 = 0x8D62;\n    var GL_DEPTH_COMPONENT16$1 = 0x81A5;\n    var GL_STENCIL_INDEX8$1 = 0x8D48;\n    var GL_DEPTH_STENCIL$2 = 0x84F9;\n    var GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;\n    var GL_RGBA32F_EXT$1 = 0x8814;\n    var GL_RGBA16F_EXT$1 = 0x881A;\n    var GL_RGB16F_EXT$1 = 0x881B;\n    var colorRenderbufferFormatEnums = [\n        GL_RGBA4$2,\n        GL_RGB5_A1$2,\n        GL_RGB565$2,\n        GL_SRGB8_ALPHA8_EXT$1,\n        GL_RGBA16F_EXT$1,\n        GL_RGB16F_EXT$1,\n        GL_RGBA32F_EXT$1\n    ];\n    var statusCode = {};\n    statusCode[GL_FRAMEBUFFER_COMPLETE$1] = \"complete\";\n    statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = \"incomplete attachment\";\n    statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = \"incomplete dimensions\";\n    statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = \"incomplete, missing attachment\";\n    statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = \"unsupported\";\n    function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats) {\n        var framebufferState = {\n            cur: null,\n            next: null,\n            dirty: false,\n            setFBO: null\n        };\n        var colorTextureFormats = [\n            \"rgba\"\n        ];\n        var colorRenderbufferFormats = [\n            \"rgba4\",\n            \"rgb565\",\n            \"rgb5 a1\"\n        ];\n        if (extensions.ext_srgb) colorRenderbufferFormats.push(\"srgba\");\n        if (extensions.ext_color_buffer_half_float) colorRenderbufferFormats.push(\"rgba16f\", \"rgb16f\");\n        if (extensions.webgl_color_buffer_float) colorRenderbufferFormats.push(\"rgba32f\");\n        var colorTypes = [\n            \"uint8\"\n        ];\n        if (extensions.oes_texture_half_float) colorTypes.push(\"half float\", \"float16\");\n        if (extensions.oes_texture_float) colorTypes.push(\"float\", \"float32\");\n        function FramebufferAttachment(target, texture, renderbuffer) {\n            this.target = target;\n            this.texture = texture;\n            this.renderbuffer = renderbuffer;\n            var w = 0;\n            var h = 0;\n            if (texture) {\n                w = texture.width;\n                h = texture.height;\n            } else if (renderbuffer) {\n                w = renderbuffer.width;\n                h = renderbuffer.height;\n            }\n            this.width = w;\n            this.height = h;\n        }\n        function decRef(attachment) {\n            if (attachment) {\n                if (attachment.texture) attachment.texture._texture.decRef();\n                if (attachment.renderbuffer) attachment.renderbuffer._renderbuffer.decRef();\n            }\n        }\n        function incRefAndCheckShape(attachment, width, height) {\n            if (!attachment) return;\n            if (attachment.texture) {\n                var texture = attachment.texture._texture;\n                var tw = Math.max(1, texture.width);\n                var th = Math.max(1, texture.height);\n                check$1(tw === width && th === height, \"inconsistent width/height for supplied texture\");\n                texture.refCount += 1;\n            } else {\n                var renderbuffer = attachment.renderbuffer._renderbuffer;\n                check$1(renderbuffer.width === width && renderbuffer.height === height, \"inconsistent width/height for renderbuffer\");\n                renderbuffer.refCount += 1;\n            }\n        }\n        function attach(location, attachment) {\n            if (attachment) {\n                if (attachment.texture) gl.framebufferTexture2D(GL_FRAMEBUFFER$1, location, attachment.target, attachment.texture._texture.texture, 0);\n                else gl.framebufferRenderbuffer(GL_FRAMEBUFFER$1, location, GL_RENDERBUFFER$1, attachment.renderbuffer._renderbuffer.renderbuffer);\n            }\n        }\n        function parseAttachment(attachment) {\n            var target = GL_TEXTURE_2D$2;\n            var texture = null;\n            var renderbuffer = null;\n            var data = attachment;\n            if (typeof attachment === \"object\") {\n                data = attachment.data;\n                if (\"target\" in attachment) target = attachment.target | 0;\n            }\n            check$1.type(data, \"function\", \"invalid attachment data\");\n            var type = data._reglType;\n            if (type === \"texture2d\") {\n                texture = data;\n                check$1(target === GL_TEXTURE_2D$2);\n            } else if (type === \"textureCube\") {\n                texture = data;\n                check$1(target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6, \"invalid cube map target\");\n            } else if (type === \"renderbuffer\") {\n                renderbuffer = data;\n                target = GL_RENDERBUFFER$1;\n            } else check$1.raise(\"invalid regl object for attachment\");\n            return new FramebufferAttachment(target, texture, renderbuffer);\n        }\n        function allocAttachment(width, height, isTexture, format, type) {\n            if (isTexture) {\n                var texture = textureState.create2D({\n                    width: width,\n                    height: height,\n                    format: format,\n                    type: type\n                });\n                texture._texture.refCount = 0;\n                return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);\n            } else {\n                var rb = renderbufferState.create({\n                    width: width,\n                    height: height,\n                    format: format\n                });\n                rb._renderbuffer.refCount = 0;\n                return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);\n            }\n        }\n        function unwrapAttachment(attachment) {\n            return attachment && (attachment.texture || attachment.renderbuffer);\n        }\n        function resizeAttachment(attachment, w, h) {\n            if (attachment) {\n                if (attachment.texture) attachment.texture.resize(w, h);\n                else if (attachment.renderbuffer) attachment.renderbuffer.resize(w, h);\n                attachment.width = w;\n                attachment.height = h;\n            }\n        }\n        var framebufferCount = 0;\n        var framebufferSet = {};\n        function REGLFramebuffer() {\n            this.id = framebufferCount++;\n            framebufferSet[this.id] = this;\n            this.framebuffer = gl.createFramebuffer();\n            this.width = 0;\n            this.height = 0;\n            this.colorAttachments = [];\n            this.depthAttachment = null;\n            this.stencilAttachment = null;\n            this.depthStencilAttachment = null;\n        }\n        function decFBORefs(framebuffer) {\n            framebuffer.colorAttachments.forEach(decRef);\n            decRef(framebuffer.depthAttachment);\n            decRef(framebuffer.stencilAttachment);\n            decRef(framebuffer.depthStencilAttachment);\n        }\n        function destroy(framebuffer) {\n            var handle = framebuffer.framebuffer;\n            check$1(handle, \"must not double destroy framebuffer\");\n            gl.deleteFramebuffer(handle);\n            framebuffer.framebuffer = null;\n            stats.framebufferCount--;\n            delete framebufferSet[framebuffer.id];\n        }\n        function updateFramebuffer(framebuffer) {\n            var i;\n            gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);\n            var colorAttachments = framebuffer.colorAttachments;\n            for(i = 0; i < colorAttachments.length; ++i)attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);\n            for(i = colorAttachments.length; i < limits.maxColorAttachments; ++i)gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_COLOR_ATTACHMENT0$1 + i, GL_TEXTURE_2D$2, null, 0);\n            gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n            gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n            gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n            attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);\n            attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);\n            attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);\n            // Check status code\n            var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);\n            if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) check$1.raise(\"framebuffer configuration not supported, status = \" + statusCode[status]);\n            gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);\n            framebufferState.cur = framebufferState.next;\n            // FIXME: Clear error code here.  This is a work around for a bug in\n            // headless-gl\n            gl.getError();\n        }\n        function createFBO(a0, a1) {\n            var framebuffer = new REGLFramebuffer();\n            stats.framebufferCount++;\n            function reglFramebuffer(a, b) {\n                var i;\n                check$1(framebufferState.next !== framebuffer, \"can not update framebuffer which is currently in use\");\n                var width = 0;\n                var height = 0;\n                var needsDepth = true;\n                var needsStencil = true;\n                var colorBuffer = null;\n                var colorTexture = true;\n                var colorFormat = \"rgba\";\n                var colorType = \"uint8\";\n                var colorCount = 1;\n                var depthBuffer = null;\n                var stencilBuffer = null;\n                var depthStencilBuffer = null;\n                var depthStencilTexture = false;\n                if (typeof a === \"number\") {\n                    width = a | 0;\n                    height = b | 0 || width;\n                } else if (!a) width = height = 1;\n                else {\n                    check$1.type(a, \"object\", \"invalid arguments for framebuffer\");\n                    var options = a;\n                    if (\"shape\" in options) {\n                        var shape = options.shape;\n                        check$1(Array.isArray(shape) && shape.length >= 2, \"invalid shape for framebuffer\");\n                        width = shape[0];\n                        height = shape[1];\n                    } else {\n                        if (\"radius\" in options) width = height = options.radius;\n                        if (\"width\" in options) width = options.width;\n                        if (\"height\" in options) height = options.height;\n                    }\n                    if (\"color\" in options || \"colors\" in options) {\n                        colorBuffer = options.color || options.colors;\n                        if (Array.isArray(colorBuffer)) check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, \"multiple render targets not supported\");\n                    }\n                    if (!colorBuffer) {\n                        if (\"colorCount\" in options) {\n                            colorCount = options.colorCount | 0;\n                            check$1(colorCount > 0, \"invalid color buffer count\");\n                        }\n                        if (\"colorTexture\" in options) {\n                            colorTexture = !!options.colorTexture;\n                            colorFormat = \"rgba4\";\n                        }\n                        if (\"colorType\" in options) {\n                            colorType = options.colorType;\n                            if (!colorTexture) {\n                                if (colorType === \"half float\" || colorType === \"float16\") {\n                                    check$1(extensions.ext_color_buffer_half_float, \"you must enable EXT_color_buffer_half_float to use 16-bit render buffers\");\n                                    colorFormat = \"rgba16f\";\n                                } else if (colorType === \"float\" || colorType === \"float32\") {\n                                    check$1(extensions.webgl_color_buffer_float, \"you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers\");\n                                    colorFormat = \"rgba32f\";\n                                }\n                            } else {\n                                check$1(extensions.oes_texture_float || !(colorType === \"float\" || colorType === \"float32\"), \"you must enable OES_texture_float in order to use floating point framebuffer objects\");\n                                check$1(extensions.oes_texture_half_float || !(colorType === \"half float\" || colorType === \"float16\"), \"you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects\");\n                            }\n                            check$1.oneOf(colorType, colorTypes, \"invalid color type\");\n                        }\n                        if (\"colorFormat\" in options) {\n                            colorFormat = options.colorFormat;\n                            if (colorTextureFormats.indexOf(colorFormat) >= 0) colorTexture = true;\n                            else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) colorTexture = false;\n                            else check$1.optional(function() {\n                                if (colorTexture) check$1.oneOf(options.colorFormat, colorTextureFormats, \"invalid color format for texture\");\n                                else check$1.oneOf(options.colorFormat, colorRenderbufferFormats, \"invalid color format for renderbuffer\");\n                            });\n                        }\n                    }\n                    if (\"depthTexture\" in options || \"depthStencilTexture\" in options) {\n                        depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);\n                        check$1(!depthStencilTexture || extensions.webgl_depth_texture, \"webgl_depth_texture extension not supported\");\n                    }\n                    if (\"depth\" in options) {\n                        if (typeof options.depth === \"boolean\") needsDepth = options.depth;\n                        else {\n                            depthBuffer = options.depth;\n                            needsStencil = false;\n                        }\n                    }\n                    if (\"stencil\" in options) {\n                        if (typeof options.stencil === \"boolean\") needsStencil = options.stencil;\n                        else {\n                            stencilBuffer = options.stencil;\n                            needsDepth = false;\n                        }\n                    }\n                    if (\"depthStencil\" in options) {\n                        if (typeof options.depthStencil === \"boolean\") needsDepth = needsStencil = options.depthStencil;\n                        else {\n                            depthStencilBuffer = options.depthStencil;\n                            needsDepth = false;\n                            needsStencil = false;\n                        }\n                    }\n                }\n                // parse attachments\n                var colorAttachments = null;\n                var depthAttachment = null;\n                var stencilAttachment = null;\n                var depthStencilAttachment = null;\n                // Set up color attachments\n                if (Array.isArray(colorBuffer)) colorAttachments = colorBuffer.map(parseAttachment);\n                else if (colorBuffer) colorAttachments = [\n                    parseAttachment(colorBuffer)\n                ];\n                else {\n                    colorAttachments = new Array(colorCount);\n                    for(i = 0; i < colorCount; ++i)colorAttachments[i] = allocAttachment(width, height, colorTexture, colorFormat, colorType);\n                }\n                check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1, \"you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.\");\n                check$1(colorAttachments.length <= limits.maxColorAttachments, \"too many color attachments, not supported\");\n                width = width || colorAttachments[0].width;\n                height = height || colorAttachments[0].height;\n                if (depthBuffer) depthAttachment = parseAttachment(depthBuffer);\n                else if (needsDepth && !needsStencil) depthAttachment = allocAttachment(width, height, depthStencilTexture, \"depth\", \"uint32\");\n                if (stencilBuffer) stencilAttachment = parseAttachment(stencilBuffer);\n                else if (needsStencil && !needsDepth) stencilAttachment = allocAttachment(width, height, false, \"stencil\", \"uint8\");\n                if (depthStencilBuffer) depthStencilAttachment = parseAttachment(depthStencilBuffer);\n                else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) depthStencilAttachment = allocAttachment(width, height, depthStencilTexture, \"depth stencil\", \"depth stencil\");\n                check$1(!!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1, \"invalid framebuffer configuration, can specify exactly one depth/stencil attachment\");\n                var commonColorAttachmentSize = null;\n                for(i = 0; i < colorAttachments.length; ++i){\n                    incRefAndCheckShape(colorAttachments[i], width, height);\n                    check$1(!colorAttachments[i] || colorAttachments[i].texture && colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0 || colorAttachments[i].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0, \"framebuffer color attachment \" + i + \" is invalid\");\n                    if (colorAttachments[i] && colorAttachments[i].texture) {\n                        var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];\n                        if (commonColorAttachmentSize === null) commonColorAttachmentSize = colorAttachmentSize;\n                        else // We need to make sure that all color attachments have the same number of bitplanes\n                        // (that is, the same numer of bits per pixel)\n                        // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.\n                        check$1(commonColorAttachmentSize === colorAttachmentSize, \"all color attachments much have the same number of bits per pixel.\");\n                    }\n                }\n                incRefAndCheckShape(depthAttachment, width, height);\n                check$1(!depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1 || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1, \"invalid depth attachment for framebuffer object\");\n                incRefAndCheckShape(stencilAttachment, width, height);\n                check$1(!stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1, \"invalid stencil attachment for framebuffer object\");\n                incRefAndCheckShape(depthStencilAttachment, width, height);\n                check$1(!depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2 || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2, \"invalid depth-stencil attachment for framebuffer object\");\n                // decrement references\n                decFBORefs(framebuffer);\n                framebuffer.width = width;\n                framebuffer.height = height;\n                framebuffer.colorAttachments = colorAttachments;\n                framebuffer.depthAttachment = depthAttachment;\n                framebuffer.stencilAttachment = stencilAttachment;\n                framebuffer.depthStencilAttachment = depthStencilAttachment;\n                reglFramebuffer.color = colorAttachments.map(unwrapAttachment);\n                reglFramebuffer.depth = unwrapAttachment(depthAttachment);\n                reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);\n                reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);\n                reglFramebuffer.width = framebuffer.width;\n                reglFramebuffer.height = framebuffer.height;\n                updateFramebuffer(framebuffer);\n                return reglFramebuffer;\n            }\n            function resize(w_, h_) {\n                check$1(framebufferState.next !== framebuffer, \"can not resize a framebuffer which is currently in use\");\n                var w = Math.max(w_ | 0, 1);\n                var h = Math.max(h_ | 0 || w, 1);\n                if (w === framebuffer.width && h === framebuffer.height) return reglFramebuffer;\n                // resize all buffers\n                var colorAttachments = framebuffer.colorAttachments;\n                for(var i = 0; i < colorAttachments.length; ++i)resizeAttachment(colorAttachments[i], w, h);\n                resizeAttachment(framebuffer.depthAttachment, w, h);\n                resizeAttachment(framebuffer.stencilAttachment, w, h);\n                resizeAttachment(framebuffer.depthStencilAttachment, w, h);\n                framebuffer.width = reglFramebuffer.width = w;\n                framebuffer.height = reglFramebuffer.height = h;\n                updateFramebuffer(framebuffer);\n                return reglFramebuffer;\n            }\n            reglFramebuffer(a0, a1);\n            return extend(reglFramebuffer, {\n                resize: resize,\n                _reglType: \"framebuffer\",\n                _framebuffer: framebuffer,\n                destroy: function() {\n                    destroy(framebuffer);\n                    decFBORefs(framebuffer);\n                },\n                use: function(block) {\n                    framebufferState.setFBO({\n                        framebuffer: reglFramebuffer\n                    }, block);\n                }\n            });\n        }\n        function createCubeFBO(options) {\n            var faces = Array(6);\n            function reglFramebufferCube(a) {\n                var i;\n                check$1(faces.indexOf(framebufferState.next) < 0, \"can not update framebuffer which is currently in use\");\n                var params = {\n                    color: null\n                };\n                var radius = 0;\n                var colorBuffer = null;\n                var colorFormat = \"rgba\";\n                var colorType = \"uint8\";\n                var colorCount = 1;\n                if (typeof a === \"number\") radius = a | 0;\n                else if (!a) radius = 1;\n                else {\n                    check$1.type(a, \"object\", \"invalid arguments for framebuffer\");\n                    var options = a;\n                    if (\"shape\" in options) {\n                        var shape = options.shape;\n                        check$1(Array.isArray(shape) && shape.length >= 2, \"invalid shape for framebuffer\");\n                        check$1(shape[0] === shape[1], \"cube framebuffer must be square\");\n                        radius = shape[0];\n                    } else {\n                        if (\"radius\" in options) radius = options.radius | 0;\n                        if (\"width\" in options) {\n                            radius = options.width | 0;\n                            if (\"height\" in options) check$1(options.height === radius, \"must be square\");\n                        } else if (\"height\" in options) radius = options.height | 0;\n                    }\n                    if (\"color\" in options || \"colors\" in options) {\n                        colorBuffer = options.color || options.colors;\n                        if (Array.isArray(colorBuffer)) check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, \"multiple render targets not supported\");\n                    }\n                    if (!colorBuffer) {\n                        if (\"colorCount\" in options) {\n                            colorCount = options.colorCount | 0;\n                            check$1(colorCount > 0, \"invalid color buffer count\");\n                        }\n                        if (\"colorType\" in options) {\n                            check$1.oneOf(options.colorType, colorTypes, \"invalid color type\");\n                            colorType = options.colorType;\n                        }\n                        if (\"colorFormat\" in options) {\n                            colorFormat = options.colorFormat;\n                            check$1.oneOf(options.colorFormat, colorTextureFormats, \"invalid color format for texture\");\n                        }\n                    }\n                    if (\"depth\" in options) params.depth = options.depth;\n                    if (\"stencil\" in options) params.stencil = options.stencil;\n                    if (\"depthStencil\" in options) params.depthStencil = options.depthStencil;\n                }\n                var colorCubes;\n                if (colorBuffer) {\n                    if (Array.isArray(colorBuffer)) {\n                        colorCubes = [];\n                        for(i = 0; i < colorBuffer.length; ++i)colorCubes[i] = colorBuffer[i];\n                    } else colorCubes = [\n                        colorBuffer\n                    ];\n                } else {\n                    colorCubes = Array(colorCount);\n                    var cubeMapParams = {\n                        radius: radius,\n                        format: colorFormat,\n                        type: colorType\n                    };\n                    for(i = 0; i < colorCount; ++i)colorCubes[i] = textureState.createCube(cubeMapParams);\n                }\n                // Check color cubes\n                params.color = Array(colorCubes.length);\n                for(i = 0; i < colorCubes.length; ++i){\n                    var cube = colorCubes[i];\n                    check$1(typeof cube === \"function\" && cube._reglType === \"textureCube\", \"invalid cube map\");\n                    radius = radius || cube.width;\n                    check$1(cube.width === radius && cube.height === radius, \"invalid cube map shape\");\n                    params.color[i] = {\n                        target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,\n                        data: colorCubes[i]\n                    };\n                }\n                for(i = 0; i < 6; ++i){\n                    for(var j = 0; j < colorCubes.length; ++j)params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;\n                    // reuse depth-stencil attachments across all cube maps\n                    if (i > 0) {\n                        params.depth = faces[0].depth;\n                        params.stencil = faces[0].stencil;\n                        params.depthStencil = faces[0].depthStencil;\n                    }\n                    if (faces[i]) faces[i](params);\n                    else faces[i] = createFBO(params);\n                }\n                return extend(reglFramebufferCube, {\n                    width: radius,\n                    height: radius,\n                    color: colorCubes\n                });\n            }\n            function resize(radius_) {\n                var i;\n                var radius = radius_ | 0;\n                check$1(radius > 0 && radius <= limits.maxCubeMapSize, \"invalid radius for cube fbo\");\n                if (radius === reglFramebufferCube.width) return reglFramebufferCube;\n                var colors = reglFramebufferCube.color;\n                for(i = 0; i < colors.length; ++i)colors[i].resize(radius);\n                for(i = 0; i < 6; ++i)faces[i].resize(radius);\n                reglFramebufferCube.width = reglFramebufferCube.height = radius;\n                return reglFramebufferCube;\n            }\n            reglFramebufferCube(options);\n            return extend(reglFramebufferCube, {\n                faces: faces,\n                resize: resize,\n                _reglType: \"framebufferCube\",\n                destroy: function() {\n                    faces.forEach(function(f) {\n                        f.destroy();\n                    });\n                }\n            });\n        }\n        function restoreFramebuffers() {\n            framebufferState.cur = null;\n            framebufferState.next = null;\n            framebufferState.dirty = true;\n            values(framebufferSet).forEach(function(fb) {\n                fb.framebuffer = gl.createFramebuffer();\n                updateFramebuffer(fb);\n            });\n        }\n        return extend(framebufferState, {\n            getFramebuffer: function(object) {\n                if (typeof object === \"function\" && object._reglType === \"framebuffer\") {\n                    var fbo = object._framebuffer;\n                    if (fbo instanceof REGLFramebuffer) return fbo;\n                }\n                return null;\n            },\n            create: createFBO,\n            createCube: createCubeFBO,\n            clear: function() {\n                values(framebufferSet).forEach(destroy);\n            },\n            restore: restoreFramebuffers\n        });\n    }\n    var GL_FLOAT$6 = 5126;\n    var GL_ARRAY_BUFFER$1 = 34962;\n    var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;\n    var VAO_OPTIONS = [\n        \"attributes\",\n        \"elements\",\n        \"offset\",\n        \"count\",\n        \"primitive\",\n        \"instances\"\n    ];\n    function AttributeRecord() {\n        this.state = 0;\n        this.x = 0.0;\n        this.y = 0.0;\n        this.z = 0.0;\n        this.w = 0.0;\n        this.buffer = null;\n        this.size = 0;\n        this.normalized = false;\n        this.type = GL_FLOAT$6;\n        this.offset = 0;\n        this.stride = 0;\n        this.divisor = 0;\n    }\n    function wrapAttributeState(gl, extensions, limits, stats, bufferState, elementState, drawState) {\n        var NUM_ATTRIBUTES = limits.maxAttributes;\n        var attributeBindings = new Array(NUM_ATTRIBUTES);\n        for(var i = 0; i < NUM_ATTRIBUTES; ++i)attributeBindings[i] = new AttributeRecord();\n        var vaoCount = 0;\n        var vaoSet = {};\n        var state = {\n            Record: AttributeRecord,\n            scope: {},\n            state: attributeBindings,\n            currentVAO: null,\n            targetVAO: null,\n            restore: extVAO() ? restoreVAO : function() {},\n            createVAO: createVAO,\n            getVAO: getVAO,\n            destroyBuffer: destroyBuffer,\n            setVAO: extVAO() ? setVAOEXT : setVAOEmulated,\n            clear: extVAO() ? destroyVAOEXT : function() {}\n        };\n        function destroyBuffer(buffer) {\n            for(var i = 0; i < attributeBindings.length; ++i){\n                var record = attributeBindings[i];\n                if (record.buffer === buffer) {\n                    gl.disableVertexAttribArray(i);\n                    record.buffer = null;\n                }\n            }\n        }\n        function extVAO() {\n            return extensions.oes_vertex_array_object;\n        }\n        function extInstanced() {\n            return extensions.angle_instanced_arrays;\n        }\n        function getVAO(vao) {\n            if (typeof vao === \"function\" && vao._vao) return vao._vao;\n            return null;\n        }\n        function setVAOEXT(vao) {\n            if (vao === state.currentVAO) return;\n            var ext = extVAO();\n            if (vao) ext.bindVertexArrayOES(vao.vao);\n            else ext.bindVertexArrayOES(null);\n            state.currentVAO = vao;\n        }\n        function setVAOEmulated(vao) {\n            if (vao === state.currentVAO) return;\n            if (vao) vao.bindAttrs();\n            else {\n                var exti = extInstanced();\n                for(var i = 0; i < attributeBindings.length; ++i){\n                    var binding = attributeBindings[i];\n                    if (binding.buffer) {\n                        gl.enableVertexAttribArray(i);\n                        binding.buffer.bind();\n                        gl.vertexAttribPointer(i, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset);\n                        if (exti && binding.divisor) exti.vertexAttribDivisorANGLE(i, binding.divisor);\n                    } else {\n                        gl.disableVertexAttribArray(i);\n                        gl.vertexAttrib4f(i, binding.x, binding.y, binding.z, binding.w);\n                    }\n                }\n                if (drawState.elements) gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, drawState.elements.buffer.buffer);\n                else gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);\n            }\n            state.currentVAO = vao;\n        }\n        function destroyVAOEXT() {\n            values(vaoSet).forEach(function(vao) {\n                vao.destroy();\n            });\n        }\n        function REGLVAO() {\n            this.id = ++vaoCount;\n            this.attributes = [];\n            this.elements = null;\n            this.ownsElements = false;\n            this.count = 0;\n            this.offset = 0;\n            this.instances = -1;\n            this.primitive = 4;\n            var extension = extVAO();\n            if (extension) this.vao = extension.createVertexArrayOES();\n            else this.vao = null;\n            vaoSet[this.id] = this;\n            this.buffers = [];\n        }\n        REGLVAO.prototype.bindAttrs = function() {\n            var exti = extInstanced();\n            var attributes = this.attributes;\n            for(var i = 0; i < attributes.length; ++i){\n                var attr = attributes[i];\n                if (attr.buffer) {\n                    gl.enableVertexAttribArray(i);\n                    gl.bindBuffer(GL_ARRAY_BUFFER$1, attr.buffer.buffer);\n                    gl.vertexAttribPointer(i, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);\n                    if (exti && attr.divisor) exti.vertexAttribDivisorANGLE(i, attr.divisor);\n                } else {\n                    gl.disableVertexAttribArray(i);\n                    gl.vertexAttrib4f(i, attr.x, attr.y, attr.z, attr.w);\n                }\n            }\n            for(var j = attributes.length; j < NUM_ATTRIBUTES; ++j)gl.disableVertexAttribArray(j);\n            var elements = elementState.getElements(this.elements);\n            if (elements) gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, elements.buffer.buffer);\n            else gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);\n        };\n        REGLVAO.prototype.refresh = function() {\n            var ext = extVAO();\n            if (ext) {\n                ext.bindVertexArrayOES(this.vao);\n                this.bindAttrs();\n                state.currentVAO = null;\n                ext.bindVertexArrayOES(null);\n            }\n        };\n        REGLVAO.prototype.destroy = function() {\n            if (this.vao) {\n                var extension = extVAO();\n                if (this === state.currentVAO) {\n                    state.currentVAO = null;\n                    extension.bindVertexArrayOES(null);\n                }\n                extension.deleteVertexArrayOES(this.vao);\n                this.vao = null;\n            }\n            if (this.ownsElements) {\n                this.elements.destroy();\n                this.elements = null;\n                this.ownsElements = false;\n            }\n            if (vaoSet[this.id]) {\n                delete vaoSet[this.id];\n                stats.vaoCount -= 1;\n            }\n        };\n        function restoreVAO() {\n            var ext = extVAO();\n            if (ext) values(vaoSet).forEach(function(vao) {\n                vao.refresh();\n            });\n        }\n        function createVAO(_attr) {\n            var vao = new REGLVAO();\n            stats.vaoCount += 1;\n            function updateVAO(options) {\n                var attributes;\n                if (Array.isArray(options)) {\n                    attributes = options;\n                    if (vao.elements && vao.ownsElements) vao.elements.destroy();\n                    vao.elements = null;\n                    vao.ownsElements = false;\n                    vao.offset = 0;\n                    vao.count = 0;\n                    vao.instances = -1;\n                    vao.primitive = 4;\n                } else {\n                    check$1(typeof options === \"object\", \"invalid arguments for create vao\");\n                    check$1(\"attributes\" in options, \"must specify attributes for vao\");\n                    if (options.elements) {\n                        var elements = options.elements;\n                        if (vao.ownsElements) {\n                            if (typeof elements === \"function\" && elements._reglType === \"elements\") {\n                                vao.elements.destroy();\n                                vao.ownsElements = false;\n                            } else {\n                                vao.elements(elements);\n                                vao.ownsElements = false;\n                            }\n                        } else if (elementState.getElements(options.elements)) {\n                            vao.elements = options.elements;\n                            vao.ownsElements = false;\n                        } else {\n                            vao.elements = elementState.create(options.elements);\n                            vao.ownsElements = true;\n                        }\n                    } else {\n                        vao.elements = null;\n                        vao.ownsElements = false;\n                    }\n                    attributes = options.attributes;\n                    // set default vao\n                    vao.offset = 0;\n                    vao.count = -1;\n                    vao.instances = -1;\n                    vao.primitive = 4;\n                    // copy element properties\n                    if (vao.elements) {\n                        vao.count = vao.elements._elements.vertCount;\n                        vao.primitive = vao.elements._elements.primType;\n                    }\n                    if (\"offset\" in options) vao.offset = options.offset | 0;\n                    if (\"count\" in options) vao.count = options.count | 0;\n                    if (\"instances\" in options) vao.instances = options.instances | 0;\n                    if (\"primitive\" in options) {\n                        check$1(options.primitive in primTypes, \"bad primitive type: \" + options.primitive);\n                        vao.primitive = primTypes[options.primitive];\n                    }\n                    check$1.optional(()=>{\n                        var keys = Object.keys(options);\n                        for(var i = 0; i < keys.length; ++i)check$1(VAO_OPTIONS.indexOf(keys[i]) >= 0, 'invalid option for vao: \"' + keys[i] + '\" valid options are ' + VAO_OPTIONS);\n                    });\n                    check$1(Array.isArray(attributes), \"attributes must be an array\");\n                }\n                check$1(attributes.length < NUM_ATTRIBUTES, \"too many attributes\");\n                check$1(attributes.length > 0, \"must specify at least one attribute\");\n                var bufUpdated = {};\n                var nattributes = vao.attributes;\n                nattributes.length = attributes.length;\n                for(var i = 0; i < attributes.length; ++i){\n                    var spec = attributes[i];\n                    var rec = nattributes[i] = new AttributeRecord();\n                    var data = spec.data || spec;\n                    if (Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data)) {\n                        var buf;\n                        if (vao.buffers[i]) {\n                            buf = vao.buffers[i];\n                            if (isTypedArray(data) && buf._buffer.byteLength >= data.byteLength) buf.subdata(data);\n                            else {\n                                buf.destroy();\n                                vao.buffers[i] = null;\n                            }\n                        }\n                        if (!vao.buffers[i]) buf = vao.buffers[i] = bufferState.create(spec, GL_ARRAY_BUFFER$1, false, true);\n                        rec.buffer = bufferState.getBuffer(buf);\n                        rec.size = rec.buffer.dimension | 0;\n                        rec.normalized = false;\n                        rec.type = rec.buffer.dtype;\n                        rec.offset = 0;\n                        rec.stride = 0;\n                        rec.divisor = 0;\n                        rec.state = 1;\n                        bufUpdated[i] = 1;\n                    } else if (bufferState.getBuffer(spec)) {\n                        rec.buffer = bufferState.getBuffer(spec);\n                        rec.size = rec.buffer.dimension | 0;\n                        rec.normalized = false;\n                        rec.type = rec.buffer.dtype;\n                        rec.offset = 0;\n                        rec.stride = 0;\n                        rec.divisor = 0;\n                        rec.state = 1;\n                    } else if (bufferState.getBuffer(spec.buffer)) {\n                        rec.buffer = bufferState.getBuffer(spec.buffer);\n                        rec.size = (+spec.size || rec.buffer.dimension) | 0;\n                        rec.normalized = !!spec.normalized || false;\n                        if (\"type\" in spec) {\n                            check$1.parameter(spec.type, glTypes, \"invalid buffer type\");\n                            rec.type = glTypes[spec.type];\n                        } else rec.type = rec.buffer.dtype;\n                        rec.offset = (spec.offset || 0) | 0;\n                        rec.stride = (spec.stride || 0) | 0;\n                        rec.divisor = (spec.divisor || 0) | 0;\n                        rec.state = 1;\n                        check$1(rec.size >= 1 && rec.size <= 4, \"size must be between 1 and 4\");\n                        check$1(rec.offset >= 0, \"invalid offset\");\n                        check$1(rec.stride >= 0 && rec.stride <= 255, \"stride must be between 0 and 255\");\n                        check$1(rec.divisor >= 0, \"divisor must be positive\");\n                        check$1(!rec.divisor || !!extensions.angle_instanced_arrays, \"ANGLE_instanced_arrays must be enabled to use divisor\");\n                    } else if (\"x\" in spec) {\n                        check$1(i > 0, \"first attribute must not be a constant\");\n                        rec.x = +spec.x || 0;\n                        rec.y = +spec.y || 0;\n                        rec.z = +spec.z || 0;\n                        rec.w = +spec.w || 0;\n                        rec.state = 2;\n                    } else check$1(false, \"invalid attribute spec for location \" + i);\n                }\n                // retire unused buffers\n                for(var j = 0; j < vao.buffers.length; ++j)if (!bufUpdated[j] && vao.buffers[j]) {\n                    vao.buffers[j].destroy();\n                    vao.buffers[j] = null;\n                }\n                vao.refresh();\n                return updateVAO;\n            }\n            updateVAO.destroy = function() {\n                for(var j = 0; j < vao.buffers.length; ++j)if (vao.buffers[j]) vao.buffers[j].destroy();\n                vao.buffers.length = 0;\n                if (vao.ownsElements) {\n                    vao.elements.destroy();\n                    vao.elements = null;\n                    vao.ownsElements = false;\n                }\n                vao.destroy();\n            };\n            updateVAO._vao = vao;\n            updateVAO._reglType = \"vao\";\n            return updateVAO(_attr);\n        }\n        return state;\n    }\n    var GL_FRAGMENT_SHADER = 35632;\n    var GL_VERTEX_SHADER = 35633;\n    var GL_ACTIVE_UNIFORMS = 0x8B86;\n    var GL_ACTIVE_ATTRIBUTES = 0x8B89;\n    function wrapShaderState(gl, stringStore, stats, config) {\n        // ===================================================\n        // glsl compilation and linking\n        // ===================================================\n        var fragShaders = {};\n        var vertShaders = {};\n        function ActiveInfo(name, id, location, info) {\n            this.name = name;\n            this.id = id;\n            this.location = location;\n            this.info = info;\n        }\n        function insertActiveInfo(list, info) {\n            for(var i = 0; i < list.length; ++i)if (list[i].id === info.id) {\n                list[i].location = info.location;\n                return;\n            }\n            list.push(info);\n        }\n        function getShader(type, id, command) {\n            var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;\n            var shader = cache[id];\n            if (!shader) {\n                var source = stringStore.str(id);\n                shader = gl.createShader(type);\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n                check$1.shaderError(gl, shader, source, type, command);\n                cache[id] = shader;\n            }\n            return shader;\n        }\n        // ===================================================\n        // program linking\n        // ===================================================\n        var programCache = {};\n        var programList = [];\n        var PROGRAM_COUNTER = 0;\n        function REGLProgram(fragId, vertId) {\n            this.id = PROGRAM_COUNTER++;\n            this.fragId = fragId;\n            this.vertId = vertId;\n            this.program = null;\n            this.uniforms = [];\n            this.attributes = [];\n            this.refCount = 1;\n            if (config.profile) this.stats = {\n                uniformsCount: 0,\n                attributesCount: 0\n            };\n        }\n        function linkProgram(desc, command, attributeLocations) {\n            var i, info;\n            // -------------------------------\n            // compile & link\n            // -------------------------------\n            var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);\n            var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);\n            var program = desc.program = gl.createProgram();\n            gl.attachShader(program, fragShader);\n            gl.attachShader(program, vertShader);\n            if (attributeLocations) for(i = 0; i < attributeLocations.length; ++i){\n                var binding = attributeLocations[i];\n                gl.bindAttribLocation(program, binding[0], binding[1]);\n            }\n            gl.linkProgram(program);\n            check$1.linkError(gl, program, stringStore.str(desc.fragId), stringStore.str(desc.vertId), command);\n            // -------------------------------\n            // grab uniforms\n            // -------------------------------\n            var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);\n            if (config.profile) desc.stats.uniformsCount = numUniforms;\n            var uniforms = desc.uniforms;\n            for(i = 0; i < numUniforms; ++i){\n                info = gl.getActiveUniform(program, i);\n                if (info) {\n                    if (info.size > 1) for(var j = 0; j < info.size; ++j){\n                        var name = info.name.replace(\"[0]\", \"[\" + j + \"]\");\n                        insertActiveInfo(uniforms, new ActiveInfo(name, stringStore.id(name), gl.getUniformLocation(program, name), info));\n                    }\n                    var uniName = info.name;\n                    if (info.size > 1) uniName = uniName.replace(\"[0]\", \"\");\n                    insertActiveInfo(uniforms, new ActiveInfo(uniName, stringStore.id(uniName), gl.getUniformLocation(program, uniName), info));\n                }\n            }\n            // -------------------------------\n            // grab attributes\n            // -------------------------------\n            var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);\n            if (config.profile) desc.stats.attributesCount = numAttributes;\n            var attributes = desc.attributes;\n            for(i = 0; i < numAttributes; ++i){\n                info = gl.getActiveAttrib(program, i);\n                if (info) insertActiveInfo(attributes, new ActiveInfo(info.name, stringStore.id(info.name), gl.getAttribLocation(program, info.name), info));\n            }\n        }\n        if (config.profile) {\n            stats.getMaxUniformsCount = function() {\n                var m = 0;\n                programList.forEach(function(desc) {\n                    if (desc.stats.uniformsCount > m) m = desc.stats.uniformsCount;\n                });\n                return m;\n            };\n            stats.getMaxAttributesCount = function() {\n                var m = 0;\n                programList.forEach(function(desc) {\n                    if (desc.stats.attributesCount > m) m = desc.stats.attributesCount;\n                });\n                return m;\n            };\n        }\n        function restoreShaders() {\n            fragShaders = {};\n            vertShaders = {};\n            for(var i = 0; i < programList.length; ++i)linkProgram(programList[i], null, programList[i].attributes.map(function(info) {\n                return [\n                    info.location,\n                    info.name\n                ];\n            }));\n        }\n        return {\n            clear: function() {\n                var deleteShader = gl.deleteShader.bind(gl);\n                values(fragShaders).forEach(deleteShader);\n                fragShaders = {};\n                values(vertShaders).forEach(deleteShader);\n                vertShaders = {};\n                programList.forEach(function(desc) {\n                    gl.deleteProgram(desc.program);\n                });\n                programList.length = 0;\n                programCache = {};\n                stats.shaderCount = 0;\n            },\n            program: function(vertId, fragId, command, attribLocations) {\n                check$1.command(vertId >= 0, \"missing vertex shader\", command);\n                check$1.command(fragId >= 0, \"missing fragment shader\", command);\n                var cache = programCache[fragId];\n                if (!cache) cache = programCache[fragId] = {};\n                var prevProgram = cache[vertId];\n                if (prevProgram) {\n                    prevProgram.refCount++;\n                    if (!attribLocations) return prevProgram;\n                }\n                var program = new REGLProgram(fragId, vertId);\n                stats.shaderCount++;\n                linkProgram(program, command, attribLocations);\n                if (!prevProgram) cache[vertId] = program;\n                programList.push(program);\n                return extend(program, {\n                    destroy: function() {\n                        program.refCount--;\n                        if (program.refCount <= 0) {\n                            gl.deleteProgram(program.program);\n                            var idx = programList.indexOf(program);\n                            programList.splice(idx, 1);\n                            stats.shaderCount--;\n                        }\n                        // no program is linked to this vert anymore\n                        if (cache[program.vertId].refCount <= 0) {\n                            gl.deleteShader(vertShaders[program.vertId]);\n                            delete vertShaders[program.vertId];\n                            delete programCache[program.fragId][program.vertId];\n                        }\n                        // no program is linked to this frag anymore\n                        if (!Object.keys(programCache[program.fragId]).length) {\n                            gl.deleteShader(fragShaders[program.fragId]);\n                            delete fragShaders[program.fragId];\n                            delete programCache[program.fragId];\n                        }\n                    }\n                });\n            },\n            restore: restoreShaders,\n            shader: getShader,\n            frag: -1,\n            vert: -1\n        };\n    }\n    var GL_RGBA$3 = 6408;\n    var GL_UNSIGNED_BYTE$7 = 5121;\n    var GL_PACK_ALIGNMENT = 0x0D05;\n    var GL_FLOAT$7 = 0x1406 // 5126\n    ;\n    function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {\n        function readPixelsImpl(input) {\n            var type;\n            if (framebufferState.next === null) {\n                check$1(glAttributes.preserveDrawingBuffer, 'you must create a webgl context with \"preserveDrawingBuffer\":true in order to read pixels from the drawing buffer');\n                type = GL_UNSIGNED_BYTE$7;\n            } else {\n                check$1(framebufferState.next.colorAttachments[0].texture !== null, \"You cannot read from a renderbuffer\");\n                type = framebufferState.next.colorAttachments[0].texture._texture.type;\n                check$1.optional(function() {\n                    if (extensions.oes_texture_float) {\n                        check$1(type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7, \"Reading from a framebuffer is only allowed for the types 'uint8' and 'float'\");\n                        if (type === GL_FLOAT$7) check$1(limits.readFloat, \"Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float\");\n                    } else check$1(type === GL_UNSIGNED_BYTE$7, \"Reading from a framebuffer is only allowed for the type 'uint8'\");\n                });\n            }\n            var x = 0;\n            var y = 0;\n            var width = context.framebufferWidth;\n            var height = context.framebufferHeight;\n            var data = null;\n            if (isTypedArray(input)) data = input;\n            else if (input) {\n                check$1.type(input, \"object\", \"invalid arguments to regl.read()\");\n                x = input.x | 0;\n                y = input.y | 0;\n                check$1(x >= 0 && x < context.framebufferWidth, \"invalid x offset for regl.read\");\n                check$1(y >= 0 && y < context.framebufferHeight, \"invalid y offset for regl.read\");\n                width = (input.width || context.framebufferWidth - x) | 0;\n                height = (input.height || context.framebufferHeight - y) | 0;\n                data = input.data || null;\n            }\n            // sanity check input.data\n            if (data) {\n                if (type === GL_UNSIGNED_BYTE$7) check$1(data instanceof Uint8Array, \"buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'\");\n                else if (type === GL_FLOAT$7) check$1(data instanceof Float32Array, \"buffer must be 'Float32Array' when reading from a framebuffer of type 'float'\");\n            }\n            check$1(width > 0 && width + x <= context.framebufferWidth, \"invalid width for read pixels\");\n            check$1(height > 0 && height + y <= context.framebufferHeight, \"invalid height for read pixels\");\n            // Update WebGL state\n            reglPoll();\n            // Compute size\n            var size = width * height * 4;\n            // Allocate data\n            if (!data) {\n                if (type === GL_UNSIGNED_BYTE$7) data = new Uint8Array(size);\n                else if (type === GL_FLOAT$7) data = data || new Float32Array(size);\n            }\n            // Type check\n            check$1.isTypedArray(data, \"data buffer for regl.read() must be a typedarray\");\n            check$1(data.byteLength >= size, \"data buffer for regl.read() too small\");\n            // Run read pixels\n            gl.pixelStorei(GL_PACK_ALIGNMENT, 4);\n            gl.readPixels(x, y, width, height, GL_RGBA$3, type, data);\n            return data;\n        }\n        function readPixelsFBO(options) {\n            var result;\n            framebufferState.setFBO({\n                framebuffer: options.framebuffer\n            }, function() {\n                result = readPixelsImpl(options);\n            });\n            return result;\n        }\n        function readPixels(options) {\n            if (!options || !(\"framebuffer\" in options)) return readPixelsImpl(options);\n            else return readPixelsFBO(options);\n        }\n        return readPixels;\n    }\n    function slice(x) {\n        return Array.prototype.slice.call(x);\n    }\n    function join(x) {\n        return slice(x).join(\"\");\n    }\n    function createEnvironment() {\n        // Unique variable id counter\n        var varCounter = 0;\n        // Linked values are passed from this scope into the generated code block\n        // Calling link() passes a value into the generated scope and returns\n        // the variable name which it is bound to\n        var linkedNames = [];\n        var linkedValues = [];\n        function link(value) {\n            for(var i = 0; i < linkedValues.length; ++i){\n                if (linkedValues[i] === value) return linkedNames[i];\n            }\n            var name = \"g\" + varCounter++;\n            linkedNames.push(name);\n            linkedValues.push(value);\n            return name;\n        }\n        // create a code block\n        function block() {\n            var code = [];\n            function push() {\n                code.push.apply(code, slice(arguments));\n            }\n            var vars = [];\n            function def() {\n                var name = \"v\" + varCounter++;\n                vars.push(name);\n                if (arguments.length > 0) {\n                    code.push(name, \"=\");\n                    code.push.apply(code, slice(arguments));\n                    code.push(\";\");\n                }\n                return name;\n            }\n            return extend(push, {\n                def: def,\n                toString: function() {\n                    return join([\n                        vars.length > 0 ? \"var \" + vars.join(\",\") + \";\" : \"\",\n                        join(code)\n                    ]);\n                }\n            });\n        }\n        function scope() {\n            var entry = block();\n            var exit = block();\n            var entryToString = entry.toString;\n            var exitToString = exit.toString;\n            function save(object, prop) {\n                exit(object, prop, \"=\", entry.def(object, prop), \";\");\n            }\n            return extend(function() {\n                entry.apply(entry, slice(arguments));\n            }, {\n                def: entry.def,\n                entry: entry,\n                exit: exit,\n                save: save,\n                set: function(object, prop, value) {\n                    save(object, prop);\n                    entry(object, prop, \"=\", value, \";\");\n                },\n                toString: function() {\n                    return entryToString() + exitToString();\n                }\n            });\n        }\n        function conditional() {\n            var pred = join(arguments);\n            var thenBlock = scope();\n            var elseBlock = scope();\n            var thenToString = thenBlock.toString;\n            var elseToString = elseBlock.toString;\n            return extend(thenBlock, {\n                then: function() {\n                    thenBlock.apply(thenBlock, slice(arguments));\n                    return this;\n                },\n                else: function() {\n                    elseBlock.apply(elseBlock, slice(arguments));\n                    return this;\n                },\n                toString: function() {\n                    var elseClause = elseToString();\n                    if (elseClause) elseClause = \"else{\" + elseClause + \"}\";\n                    return join([\n                        \"if(\",\n                        pred,\n                        \"){\",\n                        thenToString(),\n                        \"}\",\n                        elseClause\n                    ]);\n                }\n            });\n        }\n        // procedure list\n        var globalBlock = block();\n        var procedures = {};\n        function proc(name, count) {\n            var args = [];\n            function arg() {\n                var name = \"a\" + args.length;\n                args.push(name);\n                return name;\n            }\n            count = count || 0;\n            for(var i = 0; i < count; ++i)arg();\n            var body = scope();\n            var bodyToString = body.toString;\n            var result = procedures[name] = extend(body, {\n                arg: arg,\n                toString: function() {\n                    return join([\n                        \"function(\",\n                        args.join(),\n                        \"){\",\n                        bodyToString(),\n                        \"}\"\n                    ]);\n                }\n            });\n            return result;\n        }\n        function compile() {\n            var code = [\n                '\"use strict\";',\n                globalBlock,\n                \"return {\"\n            ];\n            Object.keys(procedures).forEach(function(name) {\n                code.push('\"', name, '\":', procedures[name].toString(), \",\");\n            });\n            code.push(\"}\");\n            var src = join(code).replace(/;/g, \";\\n\").replace(/}/g, \"}\\n\").replace(/{/g, \"{\\n\");\n            var proc = Function.apply(null, linkedNames.concat(src));\n            return proc.apply(null, linkedValues);\n        }\n        return {\n            global: globalBlock,\n            link: link,\n            block: block,\n            proc: proc,\n            scope: scope,\n            cond: conditional,\n            compile: compile\n        };\n    }\n    // \"cute\" names for vector components\n    var CUTE_COMPONENTS = \"xyzw\".split(\"\");\n    var GL_UNSIGNED_BYTE$8 = 5121;\n    var ATTRIB_STATE_POINTER = 1;\n    var ATTRIB_STATE_CONSTANT = 2;\n    var DYN_FUNC$1 = 0;\n    var DYN_PROP$1 = 1;\n    var DYN_CONTEXT$1 = 2;\n    var DYN_STATE$1 = 3;\n    var DYN_THUNK = 4;\n    var DYN_CONSTANT$1 = 5;\n    var DYN_ARRAY$1 = 6;\n    var S_DITHER = \"dither\";\n    var S_BLEND_ENABLE = \"blend.enable\";\n    var S_BLEND_COLOR = \"blend.color\";\n    var S_BLEND_EQUATION = \"blend.equation\";\n    var S_BLEND_FUNC = \"blend.func\";\n    var S_DEPTH_ENABLE = \"depth.enable\";\n    var S_DEPTH_FUNC = \"depth.func\";\n    var S_DEPTH_RANGE = \"depth.range\";\n    var S_DEPTH_MASK = \"depth.mask\";\n    var S_COLOR_MASK = \"colorMask\";\n    var S_CULL_ENABLE = \"cull.enable\";\n    var S_CULL_FACE = \"cull.face\";\n    var S_FRONT_FACE = \"frontFace\";\n    var S_LINE_WIDTH = \"lineWidth\";\n    var S_POLYGON_OFFSET_ENABLE = \"polygonOffset.enable\";\n    var S_POLYGON_OFFSET_OFFSET = \"polygonOffset.offset\";\n    var S_SAMPLE_ALPHA = \"sample.alpha\";\n    var S_SAMPLE_ENABLE = \"sample.enable\";\n    var S_SAMPLE_COVERAGE = \"sample.coverage\";\n    var S_STENCIL_ENABLE = \"stencil.enable\";\n    var S_STENCIL_MASK = \"stencil.mask\";\n    var S_STENCIL_FUNC = \"stencil.func\";\n    var S_STENCIL_OPFRONT = \"stencil.opFront\";\n    var S_STENCIL_OPBACK = \"stencil.opBack\";\n    var S_SCISSOR_ENABLE = \"scissor.enable\";\n    var S_SCISSOR_BOX = \"scissor.box\";\n    var S_VIEWPORT = \"viewport\";\n    var S_PROFILE = \"profile\";\n    var S_FRAMEBUFFER = \"framebuffer\";\n    var S_VERT = \"vert\";\n    var S_FRAG = \"frag\";\n    var S_ELEMENTS = \"elements\";\n    var S_PRIMITIVE = \"primitive\";\n    var S_COUNT = \"count\";\n    var S_OFFSET = \"offset\";\n    var S_INSTANCES = \"instances\";\n    var S_VAO = \"vao\";\n    var SUFFIX_WIDTH = \"Width\";\n    var SUFFIX_HEIGHT = \"Height\";\n    var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;\n    var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;\n    var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;\n    var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;\n    var S_DRAWINGBUFFER = \"drawingBuffer\";\n    var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;\n    var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;\n    var NESTED_OPTIONS = [\n        S_BLEND_FUNC,\n        S_BLEND_EQUATION,\n        S_STENCIL_FUNC,\n        S_STENCIL_OPFRONT,\n        S_STENCIL_OPBACK,\n        S_SAMPLE_COVERAGE,\n        S_VIEWPORT,\n        S_SCISSOR_BOX,\n        S_POLYGON_OFFSET_OFFSET\n    ];\n    var GL_ARRAY_BUFFER$2 = 34962;\n    var GL_ELEMENT_ARRAY_BUFFER$2 = 34963;\n    var GL_FRAGMENT_SHADER$1 = 35632;\n    var GL_VERTEX_SHADER$1 = 35633;\n    var GL_TEXTURE_2D$3 = 0x0DE1;\n    var GL_TEXTURE_CUBE_MAP$2 = 0x8513;\n    var GL_CULL_FACE = 0x0B44;\n    var GL_BLEND = 0x0BE2;\n    var GL_DITHER = 0x0BD0;\n    var GL_STENCIL_TEST = 0x0B90;\n    var GL_DEPTH_TEST = 0x0B71;\n    var GL_SCISSOR_TEST = 0x0C11;\n    var GL_POLYGON_OFFSET_FILL = 0x8037;\n    var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\n    var GL_SAMPLE_COVERAGE = 0x80A0;\n    var GL_FLOAT$8 = 5126;\n    var GL_FLOAT_VEC2 = 35664;\n    var GL_FLOAT_VEC3 = 35665;\n    var GL_FLOAT_VEC4 = 35666;\n    var GL_INT$3 = 5124;\n    var GL_INT_VEC2 = 35667;\n    var GL_INT_VEC3 = 35668;\n    var GL_INT_VEC4 = 35669;\n    var GL_BOOL = 35670;\n    var GL_BOOL_VEC2 = 35671;\n    var GL_BOOL_VEC3 = 35672;\n    var GL_BOOL_VEC4 = 35673;\n    var GL_FLOAT_MAT2 = 35674;\n    var GL_FLOAT_MAT3 = 35675;\n    var GL_FLOAT_MAT4 = 35676;\n    var GL_SAMPLER_2D = 35678;\n    var GL_SAMPLER_CUBE = 35680;\n    var GL_TRIANGLES$1 = 4;\n    var GL_FRONT = 1028;\n    var GL_BACK = 1029;\n    var GL_CW = 0x0900;\n    var GL_CCW = 0x0901;\n    var GL_MIN_EXT = 0x8007;\n    var GL_MAX_EXT = 0x8008;\n    var GL_ALWAYS = 519;\n    var GL_KEEP = 7680;\n    var GL_ZERO = 0;\n    var GL_ONE = 1;\n    var GL_FUNC_ADD = 0x8006;\n    var GL_LESS = 513;\n    var GL_FRAMEBUFFER$2 = 0x8D40;\n    var GL_COLOR_ATTACHMENT0$2 = 0x8CE0;\n    var blendFuncs = {\n        \"0\": 0,\n        \"1\": 1,\n        \"zero\": 0,\n        \"one\": 1,\n        \"src color\": 768,\n        \"one minus src color\": 769,\n        \"src alpha\": 770,\n        \"one minus src alpha\": 771,\n        \"dst color\": 774,\n        \"one minus dst color\": 775,\n        \"dst alpha\": 772,\n        \"one minus dst alpha\": 773,\n        \"constant color\": 32769,\n        \"one minus constant color\": 32770,\n        \"constant alpha\": 32771,\n        \"one minus constant alpha\": 32772,\n        \"src alpha saturate\": 776\n    };\n    // There are invalid values for srcRGB and dstRGB. See:\n    // https://www.khronos.org/registry/webgl/specs/1.0/#6.13\n    // https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56\n    var invalidBlendCombinations = [\n        \"constant color, constant alpha\",\n        \"one minus constant color, constant alpha\",\n        \"constant color, one minus constant alpha\",\n        \"one minus constant color, one minus constant alpha\",\n        \"constant alpha, constant color\",\n        \"constant alpha, one minus constant color\",\n        \"one minus constant alpha, constant color\",\n        \"one minus constant alpha, one minus constant color\"\n    ];\n    var compareFuncs = {\n        \"never\": 512,\n        \"less\": 513,\n        \"<\": 513,\n        \"equal\": 514,\n        \"=\": 514,\n        \"==\": 514,\n        \"===\": 514,\n        \"lequal\": 515,\n        \"<=\": 515,\n        \"greater\": 516,\n        \">\": 516,\n        \"notequal\": 517,\n        \"!=\": 517,\n        \"!==\": 517,\n        \"gequal\": 518,\n        \">=\": 518,\n        \"always\": 519\n    };\n    var stencilOps = {\n        \"0\": 0,\n        \"zero\": 0,\n        \"keep\": 7680,\n        \"replace\": 7681,\n        \"increment\": 7682,\n        \"decrement\": 7683,\n        \"increment wrap\": 34055,\n        \"decrement wrap\": 34056,\n        \"invert\": 5386\n    };\n    var shaderType = {\n        \"frag\": GL_FRAGMENT_SHADER$1,\n        \"vert\": GL_VERTEX_SHADER$1\n    };\n    var orientationType = {\n        \"cw\": GL_CW,\n        \"ccw\": GL_CCW\n    };\n    function isBufferArgs(x) {\n        return Array.isArray(x) || isTypedArray(x) || isNDArrayLike(x);\n    }\n    // Make sure viewport is processed first\n    function sortState(state) {\n        return state.sort(function(a, b) {\n            if (a === S_VIEWPORT) return -1;\n            else if (b === S_VIEWPORT) return 1;\n            return a < b ? -1 : 1;\n        });\n    }\n    function Declaration(thisDep, contextDep, propDep, append) {\n        this.thisDep = thisDep;\n        this.contextDep = contextDep;\n        this.propDep = propDep;\n        this.append = append;\n    }\n    function isStatic(decl) {\n        return decl && !(decl.thisDep || decl.contextDep || decl.propDep);\n    }\n    function createStaticDecl(append) {\n        return new Declaration(false, false, false, append);\n    }\n    function createDynamicDecl(dyn, append) {\n        var type = dyn.type;\n        if (type === DYN_FUNC$1) {\n            var numArgs = dyn.data.length;\n            return new Declaration(true, numArgs >= 1, numArgs >= 2, append);\n        } else if (type === DYN_THUNK) {\n            var data = dyn.data;\n            return new Declaration(data.thisDep, data.contextDep, data.propDep, append);\n        } else if (type === DYN_CONSTANT$1) return new Declaration(false, false, false, append);\n        else if (type === DYN_ARRAY$1) {\n            var thisDep = false;\n            var contextDep = false;\n            var propDep = false;\n            for(var i = 0; i < dyn.data.length; ++i){\n                var subDyn = dyn.data[i];\n                if (subDyn.type === DYN_PROP$1) propDep = true;\n                else if (subDyn.type === DYN_CONTEXT$1) contextDep = true;\n                else if (subDyn.type === DYN_STATE$1) thisDep = true;\n                else if (subDyn.type === DYN_FUNC$1) {\n                    thisDep = true;\n                    var subArgs = subDyn.data;\n                    if (subArgs >= 1) contextDep = true;\n                    if (subArgs >= 2) propDep = true;\n                } else if (subDyn.type === DYN_THUNK) {\n                    thisDep = thisDep || subDyn.data.thisDep;\n                    contextDep = contextDep || subDyn.data.contextDep;\n                    propDep = propDep || subDyn.data.propDep;\n                }\n            }\n            return new Declaration(thisDep, contextDep, propDep, append);\n        } else return new Declaration(type === DYN_STATE$1, type === DYN_CONTEXT$1, type === DYN_PROP$1, append);\n    }\n    var SCOPE_DECL = new Declaration(false, false, false, function() {});\n    function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config) {\n        var AttributeRecord = attributeState.Record;\n        var blendEquations = {\n            \"add\": 32774,\n            \"subtract\": 32778,\n            \"reverse subtract\": 32779\n        };\n        if (extensions.ext_blend_minmax) {\n            blendEquations.min = GL_MIN_EXT;\n            blendEquations.max = GL_MAX_EXT;\n        }\n        var extInstancing = extensions.angle_instanced_arrays;\n        var extDrawBuffers = extensions.webgl_draw_buffers;\n        var extVertexArrays = extensions.oes_vertex_array_object;\n        // ===================================================\n        // ===================================================\n        // WEBGL STATE\n        // ===================================================\n        // ===================================================\n        var currentState = {\n            dirty: true,\n            profile: config.profile\n        };\n        var nextState = {};\n        var GL_STATE_NAMES = [];\n        var GL_FLAGS = {};\n        var GL_VARIABLES = {};\n        function propName(name) {\n            return name.replace(\".\", \"_\");\n        }\n        function stateFlag(sname, cap, init) {\n            var name = propName(sname);\n            GL_STATE_NAMES.push(sname);\n            nextState[name] = currentState[name] = !!init;\n            GL_FLAGS[name] = cap;\n        }\n        function stateVariable(sname, func, init) {\n            var name = propName(sname);\n            GL_STATE_NAMES.push(sname);\n            if (Array.isArray(init)) {\n                currentState[name] = init.slice();\n                nextState[name] = init.slice();\n            } else currentState[name] = nextState[name] = init;\n            GL_VARIABLES[name] = func;\n        }\n        // Dithering\n        stateFlag(S_DITHER, GL_DITHER);\n        // Blending\n        stateFlag(S_BLEND_ENABLE, GL_BLEND);\n        stateVariable(S_BLEND_COLOR, \"blendColor\", [\n            0,\n            0,\n            0,\n            0\n        ]);\n        stateVariable(S_BLEND_EQUATION, \"blendEquationSeparate\", [\n            GL_FUNC_ADD,\n            GL_FUNC_ADD\n        ]);\n        stateVariable(S_BLEND_FUNC, \"blendFuncSeparate\", [\n            GL_ONE,\n            GL_ZERO,\n            GL_ONE,\n            GL_ZERO\n        ]);\n        // Depth\n        stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);\n        stateVariable(S_DEPTH_FUNC, \"depthFunc\", GL_LESS);\n        stateVariable(S_DEPTH_RANGE, \"depthRange\", [\n            0,\n            1\n        ]);\n        stateVariable(S_DEPTH_MASK, \"depthMask\", true);\n        // Color mask\n        stateVariable(S_COLOR_MASK, S_COLOR_MASK, [\n            true,\n            true,\n            true,\n            true\n        ]);\n        // Face culling\n        stateFlag(S_CULL_ENABLE, GL_CULL_FACE);\n        stateVariable(S_CULL_FACE, \"cullFace\", GL_BACK);\n        // Front face orientation\n        stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);\n        // Line width\n        stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);\n        // Polygon offset\n        stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);\n        stateVariable(S_POLYGON_OFFSET_OFFSET, \"polygonOffset\", [\n            0,\n            0\n        ]);\n        // Sample coverage\n        stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);\n        stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);\n        stateVariable(S_SAMPLE_COVERAGE, \"sampleCoverage\", [\n            1,\n            false\n        ]);\n        // Stencil\n        stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);\n        stateVariable(S_STENCIL_MASK, \"stencilMask\", -1);\n        stateVariable(S_STENCIL_FUNC, \"stencilFunc\", [\n            GL_ALWAYS,\n            0,\n            -1\n        ]);\n        stateVariable(S_STENCIL_OPFRONT, \"stencilOpSeparate\", [\n            GL_FRONT,\n            GL_KEEP,\n            GL_KEEP,\n            GL_KEEP\n        ]);\n        stateVariable(S_STENCIL_OPBACK, \"stencilOpSeparate\", [\n            GL_BACK,\n            GL_KEEP,\n            GL_KEEP,\n            GL_KEEP\n        ]);\n        // Scissor\n        stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);\n        stateVariable(S_SCISSOR_BOX, \"scissor\", [\n            0,\n            0,\n            gl.drawingBufferWidth,\n            gl.drawingBufferHeight\n        ]);\n        // Viewport\n        stateVariable(S_VIEWPORT, S_VIEWPORT, [\n            0,\n            0,\n            gl.drawingBufferWidth,\n            gl.drawingBufferHeight\n        ]);\n        // ===================================================\n        // ===================================================\n        // ENVIRONMENT\n        // ===================================================\n        // ===================================================\n        var sharedState = {\n            gl: gl,\n            context: contextState,\n            strings: stringStore,\n            next: nextState,\n            current: currentState,\n            draw: drawState,\n            elements: elementState,\n            buffer: bufferState,\n            shader: shaderState,\n            attributes: attributeState.state,\n            vao: attributeState,\n            uniforms: uniformState,\n            framebuffer: framebufferState,\n            extensions: extensions,\n            timer: timer,\n            isBufferArgs: isBufferArgs\n        };\n        var sharedConstants = {\n            primTypes: primTypes,\n            compareFuncs: compareFuncs,\n            blendFuncs: blendFuncs,\n            blendEquations: blendEquations,\n            stencilOps: stencilOps,\n            glTypes: glTypes,\n            orientationType: orientationType\n        };\n        check$1.optional(function() {\n            sharedState.isArrayLike = isArrayLike;\n        });\n        if (extDrawBuffers) {\n            sharedConstants.backBuffer = [\n                GL_BACK\n            ];\n            sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function(i) {\n                if (i === 0) return [\n                    0\n                ];\n                return loop(i, function(j) {\n                    return GL_COLOR_ATTACHMENT0$2 + j;\n                });\n            });\n        }\n        var drawCallCounter = 0;\n        function createREGLEnvironment() {\n            var env = createEnvironment();\n            var link = env.link;\n            var global = env.global;\n            env.id = drawCallCounter++;\n            env.batchId = \"0\";\n            // link shared state\n            var SHARED = link(sharedState);\n            var shared = env.shared = {\n                props: \"a0\"\n            };\n            Object.keys(sharedState).forEach(function(prop) {\n                shared[prop] = global.def(SHARED, \".\", prop);\n            });\n            // Inject runtime assertion stuff for debug builds\n            check$1.optional(function() {\n                env.CHECK = link(check$1);\n                env.commandStr = check$1.guessCommand();\n                env.command = link(env.commandStr);\n                env.assert = function(block, pred, message) {\n                    block(\"if(!(\", pred, \"))\", this.CHECK, \".commandRaise(\", link(message), \",\", this.command, \");\");\n                };\n                sharedConstants.invalidBlendCombinations = invalidBlendCombinations;\n            });\n            // Copy GL state variables over\n            var nextVars = env.next = {};\n            var currentVars = env.current = {};\n            Object.keys(GL_VARIABLES).forEach(function(variable) {\n                if (Array.isArray(currentState[variable])) {\n                    nextVars[variable] = global.def(shared.next, \".\", variable);\n                    currentVars[variable] = global.def(shared.current, \".\", variable);\n                }\n            });\n            // Initialize shared constants\n            var constants = env.constants = {};\n            Object.keys(sharedConstants).forEach(function(name) {\n                constants[name] = global.def(JSON.stringify(sharedConstants[name]));\n            });\n            // Helper function for calling a block\n            env.invoke = function(block, x) {\n                switch(x.type){\n                    case DYN_FUNC$1:\n                        var argList = [\n                            \"this\",\n                            shared.context,\n                            shared.props,\n                            env.batchId\n                        ];\n                        return block.def(link(x.data), \".call(\", argList.slice(0, Math.max(x.data.length + 1, 4)), \")\");\n                    case DYN_PROP$1:\n                        return block.def(shared.props, x.data);\n                    case DYN_CONTEXT$1:\n                        return block.def(shared.context, x.data);\n                    case DYN_STATE$1:\n                        return block.def(\"this\", x.data);\n                    case DYN_THUNK:\n                        x.data.append(env, block);\n                        return x.data.ref;\n                    case DYN_CONSTANT$1:\n                        return x.data.toString();\n                    case DYN_ARRAY$1:\n                        return x.data.map(function(y) {\n                            return env.invoke(block, y);\n                        });\n                }\n            };\n            env.attribCache = {};\n            var scopeAttribs = {};\n            env.scopeAttrib = function(name) {\n                var id = stringStore.id(name);\n                if (id in scopeAttribs) return scopeAttribs[id];\n                var binding = attributeState.scope[id];\n                if (!binding) binding = attributeState.scope[id] = new AttributeRecord();\n                var result = scopeAttribs[id] = link(binding);\n                return result;\n            };\n            return env;\n        }\n        // ===================================================\n        // ===================================================\n        // PARSING\n        // ===================================================\n        // ===================================================\n        function parseProfile(options) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            var profileEnable;\n            if (S_PROFILE in staticOptions) {\n                var value = !!staticOptions[S_PROFILE];\n                profileEnable = createStaticDecl(function(env, scope) {\n                    return value;\n                });\n                profileEnable.enable = value;\n            } else if (S_PROFILE in dynamicOptions) {\n                var dyn = dynamicOptions[S_PROFILE];\n                profileEnable = createDynamicDecl(dyn, function(env, scope) {\n                    return env.invoke(scope, dyn);\n                });\n            }\n            return profileEnable;\n        }\n        function parseFramebuffer(options, env) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            if (S_FRAMEBUFFER in staticOptions) {\n                var framebuffer = staticOptions[S_FRAMEBUFFER];\n                if (framebuffer) {\n                    framebuffer = framebufferState.getFramebuffer(framebuffer);\n                    check$1.command(framebuffer, \"invalid framebuffer object\");\n                    return createStaticDecl(function(env, block) {\n                        var FRAMEBUFFER = env.link(framebuffer);\n                        var shared = env.shared;\n                        block.set(shared.framebuffer, \".next\", FRAMEBUFFER);\n                        var CONTEXT = shared.context;\n                        block.set(CONTEXT, \".\" + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + \".width\");\n                        block.set(CONTEXT, \".\" + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + \".height\");\n                        return FRAMEBUFFER;\n                    });\n                } else return createStaticDecl(function(env, scope) {\n                    var shared = env.shared;\n                    scope.set(shared.framebuffer, \".next\", \"null\");\n                    var CONTEXT = shared.context;\n                    scope.set(CONTEXT, \".\" + S_FRAMEBUFFER_WIDTH, CONTEXT + \".\" + S_DRAWINGBUFFER_WIDTH);\n                    scope.set(CONTEXT, \".\" + S_FRAMEBUFFER_HEIGHT, CONTEXT + \".\" + S_DRAWINGBUFFER_HEIGHT);\n                    return \"null\";\n                });\n            } else if (S_FRAMEBUFFER in dynamicOptions) {\n                var dyn = dynamicOptions[S_FRAMEBUFFER];\n                return createDynamicDecl(dyn, function(env, scope) {\n                    var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);\n                    var shared = env.shared;\n                    var FRAMEBUFFER_STATE = shared.framebuffer;\n                    var FRAMEBUFFER = scope.def(FRAMEBUFFER_STATE, \".getFramebuffer(\", FRAMEBUFFER_FUNC, \")\");\n                    check$1.optional(function() {\n                        env.assert(scope, \"!\" + FRAMEBUFFER_FUNC + \"||\" + FRAMEBUFFER, \"invalid framebuffer object\");\n                    });\n                    scope.set(FRAMEBUFFER_STATE, \".next\", FRAMEBUFFER);\n                    var CONTEXT = shared.context;\n                    scope.set(CONTEXT, \".\" + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + \"?\" + FRAMEBUFFER + \".width:\" + CONTEXT + \".\" + S_DRAWINGBUFFER_WIDTH);\n                    scope.set(CONTEXT, \".\" + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + \"?\" + FRAMEBUFFER + \".height:\" + CONTEXT + \".\" + S_DRAWINGBUFFER_HEIGHT);\n                    return FRAMEBUFFER;\n                });\n            } else return null;\n        }\n        function parseViewportScissor(options, framebuffer, env) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            function parseBox(param) {\n                if (param in staticOptions) {\n                    var box = staticOptions[param];\n                    check$1.commandType(box, \"object\", \"invalid \" + param, env.commandStr);\n                    var isStatic = true;\n                    var x = box.x | 0;\n                    var y = box.y | 0;\n                    var w, h;\n                    if (\"width\" in box) {\n                        w = box.width | 0;\n                        check$1.command(w >= 0, \"invalid \" + param, env.commandStr);\n                    } else isStatic = false;\n                    if (\"height\" in box) {\n                        h = box.height | 0;\n                        check$1.command(h >= 0, \"invalid \" + param, env.commandStr);\n                    } else isStatic = false;\n                    return new Declaration(!isStatic && framebuffer && framebuffer.thisDep, !isStatic && framebuffer && framebuffer.contextDep, !isStatic && framebuffer && framebuffer.propDep, function(env, scope) {\n                        var CONTEXT = env.shared.context;\n                        var BOX_W = w;\n                        if (!(\"width\" in box)) BOX_W = scope.def(CONTEXT, \".\", S_FRAMEBUFFER_WIDTH, \"-\", x);\n                        var BOX_H = h;\n                        if (!(\"height\" in box)) BOX_H = scope.def(CONTEXT, \".\", S_FRAMEBUFFER_HEIGHT, \"-\", y);\n                        return [\n                            x,\n                            y,\n                            BOX_W,\n                            BOX_H\n                        ];\n                    });\n                } else if (param in dynamicOptions) {\n                    var dynBox = dynamicOptions[param];\n                    var result = createDynamicDecl(dynBox, function(env, scope) {\n                        var BOX = env.invoke(scope, dynBox);\n                        check$1.optional(function() {\n                            env.assert(scope, BOX + \"&&typeof \" + BOX + '===\"object\"', \"invalid \" + param);\n                        });\n                        var CONTEXT = env.shared.context;\n                        var BOX_X = scope.def(BOX, \".x|0\");\n                        var BOX_Y = scope.def(BOX, \".y|0\");\n                        var BOX_W = scope.def('\"width\" in ', BOX, \"?\", BOX, \".width|0:\", \"(\", CONTEXT, \".\", S_FRAMEBUFFER_WIDTH, \"-\", BOX_X, \")\");\n                        var BOX_H = scope.def('\"height\" in ', BOX, \"?\", BOX, \".height|0:\", \"(\", CONTEXT, \".\", S_FRAMEBUFFER_HEIGHT, \"-\", BOX_Y, \")\");\n                        check$1.optional(function() {\n                            env.assert(scope, BOX_W + \">=0&&\" + BOX_H + \">=0\", \"invalid \" + param);\n                        });\n                        return [\n                            BOX_X,\n                            BOX_Y,\n                            BOX_W,\n                            BOX_H\n                        ];\n                    });\n                    if (framebuffer) {\n                        result.thisDep = result.thisDep || framebuffer.thisDep;\n                        result.contextDep = result.contextDep || framebuffer.contextDep;\n                        result.propDep = result.propDep || framebuffer.propDep;\n                    }\n                    return result;\n                } else if (framebuffer) return new Declaration(framebuffer.thisDep, framebuffer.contextDep, framebuffer.propDep, function(env, scope) {\n                    var CONTEXT = env.shared.context;\n                    return [\n                        0,\n                        0,\n                        scope.def(CONTEXT, \".\", S_FRAMEBUFFER_WIDTH),\n                        scope.def(CONTEXT, \".\", S_FRAMEBUFFER_HEIGHT)\n                    ];\n                });\n                else return null;\n            }\n            var viewport = parseBox(S_VIEWPORT);\n            if (viewport) {\n                var prevViewport = viewport;\n                viewport = new Declaration(viewport.thisDep, viewport.contextDep, viewport.propDep, function(env, scope) {\n                    var VIEWPORT = prevViewport.append(env, scope);\n                    var CONTEXT = env.shared.context;\n                    scope.set(CONTEXT, \".\" + S_VIEWPORT_WIDTH, VIEWPORT[2]);\n                    scope.set(CONTEXT, \".\" + S_VIEWPORT_HEIGHT, VIEWPORT[3]);\n                    return VIEWPORT;\n                });\n            }\n            return {\n                viewport: viewport,\n                scissor_box: parseBox(S_SCISSOR_BOX)\n            };\n        }\n        function parseAttribLocations(options, attributes) {\n            var staticOptions = options.static;\n            var staticProgram = typeof staticOptions[S_FRAG] === \"string\" && typeof staticOptions[S_VERT] === \"string\";\n            if (staticProgram) {\n                if (Object.keys(attributes.dynamic).length > 0) return null;\n                var staticAttributes = attributes.static;\n                var sAttributes = Object.keys(staticAttributes);\n                if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === \"number\") {\n                    var bindings = [];\n                    for(var i = 0; i < sAttributes.length; ++i){\n                        check$1(typeof staticAttributes[sAttributes[i]] === \"number\", \"must specify all vertex attribute locations when using vaos\");\n                        bindings.push([\n                            staticAttributes[sAttributes[i]] | 0,\n                            sAttributes[i]\n                        ]);\n                    }\n                    return bindings;\n                }\n            }\n            return null;\n        }\n        function parseProgram(options, env, attribLocations) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            function parseShader(name) {\n                if (name in staticOptions) {\n                    var id = stringStore.id(staticOptions[name]);\n                    check$1.optional(function() {\n                        shaderState.shader(shaderType[name], id, check$1.guessCommand());\n                    });\n                    var result = createStaticDecl(function() {\n                        return id;\n                    });\n                    result.id = id;\n                    return result;\n                } else if (name in dynamicOptions) {\n                    var dyn = dynamicOptions[name];\n                    return createDynamicDecl(dyn, function(env, scope) {\n                        var str = env.invoke(scope, dyn);\n                        var id = scope.def(env.shared.strings, \".id(\", str, \")\");\n                        check$1.optional(function() {\n                            scope(env.shared.shader, \".shader(\", shaderType[name], \",\", id, \",\", env.command, \");\");\n                        });\n                        return id;\n                    });\n                }\n                return null;\n            }\n            var frag = parseShader(S_FRAG);\n            var vert = parseShader(S_VERT);\n            var program = null;\n            var progVar;\n            if (isStatic(frag) && isStatic(vert)) {\n                program = shaderState.program(vert.id, frag.id, null, attribLocations);\n                progVar = createStaticDecl(function(env, scope) {\n                    return env.link(program);\n                });\n            } else progVar = new Declaration(frag && frag.thisDep || vert && vert.thisDep, frag && frag.contextDep || vert && vert.contextDep, frag && frag.propDep || vert && vert.propDep, function(env, scope) {\n                var SHADER_STATE = env.shared.shader;\n                var fragId;\n                if (frag) fragId = frag.append(env, scope);\n                else fragId = scope.def(SHADER_STATE, \".\", S_FRAG);\n                var vertId;\n                if (vert) vertId = vert.append(env, scope);\n                else vertId = scope.def(SHADER_STATE, \".\", S_VERT);\n                var progDef = SHADER_STATE + \".program(\" + vertId + \",\" + fragId;\n                check$1.optional(function() {\n                    progDef += \",\" + env.command;\n                });\n                return scope.def(progDef + \")\");\n            });\n            return {\n                frag: frag,\n                vert: vert,\n                progVar: progVar,\n                program: program\n            };\n        }\n        function parseDraw(options, env) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            // TODO: should use VAO to get default values for offset properties\n            // should move vao parse into here and out of the old stuff\n            var staticDraw = {};\n            var vaoActive = false;\n            function parseVAO() {\n                if (S_VAO in staticOptions) {\n                    var vao = staticOptions[S_VAO];\n                    if (vao !== null && attributeState.getVAO(vao) === null) vao = attributeState.createVAO(vao);\n                    vaoActive = true;\n                    staticDraw.vao = vao;\n                    return createStaticDecl(function(env) {\n                        var vaoRef = attributeState.getVAO(vao);\n                        if (vaoRef) return env.link(vaoRef);\n                        else return \"null\";\n                    });\n                } else if (S_VAO in dynamicOptions) {\n                    vaoActive = true;\n                    var dyn = dynamicOptions[S_VAO];\n                    return createDynamicDecl(dyn, function(env, scope) {\n                        var vaoRef = env.invoke(scope, dyn);\n                        return scope.def(env.shared.vao + \".getVAO(\" + vaoRef + \")\");\n                    });\n                }\n                return null;\n            }\n            var vao = parseVAO();\n            var elementsActive = false;\n            function parseElements() {\n                if (S_ELEMENTS in staticOptions) {\n                    var elements = staticOptions[S_ELEMENTS];\n                    staticDraw.elements = elements;\n                    if (isBufferArgs(elements)) {\n                        var e = staticDraw.elements = elementState.create(elements, true);\n                        elements = elementState.getElements(e);\n                        elementsActive = true;\n                    } else if (elements) {\n                        elements = elementState.getElements(elements);\n                        elementsActive = true;\n                        check$1.command(elements, \"invalid elements\", env.commandStr);\n                    }\n                    var result = createStaticDecl(function(env, scope) {\n                        if (elements) {\n                            var result = env.link(elements);\n                            env.ELEMENTS = result;\n                            return result;\n                        }\n                        env.ELEMENTS = null;\n                        return null;\n                    });\n                    result.value = elements;\n                    return result;\n                } else if (S_ELEMENTS in dynamicOptions) {\n                    elementsActive = true;\n                    var dyn = dynamicOptions[S_ELEMENTS];\n                    return createDynamicDecl(dyn, function(env, scope) {\n                        var shared = env.shared;\n                        var IS_BUFFER_ARGS = shared.isBufferArgs;\n                        var ELEMENT_STATE = shared.elements;\n                        var elementDefn = env.invoke(scope, dyn);\n                        var elements = scope.def(\"null\");\n                        var elementStream = scope.def(IS_BUFFER_ARGS, \"(\", elementDefn, \")\");\n                        var ifte = env.cond(elementStream).then(elements, \"=\", ELEMENT_STATE, \".createStream(\", elementDefn, \");\").else(elements, \"=\", ELEMENT_STATE, \".getElements(\", elementDefn, \");\");\n                        check$1.optional(function() {\n                            env.assert(ifte.else, \"!\" + elementDefn + \"||\" + elements, \"invalid elements\");\n                        });\n                        scope.entry(ifte);\n                        scope.exit(env.cond(elementStream).then(ELEMENT_STATE, \".destroyStream(\", elements, \");\"));\n                        env.ELEMENTS = elements;\n                        return elements;\n                    });\n                } else if (vaoActive) return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env, scope) {\n                    return scope.def(env.shared.vao + \".currentVAO?\" + env.shared.elements + \".getElements(\" + env.shared.vao + \".currentVAO.elements):null\");\n                });\n                return null;\n            }\n            var elements = parseElements();\n            function parsePrimitive() {\n                if (S_PRIMITIVE in staticOptions) {\n                    var primitive = staticOptions[S_PRIMITIVE];\n                    staticDraw.primitive = primitive;\n                    check$1.commandParameter(primitive, primTypes, \"invalid primitve\", env.commandStr);\n                    return createStaticDecl(function(env, scope) {\n                        return primTypes[primitive];\n                    });\n                } else if (S_PRIMITIVE in dynamicOptions) {\n                    var dynPrimitive = dynamicOptions[S_PRIMITIVE];\n                    return createDynamicDecl(dynPrimitive, function(env, scope) {\n                        var PRIM_TYPES = env.constants.primTypes;\n                        var prim = env.invoke(scope, dynPrimitive);\n                        check$1.optional(function() {\n                            env.assert(scope, prim + \" in \" + PRIM_TYPES, \"invalid primitive, must be one of \" + Object.keys(primTypes));\n                        });\n                        return scope.def(PRIM_TYPES, \"[\", prim, \"]\");\n                    });\n                } else if (elementsActive) {\n                    if (isStatic(elements)) {\n                        if (elements.value) return createStaticDecl(function(env, scope) {\n                            return scope.def(env.ELEMENTS, \".primType\");\n                        });\n                        else return createStaticDecl(function() {\n                            return GL_TRIANGLES$1;\n                        });\n                    } else return new Declaration(elements.thisDep, elements.contextDep, elements.propDep, function(env, scope) {\n                        var elements = env.ELEMENTS;\n                        return scope.def(elements, \"?\", elements, \".primType:\", GL_TRIANGLES$1);\n                    });\n                } else if (vaoActive) return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env, scope) {\n                    return scope.def(env.shared.vao + \".currentVAO?\" + env.shared.vao + \".currentVAO.primitive:\" + GL_TRIANGLES$1);\n                });\n                return null;\n            }\n            function parseParam(param, isOffset) {\n                if (param in staticOptions) {\n                    var value = staticOptions[param] | 0;\n                    if (isOffset) staticDraw.offset = value;\n                    else staticDraw.instances = value;\n                    check$1.command(!isOffset || value >= 0, \"invalid \" + param, env.commandStr);\n                    return createStaticDecl(function(env, scope) {\n                        if (isOffset) env.OFFSET = value;\n                        return value;\n                    });\n                } else if (param in dynamicOptions) {\n                    var dynValue = dynamicOptions[param];\n                    return createDynamicDecl(dynValue, function(env, scope) {\n                        var result = env.invoke(scope, dynValue);\n                        if (isOffset) {\n                            env.OFFSET = result;\n                            check$1.optional(function() {\n                                env.assert(scope, result + \">=0\", \"invalid \" + param);\n                            });\n                        }\n                        return result;\n                    });\n                } else if (isOffset) {\n                    if (elementsActive) return createStaticDecl(function(env, scope) {\n                        env.OFFSET = 0;\n                        return 0;\n                    });\n                    else if (vaoActive) return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env, scope) {\n                        return scope.def(env.shared.vao + \".currentVAO?\" + env.shared.vao + \".currentVAO.offset:0\");\n                    });\n                } else if (vaoActive) return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env, scope) {\n                    return scope.def(env.shared.vao + \".currentVAO?\" + env.shared.vao + \".currentVAO.instances:-1\");\n                });\n                return null;\n            }\n            var OFFSET = parseParam(S_OFFSET, true);\n            function parseVertCount() {\n                if (S_COUNT in staticOptions) {\n                    var count = staticOptions[S_COUNT] | 0;\n                    staticDraw.count = count;\n                    check$1.command(typeof count === \"number\" && count >= 0, \"invalid vertex count\", env.commandStr);\n                    return createStaticDecl(function() {\n                        return count;\n                    });\n                } else if (S_COUNT in dynamicOptions) {\n                    var dynCount = dynamicOptions[S_COUNT];\n                    return createDynamicDecl(dynCount, function(env, scope) {\n                        var result = env.invoke(scope, dynCount);\n                        check$1.optional(function() {\n                            env.assert(scope, \"typeof \" + result + '===\"number\"&&' + result + \">=0&&\" + result + \"===(\" + result + \"|0)\", \"invalid vertex count\");\n                        });\n                        return result;\n                    });\n                } else if (elementsActive) {\n                    if (isStatic(elements)) {\n                        if (elements) {\n                            if (OFFSET) return new Declaration(OFFSET.thisDep, OFFSET.contextDep, OFFSET.propDep, function(env, scope) {\n                                var result = scope.def(env.ELEMENTS, \".vertCount-\", env.OFFSET);\n                                check$1.optional(function() {\n                                    env.assert(scope, result + \">=0\", \"invalid vertex offset/element buffer too small\");\n                                });\n                                return result;\n                            });\n                            else return createStaticDecl(function(env, scope) {\n                                return scope.def(env.ELEMENTS, \".vertCount\");\n                            });\n                        } else {\n                            var result = createStaticDecl(function() {\n                                return -1;\n                            });\n                            check$1.optional(function() {\n                                result.MISSING = true;\n                            });\n                            return result;\n                        }\n                    } else {\n                        var variable = new Declaration(elements.thisDep || OFFSET.thisDep, elements.contextDep || OFFSET.contextDep, elements.propDep || OFFSET.propDep, function(env, scope) {\n                            var elements = env.ELEMENTS;\n                            if (env.OFFSET) return scope.def(elements, \"?\", elements, \".vertCount-\", env.OFFSET, \":-1\");\n                            return scope.def(elements, \"?\", elements, \".vertCount:-1\");\n                        });\n                        check$1.optional(function() {\n                            variable.DYNAMIC = true;\n                        });\n                        return variable;\n                    }\n                } else if (vaoActive) {\n                    var countVariable = new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env, scope) {\n                        return scope.def(env.shared.vao, \".currentVAO?\", env.shared.vao, \".currentVAO.count:-1\");\n                    });\n                    return countVariable;\n                }\n                return null;\n            }\n            var primitive = parsePrimitive();\n            var count = parseVertCount();\n            var instances = parseParam(S_INSTANCES, false);\n            return {\n                elements: elements,\n                primitive: primitive,\n                count: count,\n                instances: instances,\n                offset: OFFSET,\n                vao: vao,\n                vaoActive: vaoActive,\n                elementsActive: elementsActive,\n                // static draw props\n                static: staticDraw\n            };\n        }\n        function parseGLState(options, env) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            var STATE = {};\n            GL_STATE_NAMES.forEach(function(prop) {\n                var param = propName(prop);\n                function parseParam(parseStatic, parseDynamic) {\n                    if (prop in staticOptions) {\n                        var value = parseStatic(staticOptions[prop]);\n                        STATE[param] = createStaticDecl(function() {\n                            return value;\n                        });\n                    } else if (prop in dynamicOptions) {\n                        var dyn = dynamicOptions[prop];\n                        STATE[param] = createDynamicDecl(dyn, function(env, scope) {\n                            return parseDynamic(env, scope, env.invoke(scope, dyn));\n                        });\n                    }\n                }\n                switch(prop){\n                    case S_CULL_ENABLE:\n                    case S_BLEND_ENABLE:\n                    case S_DITHER:\n                    case S_STENCIL_ENABLE:\n                    case S_DEPTH_ENABLE:\n                    case S_SCISSOR_ENABLE:\n                    case S_POLYGON_OFFSET_ENABLE:\n                    case S_SAMPLE_ALPHA:\n                    case S_SAMPLE_ENABLE:\n                    case S_DEPTH_MASK:\n                        return parseParam(function(value) {\n                            check$1.commandType(value, \"boolean\", prop, env.commandStr);\n                            return value;\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, \"typeof \" + value + '===\"boolean\"', \"invalid flag \" + prop, env.commandStr);\n                            });\n                            return value;\n                        });\n                    case S_DEPTH_FUNC:\n                        return parseParam(function(value) {\n                            check$1.commandParameter(value, compareFuncs, \"invalid \" + prop, env.commandStr);\n                            return compareFuncs[value];\n                        }, function(env, scope, value) {\n                            var COMPARE_FUNCS = env.constants.compareFuncs;\n                            check$1.optional(function() {\n                                env.assert(scope, value + \" in \" + COMPARE_FUNCS, \"invalid \" + prop + \", must be one of \" + Object.keys(compareFuncs));\n                            });\n                            return scope.def(COMPARE_FUNCS, \"[\", value, \"]\");\n                        });\n                    case S_DEPTH_RANGE:\n                        return parseParam(function(value) {\n                            check$1.command(isArrayLike(value) && value.length === 2 && typeof value[0] === \"number\" && typeof value[1] === \"number\" && value[0] <= value[1], \"depth range is 2d array\", env.commandStr);\n                            return value;\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, env.shared.isArrayLike + \"(\" + value + \")&&\" + value + \".length===2&&\" + \"typeof \" + value + '[0]===\"number\"&&' + \"typeof \" + value + '[1]===\"number\"&&' + value + \"[0]<=\" + value + \"[1]\", \"depth range must be a 2d array\");\n                            });\n                            var Z_NEAR = scope.def(\"+\", value, \"[0]\");\n                            var Z_FAR = scope.def(\"+\", value, \"[1]\");\n                            return [\n                                Z_NEAR,\n                                Z_FAR\n                            ];\n                        });\n                    case S_BLEND_FUNC:\n                        return parseParam(function(value) {\n                            check$1.commandType(value, \"object\", \"blend.func\", env.commandStr);\n                            var srcRGB = \"srcRGB\" in value ? value.srcRGB : value.src;\n                            var srcAlpha = \"srcAlpha\" in value ? value.srcAlpha : value.src;\n                            var dstRGB = \"dstRGB\" in value ? value.dstRGB : value.dst;\n                            var dstAlpha = \"dstAlpha\" in value ? value.dstAlpha : value.dst;\n                            check$1.commandParameter(srcRGB, blendFuncs, param + \".srcRGB\", env.commandStr);\n                            check$1.commandParameter(srcAlpha, blendFuncs, param + \".srcAlpha\", env.commandStr);\n                            check$1.commandParameter(dstRGB, blendFuncs, param + \".dstRGB\", env.commandStr);\n                            check$1.commandParameter(dstAlpha, blendFuncs, param + \".dstAlpha\", env.commandStr);\n                            check$1.command(invalidBlendCombinations.indexOf(srcRGB + \", \" + dstRGB) === -1, \"unallowed blending combination (srcRGB, dstRGB) = (\" + srcRGB + \", \" + dstRGB + \")\", env.commandStr);\n                            return [\n                                blendFuncs[srcRGB],\n                                blendFuncs[dstRGB],\n                                blendFuncs[srcAlpha],\n                                blendFuncs[dstAlpha]\n                            ];\n                        }, function(env, scope, value) {\n                            var BLEND_FUNCS = env.constants.blendFuncs;\n                            check$1.optional(function() {\n                                env.assert(scope, value + \"&&typeof \" + value + '===\"object\"', \"invalid blend func, must be an object\");\n                            });\n                            function read(prefix, suffix) {\n                                var func = scope.def('\"', prefix, suffix, '\" in ', value, \"?\", value, \".\", prefix, suffix, \":\", value, \".\", prefix);\n                                check$1.optional(function() {\n                                    env.assert(scope, func + \" in \" + BLEND_FUNCS, \"invalid \" + prop + \".\" + prefix + suffix + \", must be one of \" + Object.keys(blendFuncs));\n                                });\n                                return func;\n                            }\n                            var srcRGB = read(\"src\", \"RGB\");\n                            var dstRGB = read(\"dst\", \"RGB\");\n                            check$1.optional(function() {\n                                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;\n                                env.assert(scope, INVALID_BLEND_COMBINATIONS + \".indexOf(\" + srcRGB + '+\", \"+' + dstRGB + \") === -1 \", \"unallowed blending combination for (srcRGB, dstRGB)\");\n                            });\n                            var SRC_RGB = scope.def(BLEND_FUNCS, \"[\", srcRGB, \"]\");\n                            var SRC_ALPHA = scope.def(BLEND_FUNCS, \"[\", read(\"src\", \"Alpha\"), \"]\");\n                            var DST_RGB = scope.def(BLEND_FUNCS, \"[\", dstRGB, \"]\");\n                            var DST_ALPHA = scope.def(BLEND_FUNCS, \"[\", read(\"dst\", \"Alpha\"), \"]\");\n                            return [\n                                SRC_RGB,\n                                DST_RGB,\n                                SRC_ALPHA,\n                                DST_ALPHA\n                            ];\n                        });\n                    case S_BLEND_EQUATION:\n                        return parseParam(function(value) {\n                            if (typeof value === \"string\") {\n                                check$1.commandParameter(value, blendEquations, \"invalid \" + prop, env.commandStr);\n                                return [\n                                    blendEquations[value],\n                                    blendEquations[value]\n                                ];\n                            } else if (typeof value === \"object\") {\n                                check$1.commandParameter(value.rgb, blendEquations, prop + \".rgb\", env.commandStr);\n                                check$1.commandParameter(value.alpha, blendEquations, prop + \".alpha\", env.commandStr);\n                                return [\n                                    blendEquations[value.rgb],\n                                    blendEquations[value.alpha]\n                                ];\n                            } else check$1.commandRaise(\"invalid blend.equation\", env.commandStr);\n                        }, function(env, scope, value) {\n                            var BLEND_EQUATIONS = env.constants.blendEquations;\n                            var RGB = scope.def();\n                            var ALPHA = scope.def();\n                            var ifte = env.cond(\"typeof \", value, '===\"string\"');\n                            check$1.optional(function() {\n                                function checkProp(block, name, value) {\n                                    env.assert(block, value + \" in \" + BLEND_EQUATIONS, \"invalid \" + name + \", must be one of \" + Object.keys(blendEquations));\n                                }\n                                checkProp(ifte.then, prop, value);\n                                env.assert(ifte.else, value + \"&&typeof \" + value + '===\"object\"', \"invalid \" + prop);\n                                checkProp(ifte.else, prop + \".rgb\", value + \".rgb\");\n                                checkProp(ifte.else, prop + \".alpha\", value + \".alpha\");\n                            });\n                            ifte.then(RGB, \"=\", ALPHA, \"=\", BLEND_EQUATIONS, \"[\", value, \"];\");\n                            ifte.else(RGB, \"=\", BLEND_EQUATIONS, \"[\", value, \".rgb];\", ALPHA, \"=\", BLEND_EQUATIONS, \"[\", value, \".alpha];\");\n                            scope(ifte);\n                            return [\n                                RGB,\n                                ALPHA\n                            ];\n                        });\n                    case S_BLEND_COLOR:\n                        return parseParam(function(value) {\n                            check$1.command(isArrayLike(value) && value.length === 4, \"blend.color must be a 4d array\", env.commandStr);\n                            return loop(4, function(i) {\n                                return +value[i];\n                            });\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, env.shared.isArrayLike + \"(\" + value + \")&&\" + value + \".length===4\", \"blend.color must be a 4d array\");\n                            });\n                            return loop(4, function(i) {\n                                return scope.def(\"+\", value, \"[\", i, \"]\");\n                            });\n                        });\n                    case S_STENCIL_MASK:\n                        return parseParam(function(value) {\n                            check$1.commandType(value, \"number\", param, env.commandStr);\n                            return value | 0;\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, \"typeof \" + value + '===\"number\"', \"invalid stencil.mask\");\n                            });\n                            return scope.def(value, \"|0\");\n                        });\n                    case S_STENCIL_FUNC:\n                        return parseParam(function(value) {\n                            check$1.commandType(value, \"object\", param, env.commandStr);\n                            var cmp = value.cmp || \"keep\";\n                            var ref = value.ref || 0;\n                            var mask = \"mask\" in value ? value.mask : -1;\n                            check$1.commandParameter(cmp, compareFuncs, prop + \".cmp\", env.commandStr);\n                            check$1.commandType(ref, \"number\", prop + \".ref\", env.commandStr);\n                            check$1.commandType(mask, \"number\", prop + \".mask\", env.commandStr);\n                            return [\n                                compareFuncs[cmp],\n                                ref,\n                                mask\n                            ];\n                        }, function(env, scope, value) {\n                            var COMPARE_FUNCS = env.constants.compareFuncs;\n                            check$1.optional(function() {\n                                function assert() {\n                                    env.assert(scope, Array.prototype.join.call(arguments, \"\"), \"invalid stencil.func\");\n                                }\n                                assert(value + \"&&typeof \", value, '===\"object\"');\n                                assert('!(\"cmp\" in ', value, \")||(\", value, \".cmp in \", COMPARE_FUNCS, \")\");\n                            });\n                            var cmp = scope.def('\"cmp\" in ', value, \"?\", COMPARE_FUNCS, \"[\", value, \".cmp]\", \":\", GL_KEEP);\n                            var ref = scope.def(value, \".ref|0\");\n                            var mask = scope.def('\"mask\" in ', value, \"?\", value, \".mask|0:-1\");\n                            return [\n                                cmp,\n                                ref,\n                                mask\n                            ];\n                        });\n                    case S_STENCIL_OPFRONT:\n                    case S_STENCIL_OPBACK:\n                        return parseParam(function(value) {\n                            check$1.commandType(value, \"object\", param, env.commandStr);\n                            var fail = value.fail || \"keep\";\n                            var zfail = value.zfail || \"keep\";\n                            var zpass = value.zpass || \"keep\";\n                            check$1.commandParameter(fail, stencilOps, prop + \".fail\", env.commandStr);\n                            check$1.commandParameter(zfail, stencilOps, prop + \".zfail\", env.commandStr);\n                            check$1.commandParameter(zpass, stencilOps, prop + \".zpass\", env.commandStr);\n                            return [\n                                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,\n                                stencilOps[fail],\n                                stencilOps[zfail],\n                                stencilOps[zpass]\n                            ];\n                        }, function(env, scope, value) {\n                            var STENCIL_OPS = env.constants.stencilOps;\n                            check$1.optional(function() {\n                                env.assert(scope, value + \"&&typeof \" + value + '===\"object\"', \"invalid \" + prop);\n                            });\n                            function read(name) {\n                                check$1.optional(function() {\n                                    env.assert(scope, '!(\"' + name + '\" in ' + value + \")||\" + \"(\" + value + \".\" + name + \" in \" + STENCIL_OPS + \")\", \"invalid \" + prop + \".\" + name + \", must be one of \" + Object.keys(stencilOps));\n                                });\n                                return scope.def('\"', name, '\" in ', value, \"?\", STENCIL_OPS, \"[\", value, \".\", name, \"]:\", GL_KEEP);\n                            }\n                            return [\n                                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,\n                                read(\"fail\"),\n                                read(\"zfail\"),\n                                read(\"zpass\")\n                            ];\n                        });\n                    case S_POLYGON_OFFSET_OFFSET:\n                        return parseParam(function(value) {\n                            check$1.commandType(value, \"object\", param, env.commandStr);\n                            var factor = value.factor | 0;\n                            var units = value.units | 0;\n                            check$1.commandType(factor, \"number\", param + \".factor\", env.commandStr);\n                            check$1.commandType(units, \"number\", param + \".units\", env.commandStr);\n                            return [\n                                factor,\n                                units\n                            ];\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, value + \"&&typeof \" + value + '===\"object\"', \"invalid \" + prop);\n                            });\n                            var FACTOR = scope.def(value, \".factor|0\");\n                            var UNITS = scope.def(value, \".units|0\");\n                            return [\n                                FACTOR,\n                                UNITS\n                            ];\n                        });\n                    case S_CULL_FACE:\n                        return parseParam(function(value) {\n                            var face = 0;\n                            if (value === \"front\") face = GL_FRONT;\n                            else if (value === \"back\") face = GL_BACK;\n                            check$1.command(!!face, param, env.commandStr);\n                            return face;\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, value + '===\"front\"||' + value + '===\"back\"', \"invalid cull.face\");\n                            });\n                            return scope.def(value, '===\"front\"?', GL_FRONT, \":\", GL_BACK);\n                        });\n                    case S_LINE_WIDTH:\n                        return parseParam(function(value) {\n                            check$1.command(typeof value === \"number\" && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1], \"invalid line width, must be a positive number between \" + limits.lineWidthDims[0] + \" and \" + limits.lineWidthDims[1], env.commandStr);\n                            return value;\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, \"typeof \" + value + '===\"number\"&&' + value + \">=\" + limits.lineWidthDims[0] + \"&&\" + value + \"<=\" + limits.lineWidthDims[1], \"invalid line width\");\n                            });\n                            return value;\n                        });\n                    case S_FRONT_FACE:\n                        return parseParam(function(value) {\n                            check$1.commandParameter(value, orientationType, param, env.commandStr);\n                            return orientationType[value];\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, value + '===\"cw\"||' + value + '===\"ccw\"', \"invalid frontFace, must be one of cw,ccw\");\n                            });\n                            return scope.def(value + '===\"cw\"?' + GL_CW + \":\" + GL_CCW);\n                        });\n                    case S_COLOR_MASK:\n                        return parseParam(function(value) {\n                            check$1.command(isArrayLike(value) && value.length === 4, \"color.mask must be length 4 array\", env.commandStr);\n                            return value.map(function(v) {\n                                return !!v;\n                            });\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, env.shared.isArrayLike + \"(\" + value + \")&&\" + value + \".length===4\", \"invalid color.mask\");\n                            });\n                            return loop(4, function(i) {\n                                return \"!!\" + value + \"[\" + i + \"]\";\n                            });\n                        });\n                    case S_SAMPLE_COVERAGE:\n                        return parseParam(function(value) {\n                            check$1.command(typeof value === \"object\" && value, param, env.commandStr);\n                            var sampleValue = \"value\" in value ? value.value : 1;\n                            var sampleInvert = !!value.invert;\n                            check$1.command(typeof sampleValue === \"number\" && sampleValue >= 0 && sampleValue <= 1, \"sample.coverage.value must be a number between 0 and 1\", env.commandStr);\n                            return [\n                                sampleValue,\n                                sampleInvert\n                            ];\n                        }, function(env, scope, value) {\n                            check$1.optional(function() {\n                                env.assert(scope, value + \"&&typeof \" + value + '===\"object\"', \"invalid sample.coverage\");\n                            });\n                            var VALUE = scope.def('\"value\" in ', value, \"?+\", value, \".value:1\");\n                            var INVERT = scope.def(\"!!\", value, \".invert\");\n                            return [\n                                VALUE,\n                                INVERT\n                            ];\n                        });\n                }\n            });\n            return STATE;\n        }\n        function parseUniforms(uniforms, env) {\n            var staticUniforms = uniforms.static;\n            var dynamicUniforms = uniforms.dynamic;\n            var UNIFORMS = {};\n            Object.keys(staticUniforms).forEach(function(name) {\n                var value = staticUniforms[name];\n                var result;\n                if (typeof value === \"number\" || typeof value === \"boolean\") result = createStaticDecl(function() {\n                    return value;\n                });\n                else if (typeof value === \"function\") {\n                    var reglType = value._reglType;\n                    if (reglType === \"texture2d\" || reglType === \"textureCube\") result = createStaticDecl(function(env) {\n                        return env.link(value);\n                    });\n                    else if (reglType === \"framebuffer\" || reglType === \"framebufferCube\") {\n                        check$1.command(value.color.length > 0, 'missing color attachment for framebuffer sent to uniform \"' + name + '\"', env.commandStr);\n                        result = createStaticDecl(function(env) {\n                            return env.link(value.color[0]);\n                        });\n                    } else check$1.commandRaise('invalid data for uniform \"' + name + '\"', env.commandStr);\n                } else if (isArrayLike(value)) result = createStaticDecl(function(env) {\n                    var ITEM = env.global.def(\"[\", loop(value.length, function(i) {\n                        check$1.command(typeof value[i] === \"number\" || typeof value[i] === \"boolean\", \"invalid uniform \" + name, env.commandStr);\n                        return value[i];\n                    }), \"]\");\n                    return ITEM;\n                });\n                else check$1.commandRaise('invalid or missing data for uniform \"' + name + '\"', env.commandStr);\n                result.value = value;\n                UNIFORMS[name] = result;\n            });\n            Object.keys(dynamicUniforms).forEach(function(key) {\n                var dyn = dynamicUniforms[key];\n                UNIFORMS[key] = createDynamicDecl(dyn, function(env, scope) {\n                    return env.invoke(scope, dyn);\n                });\n            });\n            return UNIFORMS;\n        }\n        function parseAttributes(attributes, env) {\n            var staticAttributes = attributes.static;\n            var dynamicAttributes = attributes.dynamic;\n            var attributeDefs = {};\n            Object.keys(staticAttributes).forEach(function(attribute) {\n                var value = staticAttributes[attribute];\n                var id = stringStore.id(attribute);\n                var record = new AttributeRecord();\n                if (isBufferArgs(value)) {\n                    record.state = ATTRIB_STATE_POINTER;\n                    record.buffer = bufferState.getBuffer(bufferState.create(value, GL_ARRAY_BUFFER$2, false, true));\n                    record.type = 0;\n                } else {\n                    var buffer = bufferState.getBuffer(value);\n                    if (buffer) {\n                        record.state = ATTRIB_STATE_POINTER;\n                        record.buffer = buffer;\n                        record.type = 0;\n                    } else {\n                        check$1.command(typeof value === \"object\" && value, \"invalid data for attribute \" + attribute, env.commandStr);\n                        if (\"constant\" in value) {\n                            var constant = value.constant;\n                            record.buffer = \"null\";\n                            record.state = ATTRIB_STATE_CONSTANT;\n                            if (typeof constant === \"number\") record.x = constant;\n                            else {\n                                check$1.command(isArrayLike(constant) && constant.length > 0 && constant.length <= 4, \"invalid constant for attribute \" + attribute, env.commandStr);\n                                CUTE_COMPONENTS.forEach(function(c, i) {\n                                    if (i < constant.length) record[c] = constant[i];\n                                });\n                            }\n                        } else {\n                            if (isBufferArgs(value.buffer)) buffer = bufferState.getBuffer(bufferState.create(value.buffer, GL_ARRAY_BUFFER$2, false, true));\n                            else buffer = bufferState.getBuffer(value.buffer);\n                            check$1.command(!!buffer, 'missing buffer for attribute \"' + attribute + '\"', env.commandStr);\n                            var offset = value.offset | 0;\n                            check$1.command(offset >= 0, 'invalid offset for attribute \"' + attribute + '\"', env.commandStr);\n                            var stride = value.stride | 0;\n                            check$1.command(stride >= 0 && stride < 256, 'invalid stride for attribute \"' + attribute + '\", must be integer betweeen [0, 255]', env.commandStr);\n                            var size = value.size | 0;\n                            check$1.command(!(\"size\" in value) || size > 0 && size <= 4, 'invalid size for attribute \"' + attribute + '\", must be 1,2,3,4', env.commandStr);\n                            var normalized = !!value.normalized;\n                            var type = 0;\n                            if (\"type\" in value) {\n                                check$1.commandParameter(value.type, glTypes, \"invalid type for attribute \" + attribute, env.commandStr);\n                                type = glTypes[value.type];\n                            }\n                            var divisor = value.divisor | 0;\n                            check$1.optional(function() {\n                                if (\"divisor\" in value) {\n                                    check$1.command(divisor === 0 || extInstancing, 'cannot specify divisor for attribute \"' + attribute + '\", instancing not supported', env.commandStr);\n                                    check$1.command(divisor >= 0, 'invalid divisor for attribute \"' + attribute + '\"', env.commandStr);\n                                }\n                                var command = env.commandStr;\n                                var VALID_KEYS = [\n                                    \"buffer\",\n                                    \"offset\",\n                                    \"divisor\",\n                                    \"normalized\",\n                                    \"type\",\n                                    \"size\",\n                                    \"stride\"\n                                ];\n                                Object.keys(value).forEach(function(prop) {\n                                    check$1.command(VALID_KEYS.indexOf(prop) >= 0, 'unknown parameter \"' + prop + '\" for attribute pointer \"' + attribute + '\" (valid parameters are ' + VALID_KEYS + \")\", command);\n                                });\n                            });\n                            record.buffer = buffer;\n                            record.state = ATTRIB_STATE_POINTER;\n                            record.size = size;\n                            record.normalized = normalized;\n                            record.type = type || buffer.dtype;\n                            record.offset = offset;\n                            record.stride = stride;\n                            record.divisor = divisor;\n                        }\n                    }\n                }\n                attributeDefs[attribute] = createStaticDecl(function(env, scope) {\n                    var cache = env.attribCache;\n                    if (id in cache) return cache[id];\n                    var result = {\n                        isStream: false\n                    };\n                    Object.keys(record).forEach(function(key) {\n                        result[key] = record[key];\n                    });\n                    if (record.buffer) {\n                        result.buffer = env.link(record.buffer);\n                        result.type = result.type || result.buffer + \".dtype\";\n                    }\n                    cache[id] = result;\n                    return result;\n                });\n            });\n            Object.keys(dynamicAttributes).forEach(function(attribute) {\n                var dyn = dynamicAttributes[attribute];\n                function appendAttributeCode(env, block) {\n                    var VALUE = env.invoke(block, dyn);\n                    var shared = env.shared;\n                    var constants = env.constants;\n                    var IS_BUFFER_ARGS = shared.isBufferArgs;\n                    var BUFFER_STATE = shared.buffer;\n                    // Perform validation on attribute\n                    check$1.optional(function() {\n                        env.assert(block, VALUE + \"&&(typeof \" + VALUE + '===\"object\"||typeof ' + VALUE + '===\"function\")&&(' + IS_BUFFER_ARGS + \"(\" + VALUE + \")||\" + BUFFER_STATE + \".getBuffer(\" + VALUE + \")||\" + BUFFER_STATE + \".getBuffer(\" + VALUE + \".buffer)||\" + IS_BUFFER_ARGS + \"(\" + VALUE + \".buffer)||\" + '(\"constant\" in ' + VALUE + \"&&(typeof \" + VALUE + '.constant===\"number\"||' + shared.isArrayLike + \"(\" + VALUE + \".constant))))\", 'invalid dynamic attribute \"' + attribute + '\"');\n                    });\n                    // allocate names for result\n                    var result = {\n                        isStream: block.def(false)\n                    };\n                    var defaultRecord = new AttributeRecord();\n                    defaultRecord.state = ATTRIB_STATE_POINTER;\n                    Object.keys(defaultRecord).forEach(function(key) {\n                        result[key] = block.def(\"\" + defaultRecord[key]);\n                    });\n                    var BUFFER = result.buffer;\n                    var TYPE = result.type;\n                    block(\"if(\", IS_BUFFER_ARGS, \"(\", VALUE, \")){\", result.isStream, \"=true;\", BUFFER, \"=\", BUFFER_STATE, \".createStream(\", GL_ARRAY_BUFFER$2, \",\", VALUE, \");\", TYPE, \"=\", BUFFER, \".dtype;\", \"}else{\", BUFFER, \"=\", BUFFER_STATE, \".getBuffer(\", VALUE, \");\", \"if(\", BUFFER, \"){\", TYPE, \"=\", BUFFER, \".dtype;\", '}else if(\"constant\" in ', VALUE, \"){\", result.state, \"=\", ATTRIB_STATE_CONSTANT, \";\", \"if(typeof \" + VALUE + '.constant === \"number\"){', result[CUTE_COMPONENTS[0]], \"=\", VALUE, \".constant;\", CUTE_COMPONENTS.slice(1).map(function(n) {\n                        return result[n];\n                    }).join(\"=\"), \"=0;\", \"}else{\", CUTE_COMPONENTS.map(function(name, i) {\n                        return result[name] + \"=\" + VALUE + \".constant.length>\" + i + \"?\" + VALUE + \".constant[\" + i + \"]:0;\";\n                    }).join(\"\"), \"}}else{\", \"if(\", IS_BUFFER_ARGS, \"(\", VALUE, \".buffer)){\", BUFFER, \"=\", BUFFER_STATE, \".createStream(\", GL_ARRAY_BUFFER$2, \",\", VALUE, \".buffer);\", \"}else{\", BUFFER, \"=\", BUFFER_STATE, \".getBuffer(\", VALUE, \".buffer);\", \"}\", TYPE, '=\"type\" in ', VALUE, \"?\", constants.glTypes, \"[\", VALUE, \".type]:\", BUFFER, \".dtype;\", result.normalized, \"=!!\", VALUE, \".normalized;\");\n                    function emitReadRecord(name) {\n                        block(result[name], \"=\", VALUE, \".\", name, \"|0;\");\n                    }\n                    emitReadRecord(\"size\");\n                    emitReadRecord(\"offset\");\n                    emitReadRecord(\"stride\");\n                    emitReadRecord(\"divisor\");\n                    block(\"}}\");\n                    block.exit(\"if(\", result.isStream, \"){\", BUFFER_STATE, \".destroyStream(\", BUFFER, \");\", \"}\");\n                    return result;\n                }\n                attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);\n            });\n            return attributeDefs;\n        }\n        function parseContext(context) {\n            var staticContext = context.static;\n            var dynamicContext = context.dynamic;\n            var result = {};\n            Object.keys(staticContext).forEach(function(name) {\n                var value = staticContext[name];\n                result[name] = createStaticDecl(function(env, scope) {\n                    if (typeof value === \"number\" || typeof value === \"boolean\") return \"\" + value;\n                    else return env.link(value);\n                });\n            });\n            Object.keys(dynamicContext).forEach(function(name) {\n                var dyn = dynamicContext[name];\n                result[name] = createDynamicDecl(dyn, function(env, scope) {\n                    return env.invoke(scope, dyn);\n                });\n            });\n            return result;\n        }\n        function parseArguments(options, attributes, uniforms, context, env) {\n            var staticOptions = options.static;\n            var dynamicOptions = options.dynamic;\n            check$1.optional(function() {\n                var KEY_NAMES = [\n                    S_FRAMEBUFFER,\n                    S_VERT,\n                    S_FRAG,\n                    S_ELEMENTS,\n                    S_PRIMITIVE,\n                    S_OFFSET,\n                    S_COUNT,\n                    S_INSTANCES,\n                    S_PROFILE,\n                    S_VAO\n                ].concat(GL_STATE_NAMES);\n                function checkKeys(dict) {\n                    Object.keys(dict).forEach(function(key) {\n                        check$1.command(KEY_NAMES.indexOf(key) >= 0, 'unknown parameter \"' + key + '\"', env.commandStr);\n                    });\n                }\n                checkKeys(staticOptions);\n                checkKeys(dynamicOptions);\n            });\n            var attribLocations = parseAttribLocations(options, attributes);\n            var framebuffer = parseFramebuffer(options, env);\n            var viewportAndScissor = parseViewportScissor(options, framebuffer, env);\n            var draw = parseDraw(options, env);\n            var state = parseGLState(options, env);\n            var shader = parseProgram(options, env, attribLocations);\n            function copyBox(name) {\n                var defn = viewportAndScissor[name];\n                if (defn) state[name] = defn;\n            }\n            copyBox(S_VIEWPORT);\n            copyBox(propName(S_SCISSOR_BOX));\n            var dirty = Object.keys(state).length > 0;\n            var result = {\n                framebuffer: framebuffer,\n                draw: draw,\n                shader: shader,\n                state: state,\n                dirty: dirty,\n                scopeVAO: null,\n                drawVAO: null,\n                useVAO: false,\n                attributes: {}\n            };\n            result.profile = parseProfile(options, env);\n            result.uniforms = parseUniforms(uniforms, env);\n            result.drawVAO = result.scopeVAO = draw.vao;\n            // special case: check if we can statically allocate a vertex array object for this program\n            if (!result.drawVAO && shader.program && !attribLocations && extensions.angle_instanced_arrays && draw.static.elements) {\n                var useVAO = true;\n                var staticBindings = shader.program.attributes.map(function(attr) {\n                    var binding = attributes.static[attr];\n                    useVAO = useVAO && !!binding;\n                    return binding;\n                });\n                if (useVAO && staticBindings.length > 0) {\n                    var vao = attributeState.getVAO(attributeState.createVAO({\n                        attributes: staticBindings,\n                        elements: draw.static.elements\n                    }));\n                    result.drawVAO = new Declaration(null, null, null, function(env, scope) {\n                        return env.link(vao);\n                    });\n                    result.useVAO = true;\n                }\n            }\n            if (attribLocations) result.useVAO = true;\n            else result.attributes = parseAttributes(attributes, env);\n            result.context = parseContext(context, env);\n            return result;\n        }\n        // ===================================================\n        // ===================================================\n        // COMMON UPDATE FUNCTIONS\n        // ===================================================\n        // ===================================================\n        function emitContext(env, scope, context) {\n            var shared = env.shared;\n            var CONTEXT = shared.context;\n            var contextEnter = env.scope();\n            Object.keys(context).forEach(function(name) {\n                scope.save(CONTEXT, \".\" + name);\n                var defn = context[name];\n                var value = defn.append(env, scope);\n                if (Array.isArray(value)) contextEnter(CONTEXT, \".\", name, \"=[\", value.join(), \"];\");\n                else contextEnter(CONTEXT, \".\", name, \"=\", value, \";\");\n            });\n            scope(contextEnter);\n        }\n        // ===================================================\n        // ===================================================\n        // COMMON DRAWING FUNCTIONS\n        // ===================================================\n        // ===================================================\n        function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {\n            var shared = env.shared;\n            var GL = shared.gl;\n            var FRAMEBUFFER_STATE = shared.framebuffer;\n            var EXT_DRAW_BUFFERS;\n            if (extDrawBuffers) EXT_DRAW_BUFFERS = scope.def(shared.extensions, \".webgl_draw_buffers\");\n            var constants = env.constants;\n            var DRAW_BUFFERS = constants.drawBuffer;\n            var BACK_BUFFER = constants.backBuffer;\n            var NEXT;\n            if (framebuffer) NEXT = framebuffer.append(env, scope);\n            else NEXT = scope.def(FRAMEBUFFER_STATE, \".next\");\n            if (!skipCheck) scope(\"if(\", NEXT, \"!==\", FRAMEBUFFER_STATE, \".cur){\");\n            scope(\"if(\", NEXT, \"){\", GL, \".bindFramebuffer(\", GL_FRAMEBUFFER$2, \",\", NEXT, \".framebuffer);\");\n            if (extDrawBuffers) scope(EXT_DRAW_BUFFERS, \".drawBuffersWEBGL(\", DRAW_BUFFERS, \"[\", NEXT, \".colorAttachments.length]);\");\n            scope(\"}else{\", GL, \".bindFramebuffer(\", GL_FRAMEBUFFER$2, \",null);\");\n            if (extDrawBuffers) scope(EXT_DRAW_BUFFERS, \".drawBuffersWEBGL(\", BACK_BUFFER, \");\");\n            scope(\"}\", FRAMEBUFFER_STATE, \".cur=\", NEXT, \";\");\n            if (!skipCheck) scope(\"}\");\n        }\n        function emitPollState(env, scope, args) {\n            var shared = env.shared;\n            var GL = shared.gl;\n            var CURRENT_VARS = env.current;\n            var NEXT_VARS = env.next;\n            var CURRENT_STATE = shared.current;\n            var NEXT_STATE = shared.next;\n            var block = env.cond(CURRENT_STATE, \".dirty\");\n            GL_STATE_NAMES.forEach(function(prop) {\n                var param = propName(prop);\n                if (param in args.state) return;\n                var NEXT, CURRENT;\n                if (param in NEXT_VARS) {\n                    NEXT = NEXT_VARS[param];\n                    CURRENT = CURRENT_VARS[param];\n                    var parts = loop(currentState[param].length, function(i) {\n                        return block.def(NEXT, \"[\", i, \"]\");\n                    });\n                    block(env.cond(parts.map(function(p, i) {\n                        return p + \"!==\" + CURRENT + \"[\" + i + \"]\";\n                    }).join(\"||\")).then(GL, \".\", GL_VARIABLES[param], \"(\", parts, \");\", parts.map(function(p, i) {\n                        return CURRENT + \"[\" + i + \"]=\" + p;\n                    }).join(\";\"), \";\"));\n                } else {\n                    NEXT = block.def(NEXT_STATE, \".\", param);\n                    var ifte = env.cond(NEXT, \"!==\", CURRENT_STATE, \".\", param);\n                    block(ifte);\n                    if (param in GL_FLAGS) ifte(env.cond(NEXT).then(GL, \".enable(\", GL_FLAGS[param], \");\").else(GL, \".disable(\", GL_FLAGS[param], \");\"), CURRENT_STATE, \".\", param, \"=\", NEXT, \";\");\n                    else ifte(GL, \".\", GL_VARIABLES[param], \"(\", NEXT, \");\", CURRENT_STATE, \".\", param, \"=\", NEXT, \";\");\n                }\n            });\n            if (Object.keys(args.state).length === 0) block(CURRENT_STATE, \".dirty=false;\");\n            scope(block);\n        }\n        function emitSetOptions(env, scope, options, filter) {\n            var shared = env.shared;\n            var CURRENT_VARS = env.current;\n            var CURRENT_STATE = shared.current;\n            var GL = shared.gl;\n            sortState(Object.keys(options)).forEach(function(param) {\n                var defn = options[param];\n                if (filter && !filter(defn)) return;\n                var variable = defn.append(env, scope);\n                if (GL_FLAGS[param]) {\n                    var flag = GL_FLAGS[param];\n                    if (isStatic(defn)) {\n                        if (variable) scope(GL, \".enable(\", flag, \");\");\n                        else scope(GL, \".disable(\", flag, \");\");\n                    } else scope(env.cond(variable).then(GL, \".enable(\", flag, \");\").else(GL, \".disable(\", flag, \");\"));\n                    scope(CURRENT_STATE, \".\", param, \"=\", variable, \";\");\n                } else if (isArrayLike(variable)) {\n                    var CURRENT = CURRENT_VARS[param];\n                    scope(GL, \".\", GL_VARIABLES[param], \"(\", variable, \");\", variable.map(function(v, i) {\n                        return CURRENT + \"[\" + i + \"]=\" + v;\n                    }).join(\";\"), \";\");\n                } else scope(GL, \".\", GL_VARIABLES[param], \"(\", variable, \");\", CURRENT_STATE, \".\", param, \"=\", variable, \";\");\n            });\n        }\n        function injectExtensions(env, scope) {\n            if (extInstancing) env.instancing = scope.def(env.shared.extensions, \".angle_instanced_arrays\");\n        }\n        function emitProfile(env, scope, args, useScope, incrementCounter) {\n            var shared = env.shared;\n            var STATS = env.stats;\n            var CURRENT_STATE = shared.current;\n            var TIMER = shared.timer;\n            var profileArg = args.profile;\n            function perfCounter() {\n                if (typeof performance === \"undefined\") return \"Date.now()\";\n                else return \"performance.now()\";\n            }\n            var CPU_START, QUERY_COUNTER;\n            function emitProfileStart(block) {\n                CPU_START = scope.def();\n                block(CPU_START, \"=\", perfCounter(), \";\");\n                if (typeof incrementCounter === \"string\") block(STATS, \".count+=\", incrementCounter, \";\");\n                else block(STATS, \".count++;\");\n                if (timer) {\n                    if (useScope) {\n                        QUERY_COUNTER = scope.def();\n                        block(QUERY_COUNTER, \"=\", TIMER, \".getNumPendingQueries();\");\n                    } else block(TIMER, \".beginQuery(\", STATS, \");\");\n                }\n            }\n            function emitProfileEnd(block) {\n                block(STATS, \".cpuTime+=\", perfCounter(), \"-\", CPU_START, \";\");\n                if (timer) {\n                    if (useScope) block(TIMER, \".pushScopeStats(\", QUERY_COUNTER, \",\", TIMER, \".getNumPendingQueries(),\", STATS, \");\");\n                    else block(TIMER, \".endQuery();\");\n                }\n            }\n            function scopeProfile(value) {\n                var prev = scope.def(CURRENT_STATE, \".profile\");\n                scope(CURRENT_STATE, \".profile=\", value, \";\");\n                scope.exit(CURRENT_STATE, \".profile=\", prev, \";\");\n            }\n            var USE_PROFILE;\n            if (profileArg) {\n                if (isStatic(profileArg)) {\n                    if (profileArg.enable) {\n                        emitProfileStart(scope);\n                        emitProfileEnd(scope.exit);\n                        scopeProfile(\"true\");\n                    } else scopeProfile(\"false\");\n                    return;\n                }\n                USE_PROFILE = profileArg.append(env, scope);\n                scopeProfile(USE_PROFILE);\n            } else USE_PROFILE = scope.def(CURRENT_STATE, \".profile\");\n            var start = env.block();\n            emitProfileStart(start);\n            scope(\"if(\", USE_PROFILE, \"){\", start, \"}\");\n            var end = env.block();\n            emitProfileEnd(end);\n            scope.exit(\"if(\", USE_PROFILE, \"){\", end, \"}\");\n        }\n        function emitAttributes(env, scope, args, attributes, filter) {\n            var shared = env.shared;\n            function typeLength(x) {\n                switch(x){\n                    case GL_FLOAT_VEC2:\n                    case GL_INT_VEC2:\n                    case GL_BOOL_VEC2:\n                        return 2;\n                    case GL_FLOAT_VEC3:\n                    case GL_INT_VEC3:\n                    case GL_BOOL_VEC3:\n                        return 3;\n                    case GL_FLOAT_VEC4:\n                    case GL_INT_VEC4:\n                    case GL_BOOL_VEC4:\n                        return 4;\n                    default:\n                        return 1;\n                }\n            }\n            function emitBindAttribute(ATTRIBUTE, size, record) {\n                var GL = shared.gl;\n                var LOCATION = scope.def(ATTRIBUTE, \".location\");\n                var BINDING = scope.def(shared.attributes, \"[\", LOCATION, \"]\");\n                var STATE = record.state;\n                var BUFFER = record.buffer;\n                var CONST_COMPONENTS = [\n                    record.x,\n                    record.y,\n                    record.z,\n                    record.w\n                ];\n                var COMMON_KEYS = [\n                    \"buffer\",\n                    \"normalized\",\n                    \"offset\",\n                    \"stride\"\n                ];\n                function emitBuffer() {\n                    scope(\"if(!\", BINDING, \".buffer){\", GL, \".enableVertexAttribArray(\", LOCATION, \");}\");\n                    var TYPE = record.type;\n                    var SIZE;\n                    if (!record.size) SIZE = size;\n                    else SIZE = scope.def(record.size, \"||\", size);\n                    scope(\"if(\", BINDING, \".type!==\", TYPE, \"||\", BINDING, \".size!==\", SIZE, \"||\", COMMON_KEYS.map(function(key) {\n                        return BINDING + \".\" + key + \"!==\" + record[key];\n                    }).join(\"||\"), \"){\", GL, \".bindBuffer(\", GL_ARRAY_BUFFER$2, \",\", BUFFER, \".buffer);\", GL, \".vertexAttribPointer(\", [\n                        LOCATION,\n                        SIZE,\n                        TYPE,\n                        record.normalized,\n                        record.stride,\n                        record.offset\n                    ], \");\", BINDING, \".type=\", TYPE, \";\", BINDING, \".size=\", SIZE, \";\", COMMON_KEYS.map(function(key) {\n                        return BINDING + \".\" + key + \"=\" + record[key] + \";\";\n                    }).join(\"\"), \"}\");\n                    if (extInstancing) {\n                        var DIVISOR = record.divisor;\n                        scope(\"if(\", BINDING, \".divisor!==\", DIVISOR, \"){\", env.instancing, \".vertexAttribDivisorANGLE(\", [\n                            LOCATION,\n                            DIVISOR\n                        ], \");\", BINDING, \".divisor=\", DIVISOR, \";}\");\n                    }\n                }\n                function emitConstant() {\n                    scope(\"if(\", BINDING, \".buffer){\", GL, \".disableVertexAttribArray(\", LOCATION, \");\", BINDING, \".buffer=null;\", \"}if(\", CUTE_COMPONENTS.map(function(c, i) {\n                        return BINDING + \".\" + c + \"!==\" + CONST_COMPONENTS[i];\n                    }).join(\"||\"), \"){\", GL, \".vertexAttrib4f(\", LOCATION, \",\", CONST_COMPONENTS, \");\", CUTE_COMPONENTS.map(function(c, i) {\n                        return BINDING + \".\" + c + \"=\" + CONST_COMPONENTS[i] + \";\";\n                    }).join(\"\"), \"}\");\n                }\n                if (STATE === ATTRIB_STATE_POINTER) emitBuffer();\n                else if (STATE === ATTRIB_STATE_CONSTANT) emitConstant();\n                else {\n                    scope(\"if(\", STATE, \"===\", ATTRIB_STATE_POINTER, \"){\");\n                    emitBuffer();\n                    scope(\"}else{\");\n                    emitConstant();\n                    scope(\"}\");\n                }\n            }\n            attributes.forEach(function(attribute) {\n                var name = attribute.name;\n                var arg = args.attributes[name];\n                var record;\n                if (arg) {\n                    if (!filter(arg)) return;\n                    record = arg.append(env, scope);\n                } else {\n                    if (!filter(SCOPE_DECL)) return;\n                    var scopeAttrib = env.scopeAttrib(name);\n                    check$1.optional(function() {\n                        env.assert(scope, scopeAttrib + \".state\", \"missing attribute \" + name);\n                    });\n                    record = {};\n                    Object.keys(new AttributeRecord()).forEach(function(key) {\n                        record[key] = scope.def(scopeAttrib, \".\", key);\n                    });\n                }\n                emitBindAttribute(env.link(attribute), typeLength(attribute.info.type), record);\n            });\n        }\n        function emitUniforms(env, scope, args, uniforms, filter, isBatchInnerLoop) {\n            var shared = env.shared;\n            var GL = shared.gl;\n            var definedArrUniforms = {};\n            var infix;\n            for(var i = 0; i < uniforms.length; ++i){\n                var uniform = uniforms[i];\n                var name = uniform.name;\n                var type = uniform.info.type;\n                var size = uniform.info.size;\n                var arg = args.uniforms[name];\n                if (size > 1) {\n                    // either foo[n] or foos, avoid define both\n                    if (!arg) continue;\n                    var arrUniformName = name.replace(\"[0]\", \"\");\n                    if (definedArrUniforms[arrUniformName]) continue;\n                    definedArrUniforms[arrUniformName] = 1;\n                }\n                var UNIFORM = env.link(uniform);\n                var LOCATION = UNIFORM + \".location\";\n                var VALUE;\n                if (arg) {\n                    if (!filter(arg)) continue;\n                    if (isStatic(arg)) {\n                        var value = arg.value;\n                        check$1.command(value !== null && typeof value !== \"undefined\", 'missing uniform \"' + name + '\"', env.commandStr);\n                        if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {\n                            check$1.command(typeof value === \"function\" && (type === GL_SAMPLER_2D && (value._reglType === \"texture2d\" || value._reglType === \"framebuffer\") || type === GL_SAMPLER_CUBE && (value._reglType === \"textureCube\" || value._reglType === \"framebufferCube\")), \"invalid texture for uniform \" + name, env.commandStr);\n                            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);\n                            scope(GL, \".uniform1i(\", LOCATION, \",\", TEX_VALUE + \".bind());\");\n                            scope.exit(TEX_VALUE, \".unbind();\");\n                        } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {\n                            check$1.optional(function() {\n                                check$1.command(isArrayLike(value), \"invalid matrix for uniform \" + name, env.commandStr);\n                                check$1.command(type === GL_FLOAT_MAT2 && value.length === 4 || type === GL_FLOAT_MAT3 && value.length === 9 || type === GL_FLOAT_MAT4 && value.length === 16, \"invalid length for matrix uniform \" + name, env.commandStr);\n                            });\n                            var MAT_VALUE = env.global.def(\"new Float32Array([\" + Array.prototype.slice.call(value) + \"])\");\n                            var dim = 2;\n                            if (type === GL_FLOAT_MAT3) dim = 3;\n                            else if (type === GL_FLOAT_MAT4) dim = 4;\n                            scope(GL, \".uniformMatrix\", dim, \"fv(\", LOCATION, \",false,\", MAT_VALUE, \");\");\n                        } else {\n                            switch(type){\n                                case GL_FLOAT$8:\n                                    if (size === 1) check$1.commandType(value, \"number\", \"uniform \" + name, env.commandStr);\n                                    else check$1.command(isArrayLike(value) && value.length === size, \"uniform \" + name, env.commandStr);\n                                    infix = \"1f\";\n                                    break;\n                                case GL_FLOAT_VEC2:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 2 === 0 && value.length <= size * 2, \"uniform \" + name, env.commandStr);\n                                    infix = \"2f\";\n                                    break;\n                                case GL_FLOAT_VEC3:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 3 === 0 && value.length <= size * 3, \"uniform \" + name, env.commandStr);\n                                    infix = \"3f\";\n                                    break;\n                                case GL_FLOAT_VEC4:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 4 === 0 && value.length <= size * 4, \"uniform \" + name, env.commandStr);\n                                    infix = \"4f\";\n                                    break;\n                                case GL_BOOL:\n                                    if (size === 1) check$1.commandType(value, \"boolean\", \"uniform \" + name, env.commandStr);\n                                    else check$1.command(isArrayLike(value) && value.length === size, \"uniform \" + name, env.commandStr);\n                                    infix = \"1i\";\n                                    break;\n                                case GL_INT$3:\n                                    if (size === 1) check$1.commandType(value, \"number\", \"uniform \" + name, env.commandStr);\n                                    else check$1.command(isArrayLike(value) && value.length === size, \"uniform \" + name, env.commandStr);\n                                    infix = \"1i\";\n                                    break;\n                                case GL_BOOL_VEC2:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 2 === 0 && value.length <= size * 2, \"uniform \" + name, env.commandStr);\n                                    infix = \"2i\";\n                                    break;\n                                case GL_INT_VEC2:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 2 === 0 && value.length <= size * 2, \"uniform \" + name, env.commandStr);\n                                    infix = \"2i\";\n                                    break;\n                                case GL_BOOL_VEC3:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 3 === 0 && value.length <= size * 3, \"uniform \" + name, env.commandStr);\n                                    infix = \"3i\";\n                                    break;\n                                case GL_INT_VEC3:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 3 === 0 && value.length <= size * 3, \"uniform \" + name, env.commandStr);\n                                    infix = \"3i\";\n                                    break;\n                                case GL_BOOL_VEC4:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 4 === 0 && value.length <= size * 4, \"uniform \" + name, env.commandStr);\n                                    infix = \"4i\";\n                                    break;\n                                case GL_INT_VEC4:\n                                    check$1.command(isArrayLike(value) && value.length && value.length % 4 === 0 && value.length <= size * 4, \"uniform \" + name, env.commandStr);\n                                    infix = \"4i\";\n                                    break;\n                            }\n                            if (size > 1) {\n                                infix += \"v\";\n                                value = env.global.def(\"[\" + Array.prototype.slice.call(value) + \"]\");\n                            } else value = isArrayLike(value) ? Array.prototype.slice.call(value) : value;\n                            scope(GL, \".uniform\", infix, \"(\", LOCATION, \",\", value, \");\");\n                        }\n                        continue;\n                    } else VALUE = arg.append(env, scope);\n                } else {\n                    if (!filter(SCOPE_DECL)) continue;\n                    VALUE = scope.def(shared.uniforms, \"[\", stringStore.id(name), \"]\");\n                }\n                if (type === GL_SAMPLER_2D) {\n                    check$1(!Array.isArray(VALUE), \"must specify a scalar prop for textures\");\n                    scope(\"if(\", VALUE, \"&&\", VALUE, '._reglType===\"framebuffer\"){', VALUE, \"=\", VALUE, \".color[0];\", \"}\");\n                } else if (type === GL_SAMPLER_CUBE) {\n                    check$1(!Array.isArray(VALUE), \"must specify a scalar prop for cube maps\");\n                    scope(\"if(\", VALUE, \"&&\", VALUE, '._reglType===\"framebufferCube\"){', VALUE, \"=\", VALUE, \".color[0];\", \"}\");\n                }\n                // perform type validation\n                check$1.optional(function() {\n                    function emitCheck(pred, message) {\n                        env.assert(scope, pred, 'bad data or missing for uniform \"' + name + '\".  ' + message);\n                    }\n                    function checkType(type, size) {\n                        if (size === 1) check$1(!Array.isArray(VALUE), \"must not specify an array type for uniform\");\n                        emitCheck(\"Array.isArray(\" + VALUE + \") && typeof \" + VALUE + '[0]===\" ' + type + '\"' + \" || typeof \" + VALUE + '===\"' + type + '\"', \"invalid type, expected \" + type);\n                    }\n                    function checkVector(n, type, size) {\n                        if (Array.isArray(VALUE)) check$1(VALUE.length && VALUE.length % n === 0 && VALUE.length <= n * size, \"must have length of \" + (size === 1 ? \"\" : \"n * \") + n);\n                        else emitCheck(shared.isArrayLike + \"(\" + VALUE + \")&&\" + VALUE + \".length && \" + VALUE + \".length % \" + n + \" === 0\" + \" && \" + VALUE + \".length<=\" + n * size, \"invalid vector, should have length of \" + (size === 1 ? \"\" : \"n * \") + n, env.commandStr);\n                    }\n                    function checkTexture(target) {\n                        check$1(!Array.isArray(VALUE), \"must not specify a value type\");\n                        emitCheck(\"typeof \" + VALUE + '===\"function\"&&' + VALUE + '._reglType===\"texture' + (target === GL_TEXTURE_2D$3 ? \"2d\" : \"Cube\") + '\"', \"invalid texture type\", env.commandStr);\n                    }\n                    switch(type){\n                        case GL_INT$3:\n                            checkType(\"number\", size);\n                            break;\n                        case GL_INT_VEC2:\n                            checkVector(2, \"number\", size);\n                            break;\n                        case GL_INT_VEC3:\n                            checkVector(3, \"number\", size);\n                            break;\n                        case GL_INT_VEC4:\n                            checkVector(4, \"number\", size);\n                            break;\n                        case GL_FLOAT$8:\n                            checkType(\"number\", size);\n                            break;\n                        case GL_FLOAT_VEC2:\n                            checkVector(2, \"number\", size);\n                            break;\n                        case GL_FLOAT_VEC3:\n                            checkVector(3, \"number\", size);\n                            break;\n                        case GL_FLOAT_VEC4:\n                            checkVector(4, \"number\", size);\n                            break;\n                        case GL_BOOL:\n                            checkType(\"boolean\", size);\n                            break;\n                        case GL_BOOL_VEC2:\n                            checkVector(2, \"boolean\", size);\n                            break;\n                        case GL_BOOL_VEC3:\n                            checkVector(3, \"boolean\", size);\n                            break;\n                        case GL_BOOL_VEC4:\n                            checkVector(4, \"boolean\", size);\n                            break;\n                        case GL_FLOAT_MAT2:\n                            checkVector(4, \"number\", size);\n                            break;\n                        case GL_FLOAT_MAT3:\n                            checkVector(9, \"number\", size);\n                            break;\n                        case GL_FLOAT_MAT4:\n                            checkVector(16, \"number\", size);\n                            break;\n                        case GL_SAMPLER_2D:\n                            checkTexture(GL_TEXTURE_2D$3);\n                            break;\n                        case GL_SAMPLER_CUBE:\n                            checkTexture(GL_TEXTURE_CUBE_MAP$2);\n                            break;\n                    }\n                });\n                var unroll = 1;\n                switch(type){\n                    case GL_SAMPLER_2D:\n                    case GL_SAMPLER_CUBE:\n                        var TEX = scope.def(VALUE, \"._texture\");\n                        scope(GL, \".uniform1i(\", LOCATION, \",\", TEX, \".bind());\");\n                        scope.exit(TEX, \".unbind();\");\n                        continue;\n                    case GL_INT$3:\n                    case GL_BOOL:\n                        infix = \"1i\";\n                        break;\n                    case GL_INT_VEC2:\n                    case GL_BOOL_VEC2:\n                        infix = \"2i\";\n                        unroll = 2;\n                        break;\n                    case GL_INT_VEC3:\n                    case GL_BOOL_VEC3:\n                        infix = \"3i\";\n                        unroll = 3;\n                        break;\n                    case GL_INT_VEC4:\n                    case GL_BOOL_VEC4:\n                        infix = \"4i\";\n                        unroll = 4;\n                        break;\n                    case GL_FLOAT$8:\n                        infix = \"1f\";\n                        break;\n                    case GL_FLOAT_VEC2:\n                        infix = \"2f\";\n                        unroll = 2;\n                        break;\n                    case GL_FLOAT_VEC3:\n                        infix = \"3f\";\n                        unroll = 3;\n                        break;\n                    case GL_FLOAT_VEC4:\n                        infix = \"4f\";\n                        unroll = 4;\n                        break;\n                    case GL_FLOAT_MAT2:\n                        infix = \"Matrix2fv\";\n                        break;\n                    case GL_FLOAT_MAT3:\n                        infix = \"Matrix3fv\";\n                        break;\n                    case GL_FLOAT_MAT4:\n                        infix = \"Matrix4fv\";\n                        break;\n                }\n                if (infix.indexOf(\"Matrix\") === -1 && size > 1) {\n                    infix += \"v\";\n                    unroll = 1;\n                }\n                if (infix.charAt(0) === \"M\") {\n                    scope(GL, \".uniform\", infix, \"(\", LOCATION, \",\");\n                    var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);\n                    var STORAGE = env.global.def(\"new Float32Array(\", matSize, \")\");\n                    if (Array.isArray(VALUE)) scope(\"false,(\", loop(matSize, function(i) {\n                        return STORAGE + \"[\" + i + \"]=\" + VALUE[i];\n                    }), \",\", STORAGE, \")\");\n                    else scope(\"false,(Array.isArray(\", VALUE, \")||\", VALUE, \" instanceof Float32Array)?\", VALUE, \":(\", loop(matSize, function(i) {\n                        return STORAGE + \"[\" + i + \"]=\" + VALUE + \"[\" + i + \"]\";\n                    }), \",\", STORAGE, \")\");\n                    scope(\");\");\n                } else if (unroll > 1) {\n                    var prev = [];\n                    var cur = [];\n                    for(var j = 0; j < unroll; ++j){\n                        if (Array.isArray(VALUE)) cur.push(VALUE[j]);\n                        else cur.push(scope.def(VALUE + \"[\" + j + \"]\"));\n                        if (isBatchInnerLoop) prev.push(scope.def());\n                    }\n                    if (isBatchInnerLoop) scope(\"if(!\", env.batchId, \"||\", prev.map(function(p, i) {\n                        return p + \"!==\" + cur[i];\n                    }).join(\"||\"), \"){\", prev.map(function(p, i) {\n                        return p + \"=\" + cur[i] + \";\";\n                    }).join(\"\"));\n                    scope(GL, \".uniform\", infix, \"(\", LOCATION, \",\", cur.join(\",\"), \");\");\n                    if (isBatchInnerLoop) scope(\"}\");\n                } else {\n                    check$1(!Array.isArray(VALUE), \"uniform value must not be an array\");\n                    if (isBatchInnerLoop) {\n                        var prevS = scope.def();\n                        scope(\"if(!\", env.batchId, \"||\", prevS, \"!==\", VALUE, \"){\", prevS, \"=\", VALUE, \";\");\n                    }\n                    scope(GL, \".uniform\", infix, \"(\", LOCATION, \",\", VALUE, \");\");\n                    if (isBatchInnerLoop) scope(\"}\");\n                }\n            }\n        }\n        function emitDraw(env, outer, inner, args) {\n            var shared = env.shared;\n            var GL = shared.gl;\n            var DRAW_STATE = shared.draw;\n            var drawOptions = args.draw;\n            function emitElements() {\n                var defn = drawOptions.elements;\n                var ELEMENTS;\n                var scope = outer;\n                if (defn) {\n                    if (defn.contextDep && args.contextDynamic || defn.propDep) scope = inner;\n                    ELEMENTS = defn.append(env, scope);\n                    if (drawOptions.elementsActive) scope(\"if(\" + ELEMENTS + \")\" + GL + \".bindBuffer(\" + GL_ELEMENT_ARRAY_BUFFER$2 + \",\" + ELEMENTS + \".buffer.buffer);\");\n                } else {\n                    ELEMENTS = scope.def();\n                    scope(ELEMENTS, \"=\", DRAW_STATE, \".\", S_ELEMENTS, \";\", \"if(\", ELEMENTS, \"){\", GL, \".bindBuffer(\", GL_ELEMENT_ARRAY_BUFFER$2, \",\", ELEMENTS, \".buffer.buffer);}\", \"else if(\", shared.vao, \".currentVAO){\", ELEMENTS, \"=\", env.shared.elements + \".getElements(\" + shared.vao, \".currentVAO.elements);\", !extVertexArrays ? \"if(\" + ELEMENTS + \")\" + GL + \".bindBuffer(\" + GL_ELEMENT_ARRAY_BUFFER$2 + \",\" + ELEMENTS + \".buffer.buffer);\" : \"\", \"}\");\n                }\n                return ELEMENTS;\n            }\n            function emitCount() {\n                var defn = drawOptions.count;\n                var COUNT;\n                var scope = outer;\n                if (defn) {\n                    if (defn.contextDep && args.contextDynamic || defn.propDep) scope = inner;\n                    COUNT = defn.append(env, scope);\n                    check$1.optional(function() {\n                        if (defn.MISSING) env.assert(outer, \"false\", \"missing vertex count\");\n                        if (defn.DYNAMIC) env.assert(scope, COUNT + \">=0\", \"missing vertex count\");\n                    });\n                } else {\n                    COUNT = scope.def(DRAW_STATE, \".\", S_COUNT);\n                    check$1.optional(function() {\n                        env.assert(scope, COUNT + \">=0\", \"missing vertex count\");\n                    });\n                }\n                return COUNT;\n            }\n            var ELEMENTS = emitElements();\n            function emitValue(name) {\n                var defn = drawOptions[name];\n                if (defn) {\n                    if (defn.contextDep && args.contextDynamic || defn.propDep) return defn.append(env, inner);\n                    else return defn.append(env, outer);\n                } else return outer.def(DRAW_STATE, \".\", name);\n            }\n            var PRIMITIVE = emitValue(S_PRIMITIVE);\n            var OFFSET = emitValue(S_OFFSET);\n            var COUNT = emitCount();\n            if (typeof COUNT === \"number\") {\n                if (COUNT === 0) return;\n            } else {\n                inner(\"if(\", COUNT, \"){\");\n                inner.exit(\"}\");\n            }\n            var INSTANCES, EXT_INSTANCING;\n            if (extInstancing) {\n                INSTANCES = emitValue(S_INSTANCES);\n                EXT_INSTANCING = env.instancing;\n            }\n            var ELEMENT_TYPE = ELEMENTS + \".type\";\n            var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive;\n            function emitInstancing() {\n                function drawElements() {\n                    inner(EXT_INSTANCING, \".drawElementsInstancedANGLE(\", [\n                        PRIMITIVE,\n                        COUNT,\n                        ELEMENT_TYPE,\n                        OFFSET + \"<<((\" + ELEMENT_TYPE + \"-\" + GL_UNSIGNED_BYTE$8 + \")>>1)\",\n                        INSTANCES\n                    ], \");\");\n                }\n                function drawArrays() {\n                    inner(EXT_INSTANCING, \".drawArraysInstancedANGLE(\", [\n                        PRIMITIVE,\n                        OFFSET,\n                        COUNT,\n                        INSTANCES\n                    ], \");\");\n                }\n                if (ELEMENTS && ELEMENTS !== \"null\") {\n                    if (!elementsStatic) {\n                        inner(\"if(\", ELEMENTS, \"){\");\n                        drawElements();\n                        inner(\"}else{\");\n                        drawArrays();\n                        inner(\"}\");\n                    } else drawElements();\n                } else drawArrays();\n            }\n            function emitRegular() {\n                function drawElements() {\n                    inner(GL + \".drawElements(\" + [\n                        PRIMITIVE,\n                        COUNT,\n                        ELEMENT_TYPE,\n                        OFFSET + \"<<((\" + ELEMENT_TYPE + \"-\" + GL_UNSIGNED_BYTE$8 + \")>>1)\"\n                    ] + \");\");\n                }\n                function drawArrays() {\n                    inner(GL + \".drawArrays(\" + [\n                        PRIMITIVE,\n                        OFFSET,\n                        COUNT\n                    ] + \");\");\n                }\n                if (ELEMENTS && ELEMENTS !== \"null\") {\n                    if (!elementsStatic) {\n                        inner(\"if(\", ELEMENTS, \"){\");\n                        drawElements();\n                        inner(\"}else{\");\n                        drawArrays();\n                        inner(\"}\");\n                    } else drawElements();\n                } else drawArrays();\n            }\n            if (extInstancing && (typeof INSTANCES !== \"number\" || INSTANCES >= 0)) {\n                if (typeof INSTANCES === \"string\") {\n                    inner(\"if(\", INSTANCES, \">0){\");\n                    emitInstancing();\n                    inner(\"}else if(\", INSTANCES, \"<0){\");\n                    emitRegular();\n                    inner(\"}\");\n                } else emitInstancing();\n            } else emitRegular();\n        }\n        function createBody(emitBody, parentEnv, args, program, count) {\n            var env = createREGLEnvironment();\n            var scope = env.proc(\"body\", count);\n            check$1.optional(function() {\n                env.commandStr = parentEnv.commandStr;\n                env.command = env.link(parentEnv.commandStr);\n            });\n            if (extInstancing) env.instancing = scope.def(env.shared.extensions, \".angle_instanced_arrays\");\n            emitBody(env, scope, args, program);\n            return env.compile().body;\n        }\n        // ===================================================\n        // ===================================================\n        // DRAW PROC\n        // ===================================================\n        // ===================================================\n        function emitDrawBody(env, draw, args, program) {\n            injectExtensions(env, draw);\n            if (args.useVAO) {\n                if (args.drawVAO) draw(env.shared.vao, \".setVAO(\", args.drawVAO.append(env, draw), \");\");\n                else draw(env.shared.vao, \".setVAO(\", env.shared.vao, \".targetVAO);\");\n            } else {\n                draw(env.shared.vao, \".setVAO(null);\");\n                emitAttributes(env, draw, args, program.attributes, function() {\n                    return true;\n                });\n            }\n            emitUniforms(env, draw, args, program.uniforms, function() {\n                return true;\n            }, false);\n            emitDraw(env, draw, draw, args);\n        }\n        function emitDrawProc(env, args) {\n            var draw = env.proc(\"draw\", 1);\n            injectExtensions(env, draw);\n            emitContext(env, draw, args.context);\n            emitPollFramebuffer(env, draw, args.framebuffer);\n            emitPollState(env, draw, args);\n            emitSetOptions(env, draw, args.state);\n            emitProfile(env, draw, args, false, true);\n            var program = args.shader.progVar.append(env, draw);\n            draw(env.shared.gl, \".useProgram(\", program, \".program);\");\n            if (args.shader.program) emitDrawBody(env, draw, args, args.shader.program);\n            else {\n                draw(env.shared.vao, \".setVAO(null);\");\n                var drawCache = env.global.def(\"{}\");\n                var PROG_ID = draw.def(program, \".id\");\n                var CACHED_PROC = draw.def(drawCache, \"[\", PROG_ID, \"]\");\n                draw(env.cond(CACHED_PROC).then(CACHED_PROC, \".call(this,a0);\").else(CACHED_PROC, \"=\", drawCache, \"[\", PROG_ID, \"]=\", env.link(function(program) {\n                    return createBody(emitDrawBody, env, args, program, 1);\n                }), \"(\", program, \");\", CACHED_PROC, \".call(this,a0);\"));\n            }\n            if (Object.keys(args.state).length > 0) draw(env.shared.current, \".dirty=true;\");\n            if (env.shared.vao) draw(env.shared.vao, \".setVAO(null);\");\n        }\n        // ===================================================\n        // ===================================================\n        // BATCH PROC\n        // ===================================================\n        // ===================================================\n        function emitBatchDynamicShaderBody(env, scope, args, program) {\n            env.batchId = \"a1\";\n            injectExtensions(env, scope);\n            function all() {\n                return true;\n            }\n            emitAttributes(env, scope, args, program.attributes, all);\n            emitUniforms(env, scope, args, program.uniforms, all, false);\n            emitDraw(env, scope, scope, args);\n        }\n        function emitBatchBody(env, scope, args, program) {\n            injectExtensions(env, scope);\n            var contextDynamic = args.contextDep;\n            var BATCH_ID = scope.def();\n            var PROP_LIST = \"a0\";\n            var NUM_PROPS = \"a1\";\n            var PROPS = scope.def();\n            env.shared.props = PROPS;\n            env.batchId = BATCH_ID;\n            var outer = env.scope();\n            var inner = env.scope();\n            scope(outer.entry, \"for(\", BATCH_ID, \"=0;\", BATCH_ID, \"<\", NUM_PROPS, \";++\", BATCH_ID, \"){\", PROPS, \"=\", PROP_LIST, \"[\", BATCH_ID, \"];\", inner, \"}\", outer.exit);\n            function isInnerDefn(defn) {\n                return defn.contextDep && contextDynamic || defn.propDep;\n            }\n            function isOuterDefn(defn) {\n                return !isInnerDefn(defn);\n            }\n            if (args.needsContext) emitContext(env, inner, args.context);\n            if (args.needsFramebuffer) emitPollFramebuffer(env, inner, args.framebuffer);\n            emitSetOptions(env, inner, args.state, isInnerDefn);\n            if (args.profile && isInnerDefn(args.profile)) emitProfile(env, inner, args, false, true);\n            if (!program) {\n                var progCache = env.global.def(\"{}\");\n                var PROGRAM = args.shader.progVar.append(env, inner);\n                var PROG_ID = inner.def(PROGRAM, \".id\");\n                var CACHED_PROC = inner.def(progCache, \"[\", PROG_ID, \"]\");\n                inner(env.shared.gl, \".useProgram(\", PROGRAM, \".program);\", \"if(!\", CACHED_PROC, \"){\", CACHED_PROC, \"=\", progCache, \"[\", PROG_ID, \"]=\", env.link(function(program) {\n                    return createBody(emitBatchDynamicShaderBody, env, args, program, 2);\n                }), \"(\", PROGRAM, \");}\", CACHED_PROC, \".call(this,a0[\", BATCH_ID, \"],\", BATCH_ID, \");\");\n            } else {\n                if (args.useVAO) {\n                    if (args.drawVAO) {\n                        if (isInnerDefn(args.drawVAO)) // vao is a prop\n                        inner(env.shared.vao, \".setVAO(\", args.drawVAO.append(env, inner), \");\");\n                        else // vao is invariant\n                        outer(env.shared.vao, \".setVAO(\", args.drawVAO.append(env, outer), \");\");\n                    } else // scoped vao binding\n                    outer(env.shared.vao, \".setVAO(\", env.shared.vao, \".targetVAO);\");\n                } else {\n                    outer(env.shared.vao, \".setVAO(null);\");\n                    emitAttributes(env, outer, args, program.attributes, isOuterDefn);\n                    emitAttributes(env, inner, args, program.attributes, isInnerDefn);\n                }\n                emitUniforms(env, outer, args, program.uniforms, isOuterDefn, false);\n                emitUniforms(env, inner, args, program.uniforms, isInnerDefn, true);\n                emitDraw(env, outer, inner, args);\n            }\n        }\n        function emitBatchProc(env, args) {\n            var batch = env.proc(\"batch\", 2);\n            env.batchId = \"0\";\n            injectExtensions(env, batch);\n            // Check if any context variables depend on props\n            var contextDynamic = false;\n            var needsContext = true;\n            Object.keys(args.context).forEach(function(name) {\n                contextDynamic = contextDynamic || args.context[name].propDep;\n            });\n            if (!contextDynamic) {\n                emitContext(env, batch, args.context);\n                needsContext = false;\n            }\n            // framebuffer state affects framebufferWidth/height context vars\n            var framebuffer = args.framebuffer;\n            var needsFramebuffer = false;\n            if (framebuffer) {\n                if (framebuffer.propDep) contextDynamic = needsFramebuffer = true;\n                else if (framebuffer.contextDep && contextDynamic) needsFramebuffer = true;\n                if (!needsFramebuffer) emitPollFramebuffer(env, batch, framebuffer);\n            } else emitPollFramebuffer(env, batch, null);\n            // viewport is weird because it can affect context vars\n            if (args.state.viewport && args.state.viewport.propDep) contextDynamic = true;\n            function isInnerDefn(defn) {\n                return defn.contextDep && contextDynamic || defn.propDep;\n            }\n            // set webgl options\n            emitPollState(env, batch, args);\n            emitSetOptions(env, batch, args.state, function(defn) {\n                return !isInnerDefn(defn);\n            });\n            if (!args.profile || !isInnerDefn(args.profile)) emitProfile(env, batch, args, false, \"a1\");\n            // Save these values to args so that the batch body routine can use them\n            args.contextDep = contextDynamic;\n            args.needsContext = needsContext;\n            args.needsFramebuffer = needsFramebuffer;\n            // determine if shader is dynamic\n            var progDefn = args.shader.progVar;\n            if (progDefn.contextDep && contextDynamic || progDefn.propDep) emitBatchBody(env, batch, args, null);\n            else {\n                var PROGRAM = progDefn.append(env, batch);\n                batch(env.shared.gl, \".useProgram(\", PROGRAM, \".program);\");\n                if (args.shader.program) emitBatchBody(env, batch, args, args.shader.program);\n                else {\n                    batch(env.shared.vao, \".setVAO(null);\");\n                    var batchCache = env.global.def(\"{}\");\n                    var PROG_ID = batch.def(PROGRAM, \".id\");\n                    var CACHED_PROC = batch.def(batchCache, \"[\", PROG_ID, \"]\");\n                    batch(env.cond(CACHED_PROC).then(CACHED_PROC, \".call(this,a0,a1);\").else(CACHED_PROC, \"=\", batchCache, \"[\", PROG_ID, \"]=\", env.link(function(program) {\n                        return createBody(emitBatchBody, env, args, program, 2);\n                    }), \"(\", PROGRAM, \");\", CACHED_PROC, \".call(this,a0,a1);\"));\n                }\n            }\n            if (Object.keys(args.state).length > 0) batch(env.shared.current, \".dirty=true;\");\n            if (env.shared.vao) batch(env.shared.vao, \".setVAO(null);\");\n        }\n        // ===================================================\n        // ===================================================\n        // SCOPE COMMAND\n        // ===================================================\n        // ===================================================\n        function emitScopeProc(env, args) {\n            var scope = env.proc(\"scope\", 3);\n            env.batchId = \"a2\";\n            var shared = env.shared;\n            var CURRENT_STATE = shared.current;\n            emitContext(env, scope, args.context);\n            if (args.framebuffer) args.framebuffer.append(env, scope);\n            sortState(Object.keys(args.state)).forEach(function(name) {\n                var defn = args.state[name];\n                var value = defn.append(env, scope);\n                if (isArrayLike(value)) value.forEach(function(v, i) {\n                    scope.set(env.next[name], \"[\" + i + \"]\", v);\n                });\n                else scope.set(shared.next, \".\" + name, value);\n            });\n            emitProfile(env, scope, args, true, true);\n            [\n                S_ELEMENTS,\n                S_OFFSET,\n                S_COUNT,\n                S_INSTANCES,\n                S_PRIMITIVE\n            ].forEach(function(opt) {\n                var variable = args.draw[opt];\n                if (!variable) return;\n                scope.set(shared.draw, \".\" + opt, \"\" + variable.append(env, scope));\n            });\n            Object.keys(args.uniforms).forEach(function(opt) {\n                var value = args.uniforms[opt].append(env, scope);\n                if (Array.isArray(value)) value = \"[\" + value.join() + \"]\";\n                scope.set(shared.uniforms, \"[\" + stringStore.id(opt) + \"]\", value);\n            });\n            Object.keys(args.attributes).forEach(function(name) {\n                var record = args.attributes[name].append(env, scope);\n                var scopeAttrib = env.scopeAttrib(name);\n                Object.keys(new AttributeRecord()).forEach(function(prop) {\n                    scope.set(scopeAttrib, \".\" + prop, record[prop]);\n                });\n            });\n            if (args.scopeVAO) scope.set(shared.vao, \".targetVAO\", args.scopeVAO.append(env, scope));\n            function saveShader(name) {\n                var shader = args.shader[name];\n                if (shader) scope.set(shared.shader, \".\" + name, shader.append(env, scope));\n            }\n            saveShader(S_VERT);\n            saveShader(S_FRAG);\n            if (Object.keys(args.state).length > 0) {\n                scope(CURRENT_STATE, \".dirty=true;\");\n                scope.exit(CURRENT_STATE, \".dirty=true;\");\n            }\n            scope(\"a1(\", env.shared.context, \",a0,\", env.batchId, \");\");\n        }\n        function isDynamicObject(object) {\n            if (typeof object !== \"object\" || isArrayLike(object)) return;\n            var props = Object.keys(object);\n            for(var i = 0; i < props.length; ++i){\n                if (dynamic.isDynamic(object[props[i]])) return true;\n            }\n            return false;\n        }\n        function splatObject(env, options, name) {\n            var object = options.static[name];\n            if (!object || !isDynamicObject(object)) return;\n            var globals = env.global;\n            var keys = Object.keys(object);\n            var thisDep = false;\n            var contextDep = false;\n            var propDep = false;\n            var objectRef = env.global.def(\"{}\");\n            keys.forEach(function(key) {\n                var value = object[key];\n                if (dynamic.isDynamic(value)) {\n                    if (typeof value === \"function\") value = object[key] = dynamic.unbox(value);\n                    var deps = createDynamicDecl(value, null);\n                    thisDep = thisDep || deps.thisDep;\n                    propDep = propDep || deps.propDep;\n                    contextDep = contextDep || deps.contextDep;\n                } else {\n                    globals(objectRef, \".\", key, \"=\");\n                    switch(typeof value){\n                        case \"number\":\n                            globals(value);\n                            break;\n                        case \"string\":\n                            globals('\"', value, '\"');\n                            break;\n                        case \"object\":\n                            if (Array.isArray(value)) globals(\"[\", value.join(), \"]\");\n                            break;\n                        default:\n                            globals(env.link(value));\n                            break;\n                    }\n                    globals(\";\");\n                }\n            });\n            function appendBlock(env, block) {\n                keys.forEach(function(key) {\n                    var value = object[key];\n                    if (!dynamic.isDynamic(value)) return;\n                    var ref = env.invoke(block, value);\n                    block(objectRef, \".\", key, \"=\", ref, \";\");\n                });\n            }\n            options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {\n                thisDep: thisDep,\n                contextDep: contextDep,\n                propDep: propDep,\n                ref: objectRef,\n                append: appendBlock\n            });\n            delete options.static[name];\n        }\n        // ===========================================================================\n        // ===========================================================================\n        // MAIN DRAW COMMAND\n        // ===========================================================================\n        // ===========================================================================\n        function compileCommand(options, attributes, uniforms, context, stats) {\n            var env = createREGLEnvironment();\n            // link stats, so that we can easily access it in the program.\n            env.stats = env.link(stats);\n            // splat options and attributes to allow for dynamic nested properties\n            Object.keys(attributes.static).forEach(function(key) {\n                splatObject(env, attributes, key);\n            });\n            NESTED_OPTIONS.forEach(function(name) {\n                splatObject(env, options, name);\n            });\n            var args = parseArguments(options, attributes, uniforms, context, env);\n            emitDrawProc(env, args);\n            emitScopeProc(env, args);\n            emitBatchProc(env, args);\n            return extend(env.compile(), {\n                destroy: function() {\n                    args.shader.program.destroy();\n                }\n            });\n        }\n        // ===========================================================================\n        // ===========================================================================\n        // POLL / REFRESH\n        // ===========================================================================\n        // ===========================================================================\n        return {\n            next: nextState,\n            current: currentState,\n            procs: function() {\n                var env = createREGLEnvironment();\n                var poll = env.proc(\"poll\");\n                var refresh = env.proc(\"refresh\");\n                var common = env.block();\n                poll(common);\n                refresh(common);\n                var shared = env.shared;\n                var GL = shared.gl;\n                var NEXT_STATE = shared.next;\n                var CURRENT_STATE = shared.current;\n                common(CURRENT_STATE, \".dirty=false;\");\n                emitPollFramebuffer(env, poll);\n                emitPollFramebuffer(env, refresh, null, true);\n                // Refresh updates all attribute state changes\n                var INSTANCING;\n                if (extInstancing) INSTANCING = env.link(extInstancing);\n                // update vertex array bindings\n                if (extensions.oes_vertex_array_object) refresh(env.link(extensions.oes_vertex_array_object), \".bindVertexArrayOES(null);\");\n                for(var i = 0; i < limits.maxAttributes; ++i){\n                    var BINDING = refresh.def(shared.attributes, \"[\", i, \"]\");\n                    var ifte = env.cond(BINDING, \".buffer\");\n                    ifte.then(GL, \".enableVertexAttribArray(\", i, \");\", GL, \".bindBuffer(\", GL_ARRAY_BUFFER$2, \",\", BINDING, \".buffer.buffer);\", GL, \".vertexAttribPointer(\", i, \",\", BINDING, \".size,\", BINDING, \".type,\", BINDING, \".normalized,\", BINDING, \".stride,\", BINDING, \".offset);\").else(GL, \".disableVertexAttribArray(\", i, \");\", GL, \".vertexAttrib4f(\", i, \",\", BINDING, \".x,\", BINDING, \".y,\", BINDING, \".z,\", BINDING, \".w);\", BINDING, \".buffer=null;\");\n                    refresh(ifte);\n                    if (extInstancing) refresh(INSTANCING, \".vertexAttribDivisorANGLE(\", i, \",\", BINDING, \".divisor);\");\n                }\n                refresh(env.shared.vao, \".currentVAO=null;\", env.shared.vao, \".setVAO(\", env.shared.vao, \".targetVAO);\");\n                Object.keys(GL_FLAGS).forEach(function(flag) {\n                    var cap = GL_FLAGS[flag];\n                    var NEXT = common.def(NEXT_STATE, \".\", flag);\n                    var block = env.block();\n                    block(\"if(\", NEXT, \"){\", GL, \".enable(\", cap, \")}else{\", GL, \".disable(\", cap, \")}\", CURRENT_STATE, \".\", flag, \"=\", NEXT, \";\");\n                    refresh(block);\n                    poll(\"if(\", NEXT, \"!==\", CURRENT_STATE, \".\", flag, \"){\", block, \"}\");\n                });\n                Object.keys(GL_VARIABLES).forEach(function(name) {\n                    var func = GL_VARIABLES[name];\n                    var init = currentState[name];\n                    var NEXT, CURRENT;\n                    var block = env.block();\n                    block(GL, \".\", func, \"(\");\n                    if (isArrayLike(init)) {\n                        var n = init.length;\n                        NEXT = env.global.def(NEXT_STATE, \".\", name);\n                        CURRENT = env.global.def(CURRENT_STATE, \".\", name);\n                        block(loop(n, function(i) {\n                            return NEXT + \"[\" + i + \"]\";\n                        }), \");\", loop(n, function(i) {\n                            return CURRENT + \"[\" + i + \"]=\" + NEXT + \"[\" + i + \"];\";\n                        }).join(\"\"));\n                        poll(\"if(\", loop(n, function(i) {\n                            return NEXT + \"[\" + i + \"]!==\" + CURRENT + \"[\" + i + \"]\";\n                        }).join(\"||\"), \"){\", block, \"}\");\n                    } else {\n                        NEXT = common.def(NEXT_STATE, \".\", name);\n                        CURRENT = common.def(CURRENT_STATE, \".\", name);\n                        block(NEXT, \");\", CURRENT_STATE, \".\", name, \"=\", NEXT, \";\");\n                        poll(\"if(\", NEXT, \"!==\", CURRENT, \"){\", block, \"}\");\n                    }\n                    refresh(block);\n                });\n                return env.compile();\n            }(),\n            compile: compileCommand\n        };\n    }\n    function stats() {\n        return {\n            vaoCount: 0,\n            bufferCount: 0,\n            elementsCount: 0,\n            framebufferCount: 0,\n            shaderCount: 0,\n            textureCount: 0,\n            cubeCount: 0,\n            renderbufferCount: 0,\n            maxTextureUnits: 0\n        };\n    }\n    var GL_QUERY_RESULT_EXT = 0x8866;\n    var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;\n    var GL_TIME_ELAPSED_EXT = 0x88BF;\n    var createTimer = function(gl, extensions) {\n        if (!extensions.ext_disjoint_timer_query) return null;\n        // QUERY POOL BEGIN\n        var queryPool = [];\n        function allocQuery() {\n            return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();\n        }\n        function freeQuery(query) {\n            queryPool.push(query);\n        }\n        // QUERY POOL END\n        var pendingQueries = [];\n        function beginQuery(stats) {\n            var query = allocQuery();\n            extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);\n            pendingQueries.push(query);\n            pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);\n        }\n        function endQuery() {\n            extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);\n        }\n        //\n        // Pending stats pool.\n        //\n        function PendingStats() {\n            this.startQueryIndex = -1;\n            this.endQueryIndex = -1;\n            this.sum = 0;\n            this.stats = null;\n        }\n        var pendingStatsPool = [];\n        function allocPendingStats() {\n            return pendingStatsPool.pop() || new PendingStats();\n        }\n        function freePendingStats(pendingStats) {\n            pendingStatsPool.push(pendingStats);\n        }\n        // Pending stats pool end\n        var pendingStats = [];\n        function pushScopeStats(start, end, stats) {\n            var ps = allocPendingStats();\n            ps.startQueryIndex = start;\n            ps.endQueryIndex = end;\n            ps.sum = 0;\n            ps.stats = stats;\n            pendingStats.push(ps);\n        }\n        // we should call this at the beginning of the frame,\n        // in order to update gpuTime\n        var timeSum = [];\n        var queryPtr = [];\n        function update() {\n            var ptr, i;\n            var n = pendingQueries.length;\n            if (n === 0) return;\n            // Reserve space\n            queryPtr.length = Math.max(queryPtr.length, n + 1);\n            timeSum.length = Math.max(timeSum.length, n + 1);\n            timeSum[0] = 0;\n            queryPtr[0] = 0;\n            // Update all pending timer queries\n            var queryTime = 0;\n            ptr = 0;\n            for(i = 0; i < pendingQueries.length; ++i){\n                var query = pendingQueries[i];\n                if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {\n                    queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);\n                    freeQuery(query);\n                } else pendingQueries[ptr++] = query;\n                timeSum[i + 1] = queryTime;\n                queryPtr[i + 1] = ptr;\n            }\n            pendingQueries.length = ptr;\n            // Update all pending stat queries\n            ptr = 0;\n            for(i = 0; i < pendingStats.length; ++i){\n                var stats = pendingStats[i];\n                var start = stats.startQueryIndex;\n                var end = stats.endQueryIndex;\n                stats.sum += timeSum[end] - timeSum[start];\n                var startPtr = queryPtr[start];\n                var endPtr = queryPtr[end];\n                if (endPtr === startPtr) {\n                    stats.stats.gpuTime += stats.sum / 1e6;\n                    freePendingStats(stats);\n                } else {\n                    stats.startQueryIndex = startPtr;\n                    stats.endQueryIndex = endPtr;\n                    pendingStats[ptr++] = stats;\n                }\n            }\n            pendingStats.length = ptr;\n        }\n        return {\n            beginQuery: beginQuery,\n            endQuery: endQuery,\n            pushScopeStats: pushScopeStats,\n            update: update,\n            getNumPendingQueries: function() {\n                return pendingQueries.length;\n            },\n            clear: function() {\n                queryPool.push.apply(queryPool, pendingQueries);\n                for(var i = 0; i < queryPool.length; i++)extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);\n                pendingQueries.length = 0;\n                queryPool.length = 0;\n            },\n            restore: function() {\n                pendingQueries.length = 0;\n                queryPool.length = 0;\n            }\n        };\n    };\n    var GL_COLOR_BUFFER_BIT = 16384;\n    var GL_DEPTH_BUFFER_BIT = 256;\n    var GL_STENCIL_BUFFER_BIT = 1024;\n    var GL_ARRAY_BUFFER = 34962;\n    var CONTEXT_LOST_EVENT = \"webglcontextlost\";\n    var CONTEXT_RESTORED_EVENT = \"webglcontextrestored\";\n    var DYN_PROP = 1;\n    var DYN_CONTEXT = 2;\n    var DYN_STATE = 3;\n    function find(haystack, needle) {\n        for(var i = 0; i < haystack.length; ++i){\n            if (haystack[i] === needle) return i;\n        }\n        return -1;\n    }\n    function wrapREGL(args) {\n        var config = parseArgs(args);\n        if (!config) return null;\n        var gl = config.gl;\n        var glAttributes = gl.getContextAttributes();\n        var contextLost = gl.isContextLost();\n        var extensionState = createExtensionCache(gl, config);\n        if (!extensionState) return null;\n        var stringStore = createStringStore();\n        var stats$$1 = stats();\n        var extensions = extensionState.extensions;\n        var timer = createTimer(gl, extensions);\n        var START_TIME = clock();\n        var WIDTH = gl.drawingBufferWidth;\n        var HEIGHT = gl.drawingBufferHeight;\n        var contextState = {\n            tick: 0,\n            time: 0,\n            viewportWidth: WIDTH,\n            viewportHeight: HEIGHT,\n            framebufferWidth: WIDTH,\n            framebufferHeight: HEIGHT,\n            drawingBufferWidth: WIDTH,\n            drawingBufferHeight: HEIGHT,\n            pixelRatio: config.pixelRatio\n        };\n        var uniformState = {};\n        var drawState = {\n            elements: null,\n            primitive: 4,\n            count: -1,\n            offset: 0,\n            instances: -1\n        };\n        var limits = wrapLimits(gl, extensions);\n        var bufferState = wrapBufferState(gl, stats$$1, config, destroyBuffer);\n        var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);\n        var attributeState = wrapAttributeState(gl, extensions, limits, stats$$1, bufferState, elementState, drawState);\n        function destroyBuffer(buffer) {\n            return attributeState.destroyBuffer(buffer);\n        }\n        var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);\n        var textureState = createTextureSet(gl, extensions, limits, function() {\n            core.procs.poll();\n        }, contextState, stats$$1, config);\n        var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);\n        var framebufferState = wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats$$1);\n        var core = reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config);\n        var readPixels = wrapReadPixels(gl, framebufferState, core.procs.poll, contextState, glAttributes, extensions, limits);\n        var nextState = core.next;\n        var canvas = gl.canvas;\n        var rafCallbacks = [];\n        var lossCallbacks = [];\n        var restoreCallbacks = [];\n        var destroyCallbacks = [\n            config.onDestroy\n        ];\n        var activeRAF = null;\n        function handleRAF() {\n            if (rafCallbacks.length === 0) {\n                if (timer) timer.update();\n                activeRAF = null;\n                return;\n            }\n            // schedule next animation frame\n            activeRAF = raf.next(handleRAF);\n            // poll for changes\n            poll();\n            // fire a callback for all pending rafs\n            for(var i = rafCallbacks.length - 1; i >= 0; --i){\n                var cb = rafCallbacks[i];\n                if (cb) cb(contextState, null, 0);\n            }\n            // flush all pending webgl calls\n            gl.flush();\n            // poll GPU timers *after* gl.flush so we don't delay command dispatch\n            if (timer) timer.update();\n        }\n        function startRAF() {\n            if (!activeRAF && rafCallbacks.length > 0) activeRAF = raf.next(handleRAF);\n        }\n        function stopRAF() {\n            if (activeRAF) {\n                raf.cancel(handleRAF);\n                activeRAF = null;\n            }\n        }\n        function handleContextLoss(event) {\n            event.preventDefault();\n            // set context lost flag\n            contextLost = true;\n            // pause request animation frame\n            stopRAF();\n            // lose context\n            lossCallbacks.forEach(function(cb) {\n                cb();\n            });\n        }\n        function handleContextRestored(event) {\n            // clear error code\n            gl.getError();\n            // clear context lost flag\n            contextLost = false;\n            // refresh state\n            extensionState.restore();\n            shaderState.restore();\n            bufferState.restore();\n            textureState.restore();\n            renderbufferState.restore();\n            framebufferState.restore();\n            attributeState.restore();\n            if (timer) timer.restore();\n            // refresh state\n            core.procs.refresh();\n            // restart RAF\n            startRAF();\n            // restore context\n            restoreCallbacks.forEach(function(cb) {\n                cb();\n            });\n        }\n        if (canvas) {\n            canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);\n            canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);\n        }\n        function destroy() {\n            rafCallbacks.length = 0;\n            stopRAF();\n            if (canvas) {\n                canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);\n                canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);\n            }\n            shaderState.clear();\n            framebufferState.clear();\n            renderbufferState.clear();\n            attributeState.clear();\n            textureState.clear();\n            elementState.clear();\n            bufferState.clear();\n            if (timer) timer.clear();\n            destroyCallbacks.forEach(function(cb) {\n                cb();\n            });\n        }\n        function compileProcedure(options) {\n            check$1(!!options, \"invalid args to regl({...})\");\n            check$1.type(options, \"object\", \"invalid args to regl({...})\");\n            function flattenNestedOptions(options) {\n                var result = extend({}, options);\n                delete result.uniforms;\n                delete result.attributes;\n                delete result.context;\n                delete result.vao;\n                if (\"stencil\" in result && result.stencil.op) {\n                    result.stencil.opBack = result.stencil.opFront = result.stencil.op;\n                    delete result.stencil.op;\n                }\n                function merge(name) {\n                    if (name in result) {\n                        var child = result[name];\n                        delete result[name];\n                        Object.keys(child).forEach(function(prop) {\n                            result[name + \".\" + prop] = child[prop];\n                        });\n                    }\n                }\n                merge(\"blend\");\n                merge(\"depth\");\n                merge(\"cull\");\n                merge(\"stencil\");\n                merge(\"polygonOffset\");\n                merge(\"scissor\");\n                merge(\"sample\");\n                if (\"vao\" in options) result.vao = options.vao;\n                return result;\n            }\n            function separateDynamic(object, useArrays) {\n                var staticItems = {};\n                var dynamicItems = {};\n                Object.keys(object).forEach(function(option) {\n                    var value = object[option];\n                    if (dynamic.isDynamic(value)) {\n                        dynamicItems[option] = dynamic.unbox(value, option);\n                        return;\n                    } else if (useArrays && Array.isArray(value)) {\n                        for(var i = 0; i < value.length; ++i)if (dynamic.isDynamic(value[i])) {\n                            dynamicItems[option] = dynamic.unbox(value, option);\n                            return;\n                        }\n                    }\n                    staticItems[option] = value;\n                });\n                return {\n                    dynamic: dynamicItems,\n                    static: staticItems\n                };\n            }\n            // Treat context variables separate from other dynamic variables\n            var context = separateDynamic(options.context || {}, true);\n            var uniforms = separateDynamic(options.uniforms || {}, true);\n            var attributes = separateDynamic(options.attributes || {}, false);\n            var opts = separateDynamic(flattenNestedOptions(options), false);\n            var stats$$1 = {\n                gpuTime: 0.0,\n                cpuTime: 0.0,\n                count: 0\n            };\n            var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);\n            var draw = compiled.draw;\n            var batch = compiled.batch;\n            var scope = compiled.scope;\n            // FIXME: we should modify code generation for batch commands so this\n            // isn't necessary\n            var EMPTY_ARRAY = [];\n            function reserve(count) {\n                while(EMPTY_ARRAY.length < count)EMPTY_ARRAY.push(null);\n                return EMPTY_ARRAY;\n            }\n            function REGLCommand(args, body) {\n                var i;\n                if (contextLost) check$1.raise(\"context lost\");\n                if (typeof args === \"function\") return scope.call(this, null, args, 0);\n                else if (typeof body === \"function\") {\n                    if (typeof args === \"number\") for(i = 0; i < args; ++i)scope.call(this, null, body, i);\n                    else if (Array.isArray(args)) for(i = 0; i < args.length; ++i)scope.call(this, args[i], body, i);\n                    else return scope.call(this, args, body, 0);\n                } else if (typeof args === \"number\") {\n                    if (args > 0) return batch.call(this, reserve(args | 0), args | 0);\n                } else if (Array.isArray(args)) {\n                    if (args.length) return batch.call(this, args, args.length);\n                } else return draw.call(this, args);\n            }\n            return extend(REGLCommand, {\n                stats: stats$$1,\n                destroy: function() {\n                    compiled.destroy();\n                }\n            });\n        }\n        var setFBO = framebufferState.setFBO = compileProcedure({\n            framebuffer: dynamic.define.call(null, DYN_PROP, \"framebuffer\")\n        });\n        function clearImpl(_, options) {\n            var clearFlags = 0;\n            core.procs.poll();\n            var c = options.color;\n            if (c) {\n                gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);\n                clearFlags |= GL_COLOR_BUFFER_BIT;\n            }\n            if (\"depth\" in options) {\n                gl.clearDepth(+options.depth);\n                clearFlags |= GL_DEPTH_BUFFER_BIT;\n            }\n            if (\"stencil\" in options) {\n                gl.clearStencil(options.stencil | 0);\n                clearFlags |= GL_STENCIL_BUFFER_BIT;\n            }\n            check$1(!!clearFlags, \"called regl.clear with no buffer specified\");\n            gl.clear(clearFlags);\n        }\n        function clear(options) {\n            check$1(typeof options === \"object\" && options, \"regl.clear() takes an object as input\");\n            if (\"framebuffer\" in options) {\n                if (options.framebuffer && options.framebuffer_reglType === \"framebufferCube\") for(var i = 0; i < 6; ++i)setFBO(extend({\n                    framebuffer: options.framebuffer.faces[i]\n                }, options), clearImpl);\n                else setFBO(options, clearImpl);\n            } else clearImpl(null, options);\n        }\n        function frame(cb) {\n            check$1.type(cb, \"function\", \"regl.frame() callback must be a function\");\n            rafCallbacks.push(cb);\n            function cancel() {\n                // FIXME:  should we check something other than equals cb here?\n                // what if a user calls frame twice with the same callback...\n                //\n                var i = find(rafCallbacks, cb);\n                check$1(i >= 0, \"cannot cancel a frame twice\");\n                function pendingCancel() {\n                    var index = find(rafCallbacks, pendingCancel);\n                    rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];\n                    rafCallbacks.length -= 1;\n                    if (rafCallbacks.length <= 0) stopRAF();\n                }\n                rafCallbacks[i] = pendingCancel;\n            }\n            startRAF();\n            return {\n                cancel: cancel\n            };\n        }\n        // poll viewport\n        function pollViewport() {\n            var viewport = nextState.viewport;\n            var scissorBox = nextState.scissor_box;\n            viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;\n            contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;\n            contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;\n        }\n        function poll() {\n            contextState.tick += 1;\n            contextState.time = now();\n            pollViewport();\n            core.procs.poll();\n        }\n        function refresh() {\n            textureState.refresh();\n            pollViewport();\n            core.procs.refresh();\n            if (timer) timer.update();\n        }\n        function now() {\n            return (clock() - START_TIME) / 1000.0;\n        }\n        refresh();\n        function addListener(event, callback) {\n            check$1.type(callback, \"function\", \"listener callback must be a function\");\n            var callbacks;\n            switch(event){\n                case \"frame\":\n                    return frame(callback);\n                case \"lost\":\n                    callbacks = lossCallbacks;\n                    break;\n                case \"restore\":\n                    callbacks = restoreCallbacks;\n                    break;\n                case \"destroy\":\n                    callbacks = destroyCallbacks;\n                    break;\n                default:\n                    check$1.raise(\"invalid event, must be one of frame,lost,restore,destroy\");\n            }\n            callbacks.push(callback);\n            return {\n                cancel: function() {\n                    for(var i = 0; i < callbacks.length; ++i)if (callbacks[i] === callback) {\n                        callbacks[i] = callbacks[callbacks.length - 1];\n                        callbacks.pop();\n                        return;\n                    }\n                }\n            };\n        }\n        var regl = extend(compileProcedure, {\n            // Clear current FBO\n            clear: clear,\n            // Short cuts for dynamic variables\n            prop: dynamic.define.bind(null, DYN_PROP),\n            context: dynamic.define.bind(null, DYN_CONTEXT),\n            this: dynamic.define.bind(null, DYN_STATE),\n            // executes an empty draw command\n            draw: compileProcedure({}),\n            // Resources\n            buffer: function(options) {\n                return bufferState.create(options, GL_ARRAY_BUFFER, false, false);\n            },\n            elements: function(options) {\n                return elementState.create(options, false);\n            },\n            texture: textureState.create2D,\n            cube: textureState.createCube,\n            renderbuffer: renderbufferState.create,\n            framebuffer: framebufferState.create,\n            framebufferCube: framebufferState.createCube,\n            vao: attributeState.createVAO,\n            // Expose context attributes\n            attributes: glAttributes,\n            // Frame rendering\n            frame: frame,\n            on: addListener,\n            // System limits\n            limits: limits,\n            hasExtension: function(name) {\n                return limits.extensions.indexOf(name.toLowerCase()) >= 0;\n            },\n            // Read pixels\n            read: readPixels,\n            // Destroy regl and all associated resources\n            destroy: destroy,\n            // Direct GL state manipulation\n            _gl: gl,\n            _refresh: refresh,\n            poll: function() {\n                poll();\n                if (timer) timer.update();\n            },\n            // Current time\n            now: now,\n            // regl Statistics Information\n            stats: stats$$1\n        });\n        config.onDone(null, regl);\n        return regl;\n    }\n    return wrapREGL;\n});\n\n\nconst $12bc9ce34a3e4340$export$dcfbb7940cfb3a48 = (out, x, y)=>(!out && (out = []), out[0] = x, out[1] = y, out);\nconst $12bc9ce34a3e4340$export$ba8c70ce75474f8d = (out, x, y, z)=>(!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out);\nconst $12bc9ce34a3e4340$export$abee0037e1db715 = (out, x, y, z, w)=>(!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out[3] = w, out);\nconst $12bc9ce34a3e4340$export$d58a46c754825a51 = (out, a, b, c, d, e, f)=>(!out && (out = []), out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = f, out);\nconst $12bc9ce34a3e4340$export$644e79245f7d24b5 = (out, ...values)=>{\n    if (!out) return values;\n    for(let i = 0, n = values.length; i < n; i++)out[i] = values[i];\n    return out;\n};\n\n\nconst $4947d4c86813b387$export$651a6eb01ea522f3 = (prefix, suffix = (msg)=>msg !== void 0 ? \": \" + msg : \"\")=>class extends Error {\n        origMessage;\n        constructor(msg){\n            super(prefix(msg) + suffix(msg));\n            this.origMessage = msg !== void 0 ? String(msg) : \"\";\n        }\n    };\n\n\nconst $ce536e912634ae17$export$772aa0961a81b065 = (0, $4947d4c86813b387$export$651a6eb01ea522f3)(()=>\"illegal arity\");\nconst $ce536e912634ae17$export$9f1b9fbfe882200d = (n)=>{\n    throw new $ce536e912634ae17$export$772aa0961a81b065(n);\n};\n\n\nfunction $bf257fc715bdced6$export$1af3c925c49f37a2(...fns) {\n    let [a, b, c, d, e, f, g, h, i, j] = fns;\n    switch(fns.length){\n        case 0:\n            (0, $ce536e912634ae17$export$9f1b9fbfe882200d)(0);\n        case 1:\n            return a;\n        case 2:\n            return (...args)=>a(b(...args));\n        case 3:\n            return (...args)=>a(b(c(...args)));\n        case 4:\n            return (...args)=>a(b(c(d(...args))));\n        case 5:\n            return (...args)=>a(b(c(d(e(...args)))));\n        case 6:\n            return (...args)=>a(b(c(d(e(f(...args))))));\n        case 7:\n            return (...args)=>a(b(c(d(e(f(g(...args)))))));\n        case 8:\n            return (...args)=>a(b(c(d(e(f(g(h(...args))))))));\n        case 9:\n            return (...args)=>a(b(c(d(e(f(g(h(i(...args)))))))));\n        case 10:\n        default:\n            const fn = (...args)=>a(b(c(d(e(f(g(h(i(j(...args))))))))));\n            return fns.length === 10 ? fn : $bf257fc715bdced6$export$1af3c925c49f37a2(fn, ...fns.slice(10));\n    }\n}\nfunction $bf257fc715bdced6$export$83fc47c523588c98(...fns) {\n    return $bf257fc715bdced6$export$1af3c925c49f37a2.apply(null, fns.reverse());\n}\nconst $bf257fc715bdced6$export$fd785a9ec61dece = $bf257fc715bdced6$export$83fc47c523588c98;\nfunction $bf257fc715bdced6$export$8679f38bd904e883(...fns) {\n    return async (...args)=>{\n        let n = fns.length - 1;\n        let res = fns[n](...args);\n        while(n-- > 0)res = await fns[n](res);\n        return res;\n    };\n}\n\n\nconst $039138b091302394$export$c915e14294a7d06f = (x, fn)=>x != null && typeof x[fn] === \"function\";\n\n\nconst $e4575c33b7c478d7$export$eca2c7e8e95bbf0a = (x)=>(0, $039138b091302394$export$c915e14294a7d06f)(x, \"xform\") ? x.xform() : x;\n\n\nfunction $14f6cf8dde115eae$export$1af3c925c49f37a2(...fns) {\n    fns = fns.map((0, $e4575c33b7c478d7$export$eca2c7e8e95bbf0a));\n    return (0, $bf257fc715bdced6$export$1af3c925c49f37a2).apply(null, fns);\n}\n\n\nconst $db91e045104e73a2$export$9652023d9040757 = (x)=>x != null && typeof x[Symbol.iterator] === \"function\";\n\n\nconst $215fb7197eb4e2a9$export$5adef4befe47917 = (rfn, fn)=>[\n        rfn[0],\n        rfn[1],\n        fn\n    ];\n\n\nconst $688fe5f7d1b77c58$export$47f9e8d3c41dafbd = 1e-6;\nconst $688fe5f7d1b77c58$export$a7d1fa727cb10b0e = Symbol();\nconst $688fe5f7d1b77c58$export$ca96bc7645ad7951 = ()=>{};\nconst $688fe5f7d1b77c58$export$d97419887230d749 = \"*\";\nconst $688fe5f7d1b77c58$export$ee2dc6a4697cf5e9 = \"enable\";\nconst $688fe5f7d1b77c58$export$f631a292dd99edd2 = \"disable\";\n\n\n\n\nconst $5adadce121edf83b$export$f0954fd7d5368655 = (x)=>x;\nconst $5adadce121edf83b$export$ba9e5d519bc326ca = ()=>true;\nconst $5adadce121edf83b$export$b3e22bcfd64c1022 = ()=>false;\n\n\n\nconst $45d5856487c529d9$export$1e2f57719e155213 = (x)=>x != null && typeof x !== \"function\" && x.length !== void 0;\n\n\n\n\nclass $573c3097877213b3$export$ce266a425291df6c {\n    value;\n    constructor(val){\n        this.value = val;\n    }\n    deref() {\n        return this.value;\n    }\n}\nconst $573c3097877213b3$export$447808b60b7559bd = (x)=>new $573c3097877213b3$export$ce266a425291df6c(x);\nconst $573c3097877213b3$export$ebab785f9ea33473 = (x)=>x instanceof $573c3097877213b3$export$ce266a425291df6c;\nconst $573c3097877213b3$export$f2412ace46b7b087 = (x)=>x instanceof $573c3097877213b3$export$ce266a425291df6c ? x : new $573c3097877213b3$export$ce266a425291df6c(x);\nconst $573c3097877213b3$export$7ca7c14b24aa137b = (x)=>x instanceof $573c3097877213b3$export$ce266a425291df6c ? x.deref() : x;\n\n\nconst $e4eeba0635ad1bef$var$__parseArgs = (args)=>args.length === 2 ? [\n        void 0,\n        args[1]\n    ] : args.length === 3 ? [\n        args[1],\n        args[2]\n    ] : (0, $ce536e912634ae17$export$9f1b9fbfe882200d)(args.length);\nfunction $e4eeba0635ad1bef$export$533b26079ad0b4b(...args) {\n    const rfn = args[0];\n    const init = rfn[0];\n    const complete = rfn[1];\n    const reduce2 = rfn[2];\n    args = $e4eeba0635ad1bef$var$__parseArgs(args);\n    const acc = args[0] == null ? init() : args[0];\n    const src = args[1];\n    return (0, $573c3097877213b3$export$7ca7c14b24aa137b)(complete((0, $039138b091302394$export$c915e14294a7d06f)(src, \"$reduce\") ? src.$reduce(reduce2, acc) : (0, $45d5856487c529d9$export$1e2f57719e155213)(src) ? $e4eeba0635ad1bef$var$__reduceArray(reduce2, acc, src) : $e4eeba0635ad1bef$var$__reduceIterable(reduce2, acc, src)));\n}\nfunction $e4eeba0635ad1bef$export$7fef8bcdbb34f435(...args) {\n    const [init, complete, reduce2] = args[0];\n    args = $e4eeba0635ad1bef$var$__parseArgs(args);\n    let acc = args[0] == null ? init() : args[0];\n    const src = args[1];\n    for(let i = src.length; i-- > 0;){\n        acc = reduce2(acc, src[i]);\n        if ((0, $573c3097877213b3$export$ebab785f9ea33473)(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return (0, $573c3097877213b3$export$7ca7c14b24aa137b)(complete(acc));\n}\nconst $e4eeba0635ad1bef$var$__reduceArray = (rfn, acc, src)=>{\n    for(let i = 0, n = src.length; i < n; i++){\n        acc = rfn(acc, src[i]);\n        if ((0, $573c3097877213b3$export$ebab785f9ea33473)(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\nconst $e4eeba0635ad1bef$var$__reduceIterable = (rfn, acc, src)=>{\n    for (let x of src){\n        acc = rfn(acc, x);\n        if ((0, $573c3097877213b3$export$ebab785f9ea33473)(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\nconst $e4eeba0635ad1bef$export$1650419e431d3ba3 = (init, rfn)=>[\n        init,\n        (0, $5adadce121edf83b$export$f0954fd7d5368655),\n        rfn\n    ];\nconst $e4eeba0635ad1bef$export$8073770d92ccea36 = (rfn, args)=>{\n    const n = args.length - 1;\n    return (0, $db91e045104e73a2$export$9652023d9040757)(args[n]) ? args.length > 1 ? $e4eeba0635ad1bef$export$533b26079ad0b4b(rfn.apply(null, args.slice(0, n)), args[n]) : $e4eeba0635ad1bef$export$533b26079ad0b4b(rfn(), args[0]) : void 0;\n};\n\n\nfunction $4708ab4fca8aaf69$export$4cbf152802aa238(src) {\n    return src ? [\n        ...src\n    ] : (0, $e4eeba0635ad1bef$export$1650419e431d3ba3)(()=>[], (acc, x)=>(acc.push(x), acc));\n}\n\n\n\nfunction* $7d23e39c8d8c83c9$export$6f58e2338da23f4d(xform, src) {\n    const rfn = (0, $e4575c33b7c478d7$export$eca2c7e8e95bbf0a)(xform)((0, $4708ab4fca8aaf69$export$4cbf152802aa238)());\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    for (let x of src){\n        const y = reduce([], x);\n        if ((0, $573c3097877213b3$export$ebab785f9ea33473)(y)) {\n            yield* (0, $573c3097877213b3$export$7ca7c14b24aa137b)(complete(y.deref()));\n            return;\n        }\n        if (y.length) yield* y;\n    }\n    yield* (0, $573c3097877213b3$export$7ca7c14b24aa137b)(complete([]));\n}\nfunction* $7d23e39c8d8c83c9$export$a6bff14a9cefe0e8(xform, src) {\n    const reduce = (0, $e4575c33b7c478d7$export$eca2c7e8e95bbf0a)(xform)([\n        (0, $688fe5f7d1b77c58$export$ca96bc7645ad7951),\n        (0, $688fe5f7d1b77c58$export$ca96bc7645ad7951),\n        (_, x)=>x\n    ])[2];\n    for (let x of src){\n        let y = reduce((0, $688fe5f7d1b77c58$export$a7d1fa727cb10b0e), x);\n        if ((0, $573c3097877213b3$export$ebab785f9ea33473)(y)) {\n            y = (0, $573c3097877213b3$export$7ca7c14b24aa137b)(y.deref());\n            if (y !== (0, $688fe5f7d1b77c58$export$a7d1fa727cb10b0e)) yield y;\n            return;\n        }\n        if (y !== (0, $688fe5f7d1b77c58$export$a7d1fa727cb10b0e)) yield y;\n    }\n}\nconst $7d23e39c8d8c83c9$export$9b6eac2a13c3d07 = (xform, args, impl = $7d23e39c8d8c83c9$export$a6bff14a9cefe0e8)=>{\n    const n = args.length - 1;\n    return (0, $db91e045104e73a2$export$9652023d9040757)(args[n]) ? args.length > 1 ? impl(xform.apply(null, args.slice(0, n)), args[n]) : impl(xform(), args[0]) : void 0;\n};\n\n\nfunction $5199815c15369ea2$export$871de8747c9eaa88(fn, src) {\n    return (0, $db91e045104e73a2$export$9652023d9040757)(src) ? (0, $7d23e39c8d8c83c9$export$a6bff14a9cefe0e8)($5199815c15369ea2$export$871de8747c9eaa88(fn), src) : (rfn)=>{\n        const r = rfn[2];\n        return (0, $215fb7197eb4e2a9$export$5adef4befe47917)(rfn, (acc, x)=>r(acc, fn(x)));\n    };\n}\nconst $5199815c15369ea2$export$b876a215b1634849 = (fn, src)=>[\n        ...$5199815c15369ea2$export$871de8747c9eaa88(fn, src)\n    ];\n\n\n\n\nfunction $ca9023116e29415d$export$e5bd5b3b105c2a71(...args) {\n    return (0, $7d23e39c8d8c83c9$export$9b6eac2a13c3d07)($ca9023116e29415d$export$e5bd5b3b105c2a71, args) || ((rfn)=>{\n        const r = rfn[2];\n        const fn = args[0];\n        let i = args[1] || 0;\n        return (0, $215fb7197eb4e2a9$export$5adef4befe47917)(rfn, (acc, x)=>r(acc, fn(i++, x)));\n    });\n}\n\n\n\nfunction $53be3199915c8589$export$d02631cccf789723(from, to, step) {\n    return new $53be3199915c8589$export$9a58ef0d7ad3278c(from, to, step);\n}\nclass $53be3199915c8589$export$9a58ef0d7ad3278c {\n    from;\n    to;\n    step;\n    constructor(from, to, step){\n        if (from === void 0) {\n            from = 0;\n            to = Infinity;\n        } else if (to === void 0) {\n            to = from;\n            from = 0;\n        }\n        step = step === void 0 ? from < to ? 1 : -1 : step;\n        this.from = from;\n        this.to = to;\n        this.step = step;\n    }\n    *[Symbol.iterator]() {\n        let { from: from, to: to, step: step } = this;\n        if (step > 0) while(from < to){\n            yield from;\n            from += step;\n        }\n        else if (step < 0) while(from > to){\n            yield from;\n            from += step;\n        }\n    }\n    $reduce(rfn, acc) {\n        const step = this.step;\n        if (step > 0) for(let i = this.from, n = this.to; i < n && !(0, $573c3097877213b3$export$ebab785f9ea33473)(acc); i += step)acc = rfn(acc, i);\n        else for(let i = this.from, n = this.to; i > n && !(0, $573c3097877213b3$export$ebab785f9ea33473)(acc); i += step)acc = rfn(acc, i);\n        return acc;\n    }\n}\n\n\n\nfunction $ec71f79bbddd9d37$export$42d51816ce590c93(sep, src) {\n    sep = sep || \"\";\n    let first = true;\n    return src ? [\n        ...src\n    ].join(sep) : (0, $e4eeba0635ad1bef$export$1650419e431d3ba3)(()=>\"\", (acc, x)=>(acc = first ? acc + x : acc + sep + x, first = false, acc));\n}\n\n\n\n\n\n\nfunction $909460dd226a14dc$export$b7df5d561049483a(n, src) {\n    return (0, $db91e045104e73a2$export$9652023d9040757)(src) ? (0, $7d23e39c8d8c83c9$export$6f58e2338da23f4d)($909460dd226a14dc$export$b7df5d561049483a(n), src) : (rfn)=>{\n        const r = rfn[2];\n        let m = n;\n        return (0, $215fb7197eb4e2a9$export$5adef4befe47917)(rfn, (acc, x)=>--m > 0 ? r(acc, x) : m === 0 ? (0, $573c3097877213b3$export$f2412ace46b7b087)(r(acc, x)) : (0, $573c3097877213b3$export$447808b60b7559bd)(acc));\n    };\n}\n\n\n\n\n\n\nfunction $73bc41c1f66e7b46$export$9608d0eacffd6284(...args) {\n    return $73bc41c1f66e7b46$var$$transduce($73bc41c1f66e7b46$export$9608d0eacffd6284, (0, $e4eeba0635ad1bef$export$533b26079ad0b4b), args);\n}\nfunction $73bc41c1f66e7b46$export$9127dcda72bf6aca(...args) {\n    return $73bc41c1f66e7b46$var$$transduce($73bc41c1f66e7b46$export$9127dcda72bf6aca, (0, $e4eeba0635ad1bef$export$7fef8bcdbb34f435), args);\n}\nconst $73bc41c1f66e7b46$var$$transduce = (tfn, rfn, args)=>{\n    let acc, src;\n    switch(args.length){\n        case 4:\n            src = args[3];\n            acc = args[2];\n            break;\n        case 3:\n            src = args[2];\n            break;\n        case 2:\n            return (0, $5199815c15369ea2$export$871de8747c9eaa88)((x)=>tfn(args[0], args[1], x));\n        default:\n            (0, $ce536e912634ae17$export$9f1b9fbfe882200d)(args.length);\n    }\n    return rfn((0, $e4575c33b7c478d7$export$eca2c7e8e95bbf0a)(args[0])(args[1]), acc, src);\n};\n\n\nfunction* $3f30e720518d525d$export$8901015135f2fb22(...src) {\n    const iters = src.map((s)=>s[Symbol.iterator]());\n    while(true){\n        const tuple = [];\n        for (let i of iters){\n            let v = i.next();\n            if (v.done) return;\n            tuple.push(v.value);\n        }\n        yield tuple;\n    }\n}\n\n\n\nconst $fa6410d60cd406b2$export$ab59e00737fb22e6 = (0, $4947d4c86813b387$export$651a6eb01ea522f3)(()=>\"unsupported operation\");\nconst $fa6410d60cd406b2$export$98e633703a635f = (msg)=>{\n    throw new $fa6410d60cd406b2$export$ab59e00737fb22e6(msg);\n};\n\n\nconst $66a95140c244fad3$export$c37d18c23b2ea60c = (dispatch = 0)=>{\n    const impls = new Array(5);\n    let fallback;\n    const fn = (...args)=>{\n        const g = impls[args[dispatch].length] || fallback;\n        return g ? g(...args) : (0, $fa6410d60cd406b2$export$98e633703a635f)(`no impl for vec size ${args[dispatch].length}`);\n    };\n    fn.add = (dim, fn2)=>impls[dim] = fn2;\n    fn.default = (fn2)=>fallback = fn2;\n    fn.impl = (dim)=>impls[dim] || fallback;\n    return fn;\n};\n\n\nconst $a65300e009961bba$export$19dc841295b49698 = \"o,a\";\nconst $a65300e009961bba$export$ccd27f3e7091205c = \"o,a,b\";\nconst $a65300e009961bba$export$eddecb323783c21c = \"o,a,b,c\";\nconst $a65300e009961bba$export$9e772ae751f37666 = \"o,a,n\";\nconst $a65300e009961bba$export$1b218a0354f287 = \"o,a,n,b\";\nconst $a65300e009961bba$export$df3e578f53e12bf2 = \"o,a,b,n\";\nconst $a65300e009961bba$export$8443f1c33458c80b = \"io=0,ia=0,so=1,sa=1\";\nconst $a65300e009961bba$export$ff73a40106eb353 = \"io=0,ia=0,ib=0,so=1,sa=1,sb=1\";\nconst $a65300e009961bba$export$bdb0d4b72a85649d = \"io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1\";\nconst $a65300e009961bba$export$381b62756f034f68 = \"!o&&(o=a);\";\nconst $a65300e009961bba$export$51277e3ac6690f26 = \"!o&&(o=[]);\";\nconst $a65300e009961bba$export$8c51af9235380b8e = \"!a&&(a=[]);\";\nconst $a65300e009961bba$export$da5c1e34018ecc43 = (op)=>([o, a, b])=>`${o}=${a}${op}${b};`;\nconst $a65300e009961bba$export$6ab71ad6f57b0093 = (op)=>([o, a])=>`${o}=${a}${op}n;`;\nconst $a65300e009961bba$export$124a2d9669280971 = (op1, op2)=>([o, a, b, c])=>`${o}=(${a}${op1}${b})${op2}${c};`;\nconst $a65300e009961bba$export$db7c5d9768fee3d9 = (op1, op2)=>([o, a, b])=>`${o}=(${a}${op1}${b})${op2}n;`;\nconst $a65300e009961bba$export$524378831b80c0aa = (op1, op2)=>([o, a, b])=>`${o}=(${a}${op1}n)${op2}${b};`;\nconst $a65300e009961bba$export$f160d69d51fe9b08 = (op)=>([o, a, b])=>`${o}=(${a}${op}${b})|0;`;\nconst $a65300e009961bba$export$6a70b64fb8d54a06 = (op)=>([o, a, b])=>`${o}=(${a}${op}${b})>>>0;`;\nconst $a65300e009961bba$export$b4ea1049a5419b4f = (op)=>([o, a])=>`${o}=(${a}${op}n)|0;`;\nconst $a65300e009961bba$export$9de9c213a2a487cd = (op)=>([o, a])=>`${o}=(${a}${op}n)>>>0;`;\nconst $a65300e009961bba$export$9092249dcc75f1af = (op = \"op\")=>([o, a])=>`${o}=${op}(${a});`;\nconst $a65300e009961bba$export$7b4ffff4916264f8 = (op = \"op\")=>([o, a, b])=>`${o}=${op}(${a},${b});`;\nconst $a65300e009961bba$export$a0a1b70ab8c960e8 = (op = \"op\")=>([o, a, b, c])=>`${o}=${op}(${a},${b},${c});`;\nconst $a65300e009961bba$export$a674f282bc507c82 = (op = \"op\")=>([o, a, b, c, d, e])=>`${o}=${op}(${a},${b},${c},${d},${e});`;\nconst $a65300e009961bba$export$feb62a864ec0d6e5 = (op = \"op\")=>([o, a])=>`${o}=${op}(${a},n);`;\nconst $a65300e009961bba$export$4061f92b6da4a345 = ([a, b])=>`${a}*${b}`;\nconst $a65300e009961bba$export$15e237ef180bd438 = ([a, b])=>`s+=${a}*${b};`;\nconst $a65300e009961bba$export$5e8f180ef0142226 = ([o, a])=>`${o}=${a};`;\nconst $a65300e009961bba$export$76aa35f56db04732 = ([a])=>`${a}=n;`;\nconst $a65300e009961bba$export$edd47d1eb2bf4a2e = ([o, a, b, c])=>`${o}=${a}+(${b}-${a})*${c};`;\nconst $a65300e009961bba$export$e6a01c2ca00499b1 = ([o, a, b])=>`${o}=${a}+(${b}-${a})*n;`;\n\n\nconst $a901e92356d753ce$var$__lookup = (sym)=>(i)=>i > 1 ? `${sym}[i${sym}+${i}*s${sym}]` : i == 1 ? `${sym}[i${sym}+s${sym}]` : `${sym}[i${sym}]`;\nconst $a901e92356d753ce$var$__indicesStrided = (sym)=>(0, $5199815c15369ea2$export$871de8747c9eaa88)($a901e92356d753ce$var$__lookup(sym), (0, $53be3199915c8589$export$d02631cccf789723)());\nconst $a901e92356d753ce$var$__indices = (sym)=>(0, $5199815c15369ea2$export$871de8747c9eaa88)((i)=>`${sym}[${i}]`, (0, $53be3199915c8589$export$d02631cccf789723)());\nconst $a901e92356d753ce$var$__assemble = (dim, tpl, syms, ret = \"a\", opJoin = \"\", pre = \"\", post = \"\", strided = false)=>[\n        pre,\n        (0, $73bc41c1f66e7b46$export$9608d0eacffd6284)((0, $14f6cf8dde115eae$export$1af3c925c49f37a2)((0, $909460dd226a14dc$export$b7df5d561049483a)(dim), (0, $ca9023116e29415d$export$e5bd5b3b105c2a71)((i, x)=>tpl(x, i))), (0, $ec71f79bbddd9d37$export$42d51816ce590c93)(opJoin), (0, $3f30e720518d525d$export$8901015135f2fb22).apply(null, syms.split(\",\").map(strided ? $a901e92356d753ce$var$__indicesStrided : $a901e92356d753ce$var$__indices))),\n        post,\n        ret !== \"\" ? `return ${ret};` : \"\"\n    ];\nconst $a901e92356d753ce$var$__assembleG = (tpl, syms, ret = \"a\", pre, post, strided = false)=>[\n        pre,\n        \"for(let i=a.length;--i>=0;) {\",\n        tpl(syms.split(\",\").map(strided ? (x)=>`${x}[i${x}+i*s${x}]` : (x)=>`${x}[i]`)),\n        \"}\",\n        post,\n        ret !== null ? `return ${ret};` : \"\"\n    ];\nconst $a901e92356d753ce$var$__assembleS = (tpl, syms = (0, $a65300e009961bba$export$ccd27f3e7091205c), ret = \"o\", pre = (0, $a65300e009961bba$export$381b62756f034f68), post)=>[\n        pre,\n        \"while(k-->0) {\",\n        tpl(syms.split(\",\").map((x)=>`${x}[i${x}+k*s${x}]`)),\n        \"}\",\n        post,\n        ret !== null ? `return ${ret};` : \"\"\n    ];\nconst $a901e92356d753ce$export$326bc8646b307e15 = (o, args)=>`!${o} && (${o}=${args.split(\",\")[1]});`;\nconst $a901e92356d753ce$export$ef7acd7185315e22 = (dim, tpl, args, syms = args, ret = \"a\", opJoin, pre, post, strided = false)=>new Function(args, $a901e92356d753ce$var$__assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\"));\nconst $a901e92356d753ce$export$419c6ef64208ae82 = (dim, fns, tpl, hofArgs, args, syms = args, ret = \"a\", opJoin = \"\", pre, post, strided = false)=>{\n    return new Function(hofArgs, `return (${args})=>{${$a901e92356d753ce$var$__assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")}}`)(...fns);\n};\nconst $a901e92356d753ce$export$aeba7862bf0c66c4 = (tpl, args, syms = args, ret = \"a\", pre, post, strided = false)=>new Function(args, $a901e92356d753ce$var$__assembleG(tpl, syms, ret, pre, post, strided).join(\"\"));\nconst $a901e92356d753ce$export$6c4e26942fd16e7 = (tpl, args, syms = args, ret, pre, post)=>new Function(args, $a901e92356d753ce$var$__assembleS(tpl, syms, ret, pre, post).join(\"\"));\nconst $a901e92356d753ce$export$a0e9b27d920ed100 = (fns, tpl, hofArgs, args, syms = args, ret = \"a\", pre, post, strided = false)=>new Function(hofArgs, `return (${args})=>{${$a901e92356d753ce$var$__assembleG(tpl, syms, ret, pre, post, strided).join(\"\")}}`)(...fns);\nconst $a901e92356d753ce$export$e40cf5ce9a490533 = (tpl, args = (0, $a65300e009961bba$export$ccd27f3e7091205c), syms, ret = \"o\", dispatch = 1, pre)=>{\n    syms = syms || args;\n    pre = pre != null ? pre : $a901e92356d753ce$export$326bc8646b307e15(ret, args);\n    const fn = (0, $66a95140c244fad3$export$c37d18c23b2ea60c)(dispatch);\n    const $ = (dim)=>fn.add(dim, $a901e92356d753ce$export$ef7acd7185315e22(dim, tpl, args, syms, ret, \"\", pre));\n    fn.default($a901e92356d753ce$export$aeba7862bf0c66c4(tpl, args, syms, ret, pre));\n    return [\n        fn,\n        $(2),\n        $(3),\n        $(4)\n    ];\n};\nconst $a901e92356d753ce$export$a913b214497a4223 = (op)=>$a901e92356d753ce$export$e40cf5ce9a490533((0, $a65300e009961bba$export$9092249dcc75f1af)(op), (0, $a65300e009961bba$export$19dc841295b49698));\nconst $a901e92356d753ce$export$baa6c46b014ab275 = (op, tpl, args = (0, $a65300e009961bba$export$19dc841295b49698), syms, ret = \"o\", dispatch = 1, pre)=>{\n    const _tpl = tpl || (0, $a65300e009961bba$export$9092249dcc75f1af)(\"op\");\n    syms = syms || args;\n    pre = pre != null ? pre : $a901e92356d753ce$export$326bc8646b307e15(ret, args);\n    const fn = (0, $66a95140c244fad3$export$c37d18c23b2ea60c)(dispatch);\n    const $ = (dim)=>fn.add(dim, $a901e92356d753ce$export$419c6ef64208ae82(dim, [\n            op\n        ], _tpl, \"op\", args, syms, ret, \"\", pre));\n    fn.default($a901e92356d753ce$export$a0e9b27d920ed100([\n        op\n    ], _tpl, \"op\", args, syms, ret, pre));\n    return [\n        fn,\n        $(2),\n        $(3),\n        $(4)\n    ];\n};\nconst $a901e92356d753ce$export$503c6222d3c48f54 = (tpl, args = (0, $a65300e009961bba$export$ccd27f3e7091205c), idxArgs = (0, $a65300e009961bba$export$ff73a40106eb353), syms = (0, $a65300e009961bba$export$ccd27f3e7091205c), ret = \"o\", pre, sizes = [\n    2,\n    3,\n    4\n])=>[\n        $a901e92356d753ce$export$6c4e26942fd16e7(tpl, `${args},k,${idxArgs}`, syms, ret, pre),\n        ...sizes.map((dim)=>$a901e92356d753ce$export$ef7acd7185315e22(dim, tpl, `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : $a901e92356d753ce$export$326bc8646b307e15(ret, args), \"\", true))\n    ];\nconst $a901e92356d753ce$export$e2ee6e441c8b1312 = (op, tpl, args = (0, $a65300e009961bba$export$ccd27f3e7091205c), idxArgs = (0, $a65300e009961bba$export$ff73a40106eb353), syms = (0, $a65300e009961bba$export$ccd27f3e7091205c), ret = \"o\", pre, sizes = [\n    2,\n    3,\n    4\n])=>[\n        new Function(\"op\", `return (${args},k,${idxArgs})=>{${$a901e92356d753ce$var$__assembleS(tpl, syms, ret, pre).join(\"\")}}`)(op),\n        ...sizes.map((dim)=>$a901e92356d753ce$export$419c6ef64208ae82(dim, [\n                op\n            ], tpl, \"op\", `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : $a901e92356d753ce$export$326bc8646b307e15(ret, args), \"\", true))\n    ];\nconst $a901e92356d753ce$export$5d7f662452a819b3 = (op)=>$a901e92356d753ce$export$e40cf5ce9a490533((0, $a65300e009961bba$export$da5c1e34018ecc43)(op));\nconst $a901e92356d753ce$export$24ecd06eea36a882 = (op)=>$a901e92356d753ce$export$e40cf5ce9a490533((0, $a65300e009961bba$export$6ab71ad6f57b0093)(op), (0, $a65300e009961bba$export$9e772ae751f37666));\nconst $a901e92356d753ce$export$b74d4e1014d0409f = (op, signed = false)=>$a901e92356d753ce$export$e40cf5ce9a490533((signed ? (0, $a65300e009961bba$export$f160d69d51fe9b08) : (0, $a65300e009961bba$export$6a70b64fb8d54a06))(op));\nconst $a901e92356d753ce$export$e6949cab8a813996 = (op, signed = false)=>$a901e92356d753ce$export$e40cf5ce9a490533((signed ? (0, $a65300e009961bba$export$b4ea1049a5419b4f) : (0, $a65300e009961bba$export$9de9c213a2a487cd))(op), (0, $a65300e009961bba$export$9e772ae751f37666));\n\n\nconst [$c1d306ebb49d3aa4$export$523c9d3eb3d8d990, $c1d306ebb49d3aa4$export$b54ddf06b57709b1, $c1d306ebb49d3aa4$export$1c0ad2738a5ae4b0, $c1d306ebb49d3aa4$export$1f214a01989f466a] = (0, $a901e92356d753ce$export$24ecd06eea36a882)(\"*\");\n\n\n\nconst [$4235b1e5a541ac0d$export$6747e444d0e25f8e, $4235b1e5a541ac0d$export$c8a0e366d15bb712, $4235b1e5a541ac0d$export$cb6d410f870ee721, $4235b1e5a541ac0d$export$9e7986c53a12814a] = (0, $a901e92356d753ce$export$24ecd06eea36a882)(\"/\");\n\n\n\nconst [$eb25d460157de995$export$6897c284b6f9f4dc, $eb25d460157de995$export$eb08a4e6e8934de4, $eb25d460157de995$export$2f6df6f9964c34d8, $eb25d460157de995$export$2cac2c285d867dd] = (0, $a901e92356d753ce$export$e40cf5ce9a490533)(([o, a])=>`${o}=1/${a};`);\n\n\nconst $ff8552abc90720ca$var$r = Array.prototype.reduce;\nconst $ff8552abc90720ca$export$533b26079ad0b4b = (f, a, to)=>// Needs separate `call` because native detects even `undefined` parameter.\n    to === undefined ? $ff8552abc90720ca$var$r.call(a, f) : $ff8552abc90720ca$var$r.call(a, f, to);\nvar $ff8552abc90720ca$export$2e2bcd8739ae039 = $ff8552abc90720ca$export$533b26079ad0b4b;\n\n\nconst $f06a7242e8e3a5ae$export$871de8747c9eaa88 = (f, a, to = [])=>(0, $ff8552abc90720ca$export$533b26079ad0b4b)((to, v, i)=>{\n        to[i] = f(v, i, a, to);\n        return to;\n    }, a, to || a);\nvar $f06a7242e8e3a5ae$export$2e2bcd8739ae039 = $f06a7242e8e3a5ae$export$871de8747c9eaa88;\n\n\nconst $7c7160675eb3d972$var$e = Array.prototype.forEach;\nconst $7c7160675eb3d972$export$79b2f7037acddd43 = (f, a)=>{\n    $7c7160675eb3d972$var$e.call(a, f);\n    return a;\n};\nvar $7c7160675eb3d972$export$2e2bcd8739ae039 = $7c7160675eb3d972$export$79b2f7037acddd43;\n\n\n/**\n * Wraps an index over a given length, so that indexes greater than the length\n * loop back past `0`, and indexes less than `0` loop backward from the length.\n * Similar to the indexing behaviour of `Array`'s `slice`.\n * Indexing is the equivalent of a true _modulo_ operator, where JavaScript's\n * `%` operator is actually a _remainder_ operator.\n *\n * @see Array.prototpye.slice\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\n *\n * @param {number} i Index to wrap.\n * @param {number} l Length to wrap the index over.\n *\n * @returns {number} The index wrapped over the length.\n */ const $b2b822c6b1c4cfb7$export$acb6ab09ed1b7b8b = (i, l)=>(i % l + l) % l;\nvar $b2b822c6b1c4cfb7$export$2e2bcd8739ae039 = $b2b822c6b1c4cfb7$export$acb6ab09ed1b7b8b;\n\n\nconst $71c6ad154616c491$export$4997ffc0176396a6 = (i, l, end = l.length)=>end || end === 0 ? l[(0, $b2b822c6b1c4cfb7$export$2e2bcd8739ae039)(i, end)] : (0, $b2b822c6b1c4cfb7$export$2e2bcd8739ae039)(i, l);\nvar $71c6ad154616c491$export$2e2bcd8739ae039 = $71c6ad154616c491$export$4997ffc0176396a6;\n\n\nconst { fill: $5ec828b9c9659fbf$var$fill } = Array.prototype;\nconst { isFinite: $5ec828b9c9659fbf$var$isFinite } = Number;\nconst { floor: $5ec828b9c9659fbf$var$floor } = Math;\nconst $5ec828b9c9659fbf$export$d02631cccf789723 = (l = 0, value, start, end)=>$5ec828b9c9659fbf$var$fill.call($5ec828b9c9659fbf$var$isFinite(l) ? Array($5ec828b9c9659fbf$var$floor(l)) : l, value, start, end);\nvar $5ec828b9c9659fbf$export$2e2bcd8739ae039 = $5ec828b9c9659fbf$export$d02631cccf789723;\n\n\nvar $480e37ad861582d4$exports = {};\n/**\r\n * @module fps-indicator\r\n */ \"use strict\";\nvar $f91da34ba7ed1da4$exports = {};\nvar $06ed83cfe38d62b2$exports = {};\nvar $7812e353dd8d4138$exports = {};\n// shim for using process in browser\nvar $7812e353dd8d4138$var$process = $7812e353dd8d4138$exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar $7812e353dd8d4138$var$cachedSetTimeout;\nvar $7812e353dd8d4138$var$cachedClearTimeout;\nfunction $7812e353dd8d4138$var$defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction $7812e353dd8d4138$var$defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") $7812e353dd8d4138$var$cachedSetTimeout = setTimeout;\n        else $7812e353dd8d4138$var$cachedSetTimeout = $7812e353dd8d4138$var$defaultSetTimout;\n    } catch (e) {\n        $7812e353dd8d4138$var$cachedSetTimeout = $7812e353dd8d4138$var$defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") $7812e353dd8d4138$var$cachedClearTimeout = clearTimeout;\n        else $7812e353dd8d4138$var$cachedClearTimeout = $7812e353dd8d4138$var$defaultClearTimeout;\n    } catch (e) {\n        $7812e353dd8d4138$var$cachedClearTimeout = $7812e353dd8d4138$var$defaultClearTimeout;\n    }\n})();\nfunction $7812e353dd8d4138$var$runTimeout(fun) {\n    if ($7812e353dd8d4138$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n    // if setTimeout wasn't available but was latter defined\n    if (($7812e353dd8d4138$var$cachedSetTimeout === $7812e353dd8d4138$var$defaultSetTimout || !$7812e353dd8d4138$var$cachedSetTimeout) && setTimeout) {\n        $7812e353dd8d4138$var$cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $7812e353dd8d4138$var$cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return $7812e353dd8d4138$var$cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return $7812e353dd8d4138$var$cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction $7812e353dd8d4138$var$runClearTimeout(marker) {\n    if ($7812e353dd8d4138$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations\n    return clearTimeout(marker);\n    // if clearTimeout wasn't available but was latter defined\n    if (($7812e353dd8d4138$var$cachedClearTimeout === $7812e353dd8d4138$var$defaultClearTimeout || !$7812e353dd8d4138$var$cachedClearTimeout) && clearTimeout) {\n        $7812e353dd8d4138$var$cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $7812e353dd8d4138$var$cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return $7812e353dd8d4138$var$cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return $7812e353dd8d4138$var$cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar $7812e353dd8d4138$var$queue = [];\nvar $7812e353dd8d4138$var$draining = false;\nvar $7812e353dd8d4138$var$currentQueue;\nvar $7812e353dd8d4138$var$queueIndex = -1;\nfunction $7812e353dd8d4138$var$cleanUpNextTick() {\n    if (!$7812e353dd8d4138$var$draining || !$7812e353dd8d4138$var$currentQueue) return;\n    $7812e353dd8d4138$var$draining = false;\n    if ($7812e353dd8d4138$var$currentQueue.length) $7812e353dd8d4138$var$queue = $7812e353dd8d4138$var$currentQueue.concat($7812e353dd8d4138$var$queue);\n    else $7812e353dd8d4138$var$queueIndex = -1;\n    if ($7812e353dd8d4138$var$queue.length) $7812e353dd8d4138$var$drainQueue();\n}\nfunction $7812e353dd8d4138$var$drainQueue() {\n    if ($7812e353dd8d4138$var$draining) return;\n    var timeout = $7812e353dd8d4138$var$runTimeout($7812e353dd8d4138$var$cleanUpNextTick);\n    $7812e353dd8d4138$var$draining = true;\n    var len = $7812e353dd8d4138$var$queue.length;\n    while(len){\n        $7812e353dd8d4138$var$currentQueue = $7812e353dd8d4138$var$queue;\n        $7812e353dd8d4138$var$queue = [];\n        while(++$7812e353dd8d4138$var$queueIndex < len)if ($7812e353dd8d4138$var$currentQueue) $7812e353dd8d4138$var$currentQueue[$7812e353dd8d4138$var$queueIndex].run();\n        $7812e353dd8d4138$var$queueIndex = -1;\n        len = $7812e353dd8d4138$var$queue.length;\n    }\n    $7812e353dd8d4138$var$currentQueue = null;\n    $7812e353dd8d4138$var$draining = false;\n    $7812e353dd8d4138$var$runClearTimeout(timeout);\n}\n$7812e353dd8d4138$var$process.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];\n    $7812e353dd8d4138$var$queue.push(new $7812e353dd8d4138$var$Item(fun, args));\n    if ($7812e353dd8d4138$var$queue.length === 1 && !$7812e353dd8d4138$var$draining) $7812e353dd8d4138$var$runTimeout($7812e353dd8d4138$var$drainQueue);\n};\n// v8 likes predictible objects\nfunction $7812e353dd8d4138$var$Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n$7812e353dd8d4138$var$Item.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\n$7812e353dd8d4138$var$process.title = \"browser\";\n$7812e353dd8d4138$var$process.browser = true;\n$7812e353dd8d4138$var$process.env = {};\n$7812e353dd8d4138$var$process.argv = [];\n$7812e353dd8d4138$var$process.version = \"\"; // empty string to avoid regexp issues\n$7812e353dd8d4138$var$process.versions = {};\nfunction $7812e353dd8d4138$var$noop() {}\n$7812e353dd8d4138$var$process.on = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.addListener = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.once = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.off = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.removeListener = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.removeAllListeners = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.emit = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.prependListener = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.prependOnceListener = $7812e353dd8d4138$var$noop;\n$7812e353dd8d4138$var$process.listeners = function(name) {\n    return [];\n};\n$7812e353dd8d4138$var$process.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\n$7812e353dd8d4138$var$process.cwd = function() {\n    return \"/\";\n};\n$7812e353dd8d4138$var$process.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\n$7812e353dd8d4138$var$process.umask = function() {\n    return 0;\n};\n\n\n// Generated by CoffeeScript 1.12.2\n(function() {\n    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n    if (typeof performance !== \"undefined\" && performance !== null && performance.now) $06ed83cfe38d62b2$exports = function() {\n        return performance.now();\n    };\n    else if (typeof $7812e353dd8d4138$exports !== \"undefined\" && $7812e353dd8d4138$exports !== null && $7812e353dd8d4138$exports.hrtime) {\n        $06ed83cfe38d62b2$exports = function() {\n            return (getNanoSeconds() - nodeLoadTime) / 1e6;\n        };\n        hrtime = $7812e353dd8d4138$exports.hrtime;\n        getNanoSeconds = function() {\n            var hr;\n            hr = hrtime();\n            return hr[0] * 1e9 + hr[1];\n        };\n        moduleLoadTime = getNanoSeconds();\n        upTime = $7812e353dd8d4138$exports.uptime() * 1e9;\n        nodeLoadTime = moduleLoadTime - upTime;\n    } else if (Date.now) {\n        $06ed83cfe38d62b2$exports = function() {\n            return Date.now() - loadTime;\n        };\n        loadTime = Date.now();\n    } else {\n        $06ed83cfe38d62b2$exports = function() {\n            return new Date().getTime() - loadTime;\n        };\n        loadTime = new Date().getTime();\n    }\n}).call($06ed83cfe38d62b2$exports);\n\n\nvar $f91da34ba7ed1da4$var$root = typeof window === \"undefined\" ? $parcel$global : window, $f91da34ba7ed1da4$var$vendors = [\n    \"moz\",\n    \"webkit\"\n], $f91da34ba7ed1da4$var$suffix = \"AnimationFrame\", $f91da34ba7ed1da4$var$raf = $f91da34ba7ed1da4$var$root[\"request\" + $f91da34ba7ed1da4$var$suffix], $f91da34ba7ed1da4$var$caf = $f91da34ba7ed1da4$var$root[\"cancel\" + $f91da34ba7ed1da4$var$suffix] || $f91da34ba7ed1da4$var$root[\"cancelRequest\" + $f91da34ba7ed1da4$var$suffix];\nfor(var $f91da34ba7ed1da4$var$i = 0; !$f91da34ba7ed1da4$var$raf && $f91da34ba7ed1da4$var$i < $f91da34ba7ed1da4$var$vendors.length; $f91da34ba7ed1da4$var$i++){\n    $f91da34ba7ed1da4$var$raf = $f91da34ba7ed1da4$var$root[$f91da34ba7ed1da4$var$vendors[$f91da34ba7ed1da4$var$i] + \"Request\" + $f91da34ba7ed1da4$var$suffix];\n    $f91da34ba7ed1da4$var$caf = $f91da34ba7ed1da4$var$root[$f91da34ba7ed1da4$var$vendors[$f91da34ba7ed1da4$var$i] + \"Cancel\" + $f91da34ba7ed1da4$var$suffix] || $f91da34ba7ed1da4$var$root[$f91da34ba7ed1da4$var$vendors[$f91da34ba7ed1da4$var$i] + \"CancelRequest\" + $f91da34ba7ed1da4$var$suffix];\n}\n// Some versions of FF have rAF but not cAF\nif (!$f91da34ba7ed1da4$var$raf || !$f91da34ba7ed1da4$var$caf) {\n    var $f91da34ba7ed1da4$var$last = 0, $f91da34ba7ed1da4$var$id = 0, $f91da34ba7ed1da4$var$queue = [], $f91da34ba7ed1da4$var$frameDuration = 1000 / 60;\n    $f91da34ba7ed1da4$var$raf = function(callback) {\n        if ($f91da34ba7ed1da4$var$queue.length === 0) {\n            var _now = $06ed83cfe38d62b2$exports(), next = Math.max(0, $f91da34ba7ed1da4$var$frameDuration - (_now - $f91da34ba7ed1da4$var$last));\n            $f91da34ba7ed1da4$var$last = next + _now;\n            setTimeout(function() {\n                var cp = $f91da34ba7ed1da4$var$queue.slice(0);\n                // Clear queue here to prevent\n                // callbacks from appending listeners\n                // to the current frame's queue\n                $f91da34ba7ed1da4$var$queue.length = 0;\n                for(var i = 0; i < cp.length; i++){\n                    if (!cp[i].cancelled) try {\n                        cp[i].callback($f91da34ba7ed1da4$var$last);\n                    } catch (e) {\n                        setTimeout(function() {\n                            throw e;\n                        }, 0);\n                    }\n                }\n            }, Math.round(next));\n        }\n        $f91da34ba7ed1da4$var$queue.push({\n            handle: ++$f91da34ba7ed1da4$var$id,\n            callback: callback,\n            cancelled: false\n        });\n        return $f91da34ba7ed1da4$var$id;\n    };\n    $f91da34ba7ed1da4$var$caf = function(handle) {\n        for(var i = 0; i < $f91da34ba7ed1da4$var$queue.length; i++)if ($f91da34ba7ed1da4$var$queue[i].handle === handle) $f91da34ba7ed1da4$var$queue[i].cancelled = true;\n    };\n}\n$f91da34ba7ed1da4$exports = function(fn) {\n    // Wrap in a new function to prevent\n    // `cancel` potentially being assigned\n    // to the native rAF function\n    return $f91da34ba7ed1da4$var$raf.call($f91da34ba7ed1da4$var$root, fn);\n};\n$f91da34ba7ed1da4$exports.cancel = function() {\n    $f91da34ba7ed1da4$var$caf.apply($f91da34ba7ed1da4$var$root, arguments);\n};\n$f91da34ba7ed1da4$exports.polyfill = function(object) {\n    if (!object) object = $f91da34ba7ed1da4$var$root;\n    object.requestAnimationFrame = $f91da34ba7ed1da4$var$raf;\n    object.cancelAnimationFrame = $f91da34ba7ed1da4$var$caf;\n};\n\n\nvar $0474abd910a8de31$exports = {};\n$0474abd910a8de31$exports = $parcel$global.performance && $parcel$global.performance.now ? function now() {\n    return performance.now();\n} : Date.now || function now() {\n    return +new Date;\n};\n\n\nvar $cd765d230ba82a4b$exports = {};\n\"use strict\";\nvar $114292e15d237642$exports = {};\n/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */ \"use strict\";\n/**\n * Results cache\n */ var $114292e15d237642$var$res = \"\";\nvar $114292e15d237642$var$cache;\n/**\n * Expose `repeat`\n */ $114292e15d237642$exports = $114292e15d237642$var$repeat;\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */ function $114292e15d237642$var$repeat(str, num) {\n    if (typeof str !== \"string\") throw new TypeError(\"expected a string\");\n    // cover common, quick use cases\n    if (num === 1) return str;\n    if (num === 2) return str + str;\n    var max = str.length * num;\n    if ($114292e15d237642$var$cache !== str || typeof $114292e15d237642$var$cache === \"undefined\") {\n        $114292e15d237642$var$cache = str;\n        $114292e15d237642$var$res = \"\";\n    } else if ($114292e15d237642$var$res.length >= max) return $114292e15d237642$var$res.substr(0, max);\n    while(max > $114292e15d237642$var$res.length && num > 1){\n        if (num & 1) $114292e15d237642$var$res += str;\n        num >>= 1;\n        str += str;\n    }\n    $114292e15d237642$var$res += str;\n    $114292e15d237642$var$res = $114292e15d237642$var$res.substr(0, max);\n    return $114292e15d237642$var$res;\n}\n\n\nvar $dc059d989c3e6254$exports = {};\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/ \"use strict\";\n/* eslint-disable no-unused-vars */ var $dc059d989c3e6254$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar $dc059d989c3e6254$var$hasOwnProperty = Object.prototype.hasOwnProperty;\nvar $dc059d989c3e6254$var$propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction $dc059d989c3e6254$var$toObject(val) {\n    if (val === null || val === undefined) throw new TypeError(\"Object.assign cannot be called with null or undefined\");\n    return Object(val);\n}\nfunction $dc059d989c3e6254$var$shouldUseNative() {\n    try {\n        if (!Object.assign) return false;\n        // Detect buggy property enumeration order in older V8 versions.\n        // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n        var test1 = new String(\"abc\"); // eslint-disable-line no-new-wrappers\n        test1[5] = \"de\";\n        if (Object.getOwnPropertyNames(test1)[0] === \"5\") return false;\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test2 = {};\n        for(var i = 0; i < 10; i++)test2[\"_\" + String.fromCharCode(i)] = i;\n        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {\n            return test2[n];\n        });\n        if (order2.join(\"\") !== \"0123456789\") return false;\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test3 = {};\n        \"abcdefghijklmnopqrst\".split(\"\").forEach(function(letter) {\n            test3[letter] = letter;\n        });\n        if (Object.keys(Object.assign({}, test3)).join(\"\") !== \"abcdefghijklmnopqrst\") return false;\n        return true;\n    } catch (err) {\n        // We don't expect any of the above to throw, but better to be safe.\n        return false;\n    }\n}\n$dc059d989c3e6254$exports = $dc059d989c3e6254$var$shouldUseNative() ? Object.assign : function(target, source) {\n    var from;\n    var to = $dc059d989c3e6254$var$toObject(target);\n    var symbols;\n    for(var s = 1; s < arguments.length; s++){\n        from = Object(arguments[s]);\n        for(var key in from)if ($dc059d989c3e6254$var$hasOwnProperty.call(from, key)) to[key] = from[key];\n        if ($dc059d989c3e6254$var$getOwnPropertySymbols) {\n            symbols = $dc059d989c3e6254$var$getOwnPropertySymbols(from);\n            for(var i = 0; i < symbols.length; i++)if ($dc059d989c3e6254$var$propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];\n        }\n    }\n    return to;\n};\n\n\nvar $30707a4ac7d96d94$exports = {};\n\"use strict\";\n$30707a4ac7d96d94$exports = function(val) {\n    if (val === null || val === undefined) return [];\n    return Array.isArray(val) ? val : [\n        val\n    ];\n};\n\n\n$cd765d230ba82a4b$exports = function toCss(object, opts) {\n    opts = $dc059d989c3e6254$exports({\n        indent: \"\",\n        property: $cd765d230ba82a4b$var$identity,\n        value: $cd765d230ba82a4b$var$identity,\n        selector: $cd765d230ba82a4b$var$identity\n    }, opts);\n    if (typeof opts.indent === \"number\") opts.indent = $114292e15d237642$exports(\" \", opts.indent);\n    function props(prop, val) {\n        return $30707a4ac7d96d94$exports(prop).reduce(function(props, p) {\n            return props.concat(opts.property(p, val));\n        }, []);\n    }\n    function values(val, prop) {\n        return $30707a4ac7d96d94$exports(val).reduce(function(vals, v) {\n            return vals.concat(opts.value(v, prop));\n        }, []);\n    }\n    function selectors(sel, value) {\n        return $30707a4ac7d96d94$exports(sel).reduce(function(sels, s) {\n            return sels.concat(opts.selector(s, value));\n        }, []);\n    }\n    function _toCss(obj, level) {\n        var str = \"\";\n        Object.keys(obj).forEach(function(sel) {\n            var value = obj[sel];\n            if ($cd765d230ba82a4b$var$isLastLevel(value)) {\n                str += $cd765d230ba82a4b$var$rule(props(sel, value), values(value, sel), opts.indent, level - 1);\n                return;\n            } else if (Array.isArray(value)) {\n                value.forEach(function(val) {\n                    str += _toCss($cd765d230ba82a4b$var$nest(sel, val), level);\n                });\n                return;\n            }\n            selectors(sel, value).forEach(function(selector) {\n                str += $cd765d230ba82a4b$var$start(selector, opts.indent, level);\n                Object.keys(value).forEach(function(prop) {\n                    var value = obj[sel][prop];\n                    if ($cd765d230ba82a4b$var$oneMoreLevelExists(value)) str += _toCss($cd765d230ba82a4b$var$nest(prop, value), level + 1);\n                    else str += $cd765d230ba82a4b$var$rule(props(prop, value), values(value, prop), opts.indent, level);\n                });\n                str += $cd765d230ba82a4b$var$end(opts.indent, level);\n            });\n        });\n        return str;\n    }\n    return $30707a4ac7d96d94$exports(object).map(function(o) {\n        return _toCss(o, 0);\n    }).join($cd765d230ba82a4b$var$lineEnd(opts.indent));\n};\nfunction $cd765d230ba82a4b$var$nest(prop, val) {\n    var tmp = {};\n    tmp[prop] = val;\n    return tmp;\n}\nfunction $cd765d230ba82a4b$var$isLastLevel(val) {\n    return typeof val === \"string\" || Array.isArray(val) && val.length && typeof val[0] !== \"object\";\n}\nfunction $cd765d230ba82a4b$var$oneMoreLevelExists(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n}\nfunction $cd765d230ba82a4b$var$identity(v) {\n    return v;\n}\nfunction $cd765d230ba82a4b$var$lineStart(indent, level) {\n    return indent ? $114292e15d237642$exports(indent, level) : \"\";\n}\nfunction $cd765d230ba82a4b$var$space(indent) {\n    return indent ? \" \" : \"\";\n}\nfunction $cd765d230ba82a4b$var$lineEnd(indent) {\n    return indent ? \"\\n\" : \"\";\n}\nfunction $cd765d230ba82a4b$var$start(sel, indent, level) {\n    return $cd765d230ba82a4b$var$lineStart(indent, level) + sel + $cd765d230ba82a4b$var$space(indent) + \"{\" + $cd765d230ba82a4b$var$lineEnd(indent);\n}\nfunction $cd765d230ba82a4b$var$end(indent, level) {\n    return $cd765d230ba82a4b$var$lineStart(indent, level) + \"}\" + $cd765d230ba82a4b$var$lineEnd(indent);\n}\nfunction $cd765d230ba82a4b$var$rule(props, values, indent, level) {\n    var linestart = $cd765d230ba82a4b$var$lineStart(indent, level + 1);\n    var lineend = $cd765d230ba82a4b$var$lineEnd(indent);\n    var s = $cd765d230ba82a4b$var$space(indent);\n    var str = \"\";\n    for(var i = 0, propLength = props.length; i < propLength; i++)for(var j = 0, valueLength = values.length; j < valueLength; j++)str += linestart + props[i] + ($cd765d230ba82a4b$var$isAtRule(props[i]) ? \" \" : \":\") + s + values[j] + \";\" + lineend;\n    return str;\n}\nfunction $cd765d230ba82a4b$var$isAtRule(prop) {\n    return prop.indexOf(\"@\") === 0;\n}\n\n\n$480e37ad861582d4$exports = $480e37ad861582d4$var$fps;\nfunction $480e37ad861582d4$var$fps(opts) {\n    if (!(this instanceof $480e37ad861582d4$var$fps)) return new $480e37ad861582d4$var$fps(opts);\n    if (typeof opts === \"string\") {\n        if ($480e37ad861582d4$var$positions[opts]) opts = {\n            position: opts\n        };\n        else opts = {\n            container: opts\n        };\n    }\n    opts = opts || {};\n    if (opts.container) {\n        if (typeof opts.container === \"string\") this.container = document.querySelector(opts.container);\n        else this.container = opts.container;\n    } else this.container = document.body || document.documentElement;\n    //init fps\n    this.element = document.createElement(\"div\");\n    this.element.className = \"fps\";\n    this.element.innerHTML = [\n        '<div class=\"fps-bg\"></div>',\n        '<canvas class=\"fps-canvas\"></canvas>',\n        '<span class=\"fps-text\">fps <span class=\"fps-value\">60.0</span></span>'\n    ].join(\"\");\n    this.container.appendChild(this.element);\n    this.canvas = this.element.querySelector(\".fps-canvas\");\n    this.textEl = this.element.querySelector(\".fps-text\");\n    this.valueEl = this.element.querySelector(\".fps-value\");\n    this.bgEl = this.element.querySelector(\".fps-bg\");\n    var style = opts.css || opts.style || \"\";\n    if (typeof style === \"object\") style = $cd765d230ba82a4b$exports(style);\n    var posCss = \"\";\n    posCss = $480e37ad861582d4$var$positions[opts.position] || $480e37ad861582d4$var$positions[\"top-left\"];\n    this.element.style.cssText = [\n        \"line-height: 1;\",\n        \"position: fixed;\",\n        \"font-family: Roboto, sans-serif;\",\n        \"z-index: 1;\",\n        \"font-weight: 300;\",\n        \"font-size: small;\",\n        \"padding: 1rem;\",\n        posCss,\n        opts.color ? \"color:\" + opts.color : \"\",\n        style\n    ].join(\"\");\n    this.canvas.style.cssText = [\n        \"position: relative;\",\n        \"width: 2em;\",\n        \"height: 1em;\",\n        \"display: block;\",\n        \"float: left;\",\n        \"margin-right: .333em;\"\n    ].join(\"\");\n    this.bgEl.style.cssText = [\n        \"position: absolute;\",\n        \"height: 1em;\",\n        \"width: 2em;\",\n        \"background: currentcolor;\",\n        \"opacity: .1;\"\n    ].join(\"\");\n    this.canvas.width = parseInt(getComputedStyle(this.canvas).width) || 1;\n    this.canvas.height = parseInt(getComputedStyle(this.canvas).height) || 1;\n    this.context = this.canvas.getContext(\"2d\");\n    var ctx = this.context;\n    var w = this.canvas.width;\n    var h = this.canvas.height;\n    var count = 0;\n    var lastTime = 0;\n    var values = opts.values || Array(this.canvas.width);\n    var period = opts.period || 1000;\n    var max = opts.max || 100;\n    //enable update routine\n    var that = this;\n    $f91da34ba7ed1da4$exports(function measure() {\n        count++;\n        var t = $0474abd910a8de31$exports();\n        if (t - lastTime > period) {\n            lastTime = t;\n            values.push(count / (max * period * 0.001));\n            values = values.slice(-w);\n            count = 0;\n            ctx.clearRect(0, 0, w, h);\n            ctx.fillStyle = getComputedStyle(that.canvas).color;\n            for(var i = w; i--;){\n                var value = values[i];\n                if (value == null) break;\n                ctx.fillRect(i, h - h * value, 1, h * value);\n            }\n            that.valueEl.innerHTML = (values[values.length - 1] * max).toFixed(1);\n        }\n        $f91da34ba7ed1da4$exports(measure);\n    });\n}\nvar $480e37ad861582d4$var$positions = {\n    \"top-left\": \"left: 0; top: 0;\",\n    \"top-right\": \"right: 0; top: 0;\",\n    \"bottom-right\": \"right: 0; bottom: 0;\",\n    \"bottom-left\": \"left: 0; bottom: 0;\"\n};\n\n\n/**\n * **Main `index.js` - see [`readme`](..)**\n *\n * [![`gl-gpgpu` particles demo](media://demo-particles-regl-frames.png)](..)\n *\n * [GPGPU](https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units)\n * state-stepping - declaratively maps optimal draw passes, shaders, `GL`\n * resources, inputs, outputs - lets you focus on your logic, BYO-renderer.\n *\n * Decouples logic from rendering approach/engine.\n * Each module and hook may be used as given, or piecemeal, or overridden.\n *\n * @module (root)\n * @category Root\n * @category JS\n *\n * @todo Add a way to look up values from previous passes in the current step:\n *   - We have `past` state inputs and the `next` state outputs, so adjacent\n *     states in the current pass can be called `got` states.\n *   - All states are already accessible in the shader, just need a way to\n *     declare the lookup is desired; maybe a negative index in `derives` should\n *     signify that, and be handled in the `tapStates` macros?\n * @todo Add a way to resize all `gpgpu` resources in one convenient function.\n * @todo Handle values with more channels than `channelsMax`...\n */ /**\n * Description of the `api` hooks for `gpgpu`, to interact with `GL` resources.\n *\n * Not implemented within the `gpgpu` library.\n *\n * Based on [`regl`](https://github.com/regl-project/regl/)'s API; but can be\n * use any `GL` renderer, given hooks matching these implementations.\n *\n * @module\n * @category API Hooks\n *\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n */ /**\n * @callback getFramebuffer\n * A `function` to create or update a `GL` `framebuffer`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link framebuffer}\n * - {@link data.toData}\n *\n * **This**\n *\n * Updates any `this` value's `framebuffer` in-place (or similar handling);\n * otherwise if `null`ish, returns a new `framebuffer`.\n *\n * **Returns**\n *\n * A `GL` `framebuffer` created or updated by any given `options`, or an\n * `object` serving that purpose.\n *\n * @param {{\n *     depth?:object,\n *     stencil?:object,\n *     width?:number,\n *     height?:number,\n *     color?:texture[]\n *   }} options Options to create or update a `GL` `framebuffer`; with:\n *   - `depth`: Any `framebuffer` depth attachment, or a flag for whether it\n *     should be created.\n *   - `stencil`: Any `framebuffer` stencil attachment, or a flag for whether it\n *     should be created.\n *   - `width`: The width of the `framebuffer`.\n *   - `height`: The height of the `framebuffer`.\n *   - `color`: The `texture` attachments to use.\n *\n * @returns {framebuffer}\n */ /**\n * @callback useFramebuffer\n * Bind a `GL` `framebuffer` while calling a given `function`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link framebuffer}\n * - {@link step.toStep}\n *\n * **This**\n *\n * Uses any `this` value's `framebuffer` (or similar handling).\n *\n * @param {()=>void} hook A `function` to call while the `framebuffer` is bound.\n */ /**\n * @typedef {object} framebuffer\n * A `GL` `framebuffer`, or an `object` serving that purpose; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link getFramebuffer}\n * - {@link data.toData}\n *\n * @prop {getFramebuffer} call Update this `framebuffer` in-place.\n * @prop {useFramebuffer} use Bind this `framebuffer` for the given `function`.\n */ /**\n * @callback getTexture\n * A `function` hook to create or update a `GL` `texture`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link api}\n * - {@link texture}\n * - {@link data.toData}\n *\n * **Returns**\n *\n * A `GL` `texture`, or an `object` serving that purpose.\n *\n * @param {string} type Any `texture` data type value.\n * @param {string} min Any `texture` minification filter value.\n * @param {string} mag Any `texture` magnification filter value.\n * @param {string} wrap Any `texture` wrap mode value.\n * @param {number} width The width of the `texture`.\n * @param {number} height The height of the `texture`.\n * @param {number} channels The number of channels of the `texture`.\n *\n * @returns {texture}\n */ /**\n * @callback subimage\n * Copy from a given source `texture` to part of `this` output `texture`; via\n * a `GL` `api`.\n *\n * **See**\n *\n * - {@link api}\n * - {@link texture}\n * - {@link getTexture}\n * - {@link step.toStep}\n *\n * **Returns**\n *\n * The output `texture`, `this`; the source `texture` copied to part of it.\n *\n * **This**\n *\n * Uses any `this` value's `texture` as the output to copy into.\n *\n * @param {texture} source A `texture` to copy to part of the output `texture`.\n * @param {number} [x=0] Offset along the output `texture`'s x-axis.\n * @param {number} [y=0] Offset along the output `texture`'s y-axis.\n *\n * @returns {texture}\n */ /**\n * @typedef {object} texture\n * A `GL` `texture`, or an `object` serving that purpose; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link getTexture}\n * - {@link data.toData}\n *\n * @prop {getTexture} call Update this `texture` in-place.\n * @prop {subimage} subimage Copy from a source `texture` into part of `this`\n *   destination `texture`.\n */ /**\n * @callback getBuffer\n * A `function` to set up a `GL` buffer; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link buffer}\n * - {@link attributes.getAttributes}\n *\n * @param {number[]|{[k:string|number]:number}|buffer} data Data to create a new\n *   `buffer`; or an existing `buffer` to use as-is.\n *\n * @returns {buffer}\n */ /**\n * @typedef {object} buffer\n * A `GL` `buffer` for vertex `attribute`s, or an `object` serving that purpose;\n * via a `GL` `api`.\n */ /**\n * @callback clear\n * A `function` to clear `GL` output view or `framebuffer`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link framebuffer}\n * - {@link step.toStep}\n *\n * @param {{\n *     color?:number[],\n *     depth?:number,\n *     stencil?:number,\n *     framebuffer?:framebuffer\n *   }} options Options to clear `GL`; with:\n *   - `color`: The values to clear any color buffers with.\n *   - `depth`: The value to clear any depth buffer with.\n *   - `stencil`: The value to clear any stencil buffer with.\n *   - `framebuffer`: Any `framebuffer` to clear; if not given, clears any\n *     `framebuffer` already bound, or the view if none are bound.\n */ /**\n * @callback command\n * A `function` to create a `GL` render pass execution `function`, to be called\n * later, given options, for a render pass; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link buffer}\n * - {@link attributes}\n * - {@link framebuffer}\n * - {@link step.toStep}\n * - {@link uniforms.toUniforms}\n * - {@link uniforms.getUniform}\n *\n * **Returns**\n *\n * A `function` to execute a `GL` render pass, given options.\n *\n * @param {{\n *     vert?:(context,state)=>string,\n *     frag?:(context,state)=>string,\n *     count?:number,\n *     attributes?:{[k:string]:buffer},\n *     uniforms?:{[k:string]:getUniform},\n *     depth?:{[k:string]:boolean|{}},\n *     framebuffer?:(context,state)=>framebuffer\n *   }} options Options to create a `GL` render pass `function`; with:\n *   - `vert`: Hook to get any `GLSL` vertex shader `string`.\n *   - `frag`: Hook to get any `GLSL` fragment shader `string`.\n *   - `count`: Any `number` of elements to render.\n *   - `attributes`: Map of any `GL` `attribute` `buffer`s.\n *     See `attributes`, `buffer`, `toStep`.\n *   - `uniforms`: Map of any `GL` `uniform` hooks.\n *     See `uniforms`, `toUniforms`, and `getUniform`.\n *   - `depth`: Any `GL` depth settings (e.g: `options.depth.enable`).\n *   - `framebuffer`: Hook to get any `framebuffer` to render into.\n *     See `framebuffer`.\n *\n * @returns {(context,state)=>void}\n */ /**\n * @typedef {{\n *     framebuffer:getFramebuffer,\n *     texture:getTexture,\n *     buffer:getBuffer,\n *     clear:clear,\n *     command:command,\n *     call:command\n *   }} api\n * An API `object` given to `gpgpu`, to interact with `GL` resources.\n *\n * Based on [`regl`](https://github.com/regl-project/regl/)'s API; but can be\n * use any `GL` renderer, given hooks matching these implementations.\n */ /** @ignore */ var $eadad85ecf44232f$export$2e2bcd8739ae039 = null;\n\n\n/**\n * Default properties for `gpgpu` and `GL` capabilities and resources.\n *\n * @module\n * @category JS\n */ const $e5ed57ca4cb71184$export$ba60520149d1328e = [\n    [\n        -1,\n        -1\n    ],\n    [\n        -1,\n        4\n    ],\n    [\n        4,\n        -1\n    ]\n];\nconst $e5ed57ca4cb71184$export$85b9a36db797e02b = $e5ed57ca4cb71184$export$ba60520149d1328e.length;\nconst $e5ed57ca4cb71184$export$c96e90b4bcb7d4ca = 2;\nconst $e5ed57ca4cb71184$export$878041e1e4cd4218 = $e5ed57ca4cb71184$export$ba60520149d1328e.flat();\nvar $e5ed57ca4cb71184$export$2e2bcd8739ae039 = $e5ed57ca4cb71184$export$878041e1e4cd4218;\n\n\nvar $640fd2ee25287e39$exports = {};\n$640fd2ee25287e39$exports = \"/**\\n * Default `gpgpu` vertex shader.\\n *\\n * @see [@epok.tech/gl-screen-triangle/uv-texture.vert.glsl](https://github.com/keeffEoghan/gl-screen-triangle/tree/master/uv-texture.vert.glsl)\\n */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\n/**\\n * Uses the default prefix namespace; replaced with any given prefix if this\\n * shader's used during `toStep`.\\n *\\n * @see {@link const.preDef}\\n * @see {@link step.toStep}\\n */\\nattribute vec2 gpgpu_position;\\n\\nvarying vec2 gpgpu_uv;\\n\\nvoid main() {\\n  // Texture coordinates, range `[0, 1]`, y-axis points upwards.\\n  gpgpu_uv = (gpgpu_position*0.5)+0.5;\\n  gl_Position = vec4(gpgpu_position, 0, 1);\\n}\\n\";\n\n\nconst $a1c331d8a5ab855b$export$dc207adda608f979 = (0, (/*@__PURE__*/$parcel$interopDefault($640fd2ee25287e39$exports)));\nconst $a1c331d8a5ab855b$export$cfdc3a7c4cb854c6 = ()=>[\n        ...(0, $e5ed57ca4cb71184$export$878041e1e4cd4218)\n    ];\nconst $a1c331d8a5ab855b$export$832d88422d279bbc = (0, $e5ed57ca4cb71184$export$85b9a36db797e02b);\nconst $a1c331d8a5ab855b$export$ac0cd3cc21f80dfc = ()=>[\n        \"oes_texture_float\",\n        \"webgl_color_buffer_float\"\n    ];\nconst $a1c331d8a5ab855b$export$5d97924d29f48e83 = ()=>[\n        \"oes_texture_half_float\",\n        \"ext_color_buffer_half_float\"\n    ];\nconst $a1c331d8a5ab855b$export$fdb75c5ac32869de = ()=>[\n        \"webgl_draw_buffers\"\n    ];\nconst $a1c331d8a5ab855b$export$cc3e2d3244e01b7f = ()=>[];\nconst $a1c331d8a5ab855b$export$4bceda1224fc5ab8 = $a1c331d8a5ab855b$export$fdb75c5ac32869de;\nconst $a1c331d8a5ab855b$export$918e5821fc7288cd = $a1c331d8a5ab855b$export$4bceda1224fc5ab8;\nconst $a1c331d8a5ab855b$export$b4781c2237bde956 = \"gpgpu_\";\nconst $a1c331d8a5ab855b$export$26945b8c914b7fc = 4;\nconst $a1c331d8a5ab855b$export$154f256b9eac9103 = 4;\nconst $a1c331d8a5ab855b$export$b6267c3f91c57c78 = 1;\nconst $a1c331d8a5ab855b$export$b029aceb5666f022 = 1;\nconst $a1c331d8a5ab855b$export$71c6d8e332d66a75 = 0;\nconst $a1c331d8a5ab855b$export$c4175b5828221aa7 = 2 ** $a1c331d8a5ab855b$export$71c6d8e332d66a75;\nconst $a1c331d8a5ab855b$export$bffb644e7dc52e91 = 2 ** $a1c331d8a5ab855b$export$71c6d8e332d66a75;\nconst $a1c331d8a5ab855b$export$617a37502ff8853 = 2;\nconst $a1c331d8a5ab855b$export$ff01eb58fe4e69 = ()=>[\n        $a1c331d8a5ab855b$export$154f256b9eac9103\n    ];\nconst $a1c331d8a5ab855b$export$27fb0dad99ae5dd2 = \"float\";\nconst $a1c331d8a5ab855b$export$47b10f415de592b1 = \"nearest\";\nconst $a1c331d8a5ab855b$export$1fb689c67b965bff = \"nearest\";\nconst $a1c331d8a5ab855b$export$8d7f4a48e1f2b2a = \"clamp\";\nconst $a1c331d8a5ab855b$export$a211ab2c8ecded9a = false;\nconst $a1c331d8a5ab855b$export$a1b7c201e9365814 = false;\nconst $a1c331d8a5ab855b$export$5544d416ac8224f1 = /[0-9\\.]+/;\nconst $a1c331d8a5ab855b$export$2902d6d00b7c2bce = 8192;\nconst $a1c331d8a5ab855b$export$2fcc13103217f9a3 = ()=>({\n        color: [\n            0,\n            0,\n            0,\n            0\n        ],\n        depth: 1,\n        stencil: 0\n    });\nconst $a1c331d8a5ab855b$export$72e520e6a70b780c = ()=>({\n        copy: true\n    });\n\n\n/**\n * The `gpgpu` maps of data for optimal inputs/outputs on a platform.\n *\n * These maps show how to make optimal use of a platform's supported features,\n * how to pack/unpack their data from `framebuffer`s/`texture`s, perform minimal\n * needed samples to retrieve any past values they must derive from, etc.\n *\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular platform resources they're using.\n *\n * Platform limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, `texture` samples, etc).\n *\n * @module\n * @category JS\n *\n * @todo Allow passes within/across `texture`s; separate data/`texture` shapes.\n */ \n\n\n\nconst { isInteger: $c474fe9e4b233a62$var$isInteger } = Number;\nconst { isArray: $c474fe9e4b233a62$var$isArray } = Array;\nconst $c474fe9e4b233a62$export$5ca26c99531348ec = (value, channelsMax = (0, $a1c331d8a5ab855b$export$154f256b9eac9103))=>1 <= value || value <= channelsMax || !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the ` + `range of channels available, \\`[1, ${channelsMax}]\\` inclusive.`, value, channelsMax);\nconst $c474fe9e4b233a62$export$f5edbc631dafdbf = (buffersMax)=>$c474fe9e4b233a62$var$isInteger(buffersMax) && 0 < buffersMax && buffersMax < Infinity;\nfunction $c474fe9e4b233a62$export$9d1d9285bd6d8c57(values, channelsMax = (0, $a1c331d8a5ab855b$export$154f256b9eac9103), to = []) {\n    // Fill `to` with indexes of `values`, and ensure it's the same length.\n    (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((_, i)=>i, values, to).length = values.length;\n    /** Counts the number of empty channels in the current group. */ let channels = channelsMax;\n    /** How many values have already been packed. */ let packed = 0;\n    /** Tracks the value that best fits the free channels (fills it tightest). */ let fitIndex = 0;\n    let fitSize = Infinity;\n    for(let i = 0; packed < values.length;){\n        const v = packed + i;\n        const value = values[to[v]];\n        if (!$c474fe9e4b233a62$export$5ca26c99531348ec(value, channelsMax)) return to;\n        // Check how value fits the channels - valid is >= 0, perfect is 0.\n        const fit = channels - value;\n        if (fit >= 0 && fit < fitSize) {\n            fitSize = fit;\n            fitIndex = v;\n        }\n        // Not a perfect fit and can keep searching for better fits - continue.\n        if (fitSize !== 0 && v < values.length - 1) ++i;\n        else {\n            // Got a perfect fit or the search ended - swap in best fit value.\n            const pack = to[fitIndex];\n            to[fitIndex] = to[packed];\n            to[packed] = pack;\n            (channels -= values[pack]) > 0 || (channels = channelsMax);\n            // Start the search again over the remaining unpacked entries.\n            fitIndex = ++packed;\n            fitSize = Infinity;\n            i = 0;\n        }\n    }\n    return to;\n}\nfunction $c474fe9e4b233a62$export$96707a1f51900f3d(maps = {}, to = maps) {\n    const { values: values = (0, $a1c331d8a5ab855b$export$ff01eb58fe4e69)(), buffersMax: buffersMax = (0, $a1c331d8a5ab855b$export$b6267c3f91c57c78), channelsMax: channelsMax = (0, $a1c331d8a5ab855b$export$154f256b9eac9103), packed: // Pack `values` into blocks of `channelsMax` to minimise resources.\n    packed = $c474fe9e4b233a62$export$9d1d9285bd6d8c57(values, channelsMax) } = maps;\n    // Ensure any properties changed are included.\n    to.values = values;\n    to.buffersMax = buffersMax;\n    to.channelsMax = channelsMax;\n    to.packed = packed;\n    const passes = to.passes = [\n        []\n    ];\n    const textures = to.textures = [\n        []\n    ];\n    const valueToTexture = to.valueToTexture = [];\n    const valueToPass = to.valueToPass = [];\n    const textureToPass = to.textureToPass = [];\n    /** Whether to use output buffers in passes, or no buffers in one pass. */ const output = !!buffersMax;\n    /** Counts the number of channels written in a single draw pass. */ let channels = 0;\n    /** Get the index, via any `packed`, from `values`. */ const getIndex = packed ? (i)=>packed[i] : (i)=>i;\n    /** Get the value, via any `packed`, from `values`. */ const getValue = packed ? (_, i)=>values[i] : (v)=>v;\n    return (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((to, v, i)=>{\n        const index = getIndex(i);\n        const value = getValue(v, index);\n        if (!$c474fe9e4b233a62$export$5ca26c99531348ec(value, channelsMax)) return to;\n        let p = passes.length - 1;\n        let pass = passes[p];\n        let t = textures.length - 1;\n        let texture = textures[t];\n        if ((channels += value) > channelsMax) {\n            channels = value;\n            t = textures.push(texture = []) - 1;\n            output && pass.length >= buffersMax && (p = passes.push(pass = []) - 1);\n            pass.push(t);\n            textureToPass.push(p);\n        } else if (pass.length === 0) {\n            pass.push(t);\n            textureToPass.push(p);\n        }\n        texture.push(index);\n        valueToTexture[index] = t;\n        valueToPass[index] = p;\n        return to;\n    }, values, to);\n}\nfunction $c474fe9e4b233a62$export$574963e692b662ec(maps = {}, to = maps) {\n    const { derives: derives, passes: passes, textures: textures, valueToTexture: valueToTexture } = maps;\n    if (!derives && derives !== 0) return to;\n    const reads = to.reads = [];\n    const readsToValue = to.readsToValue = [];\n    const cache = {};\n    const allStepSamples = (step)=>cache[step] ??= (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((t, value)=>({\n                step: step,\n                value: value\n            }), valueToTexture);\n    const getAddSample = (pass, valueNext)=>function add(set, derive, d) {\n            /** The past step to derive from. */ let step = 0;\n            /** The past value to derive from. */ let dp = derive;\n            // Derive from any specified `value` and `step` nested properties.\n            derives !== true && !$c474fe9e4b233a62$var$isInteger(derives) && ({ value: dp = dp, step: step = step } = derive);\n            // Derive from all samples at the given or most recent step if given `true`.\n            if (dp === true) return (0, $ff8552abc90720ca$export$2e2bcd8739ae039)(add, allStepSamples(step), set);\n            // Derive from the given sample.\n            const texture = valueToTexture[dp];\n            if (!($c474fe9e4b233a62$var$isInteger(step) && $c474fe9e4b233a62$var$isInteger(texture))) return console.error(\"`mapSamples`: invalid map for sample\", derives, maps, pass, valueNext, derive, d, step, texture, dp);\n            // Create the set if not already created.\n            const to = set || [];\n            // Check for any existing matching step/texture read in the set.\n            const i = to.findIndex(([s, t])=>s === step && t === texture);\n            // Add the read for this next value in this pass; creating any needed maps.\n            ((reads[pass] ??= [])[valueNext] ??= [])// A new read as needed, or any existing matching read.\n            .push(i < 0 ? to.push([\n                step,\n                texture\n            ]) - 1 : i);\n            // Add a reverse lookup from read index to value index.\n            ((readsToValue[pass] ??= [])[valueNext] ??= []).push(dp);\n            return to;\n        };\n    const getAddSamples = (pass)=>(set, valueNext)=>{\n            /** Derive next output value from any given past input values. */ const dn = $c474fe9e4b233a62$var$isArray(derives) ? derives[valueNext] : derives;\n            return !dn && dn !== 0 ? set : dn !== derives && $c474fe9e4b233a62$var$isArray(dn) ? (0, $ff8552abc90720ca$export$2e2bcd8739ae039)(getAddSample(pass, valueNext), dn, set) : getAddSample(pass, valueNext)(set, dn);\n        };\n    to.samples = (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((pass, p)=>(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((set, texture)=>(0, $ff8552abc90720ca$export$2e2bcd8739ae039)(getAddSamples(p), textures[texture], set), pass, null), passes, []);\n    return to;\n}\nconst $c474fe9e4b233a62$export$798cdecdcbbf9755 = (maps, to = maps)=>$c474fe9e4b233a62$export$574963e692b662ec($c474fe9e4b233a62$export$96707a1f51900f3d(maps, to), to);\nvar /**\n * @typedef {derive|array.<derive|array.<derive>>>} derives\n * Denotes how next output `values` derive from any past input `values`.\n *\n * A nested hierarchy of the form\n * `all-next-from-past[any-next-from-past[any-next-from-any-past]]`; each\n * nesting level denotes how to derive:\n * 0. `all-next-from-past`: to all next `values`, from one/all past `value`/s.\n * 1. `any-next-from-past`: to any given next `values` (by sparse `array`\n *   indexes in `values` order), from one/all past `value`/s.\n * 2. `any-next-from-any-past`: to any given next `values` (by its `array` index\n *   in parent level 1), from any past `value`/s in this level 2 `array`.\n *\n * The `array`s are sparse, with empty or `false`y-non-integer entries ignored.\n *\n * See `derive` for how to denote past input `values`.\n *\n * **See**\n *\n * - {@link derive}\n */ /**\n * @typedef {true|number|{value:true|number,step?:number}} derive\n * Denotes any past input `values` (and optional past `step`), that next output\n * `values` derive from.\n *\n * A nested hierarchy of the form `any-value-past[any-value-step-past]`,\n * indexing `values`, each nesting level denotes how to derive from:\n * 0. `any-value-past`: any/all past input `value`/s, at 1st `step` past.\n * 1. `any-value-step-past`: any/all past input `value`/s, at any given `step`\n *   past.\n *\n * The `value`/s to derive from may be given as:\n * - `true`: derives from all `values`.\n * - `number`: derives from the given `values` index.\n *\n * If given a `true` or `number` (denoting `value`/s but no `step`), the next\n * output `value` derives from the given `values` at the 1st `step` past.\n *\n * To specify a different `step`, pass an `object` denoting both the `value` (as\n * above) along with a `step`; in the form `{value:true|number,step?:number}`,\n * to derive from the `value` at any given `step` past (or the 1st `step` past\n * if not given).\n *\n * Any omitted `values` are ignored.\n *\n * See `derives` for more on how these are derived by the next output `values`.\n *\n * **See**\n *\n * - {@link derives}\n */ $c474fe9e4b233a62$export$2e2bcd8739ae039 = $c474fe9e4b233a62$export$798cdecdcbbf9755;\n\n\n/**\n * The `gpgpu` state and `GL` data resources.\n *\n * Handles `framebuffer`s, `texture`s; and the main meta info.\n *\n * @module\n * @category JS\n *\n * @todo Allow passes into or across `texture`s; separate shapes of data and\n *   `texture`s.\n * @todo In-place updates of complex resources and meta info.\n */ \n\n\n\n/**\n * @module\n * @category JS\n */ \n\n\nconst { floor: $be4163ee67d9e1b7$var$floor } = Math;\nconst { isFinite: $be4163ee67d9e1b7$var$isFinite, isInteger: $be4163ee67d9e1b7$var$isInteger } = Number;\nfunction $be4163ee67d9e1b7$export$3c49c185de0c2bfc(value) {\n    const { width: width, w: w, x: x, shape: shape, size: size, side: side, 0: v0 } = value;\n    return (size && $be4163ee67d9e1b7$export$3c49c185de0c2bfc(size)) ?? width ?? w ?? x ?? (shape && $be4163ee67d9e1b7$export$3c49c185de0c2bfc(shape)) ?? side ?? v0 ?? ($be4163ee67d9e1b7$var$isFinite(value) ? value : null);\n}\nfunction $be4163ee67d9e1b7$export$c08559766941f856(value) {\n    const { height: height, h: h, y: y, shape: shape, size: size, side: side, 1: v1 } = value;\n    return (size && $be4163ee67d9e1b7$export$c08559766941f856(size)) ?? height ?? h ?? y ?? (shape && $be4163ee67d9e1b7$export$c08559766941f856(shape)) ?? side ?? v1 ?? ($be4163ee67d9e1b7$var$isFinite(value) ? value : null);\n}\nconst $be4163ee67d9e1b7$export$2815acae70277c92 = (size = 1, height = 1)=>size?.entries ?? ($be4163ee67d9e1b7$export$3c49c185de0c2bfc(size) ?? 1) * ($be4163ee67d9e1b7$export$c08559766941f856(height) ?? 1);\nconst $be4163ee67d9e1b7$export$87ed20f81f3c66ff = (size)=>(0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((_, i)=>i, (0, $5ec828b9c9659fbf$export$2e2bcd8739ae039)($be4163ee67d9e1b7$var$isInteger(size) ? size : $be4163ee67d9e1b7$export$2815acae70277c92(size)), 0);\nconst $be4163ee67d9e1b7$export$19cc39c76123d7db = (scale)=>$be4163ee67d9e1b7$var$isFinite(scale) ? 2 ** scale : null;\nfunction $be4163ee67d9e1b7$export$6574bcda6112260a(value, to = []) {\n    let s;\n    to[0] = $be4163ee67d9e1b7$var$floor($be4163ee67d9e1b7$export$3c49c185de0c2bfc(value) ?? (s ??= $be4163ee67d9e1b7$export$19cc39c76123d7db(value.scale)) ?? (0, $a1c331d8a5ab855b$export$c4175b5828221aa7));\n    to[1] = $be4163ee67d9e1b7$var$floor($be4163ee67d9e1b7$export$c08559766941f856(value) ?? (s ??= $be4163ee67d9e1b7$export$19cc39c76123d7db(value.scale)) ?? (0, $a1c331d8a5ab855b$export$bffb644e7dc52e91));\n    return to;\n}\n\n\n\nconst { max: $422c8e0d3f2b22ec$var$max } = Math;\nconst { isInteger: $422c8e0d3f2b22ec$var$isInteger } = Number;\n/**\n * Whether all states merge into one data-`texture` or remain separate by\n * default, according to the number of `steps` and `textures` to be tracked.\n *\n * Uses separate data-`texture`s when the `steps` and `textures` are few enough\n * to allow it without issue on all platforms; otherwise merges data-`texture`s.\n *\n * @param {number} [steps] How many `steps` of state to track.\n * @param {number} [textures] How many data-`textures` to track per-step.\n *\n * @returns {boolean} Whether to merge states to one data-`texture` by default.\n */ const $422c8e0d3f2b22ec$var$mergeDef = (steps, textures)=>steps > 2 && textures > 1;\nfunction $422c8e0d3f2b22ec$export$24a6b176bdc41ce5({ texture: texture, framebuffer: framebuffer }, state = {}, to = state) {\n    const { maps: maps, steps: steps = (0, $a1c331d8a5ab855b$export$617a37502ff8853), type: // Resource format settings.\n    type = (0, $a1c331d8a5ab855b$export$27fb0dad99ae5dd2), min: min = (0, $a1c331d8a5ab855b$export$47b10f415de592b1), mag: mag = (0, $a1c331d8a5ab855b$export$1fb689c67b965bff), wrap: wrap = (0, $a1c331d8a5ab855b$export$8d7f4a48e1f2b2a), depth: depth = (0, $a1c331d8a5ab855b$export$a211ab2c8ecded9a), stencil: stencil = (0, $a1c331d8a5ab855b$export$a1b7c201e9365814) } = state;\n    const shape = (0, $be4163ee67d9e1b7$export$6574bcda6112260a)(state);\n    const [width, height] = shape;\n    const { values: values = maps.values = (0, $a1c331d8a5ab855b$export$ff01eb58fe4e69)(), channelsMin: channelsMin = maps.channelsMin = (0, $a1c331d8a5ab855b$export$26945b8c914b7fc), buffersMax: buffersMax = maps.buffersMax = (0, $a1c331d8a5ab855b$export$b6267c3f91c57c78), textures: texturesMap, passes: passesMap } = maps;\n    const stepsL = steps.length ?? steps;\n    const { merge: merge = $422c8e0d3f2b22ec$var$mergeDef(stepsL, texturesMap.length) } = state;\n    // Ensure any properties changed are included.\n    to.steps = steps;\n    to.merge = merge;\n    to.type = type;\n    to.min = min;\n    to.mag = mag;\n    to.wrap = wrap;\n    to.depth = depth;\n    to.stencil = stencil;\n    to.width = width;\n    to.height = height;\n    /** Whether to use output buffers in passes, or no buffers in one pass. */ const output = buffersMax || null;\n    /**\n   * All `framebuffer` attachments need the same number of channels; enough to\n   * hold all values a pass holds, or all passes hold if merging and reusing.\n   */ const passChannels = (pass, min)=>(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((min, t)=>$422c8e0d3f2b22ec$var$max(min, (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((sum, v)=>sum + values[v], texturesMap[t], 0)), pass, min);\n    /**\n   * If merging past `texture`s and reusing `texture` attachments in each pass's\n   * `framebuffer`, pre-compute the minimum channels for a reusable pool of\n   * `texture` attachments that can hold any pass's values; since all a\n   * `framebuffer`'s attachments also need the same number of channels, this is\n   * also the same number of channels across all passes.\n   */ const mergeChannels = !merge ? null : (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((min, p)=>passChannels(p, min), passesMap, channelsMin);\n    /** Size of the created resources. */ const size = to.size ??= {};\n    size.shape ??= shape;\n    size.entries ??= (size.width ??= width) * (size.height ??= height);\n    size.type ??= type;\n    size.channelsMin ??= mergeChannels ?? channelsMin;\n    size.steps ??= stepsL;\n    size.passes ??= 0;\n    size.framebuffers ??= 0;\n    size.textures ??= 0;\n    size.colors ??= 0;\n    /** The `texture`s created for the `step`/`pass` render flow. */ const textures = to.textures = [];\n    /** The passes created for the `step`/`pass` render flow. */ const passes = to.passes = [];\n    /** The `texture`s bound to the next pass; reused if merging. */ let colorPool;\n    /**\n   * Add a `texture` attachment and meta info to `texture`s if applicable; to\n   * return its new `texture` or a reused one to bind to a pass in `passes`.\n   */ const addTexture = (channels, w, h, step, pass)=>(index, c, _, color)=>{\n            /** Properties passed for `texture` creation, then meta info. */ const to = {\n                channels: channels,\n                width: w,\n                height: h,\n                type: type,\n                min: min,\n                mag: mag,\n                wrap: wrap\n            };\n            // Resources.\n            /**\n     * Add/reuse `texture` color attachments as needed; add minimal `texture`s.\n     * If merging, passes may reuse any pass's existing `texture` attachments;\n     * otherwise, each pass has its own dedicated `texture` attachments.\n     */ let entry = c;\n            let t = color?.[entry];\n            // Only create new `texture`s if existing ones can't be reused.\n            if (!t) {\n                t = texture?.(to);\n                entry = size.textures++;\n            }\n            // Add meta info.\n            /** Check if this is bound to a pass. */ const s = $422c8e0d3f2b22ec$var$isInteger(step);\n            const p = $422c8e0d3f2b22ec$var$isInteger(pass);\n            const i = $422c8e0d3f2b22ec$var$isInteger(index);\n            /** Denotes attached `texture`; if merging, `texture`s are reused. */ to.texture = t;\n            /** Denotes attached `texture` entry; if merging, `texture`s are reused. */ to.entry = entry;\n            s && (to.step = step);\n            if (p) {\n                /** Denotes `framebuffer` attachments; may reuse underlying `texture`s. */ to.color = size.colors++;\n                to.pass = pass;\n            }\n            i && (to.map = texturesMap[to.index = index]);\n            // Check whether this `texture` is part of the `step`/`pass` render flow.\n            // If so, add to `textures`, return its `texture` to bind to a pass.\n            // If not, return the entire object.\n            return s && p && i ? ((textures[step] ??= [])[index] = to).texture : to;\n        };\n    /**\n   * Add a pass to `passes`, with its `texture`s bound; to return its\n   * `framebuffer` to one of `steps`.\n   */ const addPass = (step, color)=>(pass, index)=>{\n            /**\n     * All a `framebuffer`'s attachments need the same number of channels;\n     * superseded by any given `color`'s value.\n     */ const channels = color != null ? 0 : mergeChannels ?? (pass ? passChannels(pass, channelsMin) : channelsMin);\n            // Resources.\n            /** Properties passed for `framebuffer` creation, then meta info. */ const to = {\n                depth: depth,\n                stencil: stencil,\n                width: width,\n                height: height,\n                /** Map the pass's `texture` color attachments and their meta info. */ color: color ?? (pass ? (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)(addTexture(channels, width, height, step, index), pass, // Reuse any existing color attachments if merging; otherwise make\n                // dedicated color attachments for each pass.\n                merge ? colorPool ??= [] : []) : [])\n            };\n            /**\n     * The `framebuffer` for this pass; don't create or bind if `buffersMax`\n     * is `false`y.\n     */ to.framebuffer = output && framebuffer?.(to);\n            // Add meta info.\n            /** Denotes any attached `framebuffer` entry. */ to.entry = output && size.framebuffers++;\n            if (pass) {\n                to.map = pass;\n                to.pass = size.passes++;\n            }\n            const s = $422c8e0d3f2b22ec$var$isInteger(step);\n            const i = $422c8e0d3f2b22ec$var$isInteger(index);\n            s && (to.step = step);\n            i && (to.index = index);\n            // Check whether this pass is part of the `step`/`pass` render flow.\n            // If so, add to `passes`, return its `framebuffer` for its step.\n            return pass && s && i ? ((passes[step] ??= [])[index] = to).framebuffer : to;\n        };\n    /**\n   * Set up resources needed to store data per-`texture` per-pass per-step.\n   * Use any given steps/passes or create new ones.\n   */ to.steps = (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((passes, step)=>passes || (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)(addPass(step), passesMap), $422c8e0d3f2b22ec$var$isInteger(steps) ? (0, $5ec828b9c9659fbf$export$2e2bcd8739ae039)(steps) : steps, 0);\n    /** Resize `texture`s, `framebuffer`s, and update `size`. */ to.resize = (value = to, state = to)=>{\n        const { size: size, passes: passes, textures: textures, merge: merge } = state;\n        const [w, h] = (0, $be4163ee67d9e1b7$export$6574bcda6112260a)(value ?? state, size.shape ??= []);\n        size.entries = (size.width = w) * (size.height = h);\n        (0, $7c7160675eb3d972$export$2e2bcd8739ae039)((s)=>(0, $7c7160675eb3d972$export$2e2bcd8739ae039)((p)=>p.framebuffer.resize(p.width = w, p.height = h), s), passes);\n        (0, $7c7160675eb3d972$export$2e2bcd8739ae039)((p)=>(0, $7c7160675eb3d972$export$2e2bcd8739ae039)((t)=>t.texture.resize(t.width = w, t.height = h), p), textures);\n        return merge?.resize?.(value, state) ?? state;\n    };\n    // Finish here if merge is disabled.\n    if (!merge) return to;\n    // Set up the `texture` for states to be merged into.\n    const m = to.merge = {\n        ...merge\n    };\n    const { all: mAll, next: mNext } = m;\n    const ms = size.merge = m.size ??= {};\n    /** Use any given size info, or merge along `[texture, step]` axes. */ ms.width ??= texturesMap.length * width;\n    ms.height ??= stepsL * height;\n    const [mw, mh] = (0, $be4163ee67d9e1b7$export$6574bcda6112260a)(m, ms.shape ??= []);\n    ms.entries ??= (ms.width = mw) * (ms.height = mh);\n    /** New merge `texture` and info, or use any given merge `texture`. */ m.all = mAll ?? addTexture(mergeChannels, mw, mh)();\n    /** Empty `framebuffer`, to copy data from each `texture` of each pass. */ m.next = mNext ?? addPass(null, colorPool[0])();\n    /** Resize `texture`s, `framebuffer`s, and update `size`. */ m.resize = (value = to, state = to)=>{\n        const { merge: merge, size: size, maps: maps } = state;\n        const { size: ms = size.merge = {}, all: all, next: next } = merge;\n        const { textures: texturesMap } = maps;\n        const shape = (0, $be4163ee67d9e1b7$export$6574bcda6112260a)(value ?? state, ms.shape ??= []);\n        const [w, h] = shape;\n        next.framebuffer.resize(next.width = w, next.height = h);\n        ms.width = texturesMap.length * w;\n        ms.height = size.steps * h;\n        const [mw, mh] = (0, $be4163ee67d9e1b7$export$6574bcda6112260a)(ms, shape);\n        ms.entries = (ms.width = mw) * (ms.height = mh);\n        all.texture.resize(all.width = mw, all.height = mh);\n        return state;\n    };\n    return to;\n}\nvar $422c8e0d3f2b22ec$export$2e2bcd8739ae039 = $422c8e0d3f2b22ec$export$24a6b176bdc41ce5;\n\n\n/**\n * The `gpgpu` inputs for `GL` `uniform`s.\n *\n * @module\n * @category JS\n */ const $50389a104b91a0fb$export$dcfbb7940cfb3a48 = (out, x, y)=>(!out && (out = []), out[0] = x, out[1] = y, out);\nconst $50389a104b91a0fb$export$ba8c70ce75474f8d = (out, x, y, z)=>(!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out);\nconst $50389a104b91a0fb$export$abee0037e1db715 = (out, x, y, z, w)=>(!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out[3] = w, out);\nconst $50389a104b91a0fb$export$d58a46c754825a51 = (out, a, b, c, d, e, f)=>(!out && (out = []), out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = f, out);\nconst $50389a104b91a0fb$export$644e79245f7d24b5 = (out, ...values)=>{\n    if (!out) return values;\n    for(let i = 0, n = values.length; i < n; i++)out[i] = values[i];\n    return out;\n};\n\n\n\n\n\nfunction $fec04eaf51736497$export$1aad3af825e3305b(state = {}, to = state.uniforms ??= {}) {\n    const { steps: steps, maps: maps, pre: n = (0, $a1c331d8a5ab855b$export$b4781c2237bde956), bound: bound = (0, $a1c331d8a5ab855b$export$b029aceb5666f022) } = state;\n    const { textures: textures } = maps;\n    const stepsL = steps.length ?? steps;\n    const texturesL = textures.length;\n    // Local caches.\n    const stateShape = [];\n    const viewShape = [];\n    /** Gives any current step. */ to[n + \"stepNow\"] = (_, s)=>s.stepNow;\n    /** Gives any shape of `state` and any merged `states` data-`texture`s. */ to[n + \"stateShape\"] = (_, { size: { shape: s, merge: m } })=>s ? (0, $50389a104b91a0fb$export$abee0037e1db715)(stateShape, ...s, ...m?.shape ?? s) : (0, $50389a104b91a0fb$export$abee0037e1db715)(stateShape);\n    /** Gives the shape of the `GL` viewport. */ to[n + \"viewShape\"] = ({ drawingBufferWidth: w, drawingBufferHeight: h })=>(0, $50389a104b91a0fb$export$dcfbb7940cfb3a48)(viewShape, w, h);\n    /**\n   * Gives all `states` merged in one `texture`, if using `merge`;\n   * otherwise gives `null`.\n   */ to[n + \"states\"] = (_, s)=>s.merge?.all?.texture ?? null;\n    /**\n   * Past steps, each some steps `ago`, from the current active step at `0`, as\n   * `[0,... stepsL-1-bound]`.\n   */ const addTextures = (ago)=>/**\n     * Hooks to pull a given `texture` by the active pass `state`; lets `GLSL`\n     * access the `array` of `texture`s by constant index (steps ago).\n     * Only returns a value if not using a `merge`d `texture`; otherwise `null`.\n     */ (0, $7c7160675eb3d972$export$2e2bcd8739ae039)((_, t)=>to[n + `states[${ago * texturesL + t}]`] = (_, { merge: m, stepNow: s = 0, bound: b = bound, textures: ts })=>m ? null : (0, $71c6ad154616c491$export$2e2bcd8739ae039)(s - b - ago, ts)?.[t]?.texture, textures);\n    /** Flatten all input `texture`s, as `uniform`s are kept in flat `array`s. */ for(let ago = 0, pl = stepsL - bound; ago < pl; ++ago)addTextures(ago);\n    return to;\n} /**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback getUniform\n * A `function` hook to update a `GL` `uniform` value for a render pass.\n *\n * **See**\n * - {@link toUniforms}\n * - {@link data.toData}\n * - {@link api.texture}\n *\n * **Returns**\n * A `GL` uniform to be bound via a `GL` API.\n *\n * @param {{\n *     drawingBufferWidth:number,\n *     drawingBufferHeight:number\n *   }} context General or global properties; with:\n *   - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *   - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` state); with:\n *   - `stepNow`: The current step of the `gpgpu` state.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n * @returns {number|number[]|texture|object}\n */ \n\n\n/**\n * The `gpgpu` update step.\n *\n * Connects inputs to the `GL` state and renders an update step.\n *\n * @module\n * @category JS\n *\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n */ \n\n/**\n * The `GLSL` preprocessor macros for working with the `gpgpu` state and maps.\n *\n * Each set of different macros will result in new shader compilations - for\n * optimal performance, the fewest macros possible should be created, one per\n * each given set of inputs, ideally; caches here can be used for efficiency.\n *\n * @module\n * @category JS\n *\n * @todo Redo examples, especially `macroTaps` and `macroPass`.\n * @todo Ensure the `output_N` in `macroOutput` can work with `WebGL2`; look at\n *   using `layout(location=attach_N) out data_N`, not `gl_FragData[attach_N]`.\n *   - [SO: Multiple output textures from the same program](https://stackoverflow.com/questions/51793336/multiple-output-textures-from-the-same-program)\n *   - [SO: GL FragData must be constant zero](https://stackoverflow.com/questions/46740817/gl-fragdata-must-be-constant-zero)\n *   - [SO: How are layout qualifiers better than getAttribLocation in WebGL2](https://stackoverflow.com/questions/50258822/how-are-layout-qualifiers-better-than-getattriblocation-in-webgl2)\n */ \n\nconst [{ length: $72d7b224298db0f8$var$start }, { length: $72d7b224298db0f8$var$end }] = \"[object {type}]\".split(\"{type}\");\nconst $72d7b224298db0f8$export$bf9fb029d174d554 = (x)=>toString.call(x).slice($72d7b224298db0f8$var$start, -$72d7b224298db0f8$var$end);\nvar $72d7b224298db0f8$export$2e2bcd8739ae039 = $72d7b224298db0f8$export$bf9fb029d174d554;\n\n\n\nconst $e773ca7c5de577c2$export$36a518e2013de1bd = \" \\\\\\n\";\nconst $e773ca7c5de577c2$var$lf = $e773ca7c5de577c2$export$36a518e2013de1bd;\nconst $e773ca7c5de577c2$export$4e46ac54fc82cf3b = \"rgba\";\nconst $e773ca7c5de577c2$export$497faa7f0daf9da = {};\n/** Gives cache keys from simple plain `object` inputs. */ const $e773ca7c5de577c2$var$id = JSON.stringify;\nconst $e773ca7c5de577c2$export$11949c6f5fba7dcd = {\n    /** The full set of macros. */ macroPass: \"\",\n    /** Each part of the set of macros. */ macroValues: \"values\",\n    macroOutput: \"output\",\n    macroSamples: \"samples\",\n    macroTaps: \"taps\"\n};\nfunction $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on = \"\", macros = state?.macros) {\n    if ((macros ?? true) === true) return null;\n    else if (!macros) return \"\";\n    const t = (0, $72d7b224298db0f8$export$bf9fb029d174d554)(macros);\n    return t === \"String\" ? macros : t === \"Function\" ? $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on, macros(state, key, on, macros)) : macros instanceof Object && key in macros ? $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on, macros[key]) : on ? $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key ? key + \"_\" + on : on, \"\", macros) : null;\n}\nconst $e773ca7c5de577c2$export$83d01c7b88bc16d5 = (type, name, a, qualify = \"\", init = type)=>`const int ${name}_l = ${a.length};` + (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, v, i)=>s + $e773ca7c5de577c2$var$lf + (qualify && qualify + \" \") + type + ` ${name}_${i} = ${init}(${v.join?.(\", \") ?? v});`, a, \"\");\nconst $e773ca7c5de577c2$export$45db4de6da38aa8d = (type, name, a, qualify = \"\", init = type)=>$e773ca7c5de577c2$export$83d01c7b88bc16d5(type, name, a, qualify, init) + \"\\n\\n\" + // @todo Would ideally use the concatenation macro, but can't in GLSL 1.\n    // `#define ${name}_i(i) ${name}_##i`;\n    `/**\\n` + ` * Index function \\`${name}_i\\` (e.g: \\`${name}_i(0)\\`) may be slow.\\n` + ` * Use name (e.g: \\`${name}_0\\`) if possible.\\n` + ` */\\n` + `#define ${name}_i(i) ${(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, v, i)=>i ? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`, a, \"\")}\\n`;\nconst $e773ca7c5de577c2$export$3df19e70a88cb8cd = (type, name, a, qualify = \"\", init = type)=>$e773ca7c5de577c2$export$83d01c7b88bc16d5(type, name, a, qualify, init) + $e773ca7c5de577c2$var$lf + (qualify && qualify + \" \") + type + ` ${name}[${name}_l];` + (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, _, i)=>s + $e773ca7c5de577c2$var$lf + name + `[${i}] = ${name}_${i};`, a, \"\") + \"\\n\" + `#define ${name}_i(i) ${name}[i]\\n`;\nconst $e773ca7c5de577c2$export$1c7039c93eddfba = (type, name, a, qualify = \"\", init = type)=>$e773ca7c5de577c2$export$83d01c7b88bc16d5(type, name, a, qualify, init) + $e773ca7c5de577c2$var$lf + (qualify && qualify + \" \") + type + ` ${name}[${name}_l] = ${init}[${name}_l](${(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, _, i)=>(s && s + \", \") + name + \"_\" + i, a, \"\")});\\n` + `#define ${name}_i(i) ${name}[i]\\n`;\nconst $e773ca7c5de577c2$export$c346962e7dd3191 = (type, name, a, qualify = \"\", glsl = 1, init)=>(glsl >= 3 ? $e773ca7c5de577c2$export$1c7039c93eddfba : qualify.trim() === \"const\" ? $e773ca7c5de577c2$export$45db4de6da38aa8d : $e773ca7c5de577c2$export$3df19e70a88cb8cd)(type, name, a, qualify, init);\nfunction $e773ca7c5de577c2$export$84186522bf5a7d4d(state, on) {\n    const key = $e773ca7c5de577c2$export$11949c6f5fba7dcd.macroValues;\n    let to = $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on);\n    if (to != null) return to;\n    const { maps: maps, steps: steps, bound: bound = (0, $a1c331d8a5ab855b$export$b029aceb5666f022), merge: merge, size: size, pre: n = (0, $a1c331d8a5ab855b$export$b4781c2237bde956), cache: cache = $e773ca7c5de577c2$export$497faa7f0daf9da } = state;\n    const { values: values, textures: textures, passes: { length: passesL }, alias: alias } = maps;\n    const stepsL = steps.length ?? steps;\n    const entries = size?.entries;\n    const split = !merge;\n    const c = cache && `macro@${key}@${n}|${bound}|${$e773ca7c5de577c2$var$id(values)}|${$e773ca7c5de577c2$var$id(textures)}|${stepsL}|${passesL}|${entries}|${split}|${$e773ca7c5de577c2$var$id(alias)}`;\n    if ((to = cache?.[c]) != null) return to;\n    const texturesL = textures.length;\n    const stepsPast = stepsL - bound;\n    to = (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, texture, t, _, i = 0)=>(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, v)=>{\n            const to = s + `#define ${n}texture_${v} ${t}\\n` + `#define ${n}channels_${v} ${$e773ca7c5de577c2$export$4e46ac54fc82cf3b.slice(i, i += values[v])}\\n\\n`;\n            if (!alias) return to;\n            const a = alias[v];\n            return to + `#define ${n}texture_${a} ${n}texture_${v}\\n` + `#define ${n}channels_${a} ${n}channels_${v}\\n\\n`;\n        }, texture, s), textures, \"\") + (entries || entries === 0 ? `#define ${n}entries ${entries}\\n` : \"\") + `#define ${n}textures ${texturesL}\\n` + `#define ${n}passes ${passesL}\\n` + `#define ${n}bound ${bound}\\n` + `#define ${n}steps ${stepsL}\\n` + `#define ${n}stepsPast ${stepsPast}\\n` + `#define ${n}${split ? `splits` : `merged`} ${texturesL * stepsPast}\\n\\n`;\n    return cache ? cache[c] = to : to;\n}\nfunction $e773ca7c5de577c2$export$49873e279ff642c0(state, on) {\n    const key = $e773ca7c5de577c2$export$11949c6f5fba7dcd.macroOutput;\n    let to = $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on);\n    if (to != null) return to;\n    const { passNow: p, maps: maps, pre: n = (0, $a1c331d8a5ab855b$export$b4781c2237bde956), cache: cache = $e773ca7c5de577c2$export$497faa7f0daf9da } = state;\n    const { values: values, textures: textures, passes: passes, alias: alias } = maps;\n    const pass = passes[p];\n    const c = cache && `macro@${key}@${n}|${p}|${$e773ca7c5de577c2$var$id(values)}|${$e773ca7c5de577c2$var$id(textures)}|${$e773ca7c5de577c2$var$id(passes)}|${$e773ca7c5de577c2$var$id(alias)}`;\n    to = cache?.[c] ?? `#define ${n}passNow ${p}\\n${(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, texture, bound, _, i = 0)=>(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, v)=>{\n            const to = s + \"\\n\" + `#define ${n}bound_${v} ${texture}\\n` + `#define ${n}attach_${v} ${bound}\\n` + `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${$e773ca7c5de577c2$export$4e46ac54fc82cf3b.slice(i, i += values[v])}\\n`;\n            if (!alias) return to;\n            const a = alias[v];\n            return to + \"\\n\" + `#define ${n}bound_${a} ${n}bound_${v}\\n` + `#define ${n}attach_${a} ${n}attach_${v}\\n` + `#define ${n}output_${a} ${n}output_${v}\\n`;\n        }, textures[texture], s), pass, \"\")}\\n`;\n    return cache ? cache[c] = to : to;\n}\nfunction $e773ca7c5de577c2$export$9cb6037fa2a40c2e(state, on) {\n    const key = $e773ca7c5de577c2$export$11949c6f5fba7dcd.macroSamples;\n    let to = $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on);\n    if (to != null) return to;\n    const { passNow: p = 0, maps: maps, steps: steps, bound: bound = (0, $a1c331d8a5ab855b$export$b029aceb5666f022), glsl: glsl, pre: n = (0, $a1c331d8a5ab855b$export$b4781c2237bde956), cache: cache = $e773ca7c5de577c2$export$497faa7f0daf9da } = state;\n    const { samples: samples, reads: reads, readsToValue: readsToValue, alias: alias } = maps;\n    const passSamples = samples?.[p];\n    const passReads = reads?.[p];\n    const passReadsToValue = readsToValue?.[p];\n    const stepsPast = alias ? (steps.length ?? steps) - bound : null;\n    const c = cache && `macro@${key}@${n}|${p}|${$e773ca7c5de577c2$var$id(passSamples)}|${$e773ca7c5de577c2$var$id(passReads)}|${$e773ca7c5de577c2$var$id(passReadsToValue)}|${$e773ca7c5de577c2$var$id(alias)}|${stepsPast}|${glsl}`;\n    to = cache?.[c] ?? (!passSamples ? \"\" : `#define ${n}useSamples${$e773ca7c5de577c2$var$lf + $e773ca7c5de577c2$export$c346962e7dd3191(\"ivec2\", n + \"samples\", passSamples, \"const\", glsl)}\\n`) + (!passReads ? \"\" : (0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, reads, v)=>{\n        const to = `${s}#define ${n}useReads_${v}${$e773ca7c5de577c2$var$lf + $e773ca7c5de577c2$export$c346962e7dd3191(\"int\", n + \"reads_\" + v, reads, \"const\", glsl)}\\n`;\n        if (!alias) return to;\n        const valueReadsToValue = passReadsToValue[v];\n        const va = alias[v];\n        const nra = `${n}reads_${va}`;\n        const nrv = `${n}reads_${v}`;\n        return to + `/**\\n` + ` * Alias reads, depends on index reads \\`${n}useReads_${v}\\`.\\n` + ` * If using both alias and index reads, only use this not both.\\n` + ` */\\n` + `#define ${n}useReads_${va}${$e773ca7c5de577c2$var$lf}${n}useReads_${v}${(0, $ff8552abc90720ca$export$2e2bcd8739ae039)((s, read, r)=>{\n            const ra = alias[valueReadsToValue[r]];\n            const n = passSamples[read][0];\n            const o = stepsPast - n - 1;\n            const to = `${nrv}_${r}`;\n            let d;\n            return s + $e773ca7c5de577c2$var$lf + (s.indexOf(d = `const int ${nra}_${ra}_new_${n}`) >= 0 ? \"\" : `/** Alias and step past, count from new to old. */${$e773ca7c5de577c2$var$lf + d} = ${to};${$e773ca7c5de577c2$var$lf}`) + (s.indexOf(d = `const int ${nra}_${ra}_old_${o}`) >= 0 ? \"\" : `/** Alias and step last, count from old to new. */${$e773ca7c5de577c2$var$lf + d} = ${to};${$e773ca7c5de577c2$var$lf}`) + (n || s.indexOf(d = `const int ${nra}_${ra}_new`) >= 0 ? \"\" : `/** Alias with implied newest step past. */${$e773ca7c5de577c2$var$lf + d} = ${to};${$e773ca7c5de577c2$var$lf}`) + (n || s.indexOf(d = `const int ${nra}_${ra}`) >= 0 ? \"\" : `/** Alias with implied newest. */${$e773ca7c5de577c2$var$lf + d} = ${to};${$e773ca7c5de577c2$var$lf}`) + (o || s.indexOf(d = `const int ${nra}_${ra}_old`) >= 0 ? \"\" : `/** Alias with implied oldest step last. */${$e773ca7c5de577c2$var$lf + d} = ${to};${$e773ca7c5de577c2$var$lf}`);\n        }, reads, reads.length ? $e773ca7c5de577c2$var$lf : \"\")}${$e773ca7c5de577c2$var$lf}const int ${nra}_l = ${nrv}_l;${$e773ca7c5de577c2$var$lf}int ${nra}_i(int i) { return ${nrv}_i(i); }\\n\\n`;\n    }, passReads, \"\"));\n    return cache ? cache[c] = to : to;\n}\nfunction $e773ca7c5de577c2$export$562ddd36066ad650(state, on) {\n    const key = $e773ca7c5de577c2$export$11949c6f5fba7dcd.macroTaps;\n    let to = $e773ca7c5de577c2$export$feaf5ffc92c2af94(state, key, on);\n    if (to != null) return to;\n    const { passNow: p = 0, maps: maps, merge: merge, glsl: glsl, pre: n = (0, $a1c331d8a5ab855b$export$b4781c2237bde956), cache: cache = $e773ca7c5de577c2$export$497faa7f0daf9da } = state;\n    const passSamples = maps.samples?.[p];\n    const split = !merge;\n    const c = cache && `macro@${key}@${n}|${p}|${$e773ca7c5de577c2$var$id(passSamples)}|${split}|${glsl}`;\n    if ((to = cache?.[c]) != null) return to;\n    const glsl3 = glsl >= 3;\n    /** Which texture sampling function is available. */ const texture = \"texture\" + (glsl3 ? \"\" : \"2D\");\n    /** Short and common names for functions and parameters. */ const f = n + \"tapState\";\n    const def = \"#define \" + f;\n    /** Common parameters, passed as `(..., stepBy, textureBy)` */ const bs = \"stepBy\";\n    const bt = \"textureBy\";\n    const by = `${bs}, ${bt}`;\n    /** Aliases default names for brevity, main functions offer more control. */ const aka = `#define ${f}(uv)` + $e773ca7c5de577c2$var$lf + f;\n    const akaBy = `#define ${f}By(uv, ${by})` + $e773ca7c5de577c2$var$lf + f;\n    /** The current `sample`, as `[step, texture]`. */ const st = n + \"samples_\";\n    /** Prefix for private temporary variables. */ const t = \"_\" + n;\n    /** A temporary `array` to pass to `getGLSLList`. */ const tapsSamples = cache[key + \":tapsSamples\"] ??= [];\n    const tapsL = tapsSamples.length = passSamples?.length ?? 0;\n    /** The main `texture`-sampling logic. */ to = !tapsL ? \"\" : (split ? /** Split un-merged `texture`s accessed by constant index. */ `/**\\n` + ` * States in a \\`sampler2D[]\\`; looks up 1D index and 2D \\`uv\\`.\\n` + ` * Past steps go later in the list.\\n` + ` * States may also be sampled by shifted step/texture.\\n` + ` * Pass constant array index values; \\`textures, ${by}\\`.\\n` + ` * Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n` + ` */\\n` + def + `sBy(uv, states, textures, ${by})` + $e773ca7c5de577c2$var$lf + // Compute before the loop for lighter work.\n    `const int ${t}tl = int(textures);` + $e773ca7c5de577c2$var$lf + `vec2 ${t}uv = vec2(uv);` + $e773ca7c5de577c2$var$lf + // Sample into the `data` output list.\n    $e773ca7c5de577c2$export$c346962e7dd3191(\"vec4\", n + \"data\", (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((_, i)=>texture + \"(states[\" + // Offset step.\n        `((int(${st + i}.s)+int(${bs}))*${t}tl)+` + // Offset `texture`.\n        `int(${st + i}.t)+int(${bt})` + `], ${t}uv)`, passSamples, tapsSamples), \"\", glsl) + \"\\n\" + `/** Sample the states as given without shifting by any offsets. */\\n` + def + `s(uv, states, textures)` + $e773ca7c5de577c2$var$lf + f + `sBy(uv, states, textures, 0, 0)\\n\\n` + `/** Preferred aliases: index suits states array constant access. */\\n` + aka + `s(uv, ${n}states, ${n}textures)\\n` + akaBy + `sBy(uv, ${n}states, ${n}textures, ${by})\\n` : /** Merged 2D `texture`. */ `/**\\n` + ` * States merged in a \\`sampler2D\\`.\\n` + ` * Scales the 2D \\`uv\\` lookup over \\`[textures, steps]\\`.\\n` + ` * Step from now into the past going upwards in the texture.\\n` + ` * States may also be sampled by shifted step/texture.\\n` + ` * Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n` + ` */\\n` + def + `2By(uv, states, stepNow, steps, textures, ${by})` + $e773ca7c5de577c2$var$lf + // Compute before the loop for lighter work.\n    `vec2 ${t}l = vec2(textures, steps);` + $e773ca7c5de577c2$var$lf + `vec2 ${t}uv = vec2(uv)/${t}l;` + $e773ca7c5de577c2$var$lf + // Steps advance in reverse, top-to-bottom.\n    `vec2 ${t}s = vec2(1, -1)/${t}l;` + $e773ca7c5de577c2$var$lf + // Offset `texture`, step.\n    // Each step stored in `texture` top downward at `-stepNow`.\n    // Most recent step to look up is at `-stepNow+1`.\n    `vec2 ${t}i = (vec2(${by}).ts+vec2(0, 1))-vec2(0, stepNow);` + $e773ca7c5de577c2$var$lf + // Sample into the `data` output list.\n    $e773ca7c5de577c2$export$c346962e7dd3191(\"vec4\", n + \"data\", // Would repeat wrap; but `WebGL1` needs power-of-2.\n    (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((_, i)=>texture + `(states, ` + // Offset `texture`, step.\n        `fract(${t}uv+fract((vec2(${st + i}).ts+${t}i)*${t}s)))`, passSamples, tapsSamples), \"\", glsl) + \"\\n\" + `/** Sample the states as given without shifting by any offsets. */\\n` + def + `2(uv, states, stepNow, steps, textures)` + $e773ca7c5de577c2$var$lf + f + `2By(uv, states, stepNow, steps, textures, 0, 0)\\n\\n` + (!glsl3 ? `/** Preferred aliases: 2D suits merged texture in \\`GLSL\\` < 1. */\\n` + aka + `2(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n` + akaBy + `2By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n` : /**\n         * Merged 3D `texture` types, supported from `GLSL3`.\n         * @todo Check and finish this.\n         */ `/**\\n` + ` * States merged to \\`sampler3D\\` or \\`sampler2DArray\\`.\\n` + ` * 2D \\`uv\\` to 3D.\\n` + ` * Scales \\`x\\` over \\`textures\\`, \\`z\\` over \\`steps\\` as:\\n` + ` * - \\`sampler3D\\`: the number of steps; depth, \\`[0, 1]\\`.\\n` + ` * - \\`sampler2DArray\\`: \\`1\\` or less; layer, \\`[0, steps-1]\\`.\\n` + ` * States may also be sampled by shifted step/texture.\\n` + ` * Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n` + ` */\\n` + def + `3By(uv, states, stepNow, steps, textures, ${by})` + $e773ca7c5de577c2$var$lf + /** @see `...2By()` above. */ // Compute before the loop for lighter work.\n    `vec2 ${t}l = vec2(textures, steps);` + $e773ca7c5de577c2$var$lf + `vec2 ${t}uv = (vec2(uv)+vec2(textureBy, 0))/${t}l;` + $e773ca7c5de577c2$var$lf + // Offset `texture`.\n    `float ${t}sx = 1.0/${t}l.x;` + $e773ca7c5de577c2$var$lf + // Offset step.\n    `float ${t}s = float(stepBy)-float(stepNow);` + $e773ca7c5de577c2$var$lf + `float ${t}sz = -1.0/${t}l;` + $e773ca7c5de577c2$var$lf + // Sample into the `data` output list.\n    $e773ca7c5de577c2$export$c346962e7dd3191(\"vec4\", n + \"data\", // Would repeat wrap; but `sampler2DArray` layer can't.\n    (0, $f06a7242e8e3a5ae$export$2e2bcd8739ae039)((_, i)=>texture + \"(states, fract(vec3(\" + // Offset `texture`.\n        `${t}uv.x+(float(${st + i}.t)*${t}sx), ${t}uv.y, ` + // Offset step: `sampler3D` depth, `[0, 1]`;\n        // `sampler2DArray` layer, `[0, steps-1]`.\n        `(float(${st + i}.s)+${t}s)*${t}sz)))`, passSamples, tapsSamples), \"\", glsl) + \"\\n\" + `/** Sample the states as given without shifting by any offsets. */\\n` + def + `3(uv, states, stepNow, steps, textures)` + $e773ca7c5de577c2$var$lf + f + `3(uv, states, stepNow, steps, textures)\\n\\n` + `/** Preferred aliases: 3D suits merged texture in \\`GLSL\\` 3+. */\\n` + aka + `3(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n` + akaBy + `3By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`)) + \"\\n\";\n    return cache ? cache[c] = to : to;\n}\nconst $e773ca7c5de577c2$export$d38b14fb9031108e = (state, on)=>$e773ca7c5de577c2$export$feaf5ffc92c2af94(state, $e773ca7c5de577c2$export$11949c6f5fba7dcd.macroPass, on) ?? $e773ca7c5de577c2$export$84186522bf5a7d4d(state, on) + $e773ca7c5de577c2$export$49873e279ff642c0(state, on) + $e773ca7c5de577c2$export$9cb6037fa2a40c2e(state, on) + $e773ca7c5de577c2$export$562ddd36066ad650(state, on);\nvar $e773ca7c5de577c2$export$2e2bcd8739ae039 = $e773ca7c5de577c2$export$d38b14fb9031108e;\n\n\n\nconst { call: $d925fdf34359f8ed$var$call } = Function;\nconst $d925fdf34359f8ed$export$d86e3abd7686c23f = ({ passes: ps, stepNow: s, passNow: p })=>(0, $71c6ad154616c491$export$2e2bcd8739ae039)(s, ps)?.[p];\nconst $d925fdf34359f8ed$export$95b2c9ea2de43ebb = (shader, context, state)=>shader.call === $d925fdf34359f8ed$var$call ? shader(context, state) : shader;\nfunction $d925fdf34359f8ed$export$12661000d11a17d2(state) {\n    const { merge: merge, stepNow: s, size: size, copyImage: ci = state.copyImage = (0, $a1c331d8a5ab855b$export$72e520e6a70b780c)() } = state;\n    const { color: cs, map: pass } = $d925fdf34359f8ed$export$d86e3abd7686c23f(state);\n    const { all: { texture: t }, next: next } = merge;\n    const sub = t?.subimage;\n    const { color: color } = next;\n    let f = next.framebuffer;\n    /** Handle `object`s or `regl`-like extended `function`s. */ f?.call !== Function.call && (f = f?.call);\n    // Silent exit if there's not enough info ready now to perform the update.\n    if (!(sub && f && cs && pass && (s || s === 0))) return t;\n    const { steps: sl, width: w, height: h } = size;\n    /** Start at the top of the `texture`, move down row-per-step and wrap. */ const y = (0, $71c6ad154616c491$export$2e2bcd8739ae039)(s, sl) * h;\n    /**\n   * Reusable `framebuffer` binds and copies each of the pass `texture`s along\n   * the merged `texture`.\n   */ (0, $7c7160675eb3d972$export$2e2bcd8739ae039)((c, i)=>(next.color = c) && f.call(f, next).use.call(f, ()=>sub.call(t, ci, pass[i] * w, y)), cs);\n    /** Reset any changed properties. */ next.color = color;\n    f.call(f, next);\n    return t;\n}\nfunction $d925fdf34359f8ed$export$d89197afac86b993(api, state = {}, to = state) {\n    /** Handle `object`s or `regl`-like extended `function`s, for `command`. */ const { buffer: buffer, clear: clear, command: command = api } = api;\n    const { merge: merge, pipeline: pipeline, verts: verts, frag: frag, frags: frags, uniforms: uniforms, attributes: attributes, maps: maps, // Update any default vertex `shader` to use the given `pre`.\n    pre: n = (0, $a1c331d8a5ab855b$export$b4781c2237bde956), vert: vert = (0, $a1c331d8a5ab855b$export$dc207adda608f979).replaceAll((0, $a1c331d8a5ab855b$export$b4781c2237bde956), n || \"\"), count: // Any vertex `count`, and `positions` to be passed to `buffer`.\n    count = (0, $a1c331d8a5ab855b$export$832d88422d279bbc), positions: positions = (0, $a1c331d8a5ab855b$export$cfdc3a7c4cb854c6)(), clearPass: clearPass = null } = state;\n    // Ensure any properties changed are included.\n    to.pre = n;\n    to.vert = vert;\n    to.count = count;\n    to.positions = buffer(positions);\n    to.clearPass = clearPass;\n    // May pre-process and keep the `shader`s for all passes in advance.\n    if (verts || frags) {\n        // Keep the current pass.\n        const { passNow: passNow } = state;\n        verts && (to.verts = verts);\n        frags && (to.frags = frags);\n        (0, $7c7160675eb3d972$export$2e2bcd8739ae039)((pass, p)=>{\n            // Create `macro`s for this pass in advance.\n            state.passNow = p;\n            // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n            verts && (verts[p] ??= (0, $e773ca7c5de577c2$export$d38b14fb9031108e)(state, \"vert\") + $d925fdf34359f8ed$export$95b2c9ea2de43ebb(vert, null, state));\n            // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n            frags && (frags[p] ??= (0, $e773ca7c5de577c2$export$d38b14fb9031108e)(state, \"frag\") + $d925fdf34359f8ed$export$95b2c9ea2de43ebb(frag, null, state));\n        }, maps.passes);\n        // Set the pass back to what it was.\n        state.passNow = passNow;\n    }\n    /** A `command` to render `pass` updates via a `GL` `pipeline` description. */ to.pass = command(to.pipeline = {\n        // Uses the full-screen vertex `shader` state by default.\n        vert (c, s) {\n            const { passNow: p, step: { vert: v = vert, verts: vs = verts } } = state;\n            // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n            return vs?.[p] ?? (0, $e773ca7c5de577c2$export$d38b14fb9031108e)(s, \"vert\") + $d925fdf34359f8ed$export$95b2c9ea2de43ebb(v, c, s);\n        },\n        frag (c, s) {\n            const { passNow: p, step: { frag: f = frag, frags: fs = frags } } = state;\n            // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n            return fs?.[p] ?? (0, $e773ca7c5de577c2$export$d38b14fb9031108e)(s, \"frag\") + $d925fdf34359f8ed$export$95b2c9ea2de43ebb(f, c, s);\n        },\n        /** Need an active `pass` with `framebuffer`, or may draw to the screen. */ framebuffer: (_, s)=>$d925fdf34359f8ed$export$d86e3abd7686c23f(s)?.framebuffer,\n        count: count,\n        uniforms: uniforms,\n        attributes: {\n            [n + \"position\"]: (_, s)=>s.positions,\n            ...attributes\n        },\n        depth: {\n            enable: false\n        },\n        blend: {\n            enable: false\n        },\n        /** Any `pipeline` properties shallow-override others of the same name. */ ...pipeline\n    });\n    /** Any merged `texture`'s update, set up if not already given. */ merge && ((to.merge = merge).update ??= $d925fdf34359f8ed$export$12661000d11a17d2);\n    /** Guard for number overflow; set to `0` to ignore or handle in `GLSL`. */ to.stepBy = (state = to, by = 1)=>{\n        const { stepNow: stepNow = 0, stepMax: stepMax = (0, $a1c331d8a5ab855b$export$2902d6d00b7c2bce) } = state;\n        state.stepNow = (0, $71c6ad154616c491$export$2e2bcd8739ae039)(stepNow + by, stepMax || Infinity);\n        return state;\n    };\n    /** Executes the next step and all its passes. */ to.step = (state = to)=>{\n        const stepState = state.onStep?.(state) ?? state;\n        const { steps: steps, merge: merge, pass: pass, onPass: onPass, stepBy: stepBy, clearPass: clearPass = stepState.clearPass = (0, $a1c331d8a5ab855b$export$2fcc13103217f9a3)() } = stepState;\n        const mergeUpdate = merge?.update;\n        stepBy(stepState);\n        (0, $7c7160675eb3d972$export$2e2bcd8739ae039)((p, i)=>{\n            stepState.passNow = i;\n            const passState = onPass?.(stepState, p) ?? stepState;\n            /** Only call `clear` if specified, can just use blending otherwise. */ clearPass && (clearPass.framebuffer = $d925fdf34359f8ed$export$d86e3abd7686c23f(passState)?.framebuffer) && clear(clearPass);\n            pass(passState);\n            // Update any merged `texture` upon each pass.\n            mergeUpdate?.(passState);\n        }, stepState.maps.passes);\n        delete clearPass?.framebuffer;\n        return stepState;\n    };\n    return to;\n}\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onStep\n * Callback upon each step.\n *\n * **See**\n * - {@link toStep}\n * - {@link data.toData}\n * - {@link state.framebuffer}\n *\n * **Returns**\n * - A `stepState` object to use for each of the step's next passes; or\n *   `null`ish to use the given `props`.\n *\n * @param {object} [props] The `props` passed to `run`.\n * @param {framebuffer[]} step The `framebuffer`s for `props.stepNow` from\n *   `props.steps`, where the next state step will be drawn. See `toData`.\n *\n * @returns {object}\n */ /**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onPass\n * Callback upon each pass.\n *\n * **See**\n * - {@link toStep}\n * - {@link maps.mapGroups}\n *\n * **Returns**\n * - A `passState` object to use for the render `command` call; or `null`ish to\n *   use the given `stepState`.\n *\n * @param {object} [stepState] The `props` passed to `run` via any `onStep`.\n * @param {number[]} pass The maps for the next pass. See `mapGroups`.\n *\n * @returns {object}\n */ /** A wrapper around `updateMerge`, handy for testing. */ function $d925fdf34359f8ed$var$updateMergeTest(state, update = $d925fdf34359f8ed$export$12661000d11a17d2, after = 2) {\n    const { color: color, map: pass } = $d925fdf34359f8ed$export$d86e3abd7686c23f(state);\n    const { merge: { all: all, next: next }, stepNow: s, passNow: p, size: size, maps: maps } = state;\n    const { channels: channels } = all;\n    const { steps: sl, shape: [w, h], merge: { shape: [wl, hl] } } = size;\n    const tl = maps.textures.length;\n    const y = s % sl * h;\n    const lc = y * tl * w;\n    const to = update(state);\n    let f = next?.framebuffer;\n    /** Handle `object`s or `regl`-like extended `function`s. */ f.call !== $d925fdf34359f8ed$var$call && (f = f?.call);\n    console.warn(s, p, pass, \":\");\n    console.warn(\"- l\", 0, \"r\", tl * w, \"w\", w, \"wl\", wl);\n    console.warn(\"- t\", y, \"b\", y + h, \"h\", h, \"hl\", hl);\n    console.warn(\"- c\", channels, \"lc\", lc * channels, \"rc\", (lc + w * h) * channels, \"sc\", w * h * channels, \"slc\", wl * hl * channels);\n    f.call(f, {\n        color: to\n    }).use.call(f, ()=>console.warn(Array.prototype.reduce.call(regl.read(), (o, v, i)=>o + (i ? \",\t\" : \"\") + (!i ? \"\" : i % (tl * w * h * channels) === 0 ? `\\n${\"=\".repeat(100)}step${\"=\".repeat(100)}\\n` : i % (tl * w * channels) === 0 ? \"\\n\" : i % (w * channels) === 0 ? \" || \t\" : i % channels === 0 ? \" / \t\" : \"\") + (i * 1e-3).toFixed(3).slice(2) + \": \" + (v ? v.toFixed(2) : \"___\"), \"\\n\")));\n    if (s && after && s % (sl * after) === 0) debugger;\n    return to;\n}\nvar $d925fdf34359f8ed$export$2e2bcd8739ae039 = $d925fdf34359f8ed$export$d89197afac86b993;\n\n\nconst { isFinite: $01fa3bcf865876b0$var$isFinite } = Number;\nconst $01fa3bcf865876b0$export$658d3265ca8f5f4e = (version)=>$01fa3bcf865876b0$var$isFinite(version) ? version : parseFloat(version?.match?.((0, $a1c331d8a5ab855b$export$5544d416ac8224f1))?.[0] ?? version, 10);\nfunction $01fa3bcf865876b0$export$a8489f67fe30ef76(api, state = {}, to = state) {\n    const { maxDrawbuffers: maxDrawbuffers, glsl: apiGLSL } = api.limits ?? api;\n    const { maps: maps = {}, glsl: glsl = apiGLSL } = state;\n    const { buffersMax: buffersMax } = maps;\n    /** The parsed `GLSL` version. */ to.glsl = $01fa3bcf865876b0$export$658d3265ca8f5f4e(glsl);\n    /** Any `maps.buffersMax` supersedes any `maxDrawbuffers` from the `api`. */ maps.buffersMax ??= maxDrawbuffers;\n    state.maps = (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)(maps, to.maps ??= {});\n    (0, $422c8e0d3f2b22ec$export$24a6b176bdc41ce5)(api, state, to);\n    (0, $fec04eaf51736497$export$1aad3af825e3305b)(state, to.uniforms ??= {});\n    (0, $d925fdf34359f8ed$export$d89197afac86b993)(api, state, to);\n    return to;\n}\nvar $01fa3bcf865876b0$export$2e2bcd8739ae039 = $01fa3bcf865876b0$export$a8489f67fe30ef76;\n\n\n\n\n\n/**\n * @todo Move most properties up to the `to` level, it's not very relevant from\n *   outside which step of the internal MPM process they belong to.\n */ \n\n\n\n\nconst $f233f4aac627add4$export$be3f796aed065412 = {\n    diff: \"-\",\n    dt: \"-\",\n    \"\\u23F3\": \"-\",\n    pause: 0,\n    \"\\u23F8\": 0,\n    add: \"+\",\n    \"\\u23ED\": \"+\"\n};\nconst $f233f4aac627add4$export$7548f4bc1b09ff22 = $f233f4aac627add4$export$be3f796aed065412.diff;\nconst $f233f4aac627add4$export$85b884786400d38f = 0;\nconst $f233f4aac627add4$export$eb8a9b7a1ebec59a = {\n    [$f233f4aac627add4$export$be3f796aed065412.diff]: Date.now,\n    [$f233f4aac627add4$export$be3f796aed065412.add]: 1000 / 60\n};\nfunction $f233f4aac627add4$export$9dc4ecf953986f04(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = $f233f4aac627add4$export$85b884786400d38f, step: step = $f233f4aac627add4$export$7548f4bc1b09ff22, now: n } = state;\n    var _step;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (_step = $f233f4aac627add4$export$be3f796aed065412[step]) !== null && _step !== void 0 ? _step : step;\n    const diff = s === $f233f4aac627add4$export$be3f796aed065412.diff;\n    var ref, ref1;\n    const t = (ref1 = (ref = now !== null && now !== void 0 ? now : n) !== null && ref !== void 0 ? ref : $f233f4aac627add4$export$eb8a9b7a1ebec59a[s]) !== null && ref1 !== void 0 ? ref1 : s;\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = !s ? t0 : (diff ? 0 : t0) + (isNaN(t) ? t() : t);\n    const dt = t1 - t0;\n    // If only returning a value, return the relevant calculated unknown.\n    if (!out) return diff ? dt : t1;\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n    return out;\n}\nvar $f233f4aac627add4$export$2e2bcd8739ae039 = $f233f4aac627add4$export$9dc4ecf953986f04;\n\n\nconst $70c54f136464dd78$export$7d15b64cf5a3a4c4 = (x, min, max)=>x < min ? min : x > max ? max : x;\nconst $70c54f136464dd78$export$ed542a978b878ee8 = (x)=>x > 0 ? x : 0;\nconst $70c54f136464dd78$export$5c5ee632c52bc4a2 = (x)=>x < 0 ? 0 : x > 1 ? 1 : x;\nconst $70c54f136464dd78$export$2cacbc8823b89e46 = (x)=>x < -1 ? -1 : x > 1 ? 1 : x;\nconst $70c54f136464dd78$export$b45a0c02a3a6bd55 = (x)=>x < 0 ? 0 : x > 0.5 ? 0.5 : x;\nconst $70c54f136464dd78$export$6fb785c609d82593 = (x, y)=>x < y ? [\n        x,\n        y\n    ] : [\n        y,\n        x\n    ];\nconst $70c54f136464dd78$export$4997ffc0176396a6 = (x, min, max)=>{\n    if (min === max) return min;\n    if (x > max) {\n        const d = max - min;\n        x -= d;\n        if (x > max) x -= d * ((x - min) / d | 0);\n    } else if (x < min) {\n        const d = max - min;\n        x += d;\n        if (x < min) x += d * ((min - x) / d + 1 | 0);\n    }\n    return x;\n};\nconst $70c54f136464dd78$export$a7a8c8bedec7ce92 = (x, min, max)=>x < min ? x - min + max : x > max ? x - max + min : x;\nconst $70c54f136464dd78$export$69033939f8eff985 = (x)=>x < 0 ? x + 1 : x > 1 ? x - 1 : x;\nconst $70c54f136464dd78$export$3b9374f2e8d1b471 = (x)=>x < -1 ? x + 2 : x > 1 ? x - 2 : x;\nconst $70c54f136464dd78$export$412b6e2a7fbdce18 = (a, b)=>a <= b ? 0 : 1;\nconst $70c54f136464dd78$export$5c7e4265f4166803 = (a, b, c)=>a <= b ? a <= c ? 0 : 2 : b <= c ? 1 : 2;\nconst $70c54f136464dd78$export$abbc992e2f7a03ed = (a, b, c, d)=>a <= b ? a <= c ? a <= d ? 0 : 3 : c <= d ? 2 : 3 : b <= c ? b <= d ? 1 : 3 : c <= d ? 2 : 3;\nconst $70c54f136464dd78$export$2e1916403c690d8e = (a, b)=>a >= b ? 0 : 1;\nconst $70c54f136464dd78$export$530accaa463743fc = (a, b, c)=>a >= b ? a >= c ? 0 : 2 : b >= c ? 1 : 2;\nconst $70c54f136464dd78$export$997ba4008db6478c = (a, b, c, d)=>a >= b ? a >= c ? a >= d ? 0 : 3 : c >= d ? 2 : 3 : b >= c ? b >= d ? 1 : 3 : c >= d ? 2 : 3;\nconst $70c54f136464dd78$export$f77ef1d37ede6ae4 = (a, b)=>a !== 0 ? b !== 0 ? Math.min(a, b) : a : b;\nconst $70c54f136464dd78$export$f930aa2517ecab05 = (a, b, c)=>$70c54f136464dd78$export$f77ef1d37ede6ae4($70c54f136464dd78$export$f77ef1d37ede6ae4(a, b), c);\nconst $70c54f136464dd78$export$c64430f6ae3a9584 = (a, b, k)=>$70c54f136464dd78$export$ae3040c47ea664a9(a, b, -k);\nconst $70c54f136464dd78$export$ae3040c47ea664a9 = (a, b, k)=>{\n    const ea = Math.exp(a * k);\n    const eb = Math.exp(b * k);\n    return (a * ea + b * eb) / (ea + eb);\n};\nconst $70c54f136464dd78$export$467571aff7e617ce = (x, min, max, k)=>$70c54f136464dd78$export$c64430f6ae3a9584($70c54f136464dd78$export$ae3040c47ea664a9(x, min, k), max, k);\nconst $70c54f136464dd78$export$1f6feacb0939c1e9 = (a, b)=>Math.abs(a) < Math.abs(b) ? a : b;\nconst $70c54f136464dd78$export$bb8a7d60274b5fc6 = (a, b)=>Math.abs(a) > Math.abs(b) ? a : b;\nconst $70c54f136464dd78$export$f6826ccc4238a19 = (e, x)=>x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;\nconst $70c54f136464dd78$export$3d9f3a2fc40f5212 = (x)=>(x = Math.abs(x) % 2) > 1 ? 2 - x : x;\nconst $70c54f136464dd78$export$ddf89a9c5af38f94 = (x, min, max)=>x >= min && x <= max;\nconst $70c54f136464dd78$export$cc91a22e8d440ab2 = (x, min, max)=>x > min && x < max;\n\n\n\n\n\nconst [$1c618fc32dcd31f6$export$37b75d0026f96b8d, $1c618fc32dcd31f6$export$dc78d1181d20ae9d, $1c618fc32dcd31f6$export$3566317347873a0b, $1c618fc32dcd31f6$export$49c94a8647bf28c0] = (0, $a901e92356d753ce$export$24ecd06eea36a882)(\"+\");\n\n\nconst $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 = Math.PI;\nconst $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58 = $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 * 2;\nconst $66b2efd1b0df8b3b$export$f504979d7e0a75c7 = $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 / 2;\nconst $66b2efd1b0df8b3b$export$b1eb83e43ef0f9f8 = $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 / 3;\nconst $66b2efd1b0df8b3b$export$cfa25d10e00ab635 = $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 / 4;\nconst $66b2efd1b0df8b3b$export$4b53cc5148232136 = $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 / 6;\nconst $66b2efd1b0df8b3b$export$588dca789ffa0fd0 = 1 / $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3;\nconst $66b2efd1b0df8b3b$export$3a7bf289cac70393 = 1 / $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58;\nconst $66b2efd1b0df8b3b$export$24b096bfbaf849b7 = 1 / $66b2efd1b0df8b3b$export$f504979d7e0a75c7;\nconst $66b2efd1b0df8b3b$export$460c4029b1a54a2e = $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3 / 180;\nconst $66b2efd1b0df8b3b$export$914076c8150813e5 = 180 / $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3;\nconst $66b2efd1b0df8b3b$export$ed904dc4011d96f7 = (1 + Math.sqrt(5)) / 2;\nconst $66b2efd1b0df8b3b$export$3681641e15b6e2c3 = Math.SQRT2;\nconst $66b2efd1b0df8b3b$export$1b2407b91ae96221 = Math.sqrt(3);\nconst $66b2efd1b0df8b3b$export$2bfcf97b5c0e010 = $66b2efd1b0df8b3b$export$3681641e15b6e2c3 / 2;\nconst $66b2efd1b0df8b3b$export$d98365b4d5f896cf = $66b2efd1b0df8b3b$export$1b2407b91ae96221 / 2;\nconst $66b2efd1b0df8b3b$export$f76cf7896cad0d31 = 1 / 3;\nconst $66b2efd1b0df8b3b$export$2ff8b3422c5a9edf = 2 / 3;\nconst $66b2efd1b0df8b3b$export$d7977f56a0faa834 = 1 / 6;\nlet $66b2efd1b0df8b3b$export$56469a43a57ad8b6 = 1e-6;\n\n\nconst $e5bff41ea21c3f60$export$7d5e3328550ce0cd = (theta, n = 1)=>[\n        Math.sin(theta) * n,\n        Math.cos(theta) * n\n    ];\nconst $e5bff41ea21c3f60$export$5dceb76539a08116 = (theta, n = 1)=>[\n        Math.cos(theta) * n,\n        Math.sin(theta) * n\n    ];\nconst $e5bff41ea21c3f60$export$8e3badfd6976e5c = (theta)=>(theta %= (0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58), theta < 0 ? (0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58) + theta : theta);\nconst $e5bff41ea21c3f60$export$bc9a8c093c36a624 = (theta)=>(theta = Math.abs(theta), theta > (0, $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3) ? (0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58) - theta : theta);\nconst $e5bff41ea21c3f60$export$28d974ff8f7517ed = (a, b)=>$e5bff41ea21c3f60$export$bc9a8c093c36a624($e5bff41ea21c3f60$export$8e3badfd6976e5c(b % (0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58) - a % (0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58)));\nconst $e5bff41ea21c3f60$export$64813598e5fb2450 = (y, x)=>$e5bff41ea21c3f60$export$8e3badfd6976e5c(Math.atan2(y, x));\nconst $e5bff41ea21c3f60$export$2332ba17bcdd284d = (theta)=>$e5bff41ea21c3f60$export$8e3badfd6976e5c(theta) * (0, $66b2efd1b0df8b3b$export$24b096bfbaf849b7) | 0;\nconst $e5bff41ea21c3f60$export$61ddd819c68acdd = (theta)=>theta * (0, $66b2efd1b0df8b3b$export$914076c8150813e5);\nconst $e5bff41ea21c3f60$export$29e4e862bebba87f = (theta)=>theta * (0, $66b2efd1b0df8b3b$export$460c4029b1a54a2e);\nconst $e5bff41ea21c3f60$export$a830b5ed334924be = (theta)=>1 / Math.sin(theta);\nconst $e5bff41ea21c3f60$export$e17a63917e2ebf0f = (theta)=>1 / Math.cos(theta);\nconst $e5bff41ea21c3f60$export$ef569ec50496610c = (theta)=>1 / Math.tan(theta);\nconst $e5bff41ea21c3f60$export$ebcbd32ce8d4cff = (a, b, gamma)=>Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));\nconst $e5bff41ea21c3f60$export$c0a907f067762f6e = (x)=>{\n    const x2 = x * x;\n    return 1 + x2 * (-4 + 2 * x2);\n};\nconst $e5bff41ea21c3f60$var$__fastCos = (x)=>{\n    const x2 = x * x;\n    return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);\n};\nconst $e5bff41ea21c3f60$export$3c8033b41bb9b535 = (theta)=>{\n    theta %= (0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58);\n    theta < 0 && (theta = -theta);\n    switch(theta * (0, $66b2efd1b0df8b3b$export$24b096bfbaf849b7) | 0){\n        case 0:\n            return $e5bff41ea21c3f60$var$__fastCos(theta);\n        case 1:\n            return -$e5bff41ea21c3f60$var$__fastCos((0, $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3) - theta);\n        case 2:\n            return -$e5bff41ea21c3f60$var$__fastCos(theta - (0, $66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3));\n        default:\n            return $e5bff41ea21c3f60$var$__fastCos((0, $66b2efd1b0df8b3b$export$ad5b0b9ab7d48f58) - theta);\n    }\n};\nconst $e5bff41ea21c3f60$export$5a59657e318cc2cf = (theta)=>$e5bff41ea21c3f60$export$3c8033b41bb9b535((0, $66b2efd1b0df8b3b$export$f504979d7e0a75c7) - theta);\nconst $e5bff41ea21c3f60$export$8019a7ebe7afe6d9 = (deg2, min, sec2)=>deg2 + min / 60 + sec2 / 3600;\nconst $e5bff41ea21c3f60$export$6804273a91971333 = (theta)=>{\n    const sign = Math.sign(theta);\n    theta = Math.abs(theta);\n    const deg2 = Math.trunc(theta);\n    theta = (theta - deg2) * 60;\n    const min = Math.trunc(theta);\n    return [\n        deg2 * sign,\n        min,\n        (theta - min) * 60\n    ];\n};\n\n\nconst $1c9d5dc3120ae583$export$c915e14294a7d06f = (x, fn)=>x != null && typeof x[fn] === \"function\";\n\n\nconst $268e552d160966af$export$1e2f57719e155213 = (x)=>x != null && typeof x !== \"function\" && x.length !== void 0;\n\n\nconst $22b149dc5a64b464$export$7e4aa119212bc614 = (x)=>typeof x === \"number\";\n\n\nconst $42fc9d2c5cb4264a$export$844ec244b1367d54 = (x)=>typeof x === \"string\";\n\n\nconst $a830b48f05b68abc$export$651a6eb01ea522f3 = (prefix, suffix = (msg)=>msg !== void 0 ? \": \" + msg : \"\")=>class extends Error {\n        origMessage;\n        constructor(msg){\n            super(prefix(msg) + suffix(msg));\n            this.origMessage = msg !== void 0 ? String(msg) : \"\";\n        }\n    };\n\n\nconst $065feed0e3bfda14$export$10a4c2bfc9c71dbd = (0, $a830b48f05b68abc$export$651a6eb01ea522f3)(()=>\"illegal argument(s)\");\nconst $065feed0e3bfda14$export$85f6a9f917d452ba = (msg)=>{\n    throw new $065feed0e3bfda14$export$10a4c2bfc9c71dbd(msg);\n};\n\n\nconst $7d04a51e04f01300$export$6b5c1ceb16d01dc3 = Math.PI;\nconst $7d04a51e04f01300$export$ad5b0b9ab7d48f58 = $7d04a51e04f01300$export$6b5c1ceb16d01dc3 * 2;\nconst $7d04a51e04f01300$export$f504979d7e0a75c7 = $7d04a51e04f01300$export$6b5c1ceb16d01dc3 / 2;\nconst $7d04a51e04f01300$export$b1eb83e43ef0f9f8 = $7d04a51e04f01300$export$6b5c1ceb16d01dc3 / 3;\nconst $7d04a51e04f01300$export$cfa25d10e00ab635 = $7d04a51e04f01300$export$6b5c1ceb16d01dc3 / 4;\nconst $7d04a51e04f01300$export$4b53cc5148232136 = $7d04a51e04f01300$export$6b5c1ceb16d01dc3 / 6;\nconst $7d04a51e04f01300$export$588dca789ffa0fd0 = 1 / $7d04a51e04f01300$export$6b5c1ceb16d01dc3;\nconst $7d04a51e04f01300$export$3a7bf289cac70393 = 1 / $7d04a51e04f01300$export$ad5b0b9ab7d48f58;\nconst $7d04a51e04f01300$export$24b096bfbaf849b7 = 1 / $7d04a51e04f01300$export$f504979d7e0a75c7;\nconst $7d04a51e04f01300$export$460c4029b1a54a2e = $7d04a51e04f01300$export$6b5c1ceb16d01dc3 / 180;\nconst $7d04a51e04f01300$export$914076c8150813e5 = 180 / $7d04a51e04f01300$export$6b5c1ceb16d01dc3;\nconst $7d04a51e04f01300$export$ed904dc4011d96f7 = (1 + Math.sqrt(5)) / 2;\nconst $7d04a51e04f01300$export$3681641e15b6e2c3 = Math.SQRT2;\nconst $7d04a51e04f01300$export$1b2407b91ae96221 = Math.sqrt(3);\nconst $7d04a51e04f01300$export$2bfcf97b5c0e010 = $7d04a51e04f01300$export$3681641e15b6e2c3 / 2;\nconst $7d04a51e04f01300$export$d98365b4d5f896cf = $7d04a51e04f01300$export$1b2407b91ae96221 / 2;\nconst $7d04a51e04f01300$export$f76cf7896cad0d31 = 1 / 3;\nconst $7d04a51e04f01300$export$2ff8b3422c5a9edf = 2 / 3;\nconst $7d04a51e04f01300$export$d7977f56a0faa834 = 1 / 6;\nlet $7d04a51e04f01300$export$56469a43a57ad8b6 = 1e-6;\n\n\n\nconst $4980129a1ca3bad2$export$842a2cf37af977e1 = (a, b)=>a - b * Math.floor(a / b);\nconst $4980129a1ca3bad2$export$a57bfe0eb79af278 = (x)=>x - Math.floor(x);\nconst $4980129a1ca3bad2$export$1fe87bd59b089f0 = (x)=>x < 0 ? Math.ceil(x) : Math.floor(x);\nconst $4980129a1ca3bad2$export$7978a6ddf29f4374 = (x, prec = 1)=>Math.round(x / prec) * prec;\nconst $4980129a1ca3bad2$export$b14a5ccef74ecd64 = (x, prec = 1)=>Math.floor(x / prec) * prec;\nconst $4980129a1ca3bad2$export$5decc23a0e946e4c = (x, prec = 1)=>Math.ceil(x / prec) * prec;\nconst $4980129a1ca3bad2$export$4958c7111439d6cc = (x, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6))=>{\n    const f = $4980129a1ca3bad2$export$a57bfe0eb79af278(x);\n    return f <= eps || f >= 1 - eps ? Math.round(x) : x;\n};\n\n\nfunction $48bf910295afa611$export$c7d5ea85f8b34f37(fn, cache = /* @__PURE__ */ Object.create(null)) {\n    return (...args)=>{\n        const key = JSON.stringify(args);\n        if (key !== void 0) return key in cache ? cache[key] : cache[key] = fn.apply(null, args);\n        return fn.apply(null, args);\n    };\n}\n\n\n\n\n\nconst $a48d9e96d41faf9e$export$76d90c956114f2c2 = (0, $48bf910295afa611$export$c7d5ea85f8b34f37)((ch, n)=>ch.repeat(n));\n\n\nconst $9c16b2c7714cf5c3$export$bc3bea8325045070 = (0, $48bf910295afa611$export$c7d5ea85f8b34f37)((n, ch = \" \")=>{\n    const buf = (0, $a48d9e96d41faf9e$export$76d90c956114f2c2)(String(ch), n);\n    return (x, len)=>{\n        if (x == null) return buf;\n        x = x.toString();\n        len = len !== void 0 ? len : x.length;\n        return len < n ? buf.substring(len) + x : x;\n    };\n});\nconst $9c16b2c7714cf5c3$export$4ef3c22bdc855b90 = $9c16b2c7714cf5c3$export$bc3bea8325045070(2, \"0\");\nconst $9c16b2c7714cf5c3$export$daec30a5ef5beb6b = $9c16b2c7714cf5c3$export$bc3bea8325045070(3, \"0\");\nconst $9c16b2c7714cf5c3$export$12b700018201cb9d = $9c16b2c7714cf5c3$export$bc3bea8325045070(4, \"0\");\n\n\nconst $bd52a7ed31e8a610$export$6b5cd3983e3ee5ab = (0, $48bf910295afa611$export$c7d5ea85f8b34f37)((prec, special = false)=>special ? (x)=>$bd52a7ed31e8a610$var$__nanOrInf(x) || x.toFixed(prec) : (x)=>x.toFixed(prec));\nconst $bd52a7ed31e8a610$export$e22069805c35feb2 = (0, $48bf910295afa611$export$c7d5ea85f8b34f37)((width, prec = 3)=>{\n    const l = width - prec - 1;\n    const pl = Math.pow(10, l);\n    const pln = -Math.pow(10, l - 1);\n    const pr = Math.pow(10, -(prec - 1));\n    const pad = (0, $9c16b2c7714cf5c3$export$bc3bea8325045070)(width);\n    return (x)=>{\n        const ax = Math.abs(x);\n        return pad($bd52a7ed31e8a610$var$__nanOrInf(x) || (x === 0 ? \"0\" : ax < pr || ax >= pl ? $bd52a7ed31e8a610$var$__exp(x, width) : x.toFixed(prec - (x < pln ? 1 : 0))));\n    };\n});\nconst $bd52a7ed31e8a610$var$__exp = (x, w)=>x.toExponential(Math.max(w - 4 - (Math.log(Math.abs(x)) / Math.LN10 >= 10 ? 2 : 1) - (x < 0 ? 1 : 0), 0));\nconst $bd52a7ed31e8a610$var$__nanOrInf = (x)=>isNaN(x) ? \"NaN\" : x === Infinity ? \"+\\u221E\" : x === -Infinity ? \"-\\u221E\" : void 0;\n\n\nconst $4a7258ffb7002243$export$6074e20ba5c64bef = (0, $48bf910295afa611$export$c7d5ea85f8b34f37)((size, prec = 3, d = \",\", pre = \"[\", post = \"]\")=>{\n    const f = typeof prec === \"number\" ? (0, $bd52a7ed31e8a610$export$6b5cd3983e3ee5ab)(prec) : prec;\n    switch(size){\n        case 1:\n            return (v)=>`${pre}${f(v[0])}${post}`;\n        case 2:\n            return (v)=>`${pre}${f(v[0])}${d}${f(v[1])}${post}`;\n        case 3:\n            return (v)=>`${pre}${f(v[0])}${d}${f(v[1])}${d}${f(v[2])}${post}`;\n        case 4:\n            return (v)=>`${pre}${f(v[0])}${d}${f(v[1])}${d}${f(v[2])}${d}${f(v[3])}${post}`;\n        default:\n            return (v)=>{\n                const res = [];\n                for(let i = 0; i < v.length; i++)res.push(f(v[i]));\n                return `${pre}${res.join(d)}${post}`;\n            };\n    }\n});\n\n\nvar $ff3cbd82a8a2ff73$export$c486935b7b0b00f7 = /* @__PURE__ */ ((GLType2)=>{\n    GLType2[GLType2[\"I8\"] = 5120] = \"I8\";\n    GLType2[GLType2[\"U8\"] = 5121] = \"U8\";\n    GLType2[GLType2[\"I16\"] = 5122] = \"I16\";\n    GLType2[GLType2[\"U16\"] = 5123] = \"U16\";\n    GLType2[GLType2[\"I32\"] = 5124] = \"I32\";\n    GLType2[GLType2[\"U32\"] = 5125] = \"U32\";\n    GLType2[GLType2[\"F32\"] = 5126] = \"F32\";\n    return GLType2;\n})($ff3cbd82a8a2ff73$export$c486935b7b0b00f7 || {});\nconst $ff3cbd82a8a2ff73$export$7e50410e6851a5db = {\n    [5120 /* I8 */ ]: \"i8\",\n    [5121 /* U8 */ ]: \"u8\",\n    [5122 /* I16 */ ]: \"i16\",\n    [5123 /* U16 */ ]: \"u16\",\n    [5124 /* I32 */ ]: \"i32\",\n    [5125 /* U32 */ ]: \"u32\",\n    [5126 /* F32 */ ]: \"f32\"\n};\nconst $ff3cbd82a8a2ff73$export$ccc3907fb755d361 = {\n    i8: 5120 /* I8 */ ,\n    u8: 5121 /* U8 */ ,\n    u8c: 5121 /* U8 */ ,\n    i16: 5122 /* I16 */ ,\n    u16: 5123 /* U16 */ ,\n    i32: 5124 /* I32 */ ,\n    u32: 5125 /* U32 */ ,\n    f32: 5126 /* F32 */ ,\n    f64: void 0\n};\nconst $ff3cbd82a8a2ff73$export$77a8a3ec2376cb23 = {\n    u8: 1,\n    u8c: 1,\n    i8: 1,\n    u16: 2,\n    i16: 2,\n    u32: 4,\n    i32: 4,\n    i64: 8,\n    u64: 8,\n    f32: 4,\n    f64: 8\n};\nconst $ff3cbd82a8a2ff73$export$4c68bfc8c9124205 = {\n    i8: 0,\n    u8: 0,\n    u8c: 0,\n    i16: 1,\n    u16: 1,\n    i32: 2,\n    u32: 2,\n    i64: 3,\n    u64: 3,\n    f32: 2,\n    f64: 3\n};\nconst $ff3cbd82a8a2ff73$export$7f91e23c347e83e3 = {\n    f32: Float32Array,\n    f64: Float64Array\n};\nconst $ff3cbd82a8a2ff73$export$62a9a53bce51b47f = {\n    i8: Int8Array,\n    i16: Int16Array,\n    i32: Int32Array\n};\nconst $ff3cbd82a8a2ff73$export$89dd89c1ab6a21e0 = {\n    u8: Uint8Array,\n    u8c: Uint8ClampedArray,\n    u16: Uint16Array,\n    u32: Uint32Array\n};\nconst $ff3cbd82a8a2ff73$export$20fb4bf8497f343f = {\n    i64: BigInt64Array,\n    u64: BigUint64Array\n};\nconst $ff3cbd82a8a2ff73$export$3b381702ed33cf2b = {\n    ...$ff3cbd82a8a2ff73$export$7f91e23c347e83e3,\n    ...$ff3cbd82a8a2ff73$export$62a9a53bce51b47f,\n    ...$ff3cbd82a8a2ff73$export$89dd89c1ab6a21e0\n};\nconst $ff3cbd82a8a2ff73$export$afc4952745a9c0bc = (type)=>{\n    const t = $ff3cbd82a8a2ff73$export$7e50410e6851a5db[type];\n    return t !== void 0 ? t : type;\n};\nconst $ff3cbd82a8a2ff73$export$44655affa77d94c2 = (type)=>{\n    const t = $ff3cbd82a8a2ff73$export$ccc3907fb755d361[type];\n    return t !== void 0 ? t : type;\n};\nconst $ff3cbd82a8a2ff73$export$49ed6a48804688ff = (...args)=>args.map((x)=>x | 0);\nconst $ff3cbd82a8a2ff73$export$30043de3fae42dd1 = (type)=>$ff3cbd82a8a2ff73$export$77a8a3ec2376cb23[type] || $ff3cbd82a8a2ff73$export$77a8a3ec2376cb23[$ff3cbd82a8a2ff73$export$afc4952745a9c0bc(type)];\nfunction $ff3cbd82a8a2ff73$export$ee441149f193b45a(type, ...args) {\n    const ctor = $ff3cbd82a8a2ff73$export$20fb4bf8497f343f[type];\n    return new (ctor || $ff3cbd82a8a2ff73$export$3b381702ed33cf2b[$ff3cbd82a8a2ff73$export$afc4952745a9c0bc(type)])(...args);\n}\nfunction $ff3cbd82a8a2ff73$export$8aa2910912d5a0d6(type, data, stride) {\n    const $data = Array.isArray(data) ? data : [\n        ...data\n    ];\n    if (stride === void 0) stride = $data[0].length;\n    const num = $data.length;\n    const res = $ff3cbd82a8a2ff73$export$ee441149f193b45a(type, num * stride);\n    for(let i = 0, j = 0; i < num; i++, j += stride)res.set($data[i], j);\n    return res;\n}\nconst $ff3cbd82a8a2ff73$export$3c3c83d33ac519a3 = (x)=>{\n    if (Array.isArray(x)) return \"f64\";\n    for(let id in $ff3cbd82a8a2ff73$export$3b381702ed33cf2b){\n        if (x instanceof $ff3cbd82a8a2ff73$export$3b381702ed33cf2b[id]) return id;\n    }\n    return \"f64\";\n};\nconst $ff3cbd82a8a2ff73$export$1ef41013d4af1773 = (x)=>x <= 256 ? \"u8\" : x <= 65536 ? \"u16\" : \"u32\";\nconst $ff3cbd82a8a2ff73$export$32d1ef3a1ec2b22 = (x)=>x >= -128 && x < 128 ? \"i8\" : x >= -32768 && x < 32768 ? \"i16\" : \"i32\";\nconst $ff3cbd82a8a2ff73$export$febce5e071c36869 = (x)=>x > 16 ? \"u32\" : x > 8 ? \"u16\" : \"u8\";\nconst $ff3cbd82a8a2ff73$export$71cc2d6d50aeb7db = (x)=>x > 16 ? \"i32\" : x > 8 ? \"i16\" : \"i8\";\nconst $ff3cbd82a8a2ff73$export$5bf18276ad35cd3e = (t)=>t === \"i64\" ? \"i32\" : t === \"i32\" ? \"i16\" : t === \"i16\" ? \"i8\" : \"i8\";\nconst $ff3cbd82a8a2ff73$export$4f99611726c808da = (t)=>t === \"i8\" ? \"i16\" : t === \"i16\" ? \"i32\" : t === \"i32\" ? \"i64\" : \"i64\";\nconst $ff3cbd82a8a2ff73$export$8e455a4b51a8bb3f = (t)=>t === \"u64\" ? \"u32\" : t === \"u32\" ? \"u16\" : t === \"u16\" ? \"u8\" : \"u8\";\nconst $ff3cbd82a8a2ff73$export$1fad4022ed34f5c9 = (t)=>t === \"u8\" || t === \"u8c\" ? \"u16\" : t === \"u16\" ? \"u32\" : t === \"u32\" ? \"u64\" : \"u64\";\nconst $ff3cbd82a8a2ff73$export$45ae02d96eef78a7 = (t)=>t === \"f64\" ? \"f32\" : \"f32\";\nconst $ff3cbd82a8a2ff73$export$aa2b6251594b2509 = (t)=>t === \"f32\" ? \"f64\" : \"f64\";\nconst $ff3cbd82a8a2ff73$export$d3dad6665afedd1 = (t)=>t[0] === \"i\" ? $ff3cbd82a8a2ff73$export$5bf18276ad35cd3e(t) : t[0] === \"u\" ? $ff3cbd82a8a2ff73$export$8e455a4b51a8bb3f(t) : $ff3cbd82a8a2ff73$export$45ae02d96eef78a7(t);\nconst $ff3cbd82a8a2ff73$export$719ac81e6c2c015 = (t)=>t[0] === \"i\" ? $ff3cbd82a8a2ff73$export$4f99611726c808da(t) : t[0] === \"u\" ? $ff3cbd82a8a2ff73$export$1fad4022ed34f5c9(t) : $ff3cbd82a8a2ff73$export$aa2b6251594b2509(t);\n\n\nconst $5cac0c3bcac622d8$export$9b6f948535b77d53 = (type, buf, num, size, byteOffset = 0, byteStride = size * (0, $ff3cbd82a8a2ff73$export$77a8a3ec2376cb23)[type])=>{\n    const res = [];\n    for(; num-- > 0; byteOffset += byteStride)res.push((0, $ff3cbd82a8a2ff73$export$ee441149f193b45a)(type, buf, byteOffset, size));\n    return res;\n};\nconst $5cac0c3bcac622d8$export$90b90ea32db1a99a = (type, buf, src, byteOffset, byteStride)=>{\n    const view = (0, $ff3cbd82a8a2ff73$export$ee441149f193b45a)(type, buf);\n    const size = (0, $ff3cbd82a8a2ff73$export$77a8a3ec2376cb23)[type];\n    byteOffset /= size;\n    byteStride /= size;\n    for (let x of src){\n        view.set(x, byteOffset);\n        byteOffset += byteStride;\n    }\n};\nconst $5cac0c3bcac622d8$export$e9242f670cb20645 = (ctor, buf, num, start, cstride, estride)=>{\n    const res = [];\n    while(num-- > 0){\n        res.push(new ctor(buf, start, cstride));\n        start += estride;\n    }\n    return res;\n};\nconst $5cac0c3bcac622d8$export$1d55c56b05a9e712 = (set, buf, src, start, cstride, estride)=>{\n    for (let v of src){\n        set(buf, v, start, 0, cstride, 1);\n        start += estride;\n    }\n    return buf;\n};\n\n\nconst $b8956ce4ea21c33f$export$7d15b64cf5a3a4c4 = (x, min, max)=>x < min ? min : x > max ? max : x;\nconst $b8956ce4ea21c33f$export$ed542a978b878ee8 = (x)=>x > 0 ? x : 0;\nconst $b8956ce4ea21c33f$export$5c5ee632c52bc4a2 = (x)=>x < 0 ? 0 : x > 1 ? 1 : x;\nconst $b8956ce4ea21c33f$export$2cacbc8823b89e46 = (x)=>x < -1 ? -1 : x > 1 ? 1 : x;\nconst $b8956ce4ea21c33f$export$b45a0c02a3a6bd55 = (x)=>x < 0 ? 0 : x > 0.5 ? 0.5 : x;\nconst $b8956ce4ea21c33f$export$6fb785c609d82593 = (x, y)=>x < y ? [\n        x,\n        y\n    ] : [\n        y,\n        x\n    ];\nconst $b8956ce4ea21c33f$export$4997ffc0176396a6 = (x, min, max)=>{\n    if (min === max) return min;\n    if (x > max) {\n        const d = max - min;\n        x -= d;\n        if (x > max) x -= d * ((x - min) / d | 0);\n    } else if (x < min) {\n        const d = max - min;\n        x += d;\n        if (x < min) x += d * ((min - x) / d + 1 | 0);\n    }\n    return x;\n};\nconst $b8956ce4ea21c33f$export$a7a8c8bedec7ce92 = (x, min, max)=>x < min ? x - min + max : x > max ? x - max + min : x;\nconst $b8956ce4ea21c33f$export$69033939f8eff985 = (x)=>x < 0 ? x + 1 : x > 1 ? x - 1 : x;\nconst $b8956ce4ea21c33f$export$3b9374f2e8d1b471 = (x)=>x < -1 ? x + 2 : x > 1 ? x - 2 : x;\nconst $b8956ce4ea21c33f$export$412b6e2a7fbdce18 = (a, b)=>a <= b ? 0 : 1;\nconst $b8956ce4ea21c33f$export$5c7e4265f4166803 = (a, b, c)=>a <= b ? a <= c ? 0 : 2 : b <= c ? 1 : 2;\nconst $b8956ce4ea21c33f$export$abbc992e2f7a03ed = (a, b, c, d)=>a <= b ? a <= c ? a <= d ? 0 : 3 : c <= d ? 2 : 3 : b <= c ? b <= d ? 1 : 3 : c <= d ? 2 : 3;\nconst $b8956ce4ea21c33f$export$2e1916403c690d8e = (a, b)=>a >= b ? 0 : 1;\nconst $b8956ce4ea21c33f$export$530accaa463743fc = (a, b, c)=>a >= b ? a >= c ? 0 : 2 : b >= c ? 1 : 2;\nconst $b8956ce4ea21c33f$export$997ba4008db6478c = (a, b, c, d)=>a >= b ? a >= c ? a >= d ? 0 : 3 : c >= d ? 2 : 3 : b >= c ? b >= d ? 1 : 3 : c >= d ? 2 : 3;\nconst $b8956ce4ea21c33f$export$f77ef1d37ede6ae4 = (a, b)=>a !== 0 ? b !== 0 ? Math.min(a, b) : a : b;\nconst $b8956ce4ea21c33f$export$f930aa2517ecab05 = (a, b, c)=>$b8956ce4ea21c33f$export$f77ef1d37ede6ae4($b8956ce4ea21c33f$export$f77ef1d37ede6ae4(a, b), c);\nconst $b8956ce4ea21c33f$export$c64430f6ae3a9584 = (a, b, k)=>$b8956ce4ea21c33f$export$ae3040c47ea664a9(a, b, -k);\nconst $b8956ce4ea21c33f$export$ae3040c47ea664a9 = (a, b, k)=>{\n    const ea = Math.exp(a * k);\n    const eb = Math.exp(b * k);\n    return (a * ea + b * eb) / (ea + eb);\n};\nconst $b8956ce4ea21c33f$export$467571aff7e617ce = (x, min, max, k)=>$b8956ce4ea21c33f$export$c64430f6ae3a9584($b8956ce4ea21c33f$export$ae3040c47ea664a9(x, min, k), max, k);\nconst $b8956ce4ea21c33f$export$1f6feacb0939c1e9 = (a, b)=>Math.abs(a) < Math.abs(b) ? a : b;\nconst $b8956ce4ea21c33f$export$bb8a7d60274b5fc6 = (a, b)=>Math.abs(a) > Math.abs(b) ? a : b;\nconst $b8956ce4ea21c33f$export$f6826ccc4238a19 = (e, x)=>x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;\nconst $b8956ce4ea21c33f$export$3d9f3a2fc40f5212 = (x)=>(x = Math.abs(x) % 2) > 1 ? 2 - x : x;\nconst $b8956ce4ea21c33f$export$ddf89a9c5af38f94 = (x, min, max)=>x >= min && x <= max;\nconst $b8956ce4ea21c33f$export$cc91a22e8d440ab2 = (x, min, max)=>x > min && x < max;\n\n\n\nconst $ca16640e9b6bc4c2$export$772aa0961a81b065 = (0, $a830b48f05b68abc$export$651a6eb01ea522f3)(()=>\"illegal arity\");\nconst $ca16640e9b6bc4c2$export$9f1b9fbfe882200d = (n)=>{\n    throw new $ca16640e9b6bc4c2$export$772aa0961a81b065(n);\n};\n\n\nfunction $c805e34b428dc08a$export$1af3c925c49f37a2(...fns) {\n    let [a, b, c, d, e, f, g, h, i, j] = fns;\n    switch(fns.length){\n        case 0:\n            (0, $ca16640e9b6bc4c2$export$9f1b9fbfe882200d)(0);\n        case 1:\n            return a;\n        case 2:\n            return (...args)=>a(b(...args));\n        case 3:\n            return (...args)=>a(b(c(...args)));\n        case 4:\n            return (...args)=>a(b(c(d(...args))));\n        case 5:\n            return (...args)=>a(b(c(d(e(...args)))));\n        case 6:\n            return (...args)=>a(b(c(d(e(f(...args))))));\n        case 7:\n            return (...args)=>a(b(c(d(e(f(g(...args)))))));\n        case 8:\n            return (...args)=>a(b(c(d(e(f(g(h(...args))))))));\n        case 9:\n            return (...args)=>a(b(c(d(e(f(g(h(i(...args)))))))));\n        case 10:\n        default:\n            const fn = (...args)=>a(b(c(d(e(f(g(h(i(j(...args))))))))));\n            return fns.length === 10 ? fn : $c805e34b428dc08a$export$1af3c925c49f37a2(fn, ...fns.slice(10));\n    }\n}\nfunction $c805e34b428dc08a$export$83fc47c523588c98(...fns) {\n    return $c805e34b428dc08a$export$1af3c925c49f37a2.apply(null, fns.reverse());\n}\nconst $c805e34b428dc08a$export$fd785a9ec61dece = $c805e34b428dc08a$export$83fc47c523588c98;\nfunction $c805e34b428dc08a$export$8679f38bd904e883(...fns) {\n    return async (...args)=>{\n        let n = fns.length - 1;\n        let res = fns[n](...args);\n        while(n-- > 0)res = await fns[n](res);\n        return res;\n    };\n}\n\n\n\nconst $d418f490d65a819d$export$eca2c7e8e95bbf0a = (x)=>(0, $1c9d5dc3120ae583$export$c915e14294a7d06f)(x, \"xform\") ? x.xform() : x;\n\n\nfunction $21542ef6380d398b$export$1af3c925c49f37a2(...fns) {\n    fns = fns.map((0, $d418f490d65a819d$export$eca2c7e8e95bbf0a));\n    return (0, $c805e34b428dc08a$export$1af3c925c49f37a2).apply(null, fns);\n}\n\n\nconst $d4728c686b1291e2$export$9652023d9040757 = (x)=>x != null && typeof x[Symbol.iterator] === \"function\";\n\n\nconst $c46584edf7538d87$export$5adef4befe47917 = (rfn, fn)=>[\n        rfn[0],\n        rfn[1],\n        fn\n    ];\n\n\nconst $81bd823e74714687$export$47f9e8d3c41dafbd = 1e-6;\nconst $81bd823e74714687$export$a7d1fa727cb10b0e = Symbol();\nconst $81bd823e74714687$export$ca96bc7645ad7951 = ()=>{};\nconst $81bd823e74714687$export$d97419887230d749 = \"*\";\nconst $81bd823e74714687$export$ee2dc6a4697cf5e9 = \"enable\";\nconst $81bd823e74714687$export$f631a292dd99edd2 = \"disable\";\n\n\n\n\nconst $8e87b1ffbf7748ad$export$f0954fd7d5368655 = (x)=>x;\nconst $8e87b1ffbf7748ad$export$ba9e5d519bc326ca = ()=>true;\nconst $8e87b1ffbf7748ad$export$b3e22bcfd64c1022 = ()=>false;\n\n\n\n\n\n\nclass $cc4b370dd08db6f5$export$ce266a425291df6c {\n    value;\n    constructor(val){\n        this.value = val;\n    }\n    deref() {\n        return this.value;\n    }\n}\nconst $cc4b370dd08db6f5$export$447808b60b7559bd = (x)=>new $cc4b370dd08db6f5$export$ce266a425291df6c(x);\nconst $cc4b370dd08db6f5$export$ebab785f9ea33473 = (x)=>x instanceof $cc4b370dd08db6f5$export$ce266a425291df6c;\nconst $cc4b370dd08db6f5$export$f2412ace46b7b087 = (x)=>x instanceof $cc4b370dd08db6f5$export$ce266a425291df6c ? x : new $cc4b370dd08db6f5$export$ce266a425291df6c(x);\nconst $cc4b370dd08db6f5$export$7ca7c14b24aa137b = (x)=>x instanceof $cc4b370dd08db6f5$export$ce266a425291df6c ? x.deref() : x;\n\n\nconst $18c9956d0c892038$var$__parseArgs = (args)=>args.length === 2 ? [\n        void 0,\n        args[1]\n    ] : args.length === 3 ? [\n        args[1],\n        args[2]\n    ] : (0, $ca16640e9b6bc4c2$export$9f1b9fbfe882200d)(args.length);\nfunction $18c9956d0c892038$export$533b26079ad0b4b(...args) {\n    const rfn = args[0];\n    const init = rfn[0];\n    const complete = rfn[1];\n    const reduce2 = rfn[2];\n    args = $18c9956d0c892038$var$__parseArgs(args);\n    const acc = args[0] == null ? init() : args[0];\n    const src = args[1];\n    return (0, $cc4b370dd08db6f5$export$7ca7c14b24aa137b)(complete((0, $1c9d5dc3120ae583$export$c915e14294a7d06f)(src, \"$reduce\") ? src.$reduce(reduce2, acc) : (0, $268e552d160966af$export$1e2f57719e155213)(src) ? $18c9956d0c892038$var$__reduceArray(reduce2, acc, src) : $18c9956d0c892038$var$__reduceIterable(reduce2, acc, src)));\n}\nfunction $18c9956d0c892038$export$7fef8bcdbb34f435(...args) {\n    const [init, complete, reduce2] = args[0];\n    args = $18c9956d0c892038$var$__parseArgs(args);\n    let acc = args[0] == null ? init() : args[0];\n    const src = args[1];\n    for(let i = src.length; i-- > 0;){\n        acc = reduce2(acc, src[i]);\n        if ((0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return (0, $cc4b370dd08db6f5$export$7ca7c14b24aa137b)(complete(acc));\n}\nconst $18c9956d0c892038$var$__reduceArray = (rfn, acc, src)=>{\n    for(let i = 0, n = src.length; i < n; i++){\n        acc = rfn(acc, src[i]);\n        if ((0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\nconst $18c9956d0c892038$var$__reduceIterable = (rfn, acc, src)=>{\n    for (let x of src){\n        acc = rfn(acc, x);\n        if ((0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\nconst $18c9956d0c892038$export$1650419e431d3ba3 = (init, rfn)=>[\n        init,\n        (0, $8e87b1ffbf7748ad$export$f0954fd7d5368655),\n        rfn\n    ];\nconst $18c9956d0c892038$export$8073770d92ccea36 = (rfn, args)=>{\n    const n = args.length - 1;\n    return (0, $d4728c686b1291e2$export$9652023d9040757)(args[n]) ? args.length > 1 ? $18c9956d0c892038$export$533b26079ad0b4b(rfn.apply(null, args.slice(0, n)), args[n]) : $18c9956d0c892038$export$533b26079ad0b4b(rfn(), args[0]) : void 0;\n};\n\n\nfunction $4ab4c96e32313662$export$4cbf152802aa238(src) {\n    return src ? [\n        ...src\n    ] : (0, $18c9956d0c892038$export$1650419e431d3ba3)(()=>[], (acc, x)=>(acc.push(x), acc));\n}\n\n\n\nfunction* $316a20c091b10096$export$6f58e2338da23f4d(xform, src) {\n    const rfn = (0, $d418f490d65a819d$export$eca2c7e8e95bbf0a)(xform)((0, $4ab4c96e32313662$export$4cbf152802aa238)());\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    for (let x of src){\n        const y = reduce([], x);\n        if ((0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(y)) {\n            yield* (0, $cc4b370dd08db6f5$export$7ca7c14b24aa137b)(complete(y.deref()));\n            return;\n        }\n        if (y.length) yield* y;\n    }\n    yield* (0, $cc4b370dd08db6f5$export$7ca7c14b24aa137b)(complete([]));\n}\nfunction* $316a20c091b10096$export$a6bff14a9cefe0e8(xform, src) {\n    const reduce = (0, $d418f490d65a819d$export$eca2c7e8e95bbf0a)(xform)([\n        (0, $81bd823e74714687$export$ca96bc7645ad7951),\n        (0, $81bd823e74714687$export$ca96bc7645ad7951),\n        (_, x)=>x\n    ])[2];\n    for (let x of src){\n        let y = reduce((0, $81bd823e74714687$export$a7d1fa727cb10b0e), x);\n        if ((0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(y)) {\n            y = (0, $cc4b370dd08db6f5$export$7ca7c14b24aa137b)(y.deref());\n            if (y !== (0, $81bd823e74714687$export$a7d1fa727cb10b0e)) yield y;\n            return;\n        }\n        if (y !== (0, $81bd823e74714687$export$a7d1fa727cb10b0e)) yield y;\n    }\n}\nconst $316a20c091b10096$export$9b6eac2a13c3d07 = (xform, args, impl = $316a20c091b10096$export$a6bff14a9cefe0e8)=>{\n    const n = args.length - 1;\n    return (0, $d4728c686b1291e2$export$9652023d9040757)(args[n]) ? args.length > 1 ? impl(xform.apply(null, args.slice(0, n)), args[n]) : impl(xform(), args[0]) : void 0;\n};\n\n\nfunction $06aa5eef6a6ccbf0$export$871de8747c9eaa88(fn, src) {\n    return (0, $d4728c686b1291e2$export$9652023d9040757)(src) ? (0, $316a20c091b10096$export$a6bff14a9cefe0e8)($06aa5eef6a6ccbf0$export$871de8747c9eaa88(fn), src) : (rfn)=>{\n        const r = rfn[2];\n        return (0, $c46584edf7538d87$export$5adef4befe47917)(rfn, (acc, x)=>r(acc, fn(x)));\n    };\n}\nconst $06aa5eef6a6ccbf0$export$b876a215b1634849 = (fn, src)=>[\n        ...$06aa5eef6a6ccbf0$export$871de8747c9eaa88(fn, src)\n    ];\n\n\n\n\nfunction $16fc3b5edd1085b0$export$e5bd5b3b105c2a71(...args) {\n    return (0, $316a20c091b10096$export$9b6eac2a13c3d07)($16fc3b5edd1085b0$export$e5bd5b3b105c2a71, args) || ((rfn)=>{\n        const r = rfn[2];\n        const fn = args[0];\n        let i = args[1] || 0;\n        return (0, $c46584edf7538d87$export$5adef4befe47917)(rfn, (acc, x)=>r(acc, fn(i++, x)));\n    });\n}\n\n\n\nfunction $d69a617af9dcb1e8$export$d02631cccf789723(from, to, step) {\n    return new $d69a617af9dcb1e8$export$9a58ef0d7ad3278c(from, to, step);\n}\nclass $d69a617af9dcb1e8$export$9a58ef0d7ad3278c {\n    from;\n    to;\n    step;\n    constructor(from, to, step){\n        if (from === void 0) {\n            from = 0;\n            to = Infinity;\n        } else if (to === void 0) {\n            to = from;\n            from = 0;\n        }\n        step = step === void 0 ? from < to ? 1 : -1 : step;\n        this.from = from;\n        this.to = to;\n        this.step = step;\n    }\n    *[Symbol.iterator]() {\n        let { from: from, to: to, step: step } = this;\n        if (step > 0) while(from < to){\n            yield from;\n            from += step;\n        }\n        else if (step < 0) while(from > to){\n            yield from;\n            from += step;\n        }\n    }\n    $reduce(rfn, acc) {\n        const step = this.step;\n        if (step > 0) for(let i = this.from, n = this.to; i < n && !(0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(acc); i += step)acc = rfn(acc, i);\n        else for(let i = this.from, n = this.to; i > n && !(0, $cc4b370dd08db6f5$export$ebab785f9ea33473)(acc); i += step)acc = rfn(acc, i);\n        return acc;\n    }\n}\n\n\n\nfunction $74b8b24fb31a2959$export$42d51816ce590c93(sep, src) {\n    sep = sep || \"\";\n    let first = true;\n    return src ? [\n        ...src\n    ].join(sep) : (0, $18c9956d0c892038$export$1650419e431d3ba3)(()=>\"\", (acc, x)=>(acc = first ? acc + x : acc + sep + x, first = false, acc));\n}\n\n\n\n\n\n\nfunction $f91f589066ec68d7$export$b7df5d561049483a(n, src) {\n    return (0, $d4728c686b1291e2$export$9652023d9040757)(src) ? (0, $316a20c091b10096$export$6f58e2338da23f4d)($f91f589066ec68d7$export$b7df5d561049483a(n), src) : (rfn)=>{\n        const r = rfn[2];\n        let m = n;\n        return (0, $c46584edf7538d87$export$5adef4befe47917)(rfn, (acc, x)=>--m > 0 ? r(acc, x) : m === 0 ? (0, $cc4b370dd08db6f5$export$f2412ace46b7b087)(r(acc, x)) : (0, $cc4b370dd08db6f5$export$447808b60b7559bd)(acc));\n    };\n}\n\n\n\n\n\n\nfunction $e981a2c2a58961c9$export$9608d0eacffd6284(...args) {\n    return $e981a2c2a58961c9$var$$transduce($e981a2c2a58961c9$export$9608d0eacffd6284, (0, $18c9956d0c892038$export$533b26079ad0b4b), args);\n}\nfunction $e981a2c2a58961c9$export$9127dcda72bf6aca(...args) {\n    return $e981a2c2a58961c9$var$$transduce($e981a2c2a58961c9$export$9127dcda72bf6aca, (0, $18c9956d0c892038$export$7fef8bcdbb34f435), args);\n}\nconst $e981a2c2a58961c9$var$$transduce = (tfn, rfn, args)=>{\n    let acc, src;\n    switch(args.length){\n        case 4:\n            src = args[3];\n            acc = args[2];\n            break;\n        case 3:\n            src = args[2];\n            break;\n        case 2:\n            return (0, $06aa5eef6a6ccbf0$export$871de8747c9eaa88)((x)=>tfn(args[0], args[1], x));\n        default:\n            (0, $ca16640e9b6bc4c2$export$9f1b9fbfe882200d)(args.length);\n    }\n    return rfn((0, $d418f490d65a819d$export$eca2c7e8e95bbf0a)(args[0])(args[1]), acc, src);\n};\n\n\nfunction* $9d8f6b07ceb00060$export$8901015135f2fb22(...src) {\n    const iters = src.map((s)=>s[Symbol.iterator]());\n    while(true){\n        const tuple = [];\n        for (let i of iters){\n            let v = i.next();\n            if (v.done) return;\n            tuple.push(v.value);\n        }\n        yield tuple;\n    }\n}\n\n\n\nconst $a4e281f2da1834f0$export$ab59e00737fb22e6 = (0, $a830b48f05b68abc$export$651a6eb01ea522f3)(()=>\"unsupported operation\");\nconst $a4e281f2da1834f0$export$98e633703a635f = (msg)=>{\n    throw new $a4e281f2da1834f0$export$ab59e00737fb22e6(msg);\n};\n\n\nconst $d682041ae3505481$export$c37d18c23b2ea60c = (dispatch = 0)=>{\n    const impls = new Array(5);\n    let fallback;\n    const fn = (...args)=>{\n        const g = impls[args[dispatch].length] || fallback;\n        return g ? g(...args) : (0, $a4e281f2da1834f0$export$98e633703a635f)(`no impl for vec size ${args[dispatch].length}`);\n    };\n    fn.add = (dim, fn2)=>impls[dim] = fn2;\n    fn.default = (fn2)=>fallback = fn2;\n    fn.impl = (dim)=>impls[dim] || fallback;\n    return fn;\n};\n\n\nconst $7e99597777a5a4f0$export$19dc841295b49698 = \"o,a\";\nconst $7e99597777a5a4f0$export$ccd27f3e7091205c = \"o,a,b\";\nconst $7e99597777a5a4f0$export$eddecb323783c21c = \"o,a,b,c\";\nconst $7e99597777a5a4f0$export$9e772ae751f37666 = \"o,a,n\";\nconst $7e99597777a5a4f0$export$1b218a0354f287 = \"o,a,n,b\";\nconst $7e99597777a5a4f0$export$df3e578f53e12bf2 = \"o,a,b,n\";\nconst $7e99597777a5a4f0$export$8443f1c33458c80b = \"io=0,ia=0,so=1,sa=1\";\nconst $7e99597777a5a4f0$export$ff73a40106eb353 = \"io=0,ia=0,ib=0,so=1,sa=1,sb=1\";\nconst $7e99597777a5a4f0$export$bdb0d4b72a85649d = \"io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1\";\nconst $7e99597777a5a4f0$export$381b62756f034f68 = \"!o&&(o=a);\";\nconst $7e99597777a5a4f0$export$51277e3ac6690f26 = \"!o&&(o=[]);\";\nconst $7e99597777a5a4f0$export$8c51af9235380b8e = \"!a&&(a=[]);\";\nconst $7e99597777a5a4f0$export$da5c1e34018ecc43 = (op)=>([o, a, b])=>`${o}=${a}${op}${b};`;\nconst $7e99597777a5a4f0$export$6ab71ad6f57b0093 = (op)=>([o, a])=>`${o}=${a}${op}n;`;\nconst $7e99597777a5a4f0$export$124a2d9669280971 = (op1, op2)=>([o, a, b, c])=>`${o}=(${a}${op1}${b})${op2}${c};`;\nconst $7e99597777a5a4f0$export$db7c5d9768fee3d9 = (op1, op2)=>([o, a, b])=>`${o}=(${a}${op1}${b})${op2}n;`;\nconst $7e99597777a5a4f0$export$524378831b80c0aa = (op1, op2)=>([o, a, b])=>`${o}=(${a}${op1}n)${op2}${b};`;\nconst $7e99597777a5a4f0$export$f160d69d51fe9b08 = (op)=>([o, a, b])=>`${o}=(${a}${op}${b})|0;`;\nconst $7e99597777a5a4f0$export$6a70b64fb8d54a06 = (op)=>([o, a, b])=>`${o}=(${a}${op}${b})>>>0;`;\nconst $7e99597777a5a4f0$export$b4ea1049a5419b4f = (op)=>([o, a])=>`${o}=(${a}${op}n)|0;`;\nconst $7e99597777a5a4f0$export$9de9c213a2a487cd = (op)=>([o, a])=>`${o}=(${a}${op}n)>>>0;`;\nconst $7e99597777a5a4f0$export$9092249dcc75f1af = (op = \"op\")=>([o, a])=>`${o}=${op}(${a});`;\nconst $7e99597777a5a4f0$export$7b4ffff4916264f8 = (op = \"op\")=>([o, a, b])=>`${o}=${op}(${a},${b});`;\nconst $7e99597777a5a4f0$export$a0a1b70ab8c960e8 = (op = \"op\")=>([o, a, b, c])=>`${o}=${op}(${a},${b},${c});`;\nconst $7e99597777a5a4f0$export$a674f282bc507c82 = (op = \"op\")=>([o, a, b, c, d, e])=>`${o}=${op}(${a},${b},${c},${d},${e});`;\nconst $7e99597777a5a4f0$export$feb62a864ec0d6e5 = (op = \"op\")=>([o, a])=>`${o}=${op}(${a},n);`;\nconst $7e99597777a5a4f0$export$4061f92b6da4a345 = ([a, b])=>`${a}*${b}`;\nconst $7e99597777a5a4f0$export$15e237ef180bd438 = ([a, b])=>`s+=${a}*${b};`;\nconst $7e99597777a5a4f0$export$5e8f180ef0142226 = ([o, a])=>`${o}=${a};`;\nconst $7e99597777a5a4f0$export$76aa35f56db04732 = ([a])=>`${a}=n;`;\nconst $7e99597777a5a4f0$export$edd47d1eb2bf4a2e = ([o, a, b, c])=>`${o}=${a}+(${b}-${a})*${c};`;\nconst $7e99597777a5a4f0$export$e6a01c2ca00499b1 = ([o, a, b])=>`${o}=${a}+(${b}-${a})*n;`;\n\n\nconst $93098157cea38c6c$var$__lookup = (sym)=>(i)=>i > 1 ? `${sym}[i${sym}+${i}*s${sym}]` : i == 1 ? `${sym}[i${sym}+s${sym}]` : `${sym}[i${sym}]`;\nconst $93098157cea38c6c$var$__indicesStrided = (sym)=>(0, $06aa5eef6a6ccbf0$export$871de8747c9eaa88)($93098157cea38c6c$var$__lookup(sym), (0, $d69a617af9dcb1e8$export$d02631cccf789723)());\nconst $93098157cea38c6c$var$__indices = (sym)=>(0, $06aa5eef6a6ccbf0$export$871de8747c9eaa88)((i)=>`${sym}[${i}]`, (0, $d69a617af9dcb1e8$export$d02631cccf789723)());\nconst $93098157cea38c6c$var$__assemble = (dim, tpl, syms, ret = \"a\", opJoin = \"\", pre = \"\", post = \"\", strided = false)=>[\n        pre,\n        (0, $e981a2c2a58961c9$export$9608d0eacffd6284)((0, $21542ef6380d398b$export$1af3c925c49f37a2)((0, $f91f589066ec68d7$export$b7df5d561049483a)(dim), (0, $16fc3b5edd1085b0$export$e5bd5b3b105c2a71)((i, x)=>tpl(x, i))), (0, $74b8b24fb31a2959$export$42d51816ce590c93)(opJoin), (0, $9d8f6b07ceb00060$export$8901015135f2fb22).apply(null, syms.split(\",\").map(strided ? $93098157cea38c6c$var$__indicesStrided : $93098157cea38c6c$var$__indices))),\n        post,\n        ret !== \"\" ? `return ${ret};` : \"\"\n    ];\nconst $93098157cea38c6c$var$__assembleG = (tpl, syms, ret = \"a\", pre, post, strided = false)=>[\n        pre,\n        \"for(let i=a.length;--i>=0;) {\",\n        tpl(syms.split(\",\").map(strided ? (x)=>`${x}[i${x}+i*s${x}]` : (x)=>`${x}[i]`)),\n        \"}\",\n        post,\n        ret !== null ? `return ${ret};` : \"\"\n    ];\nconst $93098157cea38c6c$var$__assembleS = (tpl, syms = (0, $7e99597777a5a4f0$export$ccd27f3e7091205c), ret = \"o\", pre = (0, $7e99597777a5a4f0$export$381b62756f034f68), post)=>[\n        pre,\n        \"while(k-->0) {\",\n        tpl(syms.split(\",\").map((x)=>`${x}[i${x}+k*s${x}]`)),\n        \"}\",\n        post,\n        ret !== null ? `return ${ret};` : \"\"\n    ];\nconst $93098157cea38c6c$export$326bc8646b307e15 = (o, args)=>`!${o} && (${o}=${args.split(\",\")[1]});`;\nconst $93098157cea38c6c$export$ef7acd7185315e22 = (dim, tpl, args, syms = args, ret = \"a\", opJoin, pre, post, strided = false)=>new Function(args, $93098157cea38c6c$var$__assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\"));\nconst $93098157cea38c6c$export$419c6ef64208ae82 = (dim, fns, tpl, hofArgs, args, syms = args, ret = \"a\", opJoin = \"\", pre, post, strided = false)=>{\n    return new Function(hofArgs, `return (${args})=>{${$93098157cea38c6c$var$__assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")}}`)(...fns);\n};\nconst $93098157cea38c6c$export$aeba7862bf0c66c4 = (tpl, args, syms = args, ret = \"a\", pre, post, strided = false)=>new Function(args, $93098157cea38c6c$var$__assembleG(tpl, syms, ret, pre, post, strided).join(\"\"));\nconst $93098157cea38c6c$export$6c4e26942fd16e7 = (tpl, args, syms = args, ret, pre, post)=>new Function(args, $93098157cea38c6c$var$__assembleS(tpl, syms, ret, pre, post).join(\"\"));\nconst $93098157cea38c6c$export$a0e9b27d920ed100 = (fns, tpl, hofArgs, args, syms = args, ret = \"a\", pre, post, strided = false)=>new Function(hofArgs, `return (${args})=>{${$93098157cea38c6c$var$__assembleG(tpl, syms, ret, pre, post, strided).join(\"\")}}`)(...fns);\nconst $93098157cea38c6c$export$e40cf5ce9a490533 = (tpl, args = (0, $7e99597777a5a4f0$export$ccd27f3e7091205c), syms, ret = \"o\", dispatch = 1, pre)=>{\n    syms = syms || args;\n    pre = pre != null ? pre : $93098157cea38c6c$export$326bc8646b307e15(ret, syms);\n    const fn = (0, $d682041ae3505481$export$c37d18c23b2ea60c)(dispatch);\n    const $ = (dim)=>fn.add(dim, $93098157cea38c6c$export$ef7acd7185315e22(dim, tpl, args, syms, ret, \"\", pre));\n    fn.default($93098157cea38c6c$export$aeba7862bf0c66c4(tpl, args, syms, ret, pre));\n    return [\n        fn,\n        $(2),\n        $(3),\n        $(4)\n    ];\n};\nconst $93098157cea38c6c$export$a913b214497a4223 = (op)=>$93098157cea38c6c$export$e40cf5ce9a490533((0, $7e99597777a5a4f0$export$9092249dcc75f1af)(op), (0, $7e99597777a5a4f0$export$19dc841295b49698));\nconst $93098157cea38c6c$export$baa6c46b014ab275 = (op, tpl, args = (0, $7e99597777a5a4f0$export$19dc841295b49698), syms, ret = \"o\", dispatch = 1, pre)=>{\n    const _tpl = tpl || (0, $7e99597777a5a4f0$export$9092249dcc75f1af)(\"op\");\n    syms = syms || args;\n    pre = pre != null ? pre : $93098157cea38c6c$export$326bc8646b307e15(ret, syms);\n    const fn = (0, $d682041ae3505481$export$c37d18c23b2ea60c)(dispatch);\n    const $ = (dim)=>fn.add(dim, $93098157cea38c6c$export$419c6ef64208ae82(dim, [\n            op\n        ], _tpl, \"op\", args, syms, ret, \"\", pre));\n    fn.default($93098157cea38c6c$export$a0e9b27d920ed100([\n        op\n    ], _tpl, \"op\", args, syms, ret, pre));\n    return [\n        fn,\n        $(2),\n        $(3),\n        $(4)\n    ];\n};\nconst $93098157cea38c6c$export$503c6222d3c48f54 = (tpl, args = (0, $7e99597777a5a4f0$export$ccd27f3e7091205c), idxArgs = (0, $7e99597777a5a4f0$export$ff73a40106eb353), syms = (0, $7e99597777a5a4f0$export$ccd27f3e7091205c), ret = \"o\", pre, sizes = [\n    2,\n    3,\n    4\n])=>[\n        $93098157cea38c6c$export$6c4e26942fd16e7(tpl, `${args},k,${idxArgs}`, syms, ret, pre),\n        ...sizes.map((dim)=>$93098157cea38c6c$export$ef7acd7185315e22(dim, tpl, `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : $93098157cea38c6c$export$326bc8646b307e15(ret, syms), \"\", true))\n    ];\nconst $93098157cea38c6c$export$e2ee6e441c8b1312 = (op, tpl, args = (0, $7e99597777a5a4f0$export$ccd27f3e7091205c), idxArgs = (0, $7e99597777a5a4f0$export$ff73a40106eb353), syms = (0, $7e99597777a5a4f0$export$ccd27f3e7091205c), ret = \"o\", pre, sizes = [\n    2,\n    3,\n    4\n])=>[\n        new Function(\"op\", `return (${args},k,${idxArgs})=>{${$93098157cea38c6c$var$__assembleS(tpl, syms, ret, pre).join(\"\")}}`)(op),\n        ...sizes.map((dim)=>$93098157cea38c6c$export$419c6ef64208ae82(dim, [\n                op\n            ], tpl, \"op\", `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : $93098157cea38c6c$export$326bc8646b307e15(ret, syms), \"\", true))\n    ];\nconst $93098157cea38c6c$export$5d7f662452a819b3 = (op)=>$93098157cea38c6c$export$e40cf5ce9a490533((0, $7e99597777a5a4f0$export$da5c1e34018ecc43)(op));\nconst $93098157cea38c6c$export$24ecd06eea36a882 = (op)=>$93098157cea38c6c$export$e40cf5ce9a490533((0, $7e99597777a5a4f0$export$6ab71ad6f57b0093)(op), (0, $7e99597777a5a4f0$export$9e772ae751f37666));\nconst $93098157cea38c6c$export$b74d4e1014d0409f = (op, signed = false)=>$93098157cea38c6c$export$e40cf5ce9a490533((signed ? (0, $7e99597777a5a4f0$export$f160d69d51fe9b08) : (0, $7e99597777a5a4f0$export$6a70b64fb8d54a06))(op));\nconst $93098157cea38c6c$export$e6949cab8a813996 = (op, signed = false)=>$93098157cea38c6c$export$e40cf5ce9a490533((signed ? (0, $7e99597777a5a4f0$export$b4ea1049a5419b4f) : (0, $7e99597777a5a4f0$export$9de9c213a2a487cd))(op), (0, $7e99597777a5a4f0$export$9e772ae751f37666));\n\n\n\nconst [$17b03e20e30ab1c0$export$7d15b64cf5a3a4c4, $17b03e20e30ab1c0$export$c3896cfb8a4e845c, $17b03e20e30ab1c0$export$c81ba8bb5d49ce82, $17b03e20e30ab1c0$export$4cfdf484c27efa43] = (0, $93098157cea38c6c$export$baa6c46b014ab275)((0, $b8956ce4ea21c33f$export$7d15b64cf5a3a4c4), (0, $7e99597777a5a4f0$export$a0a1b70ab8c960e8)(), (0, $7e99597777a5a4f0$export$eddecb323783c21c));\nconst [$17b03e20e30ab1c0$export$5c5ee632c52bc4a2, $17b03e20e30ab1c0$export$2c56bf757f90e081, $17b03e20e30ab1c0$export$2c76e8d8a961b95d, $17b03e20e30ab1c0$export$2a3fb5efb3d259e8] = (0, $93098157cea38c6c$export$baa6c46b014ab275)((0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2), (0, $7e99597777a5a4f0$export$9092249dcc75f1af)(), (0, $7e99597777a5a4f0$export$19dc841295b49698));\nconst [$17b03e20e30ab1c0$export$2cacbc8823b89e46, $17b03e20e30ab1c0$export$389f20b157367474, $17b03e20e30ab1c0$export$4a546a4bf36db970, $17b03e20e30ab1c0$export$48b31f228d4cf960] = (0, $93098157cea38c6c$export$baa6c46b014ab275)((0, $b8956ce4ea21c33f$export$2cacbc8823b89e46), (0, $7e99597777a5a4f0$export$9092249dcc75f1af)(), (0, $7e99597777a5a4f0$export$19dc841295b49698));\n\n\nconst $8a8986b640476745$export$beea375bf3818f1d = (proto, id, idx, strided = true, defNumeric = true)=>{\n    const get = idx > 0 ? strided ? function() {\n        return this.buf[this.offset + idx * this.stride];\n    } : function() {\n        return this.buf[this.offset + idx];\n    } : function() {\n        return this.buf[this.offset];\n    };\n    const set = idx > 0 ? strided ? function(n) {\n        this.buf[this.offset + idx * this.stride] = n;\n    } : function(n) {\n        this.buf[this.offset + idx] = n;\n    } : function(n) {\n        this.buf[this.offset] = n;\n    };\n    defNumeric && Object.defineProperty(proto, idx, {\n        get: get,\n        set: set,\n        enumerable: true\n    });\n    Object.defineProperty(proto, id, {\n        get: get,\n        set: set,\n        enumerable: true\n    });\n};\nconst $8a8986b640476745$export$372fdd3dd278cc1c = (proto, props, strided, defNumeric)=>props.forEach((id, i)=>$8a8986b640476745$export$beea375bf3818f1d(proto, id, i, strided, defNumeric));\n\n\n\n\n\nconst $1abb7e4b150c6edc$var$abs = Math.abs;\nconst $1abb7e4b150c6edc$var$max = Math.max;\nconst $1abb7e4b150c6edc$export$3e1b8005eb6f3d68 = (a, b, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6))=>$1abb7e4b150c6edc$var$abs(a - b) <= eps;\nconst $1abb7e4b150c6edc$export$9dc0cc51b6ffc288 = (a, b, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6))=>$1abb7e4b150c6edc$var$abs(a - b) <= eps * $1abb7e4b150c6edc$var$max(1, $1abb7e4b150c6edc$var$abs(a), $1abb7e4b150c6edc$var$abs(b));\n\n\n\n\nconst $ea632dee3478c22f$var$$ = (dim)=>$ea632dee3478c22f$export$3e1b8005eb6f3d68.add(dim, (0, $93098157cea38c6c$export$419c6ef64208ae82)(dim, [\n        (0, $1abb7e4b150c6edc$export$3e1b8005eb6f3d68),\n        (0, $7d04a51e04f01300$export$56469a43a57ad8b6)\n    ], ([a, b])=>`eq(${a},${b},eps)`, \"eq,_eps\", \"a,b,eps=_eps\", \"a,b\", \"\", \"&&\", \"return a.length === b.length && \", \";\"));\nconst $ea632dee3478c22f$export$3e1b8005eb6f3d68 = (0, $d682041ae3505481$export$c37d18c23b2ea60c)();\n$ea632dee3478c22f$export$3e1b8005eb6f3d68.default((v1, v2, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6))=>{\n    if ((0, $1c9d5dc3120ae583$export$c915e14294a7d06f)(v1, \"eqDelta\")) return v1.eqDelta(v2, eps);\n    if ((0, $1c9d5dc3120ae583$export$c915e14294a7d06f)(v2, \"eqDelta\")) return v2.eqDelta(v1, eps);\n    return $ea632dee3478c22f$export$75f4a8c48213224e(v1, v2, v1.length, eps);\n});\nconst $ea632dee3478c22f$export$c63d26dbbb7a5033 = $ea632dee3478c22f$var$$(2);\nconst $ea632dee3478c22f$export$819cb4b1ecd374c5 = $ea632dee3478c22f$var$$(3);\nconst $ea632dee3478c22f$export$215c4845217d5cf1 = $ea632dee3478c22f$var$$(4);\nconst $ea632dee3478c22f$export$75f4a8c48213224e = (a, b, n, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6), ia = 0, ib = 0, sa = 1, sb = 1)=>{\n    for(; n > 0; n--, ia += sa, ib += sb){\n        if (!(0, $1abb7e4b150c6edc$export$3e1b8005eb6f3d68)(a[ia], b[ib], eps)) return false;\n    }\n    return true;\n};\nconst $ea632dee3478c22f$export$ae8a06ab824e4b05 = (a, b, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6))=>{\n    if (a === b) return true;\n    if (a.length !== b.length) return false;\n    for(let i = a.length; i-- > 0;){\n        if (!$ea632dee3478c22f$export$3e1b8005eb6f3d68(a[i], b[i], eps)) return false;\n    }\n    return true;\n};\nconst $ea632dee3478c22f$export$5e9bb4359042e24b = (p, pts, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6))=>{\n    for(let i = pts.length; i-- > 0;){\n        if ($ea632dee3478c22f$export$3e1b8005eb6f3d68(p, pts[i], eps)) return true;\n    }\n    return false;\n};\n\n\nfunction* $229d208a1e7a4a88$export$b67c4b3d8ab4ccaf(ctor, buf, num, start, cstride, estride) {\n    while(num-- > 0){\n        yield new ctor(buf, start, cstride);\n        start += estride;\n    }\n}\nfunction* $229d208a1e7a4a88$export$de7c8d5f4bf654ca(buf, num, start, stride) {\n    while(num-- > 0){\n        yield buf[start];\n        start += stride;\n    }\n}\n\n\nconst $c5729b1b3bbd3f45$var$INV_MAX = 1 / 2 ** 32;\nclass $c5729b1b3bbd3f45$export$d768fa07cecd88a {\n    float(norm = 1) {\n        return this.int() * $c5729b1b3bbd3f45$var$INV_MAX * norm;\n    }\n    probability(p) {\n        return this.float() < p;\n    }\n    norm(norm = 1) {\n        return (this.int() * $c5729b1b3bbd3f45$var$INV_MAX - 0.5) * 2 * norm;\n    }\n    normMinMax(min, max) {\n        const x = this.minmax(min, max);\n        return this.float() < 0.5 ? x : -x;\n    }\n    minmax(min, max) {\n        return this.float() * (max - min) + min;\n    }\n    minmaxInt(min, max) {\n        min |= 0;\n        const range = (max | 0) - min;\n        return range ? min + this.int() % range : min;\n    }\n    minmaxUint(min, max) {\n        min >>>= 0;\n        const range = (max >>> 0) - min;\n        return range ? min + this.int() % range : min;\n    }\n}\n\n\nclass $9e94be3a5639c43f$export$1559ae9702bee384 extends (0, $c5729b1b3bbd3f45$export$d768fa07cecd88a) {\n    constructor(rnd){\n        super();\n        this.rnd = rnd;\n    }\n    float(norm = 1) {\n        return this.rnd() * norm;\n    }\n    norm(norm = 1) {\n        return (this.rnd() - 0.5) * 2 * norm;\n    }\n    int() {\n        return this.rnd() * 4294967296 >>> 0;\n    }\n}\n\n\nconst $b7fb5b931022b6bd$export$52653a075d3f70dc = new (0, $9e94be3a5639c43f$export$1559ae9702bee384)(Math.random);\n\n\n\nconst [$630212406e5b8835$export$a3bd1ea0f114ec36, $630212406e5b8835$export$62aaebd2a7b17b1f, $630212406e5b8835$export$31e07d78cb78bebb, $630212406e5b8835$export$8027d34b10b79e76] = (0, $93098157cea38c6c$export$baa6c46b014ab275)((0, $b7fb5b931022b6bd$export$52653a075d3f70dc), ([o, a, b])=>`${o}=rnd.minmax(${a},${b});`, \"o,a,b,rnd=op\", \"o,a,b\");\n\n\n\n\nconst [$cd54e95fb0a51254$export$adaa4cf7ef1b65be, $cd54e95fb0a51254$export$55640438a4edf3d6, $cd54e95fb0a51254$export$9cbac02f28c9a9a9, $cd54e95fb0a51254$export$a7c139a4194832bf] = (0, $93098157cea38c6c$export$e40cf5ce9a490533)((0, $7e99597777a5a4f0$export$5e8f180ef0142226), \"o,a\", void 0, \"o\", 1, (0, $7e99597777a5a4f0$export$51277e3ac6690f26));\n\n\nconst $03ebfbcb25ee71e2$export$43bee75e5e14138e = Array.isArray;\n\n\n\nvar $424269d88cf3d5bf$import_meta = Object.assign(Object.create(null), {\n    url: \"file:///.yarn/cache/@thi.ng-errors-npm-2.5.17-0a615b05f3-87d459d825.zip/node_modules/@thi.ng/errors/assert.js\"\n});\nvar $6bd960bece8213d2$exports = {};\n\"use strict\";\n\n\nconst $424269d88cf3d5bf$export$7750cdfb4db2c3d = (0, $a830b48f05b68abc$export$651a6eb01ea522f3)(()=>\"Assertion failed\");\nconst $424269d88cf3d5bf$export$a7a9523472993e97 = (typeof $6bd960bece8213d2$exports !== \"undefined\" && $6bd960bece8213d2$exports.env !== void 0 ? false : $424269d88cf3d5bf$import_meta.env ? $424269d88cf3d5bf$import_meta.env.MODE !== \"production\" || !!$424269d88cf3d5bf$import_meta.env.UMBRELLA_ASSERTS || !!$424269d88cf3d5bf$import_meta.env.VITE_UMBRELLA_ASSERTS : true) ? (test, msg)=>{\n    if (typeof test === \"function\" && !test() || !test) throw new $424269d88cf3d5bf$export$7750cdfb4db2c3d(typeof msg === \"function\" ? msg() : msg);\n} : ()=>{};\n\n\n\nconst $95eb33bb0aef0a08$export$5ffd082a0121a803 = {};\nconst $95eb33bb0aef0a08$export$b07aeb3c205b1fa7 = (mode, spec)=>{\n    for(let id in spec){\n        const val = spec[id];\n        if ((0, $03ebfbcb25ee71e2$export$43bee75e5e14138e)(val)) {\n            const [a, b, c, d] = val;\n            spec[id] = val.length === 2 ? (out, src)=>b(out, a(out, src)) : val.length === 3 ? (out, src)=>c(out, b(out, a(out, src))) : (out, src)=>d(out, c(out, b(out, a(out, src))));\n        }\n    }\n    $95eb33bb0aef0a08$export$5ffd082a0121a803[mode] = {\n        ...$95eb33bb0aef0a08$export$5ffd082a0121a803[mode],\n        ...spec\n    };\n};\nconst $95eb33bb0aef0a08$export$9c68d69a4c5bbcf9 = (res, src, destMode, srcMode)=>{\n    const spec = $95eb33bb0aef0a08$export$5ffd082a0121a803[destMode];\n    (0, $424269d88cf3d5bf$export$a7a9523472993e97)(!!spec, `no conversions available for ${destMode}`);\n    let $convert = spec[srcMode];\n    return $convert ? $convert(res, src) : $95eb33bb0aef0a08$export$5ffd082a0121a803.rgb[srcMode] ? spec.rgb(res, $95eb33bb0aef0a08$export$5ffd082a0121a803.rgb[srcMode]([], src)) : (0, $a4e281f2da1834f0$export$98e633703a635f)(`can't convert: ${srcMode} -> ${destMode}`);\n};\n\n\nconst $c229907f50f070a0$export$c5ff7c6cb12f5f46 = (x, n)=>(x << n | x >>> 32 - n) >>> 0;\nconst $c229907f50f070a0$export$b8ff662d454dbe46 = (x, n)=>(x >>> n | x << 32 - n) >>> 0;\nconst $c229907f50f070a0$export$f4b5465a1b117e52 = (x, n)=>n < 0 ? x << -n : x >>> n;\n\n\nconst $432d24058ce1e4ee$export$a6766c04eb5e4cc = (x)=>(x & 15) * 1118481;\nconst $432d24058ce1e4ee$export$184a3b3082834f83 = (x)=>(x & 15) * 286331153 >>> 0;\nconst $432d24058ce1e4ee$export$f4778deed24a996a = (x)=>(x & 255) * 65793;\nconst $432d24058ce1e4ee$export$6b434761b7a49cd6 = (x)=>(x & 255) * 16843009 >>> 0;\nconst $432d24058ce1e4ee$export$ae0bbf0f5cd52687 = (x)=>(x &= 65535, (x << 16 | x) >>> 0);\nconst $432d24058ce1e4ee$export$c525ac6623c954b0 = (x)=>(x >> 4 & 15) === (x & 15);\nconst $432d24058ce1e4ee$export$6af7a6e6a8f2df37 = (x)=>(x >> 8 & 255) === (x & 255);\nconst $432d24058ce1e4ee$export$dd24dc7e49b6b0eb = (x)=>(x & 3840) * 4352 | (x & 240) * 272 | (x & 15) * 17;\nconst $432d24058ce1e4ee$export$aea914411a6b4fb = (x)=>((x & 61440) * 69632 | (x & 3840) * 4352 | (x & 240) * 272 | (x & 15) * 17) >>> 0;\n\n\n\n\n\n\n\n\n\nvar $c7cdaa746aa0043b$export$3e22a96a58989a47 = /* @__PURE__ */ ((Hue2)=>{\n    Hue2[Hue2[\"RED\"] = 0] = \"RED\";\n    Hue2[Hue2[\"ORANGE\"] = 1] = \"ORANGE\";\n    Hue2[Hue2[\"YELLOW\"] = 2] = \"YELLOW\";\n    Hue2[Hue2[\"CHARTREUSE\"] = 3] = \"CHARTREUSE\";\n    Hue2[Hue2[\"GREEN\"] = 4] = \"GREEN\";\n    Hue2[Hue2[\"SPRING_GREEN\"] = 5] = \"SPRING_GREEN\";\n    Hue2[Hue2[\"CYAN\"] = 6] = \"CYAN\";\n    Hue2[Hue2[\"AZURE\"] = 7] = \"AZURE\";\n    Hue2[Hue2[\"BLUE\"] = 8] = \"BLUE\";\n    Hue2[Hue2[\"VIOLET\"] = 9] = \"VIOLET\";\n    Hue2[Hue2[\"MAGENTA\"] = 10] = \"MAGENTA\";\n    Hue2[Hue2[\"ROSE\"] = 11] = \"ROSE\";\n    return Hue2;\n})($c7cdaa746aa0043b$export$3e22a96a58989a47 || {});\nclass $c7cdaa746aa0043b$export$f0e1837cf5c5bd36 {\n    constructor(mode, value){\n        this.mode = mode;\n        this.value = value;\n    }\n    deref() {\n        return this.value;\n    }\n}\n\n\n\nconst $1b48deddace2431d$export$626336c2cd4b14de = (prec = 0)=>(x)=>(x * 100).toFixed(prec) + \"%\";\n\n\nconst $1d184ab39ca2046a$export$7a91b0fde7ec420f = Object.freeze([\n    0,\n    0,\n    0,\n    1\n]);\nconst $1d184ab39ca2046a$export$29814851e0aa981f = Object.freeze([\n    1,\n    1,\n    1,\n    1\n]);\nconst $1d184ab39ca2046a$export$aa201224bb439d47 = Object.freeze([\n    1,\n    0,\n    0,\n    1\n]);\nconst $1d184ab39ca2046a$export$48d4b2cd5bc0e88b = Object.freeze([\n    0,\n    1,\n    0,\n    1\n]);\nconst $1d184ab39ca2046a$export$738c3b9a44c87ecc = Object.freeze([\n    0,\n    0,\n    1,\n    1\n]);\nconst $1d184ab39ca2046a$export$ee66ffc32b0b6a4b = Object.freeze([\n    0,\n    1,\n    1,\n    1\n]);\nconst $1d184ab39ca2046a$export$8dd3b5a10b3b5fb0 = Object.freeze([\n    1,\n    0,\n    1,\n    1\n]);\nconst $1d184ab39ca2046a$export$aab610c505c06a8f = Object.freeze([\n    1,\n    1,\n    0,\n    1\n]);\nconst $1d184ab39ca2046a$export$618666431255d9df = [\n    0.299,\n    0.587,\n    0.114\n];\nconst $1d184ab39ca2046a$export$1a74005704ec0a02 = [\n    0.2126,\n    0.7152,\n    0.0722\n];\nconst $1d184ab39ca2046a$export$632e1bca6409b85c = [\n    0.2627,\n    0.678,\n    0.0593\n];\nconst $1d184ab39ca2046a$export$1b6b94cf37eb4b2f = [\n    0.4360747,\n    0.2225045,\n    0.0139322,\n    0.3850649,\n    0.7168786,\n    0.0971045,\n    0.1430804,\n    0.0606169,\n    0.7141733\n];\nconst $1d184ab39ca2046a$export$5bd959522fbb33fb = [\n    3.1338561,\n    -0.9787684,\n    0.0719453,\n    -1.6168667,\n    1.9161415,\n    -0.2289914,\n    -0.4906146,\n    0.033454,\n    1.4052427\n];\nconst $1d184ab39ca2046a$export$c462ec25d0e68dd8 = [\n    0.4124564,\n    0.2126729,\n    0.0193339,\n    0.3575761,\n    0.7151522,\n    0.119192,\n    0.1804375,\n    0.072175,\n    0.9503041\n];\nconst $1d184ab39ca2046a$export$68ca3d30fbda6075 = [\n    3.2404542,\n    -0.969266,\n    0.0556434,\n    -1.5371385,\n    1.8760108,\n    -0.2040259,\n    -0.4985314,\n    0.041556,\n    1.0572252\n];\nconst $1d184ab39ca2046a$export$1df56a526beedddf = [\n    0.9555766,\n    -0.0282895,\n    0.0122982,\n    -0.0230393,\n    1.0099416,\n    -0.020483,\n    0.0631636,\n    0.0210077,\n    1.3299098\n];\nconst $1d184ab39ca2046a$export$8e8b1dc9dd613fe0 = [\n    1.0478112,\n    0.0295424,\n    -0.0092345,\n    0.0228866,\n    0.9904844,\n    0.0150436,\n    -0.050127,\n    -0.0170491,\n    0.7521316\n];\nconst $1d184ab39ca2046a$export$eea70998d27a3f6e = [\n    0.96422,\n    1,\n    0.82521\n];\nconst $1d184ab39ca2046a$export$5c2abc406650e66e = [\n    0.95047,\n    1,\n    1.08883\n];\nconst $1d184ab39ca2046a$export$1f798654269ffd36 = [\n    0.8189330101,\n    0.0329845436,\n    0.0482003018,\n    0.3618667424,\n    0.9293118715,\n    0.2643662691,\n    -0.1288597137,\n    0.0361456387,\n    0.633851707\n];\nconst $1d184ab39ca2046a$export$c5727582d592af1 = [\n    0.2104542553,\n    1.9779984951,\n    0.0259040371,\n    0.793617785,\n    -2.428592205,\n    0.7827717662,\n    -0.0040720468,\n    0.4505937099,\n    -0.808675766\n];\nlet $1d184ab39ca2046a$export$7c02aa34d7a477ed = (0, $bd52a7ed31e8a610$export$6b5cd3983e3ee5ab)(3);\nlet $1d184ab39ca2046a$export$ad91c6f2dc8f3b45 = (0, $1b48deddace2431d$export$626336c2cd4b14de)(3);\nconst $1d184ab39ca2046a$export$c4b85a3b3361e135 = (x)=>{\n    $1d184ab39ca2046a$export$7c02aa34d7a477ed = (0, $bd52a7ed31e8a610$export$6b5cd3983e3ee5ab)(x);\n    $1d184ab39ca2046a$export$ad91c6f2dc8f3b45 = (0, $1b48deddace2431d$export$626336c2cd4b14de)(x);\n};\nconst $1d184ab39ca2046a$export$e3eaf67d84630857 = 1 / 255;\nconst $1d184ab39ca2046a$export$56469a43a57ad8b6 = 1 / 256;\n\n\nconst $986895dbf71d626a$export$f36c8c226353f2dd = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    grey: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\",\n    // additions\n    transparent: \"0000\",\n    rebeccapurple: \"639\"\n};\n\n\nlet $62234f526e377c85$export$80420cae396846ed = {\n    canvas: \"fff\",\n    canvastext: \"000\",\n    linktext: \"001ee4\",\n    visitedtext: \"4e2386\",\n    activetext: \"eb3323\",\n    buttonface: \"ddd\",\n    buttontext: \"000\",\n    buttonborder: \"000\",\n    field: \"fff\",\n    fieldtext: \"000\",\n    highlight: \"bbd5fb\",\n    highlighttext: \"000\",\n    mark: \"000\",\n    marktext: \"fff\",\n    graytext: \"808080\"\n};\nconst $62234f526e377c85$export$2b03bcdd45faed66 = (cols)=>Object.assign($62234f526e377c85$export$80420cae396846ed, cols);\n\n\nconst $8777156db716e3d5$export$dcfbb7940cfb3a48 = (out, x, y)=>(!out && (out = []), out[0] = x, out[1] = y, out);\nconst $8777156db716e3d5$export$ba8c70ce75474f8d = (out, x, y, z)=>(!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out);\nconst $8777156db716e3d5$export$abee0037e1db715 = (out, x, y, z, w)=>(!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out[3] = w, out);\nconst $8777156db716e3d5$export$d58a46c754825a51 = (out, a, b, c, d, e, f)=>(!out && (out = []), out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = f, out);\nconst $8777156db716e3d5$export$644e79245f7d24b5 = (out, ...values)=>{\n    if (!out) return values;\n    for(let i = 0, n = values.length; i < n; i++)out[i] = values[i];\n    return out;\n};\n\n\n\nconst $3894b359725a8b8b$export$b9b70ffa6eb909fa = (out, src)=>(0, $8777156db716e3d5$export$abee0037e1db715)(out || [], (src >>> 16 & 255) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857), (src >>> 8 & 255) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857), (src & 255) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857), (src >>> 24) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857));\nconst $3894b359725a8b8b$export$bb762bbbffb67d5 = (out, src)=>(0, $8777156db716e3d5$export$abee0037e1db715)(out || [], (src & 255) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857), (src >>> 8 & 255) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857), (src >>> 16 & 255) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857), (src >>> 24) * (0, $1d184ab39ca2046a$export$e3eaf67d84630857));\nconst $3894b359725a8b8b$export$dabb02671965e81b = (out, src)=>$3894b359725a8b8b$export$b9b70ffa6eb909fa(out, src | 4278190080);\nconst $3894b359725a8b8b$export$fb19f58995f09dd7 = (out, src)=>$3894b359725a8b8b$export$bb762bbbffb67d5(out, src | 4278190080);\n\n\nconst $8632f7cfdab39daf$export$59ad369bf4938177 = (src)=>{\n    src = ((0, $42fc9d2c5cb4264a$export$844ec244b1367d54)(src) ? src : src.deref()).toLowerCase();\n    const named = (0, $986895dbf71d626a$export$f36c8c226353f2dd)[src] || (0, $62234f526e377c85$export$80420cae396846ed)[src];\n    if (named || src[0] === \"#\") return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(\"srgb\", (0, $3894b359725a8b8b$export$b9b70ffa6eb909fa)([], $8632f7cfdab39daf$export$103711ef09c6edec(named || src)));\n    const parts = src.split(/[(),/ ]+/);\n    const [mode, a, b, c, d] = parts;\n    (0, $424269d88cf3d5bf$export$a7a9523472993e97)(parts.length === 5 || parts.length === 6, `invalid color: ${src}`);\n    switch(mode){\n        case \"rgb\":\n        case \"rgba\":\n            return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(\"srgb\", [\n                $8632f7cfdab39daf$var$__numOrPercent(a, 1, (0, $1d184ab39ca2046a$export$e3eaf67d84630857), true),\n                $8632f7cfdab39daf$var$__numOrPercent(b, 1, (0, $1d184ab39ca2046a$export$e3eaf67d84630857), true),\n                $8632f7cfdab39daf$var$__numOrPercent(c, 1, (0, $1d184ab39ca2046a$export$e3eaf67d84630857), true),\n                $8632f7cfdab39daf$var$__alpha(d)\n            ]);\n        case \"hsl\":\n        case \"hsla\":\n            return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(\"hsl\", [\n                $8632f7cfdab39daf$var$__hue(a),\n                $8632f7cfdab39daf$var$__percent(b),\n                $8632f7cfdab39daf$var$__percent(c),\n                $8632f7cfdab39daf$var$__alpha(d)\n            ]);\n        case \"lab\":\n            return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(\"lab50\", [\n                $8632f7cfdab39daf$var$__numOrPercent(a),\n                $8632f7cfdab39daf$var$__numOrPercent(b, 1.25),\n                $8632f7cfdab39daf$var$__numOrPercent(c, 1.25),\n                $8632f7cfdab39daf$var$__alpha(d)\n            ]);\n        case \"lch\":\n            return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(mode, [\n                $8632f7cfdab39daf$var$__numOrPercent(a),\n                $8632f7cfdab39daf$var$__numOrPercent(b, 1.5),\n                $8632f7cfdab39daf$var$__hue(c),\n                $8632f7cfdab39daf$var$__alpha(d)\n            ]);\n        case \"oklab\":\n            return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(mode, [\n                $8632f7cfdab39daf$var$__numOrPercent(a, 1, 1),\n                $8632f7cfdab39daf$var$__numOrPercent(b, 0.4, 1),\n                $8632f7cfdab39daf$var$__numOrPercent(c, 0.4, 1),\n                $8632f7cfdab39daf$var$__alpha(d)\n            ]);\n        case \"oklch\":\n            return new (0, $c7cdaa746aa0043b$export$f0e1837cf5c5bd36)(mode, [\n                $8632f7cfdab39daf$var$__numOrPercent(a, 1, 1),\n                $8632f7cfdab39daf$var$__numOrPercent(b, 0.4, 1),\n                $8632f7cfdab39daf$var$__hue(c),\n                $8632f7cfdab39daf$var$__alpha(d)\n            ]);\n        default:\n            (0, $a4e281f2da1834f0$export$98e633703a635f)(`color mode: ${mode}`);\n    }\n};\nconst $8632f7cfdab39daf$var$HUE_NORMS = {\n    rad: (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58),\n    grad: 400,\n    turn: 1,\n    deg: 360\n};\nconst $8632f7cfdab39daf$var$__hue = (x)=>{\n    const match = /^(-?[0-9.]+)(deg|rad|grad|turn)?$/.exec(x);\n    (0, $424269d88cf3d5bf$export$a7a9523472993e97)(!!match, `expected hue, got: ${x}`);\n    return (0, $4980129a1ca3bad2$export$a57bfe0eb79af278)(parseFloat(match[1]) / ($8632f7cfdab39daf$var$HUE_NORMS[match[2]] || 360));\n};\nconst $8632f7cfdab39daf$var$__alpha = (x)=>x ? $8632f7cfdab39daf$var$__numOrPercent(x, 1, 1, true) : 1;\nconst $8632f7cfdab39daf$var$__percent = (x, clamp = true)=>{\n    (0, $424269d88cf3d5bf$export$a7a9523472993e97)(/^([0-9.]+)%$/.test(x), `expected percentage, got: ${x}`);\n    const res = parseFloat(x) / 100;\n    return clamp ? (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(res) : res;\n};\nconst $8632f7cfdab39daf$var$__numOrPercent = (x, scalePerc = 1, scale = 0.01, clamp = false)=>{\n    (0, $424269d88cf3d5bf$export$a7a9523472993e97)(/^-?[0-9.]+%?$/.test(x), `expected number or percentage, got: ${x}`);\n    const res = parseFloat(x) * (x.endsWith(\"%\") ? 0.01 * scalePerc : scale);\n    return clamp ? (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(res) : res;\n};\nconst $8632f7cfdab39daf$export$103711ef09c6edec = (src)=>{\n    const match = /^#?([0-9a-f]{3,8})$/i.exec(src);\n    if (match) {\n        const hex = match[1];\n        const val = parseInt(hex, 16);\n        switch(hex.length){\n            case 3:\n                return ((0, $432d24058ce1e4ee$export$dd24dc7e49b6b0eb)(val) | 4278190080) >>> 0;\n            case 4:\n                return (0, $c229907f50f070a0$export$b8ff662d454dbe46)((0, $432d24058ce1e4ee$export$aea914411a6b4fb)(val), 8);\n            case 6:\n                return (val | 4278190080) >>> 0;\n            case 8:\n                return (0, $c229907f50f070a0$export$b8ff662d454dbe46)(val, 8);\n            default:\n        }\n    }\n    return (0, $065feed0e3bfda14$export$85f6a9f917d452ba)(`invalid hex color: \"${src}\"`);\n};\n\n\n\n\nconst $68fc2977bf0c4876$export$4598496351993abf = (x, def = 1)=>x != void 0 ? (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(x) : def;\nconst $68fc2977bf0c4876$export$be435c896a95082 = (args)=>{\n    if (typeof args[0] === \"number\") switch(args.length){\n        case 1:\n            return args.push(0, 0, 1), [\n                args\n            ];\n        case 2:\n            return args.push(0, 1), [\n                args\n            ];\n        case 3:\n            return args.push(1), [\n                args\n            ];\n        default:\n            return [\n                args\n            ];\n    }\n    return args;\n};\n\n\nconst $d120146997337610$export$dd366fca209b6b9f = (spec)=>{\n    const channels = spec.channels || {};\n    const order = spec.order;\n    const numChannels = order.length;\n    order.reduce((acc, id)=>{\n        acc[id] = {\n            range: [\n                0,\n                1\n            ],\n            ...channels[id]\n        };\n        return acc;\n    }, channels);\n    const min = Object.freeze(order.map((id)=>channels[id].range[0]));\n    const max = Object.freeze(order.map((id)=>channels[id].range[1]));\n    const minR = (0, $cd54e95fb0a51254$export$a7c139a4194832bf)([], min);\n    const maxR = (0, $cd54e95fb0a51254$export$a7c139a4194832bf)([], max);\n    minR[numChannels - 1] = 1;\n    const hueChanID = order.findIndex((id)=>!!channels[id].hue);\n    const $Color = class {\n        constructor(buf, offset = 0, stride = 1){\n            this.offset = offset;\n            this.stride = stride;\n            this.buf = buf || [\n                0,\n                0,\n                0,\n                0\n            ];\n            this.offset = offset;\n            this.stride = stride;\n        }\n        buf;\n        get mode() {\n            return spec.mode;\n        }\n        get length() {\n            return numChannels;\n        }\n        get range() {\n            return [\n                min,\n                max\n            ];\n        }\n        get [Symbol.toStringTag]() {\n            return spec.mode;\n        }\n        get xyz() {\n            return [\n                this[0],\n                this[1],\n                this[2]\n            ];\n        }\n        [Symbol.iterator]() {\n            return (0, $229d208a1e7a4a88$export$de7c8d5f4bf654ca)(this.buf, this.length, this.offset, this.stride);\n        }\n        copy() {\n            return new $Color(this.deref());\n        }\n        copyView() {\n            return new $Color(this.buf, this.offset, this.stride);\n        }\n        empty() {\n            return new $Color();\n        }\n        deref() {\n            return [\n                this[0],\n                this[1],\n                this[2],\n                this[3]\n            ];\n        }\n        set(src) {\n            return (0, $cd54e95fb0a51254$export$a7c139a4194832bf)(this, src);\n        }\n        clamp() {\n            hueChanID >= 0 && (this[hueChanID] = (0, $4980129a1ca3bad2$export$a57bfe0eb79af278)(this[hueChanID]));\n            (0, $17b03e20e30ab1c0$export$4cfdf484c27efa43)(null, this, min, max);\n            return this;\n        }\n        eqDelta(o, eps = (0, $7d04a51e04f01300$export$56469a43a57ad8b6)) {\n            return (0, $ea632dee3478c22f$export$215c4845217d5cf1)(this, o, eps);\n        }\n        randomize(rnd) {\n            return (0, $630212406e5b8835$export$a3bd1ea0f114ec36)(this, minR, maxR, rnd);\n        }\n        toJSON() {\n            return this.deref();\n        }\n        toString() {\n            return (0, $4a7258ffb7002243$export$6074e20ba5c64bef)(4, 4)(this);\n        }\n    };\n    (0, $8a8986b640476745$export$372fdd3dd278cc1c)($Color.prototype, order);\n    (0, $95eb33bb0aef0a08$export$b07aeb3c205b1fa7)(spec.mode, spec.from);\n    (0, $95eb33bb0aef0a08$export$b07aeb3c205b1fa7)(\"rgb\", {\n        [spec.mode]: spec.toRgb\n    });\n    const fromColor = (src, mode, args)=>{\n        const res = new $Color(...args);\n        return mode !== spec.mode ? (0, $95eb33bb0aef0a08$export$9c68d69a4c5bbcf9)(res, src, spec.mode, mode) : res.set(src);\n    };\n    const factory = (src, ...args)=>src == null ? new $Color() : (0, $42fc9d2c5cb4264a$export$844ec244b1367d54)(src) ? factory((0, $8632f7cfdab39daf$export$59ad369bf4938177)(src), ...args) : (0, $268e552d160966af$export$1e2f57719e155213)(src) ? (0, $42fc9d2c5cb4264a$export$844ec244b1367d54)(src.mode) ? fromColor(src, src.mode, args) : new $Color(src, ...args) : (0, $1c9d5dc3120ae583$export$c915e14294a7d06f)(src, \"deref\") ? fromColor(src.deref(), src.mode, args) : (0, $22b149dc5a64b464$export$7e4aa119212bc614)(src) ? args.length && args.every((0, $22b149dc5a64b464$export$7e4aa119212bc614)) ? new $Color(...(0, $68fc2977bf0c4876$export$be435c896a95082)([\n            src,\n            ...args\n        ])) : fromColor((0, $3894b359725a8b8b$export$b9b70ffa6eb909fa)([], src), \"srgb\", args) : (0, $065feed0e3bfda14$export$85f6a9f917d452ba)(`can't create a ${spec.mode} color from: ${src}`);\n    factory.class = $Color;\n    factory.range = [\n        min,\n        max\n    ];\n    factory.random = (rnd, buf, idx, stride)=>new $Color(buf, idx, stride).randomize(rnd);\n    factory.mapBuffer = (buf, num = buf.length / numChannels | 0, start = 0, cstride = 1, estride = numChannels)=>(0, $5cac0c3bcac622d8$export$e9242f670cb20645)($Color, buf, num, start, cstride, estride);\n    return factory;\n};\n\n\n\n\n\n\nconst $109ca59437083af7$export$7d15b64cf5a3a4c4 = (out, src, alpha = 1)=>(0, $8777156db716e3d5$export$abee0037e1db715)(out || src, (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[0]), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[1]), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[2]), (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3], alpha));\nconst $109ca59437083af7$export$dd799b5658f51338 = (out, src, alpha = 1)=>(0, $8777156db716e3d5$export$abee0037e1db715)(out || src, (0, $4980129a1ca3bad2$export$a57bfe0eb79af278)(src[0]), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[1]), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[2]), (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3], alpha));\n\n\nconst $a077bd5ced63e613$export$61d1db33a18350ee = (out, src)=>{\n    out = (0, $109ca59437083af7$export$dd799b5658f51338)(out || src, src);\n    const s = out[1];\n    const v = out[2];\n    const l = (2 - s) * v / 2;\n    out[2] = l;\n    out[1] = l && l < 1 ? s * v / (l < 0.5 ? l * 2 : 2 - l * 2) : s;\n    return out;\n};\n\n\n\nconst $0d1d58979ca7d3b0$export$7d5e3328550ce0cd = (theta, n = 1)=>[\n        Math.sin(theta) * n,\n        Math.cos(theta) * n\n    ];\nconst $0d1d58979ca7d3b0$export$5dceb76539a08116 = (theta, n = 1)=>[\n        Math.cos(theta) * n,\n        Math.sin(theta) * n\n    ];\nconst $0d1d58979ca7d3b0$export$8e3badfd6976e5c = (theta)=>(theta %= (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58), theta < 0 ? (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58) + theta : theta);\nconst $0d1d58979ca7d3b0$export$bc9a8c093c36a624 = (theta)=>(theta = Math.abs(theta), theta > (0, $7d04a51e04f01300$export$6b5c1ceb16d01dc3) ? (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58) - theta : theta);\nconst $0d1d58979ca7d3b0$export$28d974ff8f7517ed = (a, b)=>$0d1d58979ca7d3b0$export$bc9a8c093c36a624($0d1d58979ca7d3b0$export$8e3badfd6976e5c(b % (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58) - a % (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58)));\nconst $0d1d58979ca7d3b0$export$64813598e5fb2450 = (y, x)=>$0d1d58979ca7d3b0$export$8e3badfd6976e5c(Math.atan2(y, x));\nconst $0d1d58979ca7d3b0$export$2332ba17bcdd284d = (theta)=>$0d1d58979ca7d3b0$export$8e3badfd6976e5c(theta) * (0, $7d04a51e04f01300$export$24b096bfbaf849b7) | 0;\nconst $0d1d58979ca7d3b0$export$61ddd819c68acdd = (theta)=>theta * (0, $7d04a51e04f01300$export$914076c8150813e5);\nconst $0d1d58979ca7d3b0$export$29e4e862bebba87f = (theta)=>theta * (0, $7d04a51e04f01300$export$460c4029b1a54a2e);\nconst $0d1d58979ca7d3b0$export$a830b5ed334924be = (theta)=>1 / Math.sin(theta);\nconst $0d1d58979ca7d3b0$export$e17a63917e2ebf0f = (theta)=>1 / Math.cos(theta);\nconst $0d1d58979ca7d3b0$export$ef569ec50496610c = (theta)=>1 / Math.tan(theta);\nconst $0d1d58979ca7d3b0$export$ebcbd32ce8d4cff = (a, b, gamma)=>Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));\nconst $0d1d58979ca7d3b0$export$c0a907f067762f6e = (x)=>{\n    const x2 = x * x;\n    return 1 + x2 * (-4 + 2 * x2);\n};\nconst $0d1d58979ca7d3b0$var$__fastCos = (x)=>{\n    const x2 = x * x;\n    return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);\n};\nconst $0d1d58979ca7d3b0$export$3c8033b41bb9b535 = (theta)=>{\n    theta %= (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58);\n    theta < 0 && (theta = -theta);\n    switch(theta * (0, $7d04a51e04f01300$export$24b096bfbaf849b7) | 0){\n        case 0:\n            return $0d1d58979ca7d3b0$var$__fastCos(theta);\n        case 1:\n            return -$0d1d58979ca7d3b0$var$__fastCos((0, $7d04a51e04f01300$export$6b5c1ceb16d01dc3) - theta);\n        case 2:\n            return -$0d1d58979ca7d3b0$var$__fastCos(theta - (0, $7d04a51e04f01300$export$6b5c1ceb16d01dc3));\n        default:\n            return $0d1d58979ca7d3b0$var$__fastCos((0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58) - theta);\n    }\n};\nconst $0d1d58979ca7d3b0$export$5a59657e318cc2cf = (theta)=>$0d1d58979ca7d3b0$export$3c8033b41bb9b535((0, $7d04a51e04f01300$export$f504979d7e0a75c7) - theta);\nconst $0d1d58979ca7d3b0$export$8019a7ebe7afe6d9 = (deg2, min, sec2)=>deg2 + min / 60 + sec2 / 3600;\nconst $0d1d58979ca7d3b0$export$6804273a91971333 = (theta)=>{\n    const sign = Math.sign(theta);\n    theta = Math.abs(theta);\n    const deg2 = Math.trunc(theta);\n    theta = (theta - deg2) * 60;\n    const min = Math.trunc(theta);\n    return [\n        deg2 * sign,\n        min,\n        (theta - min) * 60\n    ];\n};\n\n\n\n\n\nconst $9cd4c6fc9925bf97$export$8a87efa82f297c68 = (out, src)=>{\n    const { 1: a, 2: b } = src;\n    return (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, src[0], Math.hypot(a, b), a === 0 && b === 0 ? 0 : (0, $0d1d58979ca7d3b0$export$64813598e5fb2450)(b, a) * (0, $7d04a51e04f01300$export$3a7bf289cac70393), (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]));\n};\nconst $9cd4c6fc9925bf97$export$1d9aa1122f81fc3e = (out, src)=>{\n    let { 1: c, 2: h } = src;\n    h *= (0, $7d04a51e04f01300$export$ad5b0b9ab7d48f58);\n    const a = (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]);\n    return c > 0 ? (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, src[0], Math.cos(h) * c, Math.sin(h) * c, a) : (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, src[0], 0, 0, a);\n};\n\n\n\n\n\nconst $80a0bd8d6f74390a$var$__transform = (x)=>{\n    const y = x ** 3;\n    return y > 8856e-6 ? y : (x - 16 / 116) / 7.787;\n};\nconst $80a0bd8d6f74390a$export$e2f27988cc5b3a12 = (out, src, white = (0, $1d184ab39ca2046a$export$eea70998d27a3f6e))=>{\n    const y = (src[0] + 0.16) / 1.16;\n    return (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, $80a0bd8d6f74390a$var$__transform(src[1] / 5 + y) * white[0], $80a0bd8d6f74390a$var$__transform(y) * white[1], $80a0bd8d6f74390a$var$__transform(y - src[2] / 2) * white[2], (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]));\n};\nconst $80a0bd8d6f74390a$export$5bbeea95f392b8fe = (out, src)=>$80a0bd8d6f74390a$export$e2f27988cc5b3a12(out, src, (0, $1d184ab39ca2046a$export$5c2abc406650e66e));\n\n\n\n\n\n\nconst $883aa177ee8f6de7$export$d1abfbcc2687ddc4 = (a, b, n, ia = 0, ib = 0, sa = 1, sb = 1)=>{\n    let sum = 0;\n    for(; n-- > 0; ia += sa, ib += sb)sum += a[ia] * b[ib];\n    return sum;\n};\nconst $883aa177ee8f6de7$var$$ = (dim)=>(0, $93098157cea38c6c$export$ef7acd7185315e22)(dim, (0, $7e99597777a5a4f0$export$4061f92b6da4a345), `o,a,${(0, $7e99597777a5a4f0$export$8443f1c33458c80b)}`, \"o,a\", \"\", \"+\", \"return \", \";\", true);\nconst $883aa177ee8f6de7$export$cf66b157879064b6 = $883aa177ee8f6de7$var$$(2);\nconst $883aa177ee8f6de7$export$78ae608fdbee4899 = $883aa177ee8f6de7$var$$(3);\nconst $883aa177ee8f6de7$export$7cff64c0e2ba076b = $883aa177ee8f6de7$var$$(4);\n\n\n\n\nconst $03fdf7d033bb1d09$export$eaa9061711f71897 = (out, mat, src, clampOut = false)=>{\n    const x = (0, $883aa177ee8f6de7$export$78ae608fdbee4899)(mat, src, 0, 0, 3);\n    const y = (0, $883aa177ee8f6de7$export$78ae608fdbee4899)(mat, src, 1, 0, 3);\n    const z = (0, $883aa177ee8f6de7$export$78ae608fdbee4899)(mat, src, 2, 0, 3);\n    const a = (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]);\n    return clampOut ? (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(x), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(y), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(z), a) : (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, x, y, z, a);\n};\nconst $03fdf7d033bb1d09$export$3c41ca02e903d6c6 = (out, mat, src, clampOut = true)=>{\n    out = (0, $8777156db716e3d5$export$abee0037e1db715)(out || src, src[0], src[1], src[2], (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]));\n    const x = (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(out, mat, 0, 0) + mat[4];\n    const y = (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(out, mat, 0, 5) + mat[9];\n    const z = (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(out, mat, 0, 10) + mat[14];\n    const w = (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(out, mat, 0, 15) + mat[19];\n    return clampOut ? (0, $8777156db716e3d5$export$abee0037e1db715)(out, (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(x), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(y), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(z), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(w)) : (0, $8777156db716e3d5$export$abee0037e1db715)(out, x, y, z, w);\n};\nconst $03fdf7d033bb1d09$export$4a53f7863042bc1b = (a, b)=>[\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 0, 0, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 0, 1, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 0, 2, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 0, 3, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 0, 4, 1, 5) + b[4],\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 5, 0, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 5, 1, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 5, 2, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 5, 3, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 5, 4, 1, 5) + b[9],\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 10, 0, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 10, 1, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 10, 2, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 10, 3, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 10, 4, 1, 5) + b[14],\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 15, 0, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 15, 1, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 15, 2, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 15, 3, 1, 5),\n        (0, $883aa177ee8f6de7$export$7cff64c0e2ba076b)(b, a, 15, 4, 1, 5) + b[19]\n    ];\n\n\nconst $40183e4ed970aff5$export$3772e887938e648f = (out, src, mat = (0, $1d184ab39ca2046a$export$5bd959522fbb33fb))=>(0, $03fdf7d033bb1d09$export$eaa9061711f71897)(out, mat, src);\nconst $40183e4ed970aff5$export$b144c3ea0bb0eb35 = (out, src)=>$40183e4ed970aff5$export$3772e887938e648f(out, src, (0, $1d184ab39ca2046a$export$68ca3d30fbda6075));\n\n\nconst $bdddcb57c2e57cb1$export$62c4a88ec5f406a7 = (out, src)=>(0, $40183e4ed970aff5$export$3772e887938e648f)(null, (0, $80a0bd8d6f74390a$export$e2f27988cc5b3a12)(out, src));\nconst $bdddcb57c2e57cb1$export$9977adf6ced6e7be = (out, src)=>(0, $40183e4ed970aff5$export$b144c3ea0bb0eb35)(null, (0, $80a0bd8d6f74390a$export$5bbeea95f392b8fe)(out, src));\n\n\n\n\n\n\n\nconst $67a8685a3a2751bf$export$e6056cb2e71b648d = (out, src)=>{\n    out = (0, $109ca59437083af7$export$7d15b64cf5a3a4c4)(out || src, src);\n    const p = out[1] < out[2] ? [\n        out[2],\n        out[1],\n        -1,\n        2 / 3\n    ] : [\n        out[1],\n        out[2],\n        0,\n        -1 / 3\n    ];\n    const q = out[0] < p[0] ? [\n        p[0],\n        p[1],\n        p[3],\n        out[0]\n    ] : [\n        out[0],\n        p[1],\n        p[2],\n        p[0]\n    ];\n    const c = q[0] - Math.min(q[1], q[3]);\n    return (0, $8777156db716e3d5$export$ba8c70ce75474f8d)(out, (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(Math.abs((q[3] - q[1]) / (6 * c + (0, $7d04a51e04f01300$export$56469a43a57ad8b6)) + q[2])), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(c), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(q[0]));\n};\n\n\nconst $b314e9c61f2f469d$export$ebedcdd15cc9bf0a = (out, src)=>{\n    out = (0, $67a8685a3a2751bf$export$e6056cb2e71b648d)(out, src);\n    out[2] -= out[1] * 0.5;\n    out[1] /= 1 + (0, $7d04a51e04f01300$export$56469a43a57ad8b6) - Math.abs(out[2] * 2 - 1);\n    return out;\n};\n\n\n\n\nconst $df4c95c253866091$export$5b10bb54545ea67e = (x)=>x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055;\nconst $df4c95c253866091$export$7a3b4878f4bbb062 = (x)=>x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n\n\nconst $fe4c15ab427c786e$export$b06545aaa0d83879 = (out, src)=>(0, $8777156db716e3d5$export$abee0037e1db715)(out || src, (0, $df4c95c253866091$export$5b10bb54545ea67e)(src[0]), (0, $df4c95c253866091$export$5b10bb54545ea67e)(src[1]), (0, $df4c95c253866091$export$5b10bb54545ea67e)(src[2]), (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]));\nconst $fe4c15ab427c786e$var$GAMMA = 1 / 2.2;\nconst $fe4c15ab427c786e$export$6e3e81c16f2688c2 = (out, src)=>(0, $8777156db716e3d5$export$abee0037e1db715)(out || src, src[0] ** $fe4c15ab427c786e$var$GAMMA, src[1] ** $fe4c15ab427c786e$var$GAMMA, src[2] ** $fe4c15ab427c786e$var$GAMMA, (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]));\n\n\n\n\n\n\n\nconst $0daaaaad33f3c135$export$3d9bf1c19a0bc433 = (out, hue, alpha = 1)=>{\n    hue = (0, $4980129a1ca3bad2$export$a57bfe0eb79af278)(hue) * 6;\n    return (0, $8777156db716e3d5$export$abee0037e1db715)(out || [], (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(Math.abs(hue - 3) - 1), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(2 - Math.abs(hue - 2)), (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(2 - Math.abs(hue - 4)), alpha);\n};\nconst $0daaaaad33f3c135$export$54272290a832ed1e = (out, hue, alpha = 1)=>$0daaaaad33f3c135$export$3d9bf1c19a0bc433(out, hue / 12, alpha);\n\n\n\nconst $25442775f4b8bc3c$export$8b5c95800cbf8ce0 = (out, src)=>{\n    const s = (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[1]);\n    const l = (0, $b8956ce4ea21c33f$export$5c5ee632c52bc4a2)(src[2]);\n    out = (0, $0daaaaad33f3c135$export$3d9bf1c19a0bc433)(out || src, src[0], (0, $68fc2977bf0c4876$export$4598496351993abf)(src[3]));\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    return (0, $8777156db716e3d5$export$ba8c70ce75474f8d)(out, (out[0] - 0.5) * c + l, (out[1] - 0.5) * c + l, (out[2] - 0.5) * c + l);\n};\n\n\nconst $a8263434ffd59ea1$export$8f4a7c0bb78e6ea8 = (0, $d120146997337610$export$dd366fca209b6b9f)({\n    mode: \"hsl\",\n    channels: {\n        h: {\n            hue: true\n        }\n    },\n    order: [\n        \"h\",\n        \"s\",\n        \"l\",\n        \"alpha\"\n    ],\n    from: {\n        rgb: (0, $b314e9c61f2f469d$export$ebedcdd15cc9bf0a),\n        srgb: (0, $b314e9c61f2f469d$export$ebedcdd15cc9bf0a),\n        hsv: (0, $a077bd5ced63e613$export$61d1db33a18350ee),\n        lch: [\n            (0, $9cd4c6fc9925bf97$export$1d9aa1122f81fc3e),\n            (0, $bdddcb57c2e57cb1$export$62c4a88ec5f406a7),\n            (0, $fe4c15ab427c786e$export$b06545aaa0d83879),\n            (0, $b314e9c61f2f469d$export$ebedcdd15cc9bf0a)\n        ]\n    },\n    toRgb: (0, $25442775f4b8bc3c$export$8b5c95800cbf8ce0)\n});\n\n\nvar $10b53d97c9b87c6a$exports = {};\nvar $10b53d97c9b87c6a$var$gsl_const = {};\n$10b53d97c9b87c6a$var$gsl_const.CGS = {};\n$10b53d97c9b87c6a$var$gsl_const.CGS.SPEED_OF_LIGHT = 2.99792458e+10; /* cm / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.GRAVITATIONAL_CONSTANT = 6.673e-8; /* cm^3 / g s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.PLANCKS_CONSTANT_H = 6.62606896e-27; /* g cm^2 / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.PLANCKS_CONSTANT_HBAR = 1.05457162825e-27; /* g cm^2 / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.ASTRONOMICAL_UNIT = 1.49597870691e+13; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.LIGHT_YEAR = 9.46053620707e+17; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.PARSEC = 3.08567758135e+18; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.GRAV_ACCEL = 9.80665e+2; /* cm / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.ELECTRON_VOLT = 1.602176487e-12; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MASS_ELECTRON = 9.10938188e-28; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MASS_MUON = 1.88353109e-25; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MASS_PROTON = 1.67262158e-24; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MASS_NEUTRON = 1.67492716e-24; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.RYDBERG = 2.17987196968e-11; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.BOLTZMANN = 1.3806504e-16; /* g cm^2 / K s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MOLAR_GAS = 8.314472e7; /* g cm^2 / K mol s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.STANDARD_GAS_VOLUME = 2.2710981e4; /* cm^3 / mol */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MINUTE = 6e1; /* s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.HOUR = 3.6e3; /* s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.DAY = 8.64e4; /* s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.WEEK = 6.048e5; /* s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.INCH = 2.54e0; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.FOOT = 3.048e1; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.YARD = 9.144e1; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MILE = 1.609344e5; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.NAUTICAL_MILE = 1.852e5; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.FATHOM = 1.8288e2; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MIL = 2.54e-3; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.POINT = 3.52777777778e-2; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.TEXPOINT = 3.51459803515e-2; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MICRON = 1e-4; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.ANGSTROM = 1e-8; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.HECTARE = 1e8; /* cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.ACRE = 4.04685642241e7; /* cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.BARN = 1e-24; /* cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.LITER = 1e3; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.US_GALLON = 3.78541178402e3; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.QUART = 9.46352946004e2; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.PINT = 4.73176473002e2; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.CUP = 2.36588236501e2; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.FLUID_OUNCE = 2.95735295626e1; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.TABLESPOON = 1.47867647813e1; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.TEASPOON = 4.92892159375e0; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.CANADIAN_GALLON = 4.54609e3; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.UK_GALLON = 4.546092e3; /* cm^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.MILES_PER_HOUR = 4.4704e1; /* cm / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.KILOMETERS_PER_HOUR = 2.77777777778e1; /* cm / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.KNOT = 5.14444444444e1; /* cm / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.POUND_MASS = 4.5359237e2; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.OUNCE_MASS = 2.8349523125e1; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.TON = 9.0718474e5; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.METRIC_TON = 1e6; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.UK_TON = 1.0160469088e6; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.TROY_OUNCE = 3.1103475e1; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.CARAT = 2e-1; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.UNIFIED_ATOMIC_MASS = 1.660538782e-24; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.GRAM_FORCE = 9.80665e2; /* cm g / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.POUND_FORCE = 4.44822161526e5; /* cm g / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.KILOPOUND_FORCE = 4.44822161526e8; /* cm g / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.POUNDAL = 1.38255e4; /* cm g / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.CALORIE = 4.1868e7; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.BTU = 1.05505585262e10; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.THERM = 1.05506e15; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.HORSEPOWER = 7.457e9; /* g cm^2 / s^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.BAR = 1e6; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.STD_ATMOSPHERE = 1.01325e6; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.TORR = 1.33322368421e3; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.METER_OF_MERCURY = 1.33322368421e6; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.INCH_OF_MERCURY = 3.38638815789e4; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.INCH_OF_WATER = 2.490889e3; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.PSI = 6.89475729317e4; /* g / cm s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.POISE = 1e0; /* g / cm s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.STOKES = 1e0; /* cm^2 / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.STILB = 1e0; /* cd / cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.LUMEN = 1e0; /* cd sr */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.LUX = 1e-4; /* cd sr / cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.PHOT = 1e0; /* cd sr / cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.FOOTCANDLE = 1.076e-3; /* cd sr / cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.LAMBERT = 1e0; /* cd sr / cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.FOOTLAMBERT = 1.07639104e-3; /* cd sr / cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.CURIE = 3.7e10; /* 1 / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.ROENTGEN = 2.58e-7; /* A s / g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.RAD = 1e2; /* cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.SOLAR_MASS = 1.98892e33; /* g */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.BOHR_RADIUS = 5.291772083e-9; /* cm */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.NEWTON = 1e5; /* cm g / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.DYNE = 1e0; /* cm g / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.JOULE = 1e7; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.ERG = 1e0; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-5; /* g / K^4 s^3 */ \n$10b53d97c9b87c6a$var$gsl_const.CGS.THOMSON_CROSS_SECTION = 6.65245893699e-25; /* cm^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGSM = {};\n$10b53d97c9b87c6a$var$gsl_const.CGSM.SPEED_OF_LIGHT = 2.99792458e10 /* cm / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.GRAVITATIONAL_CONSTANT = 6.673e-8 /* cm^3 / g s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PLANCKS_CONSTANT_H = 6.62606896e-27 /* g cm^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PLANCKS_CONSTANT_HBAR = 1.05457162825e-27 /* g cm^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ASTRONOMICAL_UNIT = 1.49597870691e13 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.LIGHT_YEAR = 9.46053620707e17 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PARSEC = 3.08567758135e18 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.GRAV_ACCEL = 9.80665e2 /* cm / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ELECTRON_VOLT = 1.602176487e-12 /* g cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MASS_ELECTRON = 9.10938188e-28 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MASS_MUON = 1.88353109e-25 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MASS_PROTON = 1.67262158e-24 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MASS_NEUTRON = 1.67492716e-24 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.RYDBERG = 2.17987196968e-11 /* g cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.BOLTZMANN = 1.3806504e-16 /* g cm^2 / K s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MOLAR_GAS = 8.314472e7 /* g cm^2 / K mol s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.STANDARD_GAS_VOLUME = 2.2710981e4 /* cm^3 / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MINUTE = 6e1 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.HOUR = 3.6e3 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.DAY = 8.64e4 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.WEEK = 6.048e5 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.INCH = 2.54e0 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.FOOT = 3.048e1 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.YARD = 9.144e1 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MILE = 1.609344e5 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.NAUTICAL_MILE = 1.852e5 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.FATHOM = 1.8288e2 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MIL = 2.54e-3 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.POINT = 3.52777777778e-2 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.TEXPOINT = 3.51459803515e-2 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MICRON = 1e-4 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ANGSTROM = 1e-8 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.HECTARE = 1e8 /* cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ACRE = 4.04685642241e7 /* cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.BARN = 1e-24 /* cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.LITER = 1e3 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.US_GALLON = 3.78541178402e3 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.QUART = 9.46352946004e2 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PINT = 4.73176473002e2 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.CUP = 2.36588236501e2 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.FLUID_OUNCE = 2.95735295626e1 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.TABLESPOON = 1.47867647813e1 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.TEASPOON = 4.92892159375e0 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.CANADIAN_GALLON = 4.54609e3 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.UK_GALLON = 4.546092e3 /* cm^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.MILES_PER_HOUR = 4.4704e1 /* cm / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.KILOMETERS_PER_HOUR = 2.77777777778e1 /* cm / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.KNOT = 5.14444444444e1 /* cm / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.POUND_MASS = 4.5359237e2 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.OUNCE_MASS = 2.8349523125e1 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.TON = 9.0718474e5 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.METRIC_TON = 1e6 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.UK_TON = 1.0160469088e6 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.TROY_OUNCE = 3.1103475e1 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.CARAT = 2e-1 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.UNIFIED_ATOMIC_MASS = 1.660538782e-24 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.GRAM_FORCE = 9.80665e2 /* cm g / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.POUND_FORCE = 4.44822161526e5 /* cm g / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.KILOPOUND_FORCE = 4.44822161526e8 /* cm g / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.POUNDAL = 1.38255e4 /* cm g / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.CALORIE = 4.1868e7 /* g cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.BTU = 1.05505585262e10; /* g cm^2 / s^2 */ \n$10b53d97c9b87c6a$var$gsl_const.CGSM.THERM = 1.05506e15 /* g cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.HORSEPOWER = 7.457e9 /* g cm^2 / s^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.BAR = 1e6 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.STD_ATMOSPHERE = 1.01325e6 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.TORR = 1.33322368421e3 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.METER_OF_MERCURY = 1.33322368421e6 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.INCH_OF_MERCURY = 3.38638815789e4 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.INCH_OF_WATER = 2.490889e3 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PSI = 6.89475729317e4 /* g / cm s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.POISE = 1e0 /* g / cm s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.STOKES = 1e0 /* cm^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.STILB = 1e0 /* cd / cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.LUMEN = 1e0 /* cd sr */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.LUX = 1e-4 /* cd sr / cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PHOT = 1e0 /* cd sr / cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.FOOTCANDLE = 1.076e-3 /* cd sr / cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.LAMBERT = 1e0 /* cd sr / cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.FOOTLAMBERT = 1.07639104e-3 /* cd sr / cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.CURIE = 3.7e10; /* 1 / s */ \n$10b53d97c9b87c6a$var$gsl_const.CGSM.ROENTGEN = 2.58e-8 /* abamp s / g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.RAD = 1e2 /* cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.SOLAR_MASS = 1.98892e33 /* g */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.BOHR_RADIUS = 5.291772083e-9 /* cm */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.NEWTON = 1e5 /* cm g / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.DYNE = 1e0 /* cm g / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.JOULE = 1e7 /* g cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ERG = 1e0 /* g cm^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-5 /* g / K^4 s^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.THOMSON_CROSS_SECTION = 6.65245893699e-25 /* cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.BOHR_MAGNETON = 9.27400899e-21 /* abamp cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.NUCLEAR_MAGNETON = 5.05078317e-24 /* abamp cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-21 /* abamp cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.PROTON_MAGNETIC_MOMENT = 1.410606633e-23 /* abamp cm^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.FARADAY = 9.64853429775e3 /* abamp s / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.CGSM.ELECTRON_CHARGE = 1.602176487e-20 /* abamp s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS = {};\n$10b53d97c9b87c6a$var$gsl_const.MKS.SPEED_OF_LIGHT = 2.99792458e8 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.GRAVITATIONAL_CONSTANT = 6.673e-11 /* m^3 / kg s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PLANCKS_CONSTANT_H = 6.62606896e-34 /* kg m^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PLANCKS_CONSTANT_HBAR = 1.05457162825e-34 /* kg m^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ASTRONOMICAL_UNIT = 1.49597870691e11 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.LIGHT_YEAR = 9.46053620707e15 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PARSEC = 3.08567758135e16 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.GRAV_ACCEL = 9.80665e0 /* m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ELECTRON_VOLT = 1.602176487e-19 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MASS_ELECTRON = 9.10938188e-31 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MASS_MUON = 1.88353109e-28 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MASS_PROTON = 1.67262158e-27 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MASS_NEUTRON = 1.67492716e-27 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.RYDBERG = 2.17987196968e-18 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.BOLTZMANN = 1.3806504e-23 /* kg m^2 / K s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MOLAR_GAS = 8.314472e0 /* kg m^2 / K mol s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.STANDARD_GAS_VOLUME = 2.2710981e-2 /* m^3 / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MINUTE = 6e1 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.HOUR = 3.6e3 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.DAY = 8.64e4 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.WEEK = 6.048e5 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.INCH = 2.54e-2 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.FOOT = 3.048e-1 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.YARD = 9.144e-1 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MILE = 1.609344e3 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.NAUTICAL_MILE = 1.852e3 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.FATHOM = 1.8288e0 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MIL = 2.54e-5 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.POINT = 3.52777777778e-4 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.TEXPOINT = 3.51459803515e-4 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MICRON = 1e-6 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ANGSTROM = 1e-10 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.HECTARE = 1e4 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ACRE = 4.04685642241e3 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.BARN = 1e-28 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.LITER = 1e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.US_GALLON = 3.78541178402e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.QUART = 9.46352946004e-4 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PINT = 4.73176473002e-4 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.CUP = 2.36588236501e-4 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.FLUID_OUNCE = 2.95735295626e-5 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.TABLESPOON = 1.47867647813e-5 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.TEASPOON = 4.92892159375e-6 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.CANADIAN_GALLON = 4.54609e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.UK_GALLON = 4.546092e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.MILES_PER_HOUR = 4.4704e-1 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.KILOMETERS_PER_HOUR = 2.77777777778e-1 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.KNOT = 5.14444444444e-1 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.POUND_MASS = 4.5359237e-1 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.OUNCE_MASS = 2.8349523125e-2 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.TON = 9.0718474e2 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.METRIC_TON = 1e3 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.UK_TON = 1.0160469088e3 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.TROY_OUNCE = 3.1103475e-2 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.CARAT = 2e-4 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.UNIFIED_ATOMIC_MASS = 1.660538782e-27 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.GRAM_FORCE = 9.80665e-3 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.POUND_FORCE = 4.44822161526e0 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.KILOPOUND_FORCE = 4.44822161526e3 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.POUNDAL = 1.38255e-1 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.CALORIE = 4.1868e0 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.BTU = 1.05505585262e3 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.THERM = 1.05506e8 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.HORSEPOWER = 7.457e2 /* kg m^2 / s^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.BAR = 1e5 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.STD_ATMOSPHERE = 1.01325e5 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.TORR = 1.33322368421e2 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.METER_OF_MERCURY = 1.33322368421e5 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.INCH_OF_MERCURY = 3.38638815789e3 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.INCH_OF_WATER = 2.490889e2 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PSI = 6.89475729317e3 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.POISE = 1e-1 /* kg m^-1 s^-1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.STOKES = 1e-4 /* m^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.STILB = 1e4 /* cd / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.LUMEN = 1e0 /* cd sr */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.LUX = 1e0 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PHOT = 1e4 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.FOOTCANDLE = 1.076e1 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.LAMBERT = 1e4 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.FOOTLAMBERT = 1.07639104e1 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.CURIE = 3.7e10 /* 1 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ROENTGEN = 2.58e-4 /* A s / kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.RAD = 1e-2 /* m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.SOLAR_MASS = 1.98892e30 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.BOHR_RADIUS = 5.291772083e-11 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.NEWTON = 1e0 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.DYNE = 1e-5 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.JOULE = 1e0 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ERG = 1e-7 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8 /* kg / K^4 s^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.THOMSON_CROSS_SECTION = 6.65245893699e-29 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.BOHR_MAGNETON = 9.27400899e-24 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.NUCLEAR_MAGNETON = 5.05078317e-27 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.PROTON_MAGNETIC_MOMENT = 1.410606633e-26 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.FARADAY = 9.64853429775e4 /* A s / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.ELECTRON_CHARGE = 1.602176487e-19 /* A s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.VACUUM_PERMITTIVITY = 8.854187817e-12 /* A^2 s^4 / kg m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.VACUUM_PERMEABILITY = 1.25663706144e-6 /* kg m / A^2 s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.DEBYE = 3.33564095198e-30 /* A s^2 / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKS.GAUSS = 1e-4 /* kg / A s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA = {};\n$10b53d97c9b87c6a$var$gsl_const.MKSA.SPEED_OF_LIGHT = 2.99792458e8 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.GRAVITATIONAL_CONSTANT = 6.673e-11 /* m^3 / kg s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PLANCKS_CONSTANT_H = 6.62606896e-34 /* kg m^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PLANCKS_CONSTANT_HBAR = 1.05457162825e-34 /* kg m^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ASTRONOMICAL_UNIT = 1.49597870691e11 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.LIGHT_YEAR = 9.46053620707e15 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PARSEC = 3.08567758135e16 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.GRAV_ACCEL = 9.80665e0 /* m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ELECTRON_VOLT = 1.602176487e-19 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MASS_ELECTRON = 9.10938188e-31 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MASS_MUON = 1.88353109e-28 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MASS_PROTON = 1.67262158e-27 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MASS_NEUTRON = 1.67492716e-27 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.RYDBERG = 2.17987196968e-18 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.BOLTZMANN = 1.3806504e-23 /* kg m^2 / K s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MOLAR_GAS = 8.314472e0 /* kg m^2 / K mol s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.STANDARD_GAS_VOLUME = 2.2710981e-2 /* m^3 / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MINUTE = 6e1 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.HOUR = 3.6e3 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.DAY = 8.64e4 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.WEEK = 6.048e5 /* s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.INCH = 2.54e-2 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.FOOT = 3.048e-1 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.YARD = 9.144e-1 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MILE = 1.609344e3 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.NAUTICAL_MILE = 1.852e3 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.FATHOM = 1.8288e0 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MIL = 2.54e-5 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.POINT = 3.52777777778e-4 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.TEXPOINT = 3.51459803515e-4 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MICRON = 1e-6 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ANGSTROM = 1e-10 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.HECTARE = 1e4 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ACRE = 4.04685642241e3 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.BARN = 1e-28 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.LITER = 1e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.US_GALLON = 3.78541178402e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.QUART = 9.46352946004e-4 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PINT = 4.73176473002e-4 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.CUP = 2.36588236501e-4 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.FLUID_OUNCE = 2.95735295626e-5 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.TABLESPOON = 1.47867647813e-5 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.TEASPOON = 4.92892159375e-6 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.CANADIAN_GALLON = 4.54609e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.UK_GALLON = 4.546092e-3 /* m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.MILES_PER_HOUR = 4.4704e-1 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.KILOMETERS_PER_HOUR = 2.77777777778e-1 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.KNOT = 5.14444444444e-1 /* m / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.POUND_MASS = 4.5359237e-1 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.OUNCE_MASS = 2.8349523125e-2 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.TON = 9.0718474e2 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.METRIC_TON = 1e3 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.UK_TON = 1.0160469088e3 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.TROY_OUNCE = 3.1103475e-2 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.CARAT = 2e-4 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.UNIFIED_ATOMIC_MASS = 1.660538782e-27 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.GRAM_FORCE = 9.80665e-3 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.POUND_FORCE = 4.44822161526e0 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.KILOPOUND_FORCE = 4.44822161526e3 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.POUNDAL = 1.38255e-1 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.CALORIE = 4.1868e0 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.BTU = 1.05505585262e3 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.THERM = 1.05506e8 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.HORSEPOWER = 7.457e2 /* kg m^2 / s^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.BAR = 1e5 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.STD_ATMOSPHERE = 1.01325e5 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.TORR = 1.33322368421e2 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.METER_OF_MERCURY = 1.33322368421e5 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.INCH_OF_MERCURY = 3.38638815789e3 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.INCH_OF_WATER = 2.490889e2 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PSI = 6.89475729317e3 /* kg / m s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.POISE = 1e-1 /* kg m^-1 s^-1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.STOKES = 1e-4 /* m^2 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.STILB = 1e4 /* cd / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.LUMEN = 1e0 /* cd sr */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.LUX = 1e0 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PHOT = 1e4 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.FOOTCANDLE = 1.076e1 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.LAMBERT = 1e4 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.FOOTLAMBERT = 1.07639104e1 /* cd sr / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.CURIE = 3.7e10 /* 1 / s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ROENTGEN = 2.58e-4 /* A s / kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.RAD = 1e-2 /* m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.SOLAR_MASS = 1.98892e30 /* kg */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.BOHR_RADIUS = 5.291772083e-11 /* m */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.NEWTON = 1e0 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.DYNE = 1e-5 /* kg m / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.JOULE = 1e0 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ERG = 1e-7 /* kg m^2 / s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8 /* kg / K^4 s^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.THOMSON_CROSS_SECTION = 6.65245893699e-29 /* m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.BOHR_MAGNETON = 9.27400899e-24 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.NUCLEAR_MAGNETON = 5.05078317e-27 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.PROTON_MAGNETIC_MOMENT = 1.410606633e-26 /* A m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.FARADAY = 9.64853429775e4 /* A s / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.ELECTRON_CHARGE = 1.602176487e-19 /* A s */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.VACUUM_PERMITTIVITY = 8.854187817e-12 /* A^2 s^4 / kg m^3 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.VACUUM_PERMEABILITY = 1.25663706144e-6 /* kg m / A^2 s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.DEBYE = 3.33564095198e-30 /* A s^2 / m^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.MKSA.GAUSS = 1e-4 /* kg / A s^2 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM = {};\n$10b53d97c9b87c6a$var$gsl_const.NUM.FINE_STRUCTURE = 7.297352533e-3 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.AVOGADRO = 6.02214199e23 /* 1 / mol */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.YOTTA = 1e24 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.ZETTA = 1e21 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.EXA = 1e18 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.PETA = 1e15 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.TERA = 1e12 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.GIGA = 1e9 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.MEGA = 1e6 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.KILO = 1e3 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.MILLI = 1e-3 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.MICRO = 1e-6 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.NANO = 1e-9 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.PICO = 1e-12 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.FEMTO = 1e-15 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.ATTO = 1e-18 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.ZEPTO = 1e-21 /* 1 */ ;\n$10b53d97c9b87c6a$var$gsl_const.NUM.YOCTO = 1e-24 /* 1 */ ;\n$10b53d97c9b87c6a$exports = $10b53d97c9b87c6a$var$gsl_const;\n\n\n\n\n\n\n\n\nconst { max: $a08182c464031bb0$var$max } = Math;\nconst $a08182c464031bb0$export$d538e2b459c01d7 = (states = 1, form = 2, count = 1)=>$a08182c464031bb0$var$max(1, states - form + 1) * form * count;\nvar $a08182c464031bb0$export$2e2bcd8739ae039 = $a08182c464031bb0$export$d538e2b459c01d7;\n\n\n\nvar $a55a51490c3e1d8b$exports = {};\n$a55a51490c3e1d8b$exports = \"/** Grid fragment shader. */\\n\\n#ifdef GL_EXT_draw_buffers\\n  #extension GL_EXT_draw_buffers : require\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\ngrid_useSamples\\n\\n#ifdef grid_output_motionFull\\n  grid_useReads_motionFull\\n#endif\\n#ifdef grid_output_motionBase\\n  grid_useReads_motionBase\\n#endif\\n\\n/** @todo `gl-gpgpu` should skip passes with no output; here for mass. */\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  #ifdef grid_splits\\n    uniform sampler2D grid_states[grid_splits];\\n  #else\\n    uniform sampler2D grid_states;\\n  #endif\\n\\n  uniform float grid_stepNow;\\n#endif\\n#if defined(grid_output_motionFull)\\n  uniform vec4 grid_stateShape;\\n#endif\\n\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  uniform vec3 g;\\n  uniform float dt;\\n\\n  #ifdef rescale_mass\\n    uniform vec2 rescaleMass;\\n  #else\\n    const float rescaledMass = 1.0;\\n  #endif\\n  #ifdef rescale_motion\\n    uniform vec2 rescaleMotion;\\n  #else\\n    const float rescaledMotion = 1.0;\\n  #endif\\n\\n  float when_gt_1540259130(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\n  /**\\n * Convenience to sample entries safely at their texel center.\\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\\n *\\n * @see [`spreadUV`](./spread-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\\n *   `[0+pad, 1-pad]`.\\n */\\n\\nvec2 offsetUV(vec2 uv, float size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, int size, float pad) {\\n  return offsetUV(uv, float(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\\n\\n  #if defined(rescale_mass) || defined(rescale_motion)\\n    /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n  #endif\\n#endif\\n#if defined(grid_output_motionFull)\\n  uniform vec4 boundsIn;\\n  uniform float boundsHit;\\n\\n  float when_lt_2281831123(float x, float y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec2 when_lt_2281831123(vec2 x, vec2 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec3 when_lt_2281831123(vec3 x, vec3 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec4 when_lt_2281831123(vec4 x, vec4 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\n  \\n\\nfloat when_ge_529295689(float x, float y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\nvec2 when_ge_529295689(vec2 x, vec2 y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\nvec3 when_ge_529295689(vec3 x, vec3 y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\nvec4 when_ge_529295689(vec4 x, vec4 y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\n#endif\\n\\nvarying vec2 grid_uv;\\n\\nconst vec2 v0 = vec2(0);\\n\\n#if defined(grid_output_motionFull)\\n  const float hitStop = 0.0;\\n  const float hitBack = 1.0;\\n  const float hitBounce = 2.0;\\n#endif\\n\\nvoid main() {\\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n    #ifdef readMass\\n    #elif defined(grid_output_motionFull)\\n      #define readMass grid_reads_motionFull_mass\\n    #elif defined(grid_output_motionBase)\\n      #define readMass grid_reads_motionBase_mass\\n    #endif\\n\\n    grid_tapState(offsetUV(grid_uv, grid_stateShape.xy));\\n    // grid_tapState(grid_uv);\\n\\n    #ifdef rescale_mass\\n      float rescaledMass = exponent(rescaleMass);\\n    #endif\\n    #ifdef rescale_motion\\n      float rescaledMotion = exponent(rescaleMotion);\\n    #endif\\n\\n    float mass = rescaledMass*grid_data[readMass].grid_channels_mass;\\n    float on = when_gt_1540259130(mass, 0.0);\\n    float massScale = 1.0/mix(1.0, mass, on);\\n  #endif\\n\\n  #ifdef grid_output_motionFull\\n    vec2 motionFull = rescaledMotion*\\n      grid_data[grid_reads_motionFull_motionFull].grid_channels_motionFull;\\n\\n    motionFull *= massScale;\\n\\n    /** External forces. */\\n    motionFull += normalize(g.xy-grid_uv)*g.z*dt;\\n\\n    /** Boundaries. */\\n\\n    vec2 at = grid_uv*grid_stateShape.xy;\\n\\n    vec4 boundsTo = vec4(boundsIn.xy, boundsIn.zw+grid_stateShape.xy)-at.xyxy;\\n\\n    vec4 boundsOut = vec4(when_gt_1540259130(boundsTo.xy, v0)*when_lt_2281831123(motionFull, v0),\\n      when_lt_2281831123(boundsTo.zw, v0)*when_gt_1540259130(motionFull, v0));\\n\\n    vec2 moveStop = v0;\\n    vec2 moveBack = (boundsTo.xy*boundsOut.xy)+(boundsTo.zw*boundsOut.zw);\\n    vec2 moveBounce = -motionFull;\\n    float geStop = when_ge_529295689(boundsHit, hitStop);\\n    float geBack = when_ge_529295689(boundsHit, hitBack);\\n    float geBounce = when_ge_529295689(boundsHit, hitBounce);\\n    vec2 moveHit = motionFull;\\n\\n    moveHit = mix(moveHit, moveStop, geStop);\\n    moveHit = mix(moveHit, moveBack, geBack);\\n    moveHit = mix(moveHit, moveBounce, geBounce);\\n    motionFull = mix(motionFull, moveHit, boundsOut.xy+boundsOut.zw);\\n\\n    // grid_output_motionFull = (on*motionFull)/rescaledMotion;\\n    grid_output_motionFull = motionFull/rescaledMotion;\\n  #endif\\n  #ifdef grid_output_motionBase\\n    vec2 motionBase = rescaledMotion*\\n      grid_data[grid_reads_motionBase_motionBase].grid_channels_motionBase;\\n\\n    // grid_output_motionBase = (on*motionBase*massScale)/rescaledMotion;\\n    grid_output_motionBase = (motionBase*massScale)/rescaledMotion;\\n  #endif\\n}\\n\";\n\n\nvar $834fcadedf4fafe1$exports = {};\n$834fcadedf4fafe1$exports = \"/** Grid-to-points fragment shader. */\\n\\n#ifdef GL_EXT_draw_buffers\\n  #extension GL_EXT_draw_buffers : require\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nstruct Kernel2 {\\n  vec2 base;\\n  vec2 diff;\\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\\n  mat3 weights;\\n};\\n\\nstruct UP2 {\\n  mat2 u;\\n  mat2 p;\\n};\\n\\nstruct SVD2 {\\n  mat2 u;\\n  mat2 sigma;\\n  mat2 v;\\n};\\n\\npoints_useSamples\\ngrid_useSamples\\n\\n#ifdef points_output_position\\n  points_useReads_position\\n#endif\\n#ifdef points_output_motion\\n  points_useReads_motion\\n#endif\\n#ifdef points_output_affine\\n  points_useReads_affine\\n#endif\\n#ifdef points_output_deform\\n  points_useReads_deform\\n#endif\\n\\n#if defined(points_output_position) || defined(points_output_motion) || \\\\\\n    defined(points_output_affine)\\n  grid_useReads_mass\\n#endif\\n\\n#if defined(points_output_position) || defined(points_output_motion) || \\\\\\n    defined(points_output_affine) || defined(points_output_deform)\\n  #ifdef points_splits\\n    uniform sampler2D points_states[points_splits];\\n  #else\\n    uniform sampler2D points_states;\\n  #endif\\n\\n  uniform float points_stepNow;\\n  uniform vec4 points_stateShape;\\n#endif\\n\\n#if defined(points_output_position) || defined(points_output_motion) || \\\\\\n    defined(points_output_affine)\\n  #ifdef grid_splits\\n    uniform sampler2D grid_states[grid_splits];\\n  #else\\n    uniform sampler2D grid_states;\\n  #endif\\n\\n  uniform float grid_stepNow;\\n  uniform vec4 grid_stateShape;\\n#endif\\n\\n#if defined(points_output_mass)\\n  /** @todo Move to looking up material types? */\\n  uniform float mass;\\n#endif\\n#if defined(points_output_stress)\\n  /** @todo Move to looking up material types? */\\n  uniform float volume;\\n#endif\\n#if defined(points_output_position) || defined(points_output_motion)\\n  /** Volume change threshold comparison. */\\n  uniform vec2 volumeSplit;\\n  /** ASFLIP motion adjustment. */\\n  uniform float motionAdjust;\\n  /** ASFLIP position adjustment range. */\\n  uniform vec2 positionAdjusts;\\n#endif\\n#if defined(points_output_deform) || defined(points_output_stress)\\n  /**\\n  * Mechanics parameters.\\n  *\\n  * @todo Move to individual particles looking up material types?\\n  */\\n\\n  /** Bulk modulus. */\\n  uniform float bulkMod;\\n  /** Shear modulus. */\\n  uniform float shearMod;\\n#endif\\n#if defined(points_output_deform)\\n  /**\\n  * Plasticity parameters.\\n  *\\n  * @todo Move to individual particles looking up material types?\\n  */\\n  uniform float materialFriction;\\n#endif\\n#if defined(points_output_position)\\n  uniform float boundsClamp;\\n#endif\\n#if defined(points_output_position) || defined(points_output_motion) || \\\\\\n    defined(points_output_affine) || defined(points_output_deform) || \\\\\\n    defined(points_output_stress)\\n  uniform float spawnOnAny;\\n  uniform float spawnOnOut;\\n  uniform float spawnOnSlow;\\n  uniform float spawnOnCentre;\\n#endif\\n#if defined(points_output_motion)\\n  uniform vec2 wander;\\n#endif\\n\\nuniform float dt;\\n\\nuniform vec4 bounds;\\nuniform float chaos;\\n\\n#ifdef rescale_mass\\n  uniform vec2 rescaleMass;\\n#else\\n  const float rescaledMass = 1.0;\\n#endif\\n#ifdef rescale_position\\n  uniform vec2 rescalePosition;\\n#else\\n  const float rescaledPosition = 1.0;\\n#endif\\n#ifdef rescale_motion\\n  uniform vec2 rescaleMotion;\\n#else\\n  const float rescaledMotion = 1.0;\\n#endif\\n#ifdef rescale_affine\\n  uniform vec2 rescaleAffine;\\n#else\\n  const float rescaledAffine = 1.0;\\n#endif\\n#ifdef rescale_deform\\n  uniform vec2 rescaleDeform;\\n#else\\n  const float rescaledDeform = 1.0;\\n#endif\\n#ifdef rescale_stress\\n  uniform vec2 rescaleStress;\\n#else\\n  const float rescaledStress = 1.0;\\n#endif\\n\\nvarying vec2 points_uv;\\n\\nconst vec2 v0 = vec2(0);\\nconst vec2 v1 = vec2(1);\\nconst mat2 m0 = mat2(0);\\n\\nfloat when_lt_2281831123(float x, float y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec2 when_lt_2281831123(vec2 x, vec2 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec3 when_lt_2281831123(vec3 x, vec3 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec4 when_lt_2281831123(vec4 x, vec4 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nfloat when_gt_529295689(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_529295689(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_529295689(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_529295689(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nfloat when_le_184046362(float x, float y) {\\n  return 1.0 - when_gt_529295689(x, y);\\n}\\n\\nvec2 when_le_184046362(vec2 x, vec2 y) {\\n  return 1.0 - when_gt_529295689(x, y);\\n}\\n\\nvec3 when_le_184046362(vec3 x, vec3 y) {\\n  return 1.0 - when_gt_529295689(x, y);\\n}\\n\\nvec4 when_le_184046362(vec4 x, vec4 y) {\\n  return 1.0 - when_gt_529295689(x, y);\\n}\\n\\nfloat when_ge_782122993(float x, float y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\nvec2 when_ge_782122993(vec2 x, vec2 y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\nvec3 when_ge_782122993(vec3 x, vec3 y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\nvec4 when_ge_782122993(vec4 x, vec4 y) {\\n  return 1.0 - when_lt_2281831123(x, y);\\n}\\n\\n// Math.PI * 2\\nconst float TAU = 6.28318530718;\\n\\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nfloat determinant(float m) {\\n  return m;\\n}\\n\\nfloat determinant(mat2 m) {\\n  return m[0][0] * m[1][1] - m[0][1] * m[1][0]; \\n}\\n\\nfloat determinant(mat3 m) {\\n  return m[0][0] * (m[2][2]*m[1][1] - m[1][2]*m[2][1])\\n       + m[0][1] * (m[1][2]*m[2][0] - m[2][2]*m[1][0])\\n       + m[0][2] * (m[2][1]*m[1][0] - m[1][1]*m[2][0]);\\n}\\n\\nfloat determinant(mat4 m) {\\n  float\\n      b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0],\\n      b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0],\\n      b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0],\\n      b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1],\\n      b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1],\\n      b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2],\\n      b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0],\\n      b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0],\\n      b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0],\\n      b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1],\\n      b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1],\\n      b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];\\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n}\\n\\nfloat transpose(float m) {\\n  return m;\\n}\\n\\nmat2 transpose(mat2 m) {\\n  return mat2(m[0][0], m[1][0],\\n              m[0][1], m[1][1]);\\n}\\n\\nmat3 transpose(mat3 m) {\\n  return mat3(m[0][0], m[1][0], m[2][0],\\n              m[0][1], m[1][1], m[2][1],\\n              m[0][2], m[1][2], m[2][2]);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\\n              m[0][1], m[1][1], m[2][1], m[3][1],\\n              m[0][2], m[1][2], m[2][2], m[3][2],\\n              m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\n/**\\n * Convenience to sample entries safely at their texel center.\\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\\n *\\n * @see [`spreadUV`](./spread-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\\n *   `[0+pad, 1-pad]`.\\n */\\n\\nvec2 offsetUV(vec2 uv, float size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, int size, float pad) {\\n  return offsetUV(uv, float(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\\n\\n// float trace(mat2 m) { return m[0][0]+m[1][1]; }\\n\\n#define createTrace(mat, n) \\\\\\nfloat trace(mat m) { \\\\\\n  float t = 0.0; \\\\\\n   \\\\\\n  for(int d = 0; d < n; ++d) { t += m[d][d]; } \\\\\\n   \\\\\\n  return t; \\\\\\n}\\n\\ncreateTrace(mat2, 2)\\ncreateTrace(mat3, 3)\\ncreateTrace(mat4, 4)\\n\\n// mat2 outerProduct(vec2 v0, vec2 v1) { return mat2(v0*v1[0], v0*v1[1]); }\\n\\n#define createOuterProduct(vec, mat, n) \\\\\\nmat outerProduct(vec v0, vec v1) { \\\\\\n  mat m; \\\\\\n   \\\\\\n  for(int d = 0; d < n; ++d) { m[d] = v0*v1[d]; } \\\\\\n   \\\\\\n  return m; \\\\\\n}\\n\\ncreateOuterProduct(vec2, mat2, 2)\\ncreateOuterProduct(vec3, mat3, 3)\\ncreateOuterProduct(vec4, mat4, 4)\\n\\n// float area(vec2 v) { return v.x*v.y; }\\n\\n#define createArea(vec, n) \\\\\\nfloat area(vec v) { \\\\\\n  float a = 1.0; \\\\\\n   \\\\\\n  for(int d = 0; d < n; ++d) { a *= v[d]; } \\\\\\n   \\\\\\n  return a; \\\\\\n}\\n\\ncreateArea(vec2, 2)\\ncreateArea(vec3, 3)\\ncreateArea(vec4, 4)\\n\\n#if defined(rescale_mass) || defined(rescale_position) || \\\\\\n    defined(rescale_motion) || defined(rescale_affine) || \\\\\\n    defined(rescale_deform) || defined(rescale_stress)\\n  /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n#endif\\n\\n#if defined(points_output_position) || defined(points_output_motion) || \\\\\\n    defined(points_output_affine)\\n  /**\\n * Quadratic weight kernel.\\n *\\n * @see [Equation 123, The Material Point Method for Simulating Continuum\\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\\n *\\n * @todo Test more and ensure this is the equivalent lookup.\\n */\\n\\nstruct Kernel3 {\\n  vec3 base;\\n  vec3 diff;\\n  mat3 weights;\\n};\\n\\n/** The cell base for each kernel type. */\\n#define createToBaseShare(t) \\\\\\nt toBase(t at) { \\\\\\n  t base; \\\\\\n   \\\\\\n  return toBase(at, base); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToBase(t) \\\\\\n  t toBase(t at, out t base) { return (base = floor(at)); } \\\\\\n  createToBaseShare(t)\\n#else\\n  /**\\n   * @todo Test if this is correct for negative numbers, seems to create gaps\\n   *   between positive and negative quadrants.\\n   */\\n  #define createToBase(t) \\\\\\n  t toBase(t at, out t base) { return (base = floor(at-0.5)); } \\\\\\n  createToBaseShare(t)\\n#endif\\n\\ncreateToBase(float)\\ncreateToBase(vec2)\\ncreateToBase(vec3)\\n\\n/** The cell base for each kernel type. */\\n#define createToDiffShare(t) \\\\\\nt toDiff(t at, t base) { \\\\\\n  t diff; \\\\\\n   \\\\\\n  return toDiff(at, base, diff); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\\\\n  createToDiffShare(t)\\n#else\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\\\\n  createToDiffShare(t)\\n#endif\\n\\ncreateToDiff(float)\\ncreateToDiff(vec2)\\ncreateToDiff(vec3)\\n\\nvec2 fillWeight(inout vec3 w, vec2 v) { return w.xy = v; }\\nvec3 fillWeight(inout vec3 w, vec3 v) { return w = v; }\\n\\n#ifdef kernelTypeCentre\\n  #define createToWeightsMain(vec) \\\\\\n    vec w0 = 0.5-diff; \\\\\\n    vec w1 = diff; \\\\\\n    vec w2 = 0.5+diff;\\n#else\\n  #define createToWeightsMain(vec) \\\\\\n    vec w0 = 1.5-diff; \\\\\\n    vec w1 = diff-1.0; \\\\\\n    vec w2 = diff-0.5;\\n#endif\\n\\n#define createToWeights(vec, mat) \\\\\\n \\\\\\nmat toWeights(vec diff, out mat weights) { \\\\\\n  createToWeightsMain(vec) \\\\\\n   \\\\\\n  fillWeight(weights[0], 0.5*(w0*w0)); \\\\\\n  fillWeight(weights[1], 0.75-(w1*w1)); \\\\\\n  fillWeight(weights[2], 0.5*(w2*w2)); \\\\\\n   \\\\\\n  return weights; \\\\\\n} \\\\\\n \\\\\\nmat toWeights(vec diff) { \\\\\\n  mat weights; \\\\\\n   \\\\\\n  return toWeights(diff, weights); \\\\\\n}\\n\\ncreateToWeights(vec2, mat3)\\ncreateToWeights(vec3, mat3)\\n\\n#define createToKernel(vec, mat, Kernel) \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base, out vec diff, out mat weights) { \\\\\\n  base = toBase(at, base); \\\\\\n  diff = toDiff(at, base, diff); \\\\\\n  weights = toWeights(diff, weights); \\\\\\n   \\\\\\n  return Kernel(base, diff, weights); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base, out vec diff) { \\\\\\n  mat weights; \\\\\\n   \\\\\\n  return toKernel(at, base, diff, weights); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base) { \\\\\\n  vec diff; \\\\\\n   \\\\\\n  return toKernel(at, base, diff); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at) { \\\\\\n  vec base; \\\\\\n   \\\\\\n  return toKernel(at, base); \\\\\\n}\\n\\ncreateToKernel(vec2, mat3, Kernel2)\\ncreateToKernel(vec3, mat3, Kernel3)\\n\\n  /** The cell offset for each kernel type. */\\n#define createToOffsetShare(t) \\\\\\nt toOffset(t offset) { \\\\\\n  t to; \\\\\\n   \\\\\\n  return toOffset(offset, to); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\\\\n  createToOffsetShare(t)\\n#else\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\\\\n  createToOffsetShare(t)\\n#endif\\n\\ncreateToOffset(float)\\ncreateToOffset(vec2)\\ncreateToOffset(vec3)\\n\\n  /**\\n * The distance function for each kernel type.\\n *\\n * @see [Incremental MPM cell distance](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L187-L201)\\n * @see [PyASFLIP cell distance](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L320-L339)\\n * @todo Not sure this is right, the scales might be off.\\n * @todo Work out the algebra more nicely in terms of `offset` and `diff`.\\n */\\n\\n#ifdef kernelTypeCentre\\n  /**\\n   * @example ```\\n   * // Goal:\\n   * dist(offset, base, at) = ((base+offset-1)-at)+0.5\\n   * // From offset:\\n   * offset = offset-1\\n   * // Thus:\\n   * dist(offset = offset-1, base, at) = ((base+offset)-at)+0.5\\n   * // From weights:\\n   * diff(base, at) = (at-base)-0.5\\n   * // And:\\n   * base(at) = floor(at)\\n   * // @todo The rest\\n   * ```\\n   *\\n   * @todo Derive the form `toDistance(offset, diff)`.\\n   */\\n  #define createToDistance(t) \\\\\\n   \\\\\\n  t toDistance(t offset, t base, t at) { \\\\\\n    return ((base+offset)-at)+0.5; \\\\\\n  } \\\\\\n   \\\\\\n  t toDistance(t offset, t diff);\\n#else\\n  \\n\\n  /**\\n   * @example ```\\n   * // Goal:\\n   * dist(offset, diff) = offset-diff\\n   * // From weights:\\n   * diff(base, at) = at-base\\n   * // Thus:\\n   * dist(offset, base, at) = offset-diff(base, at) = offset-(at-base)\\n   * ```\\n   */\\n  #define createToDistance(t) \\\\\\n   \\\\\\n  t toDistance(t offset, t diff) { return offset-diff; } \\\\\\n   \\\\\\n  t toDistance(t offset, t base, t at) { \\\\\\n    return toDistance(offset, toDiff(at, base)); \\\\\\n  }\\n#endif\\n\\ncreateToDistance(float)\\ncreateToDistance(vec2)\\ncreateToDistance(vec3)\\n\\n#endif\\n#if defined(points_output_deform) || defined(points_output_stress)\\n  \\n\\n/**\\n * Perform polar decomposition `(a = up)` for a 2D matrix.\\n *\\n * @param {mat2} a An input 2D matrix.\\n *\\n * @returns {struct} `to` Decomposed 2D matrices `u`, `p`.\\n * @returns {mat2} `to.u` A 2D orthogonal matrix.\\n * @returns {mat2} `to.p` A 2D positive or semi-positive definite matrix.\\n *\\n * @see [Taichi implementation of 2D matrix polar decomposition](https://github.com/taichi-dev/taichi/blob/e9f19b831c8a7b04a94ff5b06179bbe21f80a783/python/taichi/_funcs.py#L53-L96)\\n * @see [Mathematical concept](https://en.wikipedia.org/wiki/Polar_decomposition)\\n */\\nUP2 toPolar(in mat2 a, out mat2 u, out mat2 p) {\\n  UP2 to = UP2(mat2(1), a);\\n  vec2 a0 = a[0];\\n  vec2 a1 = a[1];\\n  float a00 = a0[0];\\n  float a01 = a0[1];\\n  float a10 = a1[0];\\n  float a11 = a1[1];\\n\\n  // If `a` is a zero matrix we simply return the pair `identity, a`.\\n  if(abs(a00)+abs(a01)+abs(a10)+abs(a11) == 0.0) { return to; }\\n\\n  float aDet = determinant(a);\\n  float flip = sign(aDet);\\n  mat2 b = mat2(a00+(a11*flip), a01-(a10*flip), a10-(a01*flip), a11+(a00*flip));\\n  // Here `det(b) != 0` if `a` is not the zero matrix.\\n  float k = 1.0/sqrt(abs(determinant(b)));\\n\\n  to.u = b*k;\\n  to.p = ((transpose(a)*a)+(abs(aDet)*mat2(1)))*k;\\n\\n  return to;\\n}\\n\\nUP2 toPolar(in mat2 a) {\\n  mat2 u;\\n  mat2 p;\\n\\n  return toPolar(a, u, p);\\n}\\n\\nconst float eps_1 = 1e-5;\\n\\n/**\\n * Perform singular value decomposition `(a = us*transpose(v))` for a 2D matrix.\\n *\\n * @param {mat2} a An input 2D matrix.\\n *\\n * @returns {struct} `to` Decomposed 2D matrixes `u`, `s`, `v`.\\n * @returns {mat2} `to.u` A 2D matrix.\\n * @returns {mat2} `to.s` A 2D matrix.\\n * @returns {mat2} `to.v` A 2D matrix.\\n *\\n * @see [Taichi Python code](https://github.com/taichi-dev/taichi/blob/e9f19b831c8a7b04a94ff5b06179bbe21f80a783/python/taichi/_funcs.py#L118-L157)\\n * @see [Paper](https://www.seas.upenn.edu/~cffjiang/research/svd/svd.pdf)\\n * @see [Mathematical concept](https://en.wikipedia.org/wiki/Singular_value_decomposition)\\n */\\nSVD2 toSVD(in mat2 a, out mat2 u, out mat2 sigma, out mat2 v) {\\n  mat2 r;\\n  mat2 s;\\n\\n  toPolar(a, r, s);\\n\\n  float vc = 1.0;\\n  float vs = 0.0;\\n  vec2 s0 = s[0];\\n  float s01 = s0[1];\\n  float s00 = s0[0];\\n  float s11 = s[1][1];\\n\\n  if(abs(s01) >= eps_1) {\\n    float tao = 0.5*(s00-s11);\\n    float t = s01/(tao+(sqrt((tao*tao)+(s01*s01))*sign(tao)));\\n\\n    vs = -t*(vc = 1.0/sqrt((t*t)+1.0));\\n\\n    float vc2 = vc*vc;\\n    float vs2 = vs*vs;\\n    float term = 2.0*vc*vs*s01;\\n\\n    s00 = (vc2*s00)-term+(vs2*s11);\\n    s11 = (vs2*s00)+term+(vc2*s11);\\n  }\\n\\n  float f = when_lt_2281831123(s00, s11);\\n\\n  sigma = mat2(mix(s00, s11, f), 0, 0, mix(s11, s00, f));\\n  v = mat2(mix(vc, -vs, f), mix(vs, vc, f), mix(-vs, -vc, f), mix(vc, -vs, f));\\n\\n  return SVD2(u = r*v, sigma, v);\\n}\\n\\nSVD2 toSVD(in mat2 a) {\\n  mat2 u;\\n  mat2 sigma;\\n  mat2 v;\\n\\n  return toSVD(a, u, sigma, v);\\n}\\n\\n#endif\\n#if defined(points_output_motion)\\n  /**\\n * @param {float} angle An angle, in radians, expects range `[0, 2*pi]`.\\n * @param {float} depth A depth, expects range `[-1, 1]`.\\n *\\n * @see [Spherical distribution](https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere)\\n */\\nvec2 onSphere(float angle) { return vec2(cos(angle), sin(angle)); }\\n\\nvec3 onSphere(float angle, float depth) {\\n  return vec3(sqrt(1.0-(depth*depth))*vec2(cos(angle), sin(angle)), depth);\\n}\\n\\n#endif\\n#if defined(points_output_deform)\\n  /**\\n * Project the singular values of the deformation gradient with Drucker-Prager\\n * model. Determines the yield surface.\\n *\\n * @see [Yue et al. 2018]\\n * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L206-L244)\\n */\\n\\nconst float eps_0 = 1e-6;\\n\\nmat2 projectDruckerPrager(inout mat2 sigma,\\n    float bulkMod, float shearMod, float friction) {\\n  /**\\n   * @todo Apply volume recovery, similar to damping.\\n   *   Multiply the recorded volume with a rate below one for better stability.\\n   *   Needs new material-point property `logSigma` and inputs `volumeRecovery`\\n   *   and `volumeRecordLimit`.\\n   */\\n  // float jse = sigma[0][0]*sigma[1][1];\\n  //\\n  // for(int c = 0; c < 2; ++c) {\\n  //   sigma[c][c] = max(eps, abs(sigma[c][c]*exp(logSigma*volumeRecovery)));\\n  // }\\n\\n  float s00 = sigma[0][0];\\n  float s11 = sigma[1][1];\\n  float je = max(eps_0, s00*s11);\\n\\n  if(je >= 1.0) {\\n    sigma[0][0] = sigma[1][1] = 1.0;\\n\\n    /**\\n     * @todo Record the geometric mean of per-dimension expansions for later\\n     *   volume recovery during compression, refer to [Gao et al. 2018].\\n     *   Perform this operation in the log-space for better numerical stability.\\n     *   For the same reason, set a limit on the recorded volume expansion.\\n     */\\n    // logSigma = min(volumeRecordLimit, logSigma+(log(max(eps, jse))*0.5));\\n\\n    return sigma;\\n  }\\n\\n  /** Check if the stress is inside the feasible region. */\\n  // logSigma = 0.0;\\n\\n  float je2 = je*je;\\n  float s00p2 = s00*s00;\\n  float s11p2 = s11*s11;\\n  float traceB2 = (s00p2+s11p2)*0.5;\\n  float yieldLimit = -friction*bulkMod*0.5*(je2-1.0);\\n  vec2 bDev = vec2(s00p2, s11p2)-traceB2;\\n  float yieldAt = shearMod*sqrt(((bDev[0]*bDev[0])+(bDev[1]*bDev[1]))/je);\\n\\n  if(yieldAt <= yieldLimit) { return sigma; }\\n\\n  /** Project to the yield surface. */\\n  float bDet = s00p2*s11p2;\\n  float bDetDev = bDev[0]*bDev[1];\\n  float lambda1 = yieldLimit/max(eps_0, yieldAt);\\n  float lambda0 = sqrt(max(0.0, bDet-(lambda1*lambda1*bDetDev)));\\n\\n  sigma[0][0] = sqrt(abs(lambda0+(lambda1*bDev[0])));\\n  sigma[1][1] = sqrt(abs(lambda0+(lambda1*bDev[1])));\\n\\n  return sigma;\\n}\\n\\n#endif\\n#if defined(points_output_stress)\\n  /**\\n * Compute stress with Simo's [1988] neo-Hookean elasticity.\\n *\\n * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L247-L260)\\n */\\n\\nmat2 neoHookeanElastic(mat2 u, mat2 sigma, float bulkMod, float shearMod) {\\n  float s00 = sigma[0][0];\\n  float s11 = sigma[1][1];\\n  float j = s00*s11;\\n  float shear = shearMod*sqrt(j);\\n  float bulk = bulkMod*0.5*((j*j)-1.0);\\n  float s00p2 = s00*s00;\\n  float s11p2 = s11*s11;\\n  float s2 = (s00p2+s11p2)*0.5;\\n  mat2 stress = mat2(1);\\n\\n  stress[0][0] = (s00p2-s2)*shear;\\n  stress[1][1] = (s11p2-s2)*shear;\\n  stress = u*stress*transpose(u);\\n  stress[0][0] += bulk;\\n  stress[1][1] += bulk;\\n\\n  return stress;\\n}\\n\\n#endif\\n\\nvoid main() {\\n  #ifdef pReadPosition\\n  #elif defined(points_output_position)\\n    #define pReadPosition points_reads_position_position\\n  #elif defined(points_output_motion)\\n    #define pReadPosition points_reads_motion_position\\n  #elif defined(points_output_affine)\\n    #define pReadPosition points_reads_affine_position\\n  #endif\\n\\n  #ifdef pReadMotion\\n  #elif defined(points_output_position)\\n    #define pReadMotion points_reads_position_motion\\n  #elif defined(points_output_motion)\\n    #define pReadMotion points_reads_motion_motion\\n  #endif\\n\\n  #ifdef pReadMass\\n  #elif defined(points_output_position)\\n    #define pReadMass points_reads_position_mass\\n  #endif\\n\\n  #ifdef pReadDeform\\n  #elif defined(points_output_deform)\\n    #define pReadDeform points_reads_deform_deform\\n  #endif\\n\\n  #if defined(points_output_position) || defined(points_output_motion) || \\\\\\n      defined(points_output_affine) || defined(points_output_deform)\\n    points_tapState(offsetUV(points_uv, points_stateShape.xy));\\n    // points_tapState(points_uv);\\n  #endif\\n\\n  #if defined(points_output_position) || defined(points_output_motion) || \\\\\\n      defined(points_output_affine)\\n    #ifdef rescale_position\\n      float rescaledPosition = exponent(rescalePosition);\\n    #endif\\n    #ifdef rescale_motion\\n      float rescaledMotion = exponent(rescaleMotion);\\n    #endif\\n\\n    vec2 pPosition = rescaledPosition*\\n      points_data[pReadPosition].points_channels_position;\\n\\n    /** Read grid material properties on 3 nodes in each axis. */\\n    vec2 gMotionFull = v0;\\n    vec2 gMotionBase = v0;\\n    mat2 gAffine = m0;\\n    /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\\n    vec2 cellAt = map(pPosition, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\\n\\n    Kernel2 kernel = toKernel(cellAt);\\n\\n    for(int gx = 0; gx < kernelSize; ++gx) {\\n      for(int gy = 0; gy < kernelSize; ++gy) {\\n        vec2 offset = toOffset(vec2(gx, gy));\\n        /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\\n        vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\\n\\n        grid_tapState(offsetUV(st, grid_stateShape.xy));\\n        // grid_tapState(st);\\n\\n        vec2 cMotionFull = rescaledMotion*\\n          grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\\n\\n        vec2 cMotionBase = rescaledMotion*\\n          grid_data[grid_reads_mass_motionBase].grid_channels_motionBase;\\n\\n        vec2 wmf = weight*cMotionFull;\\n        vec2 wmb = weight*cMotionBase;\\n\\n        gMotionFull += wmf;\\n        gMotionBase += wmb;\\n\\n        /** @todo Fix scaling, in both steps or one, differs to other way. */\\n        // vec2 cellDist = toKernelDistance(offset, kernel.base, cellAt);\\n        vec2 cellDist =\\n          toDistance(offset, kernel.base, cellAt)*grid_stateShape.xy;\\n\\n        // gAffine += 4.0*outerProduct(grid_stateShape.xy*wmf, cellDist);\\n        // gAffine += 4.0*outerProduct(wmf, grid_stateShape.xy*cellDist);\\n        // gAffine += 4.0*outerProduct(wmf, cellDist);\\n        gAffine += 4.0*weight*outerProduct(cMotionFull, cellDist);\\n      }\\n    }\\n  #endif\\n\\n  #if defined(points_output_position) || defined(points_output_motion)\\n    /**\\n    * Mix grid and point velocities for ASFLIP, according to whether the\\n    * material is separating.\\n    * Mix full-grid-motion with particle-motion minus base-grid-motion - same\\n    * as full-grid-motion but without stress or other effects applied, leaving\\n    * only those effects when subtracted.\\n    *\\n    * @see [The ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\\n    * @see [Taichi PyASFLIP implementation mixing old nodal motion](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L410-L415)\\n    */\\n    vec2 pMotion = rescaledMotion*\\n      points_data[pReadMotion].points_channels_motion;\\n\\n    vec2 motionSplit = motionAdjust*(pMotion-gMotionBase);\\n  #endif\\n\\n  #if defined(points_output_motion)\\n    vec2 motionTo = gMotionFull+motionSplit;\\n\\n    // Avoid slow spots, wander force.\\n\\n    float wanderOn = when_gt_529295689(wander.x, 0.0);\\n    float wanderScale = wanderOn/mix(1.0, wander.x, wanderOn);\\n    float wanderSlow = 1.0-clamp(dot(motionTo, motionTo)*wanderScale, 0.0, 1.0);\\n\\n    motionTo += wanderOn*wanderSlow*\\n      (onSphere((points_uv.x*chaos*237.378)+(points_uv.y*chaos*348.13)*TAU)*wander.y);\\n  #endif\\n\\n  #if defined(points_output_affine)\\n    #ifdef rescale_affine\\n      float rescaledAffine = exponent(rescaleAffine);\\n    #endif\\n\\n    mat2 affineTo = gAffine;\\n  #endif\\n\\n  #if defined(points_output_deform)\\n    /**\\n     * @todo Deformation and stress should ideally be calculated at the start of\\n     *   the time-step not the end. Unsure if it matters much in practice, but\\n     *   the output is used to calculate the position (deformation calculates\\n     *   the volume which affects ASFLIP positional adjustment), it may be\\n     *   better to move the deformation update to a separate step at the start\\n     *   of each time-step.\\n     *\\n     * @see [Taichi PyASFLIP DruckerPrager plasticity, Neo-Hookean Elasticity](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L324-L336)\\n     */\\n\\n    #ifdef rescale_deform\\n      float rescaledDeform = exponent(rescaleDeform);\\n    #endif\\n\\n    mat2 pDeform = rescaledDeform*\\n      mat2(points_data[pReadDeform].points_channels_deform);\\n\\n    mat2 deformTo = (mat2(1)+(dt*affineTo))*pDeform;\\n\\n    SVD2 deformSVD = toSVD(deformTo);\\n\\n    // Plasticity flow.\\n    deformSVD.sigma = projectDruckerPrager(deformSVD.sigma,\\n      bulkMod, shearMod, materialFriction);\\n\\n    // Reconstruct elastic deformation gradient after plasticity flow.\\n    deformTo = deformSVD.u*deformSVD.sigma*transpose(deformSVD.v);\\n  #endif\\n\\n  #if defined(points_output_position)\\n    #ifdef rescale_mass\\n      float rescaledMass = exponent(rescaleMass);\\n    #endif\\n\\n    float pMass = rescaledMass*points_data[pReadMass].points_channels_mass;\\n    /**\\n     * @todo Try alternative volume ratio for materials where the stress depends\\n     *   only on the volume ratio (e.g: weakly-compressible liquid), with large\\n     *   timestep.\\n     * @see [Equation 6 in ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\\n     */\\n    float volumeRatio = determinant(deformTo);\\n    /** @todo Understand and test this material dilation term. */\\n    float dilation = log(max(volumeSplit[0], volumeRatio))+(trace(affineTo)*dt);\\n    float splitting = when_ge_782122993(dilation, volumeSplit[1]);\\n    /**\\n     * @todo Higher `positionAdjusts.y` causes grid artefacts; so in effect the\\n     *   method can't extend from `AFLIP` to `ASFLIP` without this full\\n     *   positional adjustment.\\n     *   Explore if this is due to errors in the terms this relies on:\\n     *   - `deform`: relied upon by `positionAdjust` directly here.\\n     *   - `stress`: relied upon by `positionAdjust` via `motionFull` in P2G.\\n     *   - `affine`: relied upon by `positionAdjust` via `motionFull` in P2G,\\n     *     and relied upon by `deform` directly here.\\n     */\\n    float positionAdjust = mix(positionAdjusts.x, positionAdjusts.y, splitting);\\n    vec2 positionSplit = positionAdjust*motionSplit;\\n    vec2 positionTo = pPosition+((gMotionFull+positionSplit)*dt);\\n\\n    // Boundaries.\\n    positionTo = mix(positionTo,\\n      clamp(positionTo, bounds.xy, bounds.zw), boundsClamp);\\n  #endif\\n\\n  /**\\n   * @todo Seem to have tracked down the volume/collision loss\\n   *   clumping/compression issues to the `stress`, try to solve it.\\n   */\\n  #if defined(points_output_stress)\\n    #ifdef rescale_stress\\n      float rescaledStress = exponent(rescaleStress);\\n    #endif\\n\\n    /**\\n     * @todo This stress update is in grid-to-points just to avoid another\\n     *   `toSVD(pDeform)` in the points-to-grid step; reconsider this?\\n     */\\n    #ifndef points_output_deform\\n      SVD2 deformSVD = toSVD(pDeform);\\n      // SVD2 deformSVD = toSVD(deformTo);\\n    #endif\\n\\n    /**\\n     * `D**-1` term for APIC transfers.\\n     *\\n     * @see [APIC transfer `D**-1` in paragraph after Eqn. 176](file:///Users/eoghanokeeffe/Library/CloudStorage/GoogleDrive-keeffeoghan@gmail.com/My%20Drive/Read/Fluid%20Continuum%20Physics/Material%20Point%20Method/The%20Material%20Point%20Method%20for%20Simulating%20Continuum%20Materials%20(mpm.graphics).pdf)\\n     *\\n     * @todo `D**-1` seems to be for points-to-grid transfers, not for\\n     *   grid-to-points; should this use the inverse in grid-to-points, or does\\n     *   it not matter, or does an issue arise from moving this stress step from\\n     *   points-to-grid to grid-to-points?\\n     */\\n    float dInv = 4.0*area(grid_stateShape.xy);\\n    // float dInv = 1.0/(4.0*area(grid_stateShape.xy));\\n    // float dInv = 1.0;\\n\\n    /**\\n     * Neo-Hookean elasticity stress to Cauchy stress.\\n     *\\n     * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L100)\\n     * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L334)\\n     * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/2.%20MLS_MPM_NeoHookean_Multithreaded/MLS_MPM_NeoHookean_Multithreaded.cs#L262)\\n     */\\n    // mat2 stressTo = -dt*volume*volumeRatio*dInv*\\n    mat2 stressTo = -dt*volume*dInv*\\n      neoHookeanElastic(deformSVD.u, deformSVD.sigma, bulkMod, shearMod);\\n  #endif\\n\\n  #if defined(points_output_position) || defined(points_output_motion) || \\\\\\n      defined(points_output_affine) || defined(points_output_deform) || \\\\\\n      defined(points_output_stress)\\n    vec2 spawnOut = spawnOnOut*\\n      (when_lt_2281831123(positionTo, bounds.xy)+when_lt_2281831123(bounds.zw, positionTo));\\n\\n    // Avoid slow spots, respawn.\\n    float spawnSlow = spawnOnSlow*when_lt_2281831123(dot(motionTo, motionTo), spawnOnSlow);\\n\\n    // Avoid dead centre.\\n    float spawnCentre = spawnOnCentre*\\n      when_lt_2281831123(dot(positionTo, positionTo), spawnOnCentre);\\n\\n    float spawn = spawnOnAny*\\n      when_gt_529295689(spawnOut.x+spawnOut.y+spawnSlow+spawnCentre, 0.0);\\n\\n    float keep = 1.0-spawn;\\n  #endif\\n\\n  #ifdef points_output_position\\n    points_output_position = mix(positionTo,\\n        map(points_uv, v0, v1, bounds.xy, bounds.zw),\\n        max(spawn, when_le_184046362(pMass, 0.0)))/\\n      rescaledPosition;\\n  #endif\\n  #ifdef points_output_motion\\n    points_output_motion = (motionTo*keep)/rescaledMotion;\\n  #endif\\n  #ifdef points_output_mass\\n    points_output_mass = (mass*keep)/rescaledMass;\\n  #endif\\n  #ifdef points_output_affine\\n    points_output_affine =\\n      mix(vec4(0), vec4(affineTo), keep)/rescaledAffine;\\n      // mix(vec4(mat2(1)), vec4(affineTo), keep)/rescaledAffine;\\n      // mix(vec4(1, 0, 0, 1), vec4(affineTo), keep)/rescaledAffine;\\n  #endif\\n  #ifdef points_output_deform\\n    points_output_deform =\\n      // mix(vec4(0), vec4(deformTo), keep)/rescaledDeform;\\n      // mix(vec4(mat2(1)), vec4(deformTo), keep)/rescaledDeform;\\n      mix(vec4(1, 0, 0, 1), vec4(deformTo), keep)/rescaledDeform;\\n  #endif\\n  #ifdef points_output_stress\\n    points_output_stress =\\n      mix(vec4(0), vec4(stressTo), keep)/rescaledStress;\\n      // mix(vec4(mat2(1)), vec4(stressTo), keep)/rescaledStress;\\n      // mix(vec4(1, 0, 0, 1), vec4(stressTo), keep)/rescaledStress;\\n  #endif\\n}\\n\";\n\n\nvar $a9a4a8eabee7dea9$exports = {};\n$a9a4a8eabee7dea9$exports = \"/** Points-to-grid vertex shader. */\\n\\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\\n#define test_off 0\\n#define test_p2g 1\\n#define test_draw 2\\n#ifndef test\\n  #define test test_off\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\npoints_useSamples\\npoints_useReads_position\\n\\n/** @todo Draw to all the needed grid passes. */\\n\\n#ifdef points_splits\\n  uniform sampler2D points_states[points_splits];\\n#else\\n  uniform sampler2D points_states;\\n#endif\\n\\nuniform float points_stepNow;\\nuniform vec4 points_stateShape;\\n\\nuniform vec4 grid_stateShape;\\n\\nattribute vec2 vertex;\\nattribute float index;\\nattribute float splat;\\n\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  /** Advection scheme parameters. */\\n  uniform float stretch;\\n  uniform float turn;\\n#endif\\n\\nuniform vec4 bounds;\\nuniform vec2 widths;\\n\\n#ifdef rescale_affine\\n  uniform vec2 rescaleAffine;\\n#else\\n  const float rescaledAffine = 1.0;\\n#endif\\n\\n#if test == test_p2g\\n  uniform float loop;\\n\\n  varying vec4 color;\\n#endif\\n\\nvarying vec2 cellAt;\\nvarying vec2 cellBase;\\nvarying mat3 cellWeights;\\n\\n#ifdef points_grid_quads\\n  varying vec2 cellIndex;\\n#else\\n  varying vec3 point;\\n#endif\\n\\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\\\\n    defined(grid_output_motionBase)\\n  varying float mass;\\n#endif\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  varying mat2 affine;\\n  varying vec2 motion;\\n#endif\\n#if defined(grid_output_motionFull)\\n  varying mat2 stress;\\n#endif\\n\\nconst vec2 v0 = vec2(0);\\nconst vec2 v1 = vec2(1);\\n\\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  float transpose(float m) {\\n  return m;\\n}\\n\\nmat2 transpose(mat2 m) {\\n  return mat2(m[0][0], m[1][0],\\n              m[0][1], m[1][1]);\\n}\\n\\nmat3 transpose(mat3 m) {\\n  return mat3(m[0][0], m[1][0], m[2][0],\\n              m[0][1], m[1][1], m[2][1],\\n              m[0][2], m[1][2], m[2][2]);\\n}\\n\\nmat4 transpose(mat4 m) {\\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\\n              m[0][1], m[1][1], m[2][1], m[3][1],\\n              m[0][2], m[1][2], m[2][2], m[3][2],\\n              m[0][3], m[1][3], m[2][3], m[3][3]);\\n}\\n\\n#endif\\n\\n/**\\n * Convenience to turn a 1D entry index into a 2D texture `UV` for sampling.\\n * Note that this does not wrap the y-axis, so if the `index` exceeds the range\\n * `[0, (size.x*size.y)-1]`, the result y-axis will exceed the range `[0, 1]`.\\n *\\n * @see {@link util/remain-div.glsl!}\\n *\\n * @param {float|int} `index` 1D index, expect range `[0, (size.x*size.y)-1]`.\\n * @param {float|int|vec2|ivec2} `size` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n *\\n * @returns {vec2} 2D `UV` texture sample coordinate, expect range `[0, 1]`.\\n */\\n\\n/**\\n * Equivalent to a _remainder_ operator; same as `mod` for same-signed operands,\\n * but different for differently-signed operands, like JavaScript's `%`\\n * operator.\\n * Reuses the truncated division, and returns both; as both are useful in\\n * various places, e.g: index conversion.\\n *\\n * @see [GLSL modulo](https://www.shaderific.com/glsl-functions#modulo)\\n * @see [JS modulo/remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\\n *\\n * @param {float|int} `x` The first remainder/divide operand, expect `x >= 0`.\\n * @param {float|int} `y` The second remainder/divide operand, expect `y >= 0`.\\n *\\n * @returns {vec2|ivec2} The result as `[(remainder), (truncated division)]`;\\n *   always a `vec2` if any operand is a `float`.\\n */\\n\\nivec2 remainDiv(int x, int y) {\\n  // Careful handling integer maths; decimals truncated, works like a\\n  // _remainder_ operator, rather than `mod`.\\n  int d = x/y;\\n\\n  return ivec2(x-(y*d), d);\\n}\\n\\nvec2 remainDiv(float x, int y) {\\n  int d = int(x)/y;\\n\\n  // Remainder; like `mod` but with truncated `d` not floored, reuses `d`.\\n  // return vec2(mod(x, y), d);\\n  return vec2(x-float(y*d), d);\\n}\\n\\n/**\\n * Assume higher accuracy is desired; if less computation with `int` is desired,\\n * use `remainDiv(int(x), int(y))` or `vec2(remainDiv(int(x), int(y)))` instead.\\n */\\nvec2 remainDiv(float x, float y) { return remainDiv(x, int(y)); }\\n\\n/**\\n * Assume higher accuracy is desired; if less computation with `int` is desired,\\n * use `remainDiv(x, int(y))` or `vec2(remainDiv(x, int(y)))` instead.\\n */\\nvec2 remainDiv(int x, float y) { return remainDiv(float(x), y); }\\n\\nvec2 indexUV(float index, vec2 size) {\\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(int index, ivec2 size) {\\n  return vec2(remainDiv(index, size.x))/max(vec2(size-1), 1.0);\\n}\\n\\nvec2 indexUV(float index, ivec2 size) {\\n  return remainDiv(index, size.x)/max(vec2(size-1), 1.0);\\n}\\n\\nvec2 indexUV(int index, vec2 size) {\\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(float index, float size) {\\n  return remainDiv(index, size)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(int index, float size) {\\n  return remainDiv(index, size)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(float index, int size) {\\n  return remainDiv(index, size)/max(float(size-1), 1.0);\\n}\\n\\nvec2 indexUV(int index, int size) {\\n  return vec2(remainDiv(index, size))/max(float(size-1), 1.0);\\n}\\n\\n/**\\n * Convenience to sample entries safely at their texel center.\\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\\n *\\n * @see [`spreadUV`](./spread-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\\n *   `[0+pad, 1-pad]`.\\n */\\n\\nvec2 offsetUV(vec2 uv, float size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, int size, float pad) {\\n  return offsetUV(uv, float(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\\n\\n#ifdef points_grid_quads\\n  /**\\n * Convenience to spread entries safely to their texel edges range.\\n * Where `offsetUV` is for lookup queries, `spreadUV` is for lookup ranges.\\n *\\n * @see [`offsetUV`](./offset-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to spread, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The UV with spread to texel edges, expect range\\n *   `[0-pad, size+pad]`.\\n */\\n\\nvec2 spreadUV(vec2 uv, float size, float pad) { return (uv*(size+1.0))-pad; }\\nvec2 spreadUV(vec2 uv, vec2 size, float pad) { return (uv*(size+1.0))-pad; }\\nvec2 spreadUV(vec2 uv, vec2 size, vec2 pad) { return (uv*(size+1.0))-pad; }\\n\\nvec2 spreadUV(vec2 uv, int size, float pad) {\\n  return spreadUV(uv, float(size), pad);\\n}\\n\\nvec2 spreadUV(vec2 uv, ivec2 size, float pad) {\\n  return spreadUV(uv, vec2(size), pad);\\n}\\n\\nvec2 spreadUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return spreadUV(uv, vec2(size), pad);\\n}\\n\\nvec2 spreadUV(vec2 uv, float size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv, vec2 size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv, int size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv, ivec2 size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv) { return spreadUV(uv, 1.0, 0.5); }\\n\\n#endif\\n\\n/**\\n * Quadratic weight kernel.\\n *\\n * @see [Equation 123, The Material Point Method for Simulating Continuum\\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\\n *\\n * @todo Test more and ensure this is the equivalent lookup.\\n */\\n\\nstruct Kernel2 {\\n  vec2 base;\\n  vec2 diff;\\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\\n  mat3 weights;\\n};\\n\\nstruct Kernel3 {\\n  vec3 base;\\n  vec3 diff;\\n  mat3 weights;\\n};\\n\\n/** The cell base for each kernel type. */\\n#define createToBaseShare(t) \\\\\\nt toBase(t at) { \\\\\\n  t base; \\\\\\n   \\\\\\n  return toBase(at, base); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToBase(t) \\\\\\n  t toBase(t at, out t base) { return (base = floor(at)); } \\\\\\n  createToBaseShare(t)\\n#else\\n  /**\\n   * @todo Test if this is correct for negative numbers, seems to create gaps\\n   *   between positive and negative quadrants.\\n   */\\n  #define createToBase(t) \\\\\\n  t toBase(t at, out t base) { return (base = floor(at-0.5)); } \\\\\\n  createToBaseShare(t)\\n#endif\\n\\ncreateToBase(float)\\ncreateToBase(vec2)\\ncreateToBase(vec3)\\n\\n/** The cell base for each kernel type. */\\n#define createToDiffShare(t) \\\\\\nt toDiff(t at, t base) { \\\\\\n  t diff; \\\\\\n   \\\\\\n  return toDiff(at, base, diff); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\\\\n  createToDiffShare(t)\\n#else\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\\\\n  createToDiffShare(t)\\n#endif\\n\\ncreateToDiff(float)\\ncreateToDiff(vec2)\\ncreateToDiff(vec3)\\n\\nvec2 fillWeight(inout vec3 w, vec2 v) { return w.xy = v; }\\nvec3 fillWeight(inout vec3 w, vec3 v) { return w = v; }\\n\\n#ifdef kernelTypeCentre\\n  #define createToWeightsMain(vec) \\\\\\n    vec w0 = 0.5-diff; \\\\\\n    vec w1 = diff; \\\\\\n    vec w2 = 0.5+diff;\\n#else\\n  #define createToWeightsMain(vec) \\\\\\n    vec w0 = 1.5-diff; \\\\\\n    vec w1 = diff-1.0; \\\\\\n    vec w2 = diff-0.5;\\n#endif\\n\\n#define createToWeights(vec, mat) \\\\\\n \\\\\\nmat toWeights(vec diff, out mat weights) { \\\\\\n  createToWeightsMain(vec) \\\\\\n   \\\\\\n  fillWeight(weights[0], 0.5*(w0*w0)); \\\\\\n  fillWeight(weights[1], 0.75-(w1*w1)); \\\\\\n  fillWeight(weights[2], 0.5*(w2*w2)); \\\\\\n   \\\\\\n  return weights; \\\\\\n} \\\\\\n \\\\\\nmat toWeights(vec diff) { \\\\\\n  mat weights; \\\\\\n   \\\\\\n  return toWeights(diff, weights); \\\\\\n}\\n\\ncreateToWeights(vec2, mat3)\\ncreateToWeights(vec3, mat3)\\n\\n#define createToKernel(vec, mat, Kernel) \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base, out vec diff, out mat weights) { \\\\\\n  base = toBase(at, base); \\\\\\n  diff = toDiff(at, base, diff); \\\\\\n  weights = toWeights(diff, weights); \\\\\\n   \\\\\\n  return Kernel(base, diff, weights); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base, out vec diff) { \\\\\\n  mat weights; \\\\\\n   \\\\\\n  return toKernel(at, base, diff, weights); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base) { \\\\\\n  vec diff; \\\\\\n   \\\\\\n  return toKernel(at, base, diff); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at) { \\\\\\n  vec base; \\\\\\n   \\\\\\n  return toKernel(at, base); \\\\\\n}\\n\\ncreateToKernel(vec2, mat3, Kernel2)\\ncreateToKernel(vec3, mat3, Kernel3)\\n\\n/** The cell offset for each kernel type. */\\n#define createToOffsetShare(t) \\\\\\nt toOffset(t offset) { \\\\\\n  t to; \\\\\\n   \\\\\\n  return toOffset(offset, to); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\\\\n  createToOffsetShare(t)\\n#else\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\\\\n  createToOffsetShare(t)\\n#endif\\n\\ncreateToOffset(float)\\ncreateToOffset(vec2)\\ncreateToOffset(vec3)\\n\\n#if defined(rescale_affine)\\n  /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n#endif\\n\\n/**\\n * @todo Handle separate splats, by how many buffers can be drawn to.\\n * @todo Separate processes according to active outputs.\\n */\\nvoid main() {\\n  vec2 uv = indexUV(index, points_stateShape.xy);\\n\\n  uv = offsetUV(uv, points_stateShape.xy);\\n  points_tapState(uv);\\n\\n  vec2 position = points_data[points_reads_position_position]\\n    .points_channels_position;\\n\\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\\\\n      defined(grid_output_motionBase)\\n    mass = points_data[points_reads_position_mass].points_channels_mass;\\n  #endif\\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n    #ifdef rescale_affine\\n      float rescaledAffine = exponent(rescaleAffine);\\n    #endif\\n\\n    vec2 advection = (stretch+vec2(turn, -turn))*0.5;\\n\\n    affine = rescaledAffine*\\n      mat2(points_data[points_reads_position_affine].points_channels_affine);\\n\\n    affine = (mass*((affine*advection.x)+(transpose(affine)*advection.y)))/\\n      rescaledAffine;\\n\\n    motion = points_data[points_reads_position_motion].points_channels_motion;\\n  #endif\\n  #if defined(grid_output_motionFull)\\n    stress = mat2(points_data[points_reads_position_stress]\\n      .points_channels_stress);\\n  #endif\\n\\n  /** Map the position into the correct range with the proper offset. */\\n  #if test != test_p2g\\n    /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\\n    cellAt = map(position, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\\n  #else\\n    // cellAt = mod((uv+(loop*9e-5))*grid_stateShape.xy, grid_stateShape.xy);\\n    cellAt = uv*grid_stateShape.xy;\\n    color = vec4(uv, 0.5, 1);\\n  #endif\\n\\n  vec2 cellDiff;\\n  /** Kernel weights and positions, to scale the values per-fragment. */\\n  toKernel(cellAt, cellBase, cellDiff, cellWeights);\\n  vec2 to = cellBase+toOffset(vertex*float(kernelSize));\\n\\n  gl_Position = vec4(map(to, v0, grid_stateShape.xy, -v1, v1), 0, 1);\\n\\n  #ifdef points_grid_quads\\n    /**\\n     * Mask the weights by the distance from these indexes per-fragment.\\n     * Account for the half-pixel offset at the fragment centre.\\n     * @see [Pixel coordinates on WebGL Fundamentals](https://webglfundamentals.org/webgl/lessons/webgl-shadertoy.html#pixel-coords)\\n     */\\n    cellIndex = spreadUV(vertex, kernelSize-1);\\n  #else\\n    /**\\n     * Convert vertex position to `gl_FragCoord` window-space.\\n     * @see [SO](https://stackoverflow.com/a/7158573)\\n     * @see [SO](https://stackoverflow.com/a/54237532/716898)\\n     */\\n    point = vec3(to, 0.5*(gl_PointSize = float(kernelSize)));\\n  #endif\\n}\\n\";\n\n\nvar $974b845aa5371f02$exports = {};\n$974b845aa5371f02$exports = \"/** Points-to-grid fragment shader. */\\n\\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\\n#define test_off 0\\n#define test_p2g 1\\n#define test_draw 2\\n#ifndef test\\n  #define test test_off\\n#endif\\n\\n#ifdef GL_EXT_draw_buffers\\n  #extension GL_EXT_draw_buffers : require\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\n/** @todo Draw to all the needed grid passes. */\\n\\nuniform vec4 grid_stateShape;\\n\\n#ifdef rescale_motion\\n  uniform vec2 rescaleMotion;\\n#else\\n  const float rescaledMotion = 1.0;\\n#endif\\n#ifdef rescale_mass\\n  uniform vec2 rescaleMass;\\n#else\\n  const float rescaledMass = 1.0;\\n#endif\\n#ifdef rescale_affine\\n  uniform vec2 rescaleAffine;\\n#else\\n  const float rescaledAffine = 1.0;\\n#endif\\n#ifdef rescale_stress\\n  uniform vec2 rescaleStress;\\n#else\\n  const float rescaledStress = 1.0;\\n#endif\\n\\n#if test == test_p2g\\n  varying vec4 color;\\n#endif\\n\\nvarying vec2 cellAt;\\nvarying vec2 cellBase;\\nvarying mat3 cellWeights;\\n\\n#ifdef points_grid_quads\\n  varying vec2 cellIndex;\\n#else\\n  varying vec3 point;\\n#endif\\n\\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\\\\n    defined(grid_output_motionBase)\\n  varying float mass;\\n#endif\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  varying mat2 affine;\\n  varying vec2 motion;\\n#endif\\n#if defined(grid_output_motionFull)\\n  varying mat2 stress;\\n#endif\\n\\nconst mat3 mask = mat3(vec3(0), vec3(1), vec3(2));\\n\\nconst vec2 eps = vec2(1e-1);\\nconst vec2 v0 = vec2(0);\\nconst vec2 v1 = vec2(1);\\n\\n#ifndef points_grid_quads\\n  /**\\n * Convenience to spread entries safely to their texel edges range.\\n * Where `offsetUV` is for lookup queries, `spreadUV` is for lookup ranges.\\n *\\n * @see [`offsetUV`](./offset-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to spread, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The UV with spread to texel edges, expect range\\n *   `[0-pad, size+pad]`.\\n */\\n\\nvec2 spreadUV(vec2 uv, float size, float pad) { return (uv*(size+1.0))-pad; }\\nvec2 spreadUV(vec2 uv, vec2 size, float pad) { return (uv*(size+1.0))-pad; }\\nvec2 spreadUV(vec2 uv, vec2 size, vec2 pad) { return (uv*(size+1.0))-pad; }\\n\\nvec2 spreadUV(vec2 uv, int size, float pad) {\\n  return spreadUV(uv, float(size), pad);\\n}\\n\\nvec2 spreadUV(vec2 uv, ivec2 size, float pad) {\\n  return spreadUV(uv, vec2(size), pad);\\n}\\n\\nvec2 spreadUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return spreadUV(uv, vec2(size), pad);\\n}\\n\\nvec2 spreadUV(vec2 uv, float size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv, vec2 size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv, int size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv, ivec2 size) { return spreadUV(uv, size, 0.5); }\\nvec2 spreadUV(vec2 uv) { return spreadUV(uv, 1.0, 0.5); }\\n\\n#endif\\n\\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n  /** The cell offset for each kernel type. */\\n#define createToOffsetShare(t) \\\\\\nt toOffset(t offset) { \\\\\\n  t to; \\\\\\n   \\\\\\n  return toOffset(offset, to); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\\\\n  createToOffsetShare(t)\\n#else\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\\\\n  createToOffsetShare(t)\\n#endif\\n\\ncreateToOffset(float)\\ncreateToOffset(vec2)\\ncreateToOffset(vec3)\\n\\n  /**\\n * The distance function for each kernel type.\\n *\\n * @see [Incremental MPM cell distance](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L187-L201)\\n * @see [PyASFLIP cell distance](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L320-L339)\\n * @todo Not sure this is right, the scales might be off.\\n * @todo Work out the algebra more nicely in terms of `offset` and `diff`.\\n */\\n\\n#ifdef kernelTypeCentre\\n  /**\\n   * @example ```\\n   * // Goal:\\n   * dist(offset, base, at) = ((base+offset-1)-at)+0.5\\n   * // From offset:\\n   * offset = offset-1\\n   * // Thus:\\n   * dist(offset = offset-1, base, at) = ((base+offset)-at)+0.5\\n   * // From weights:\\n   * diff(base, at) = (at-base)-0.5\\n   * // And:\\n   * base(at) = floor(at)\\n   * // @todo The rest\\n   * ```\\n   *\\n   * @todo Derive the form `toDistance(offset, diff)`.\\n   */\\n  #define createToDistance(t) \\\\\\n   \\\\\\n  t toDistance(t offset, t base, t at) { \\\\\\n    return ((base+offset)-at)+0.5; \\\\\\n  } \\\\\\n   \\\\\\n  t toDistance(t offset, t diff);\\n#else\\n  /** The cell base for each kernel type. */\\n#define createToDiffShare(t) \\\\\\nt toDiff(t at, t base) { \\\\\\n  t diff; \\\\\\n   \\\\\\n  return toDiff(at, base, diff); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\\\\n  createToDiffShare(t)\\n#else\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\\\\n  createToDiffShare(t)\\n#endif\\n\\ncreateToDiff(float)\\ncreateToDiff(vec2)\\ncreateToDiff(vec3)\\n\\n  /**\\n   * @example ```\\n   * // Goal:\\n   * dist(offset, diff) = offset-diff\\n   * // From weights:\\n   * diff(base, at) = at-base\\n   * // Thus:\\n   * dist(offset, base, at) = offset-diff(base, at) = offset-(at-base)\\n   * ```\\n   */\\n  #define createToDistance(t) \\\\\\n   \\\\\\n  t toDistance(t offset, t diff) { return offset-diff; } \\\\\\n   \\\\\\n  t toDistance(t offset, t base, t at) { \\\\\\n    return toDistance(offset, toDiff(at, base)); \\\\\\n  }\\n#endif\\n\\ncreateToDistance(float)\\ncreateToDistance(vec2)\\ncreateToDistance(vec3)\\n\\n#endif\\n\\nfloat when_lt_1117569599(float x, float y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec2 when_lt_1117569599(vec2 x, vec2 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec3 when_lt_1117569599(vec3 x, vec3 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec4 when_lt_1117569599(vec4 x, vec4 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\n#if defined(rescale_motion) || defined(rescale_mass) || \\\\\\n  defined(rescale_affine) || defined(rescale_stress)\\n  /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n#endif\\n\\nvoid main() {\\n  #if test == test_p2g\\n    for(int t = 0; t < grid_textures; ++t) { gl_FragData[t].rgba = color; }\\n\\n    return;\\n  #endif\\n\\n  #ifndef points_grid_quads\\n    /**\\n     * Convert vertex position to `gl_FragCoord` window-space.\\n     * Mask the weights by the distance from these indexes per-fragment.\\n     * Account for the half-pixel offset at the fragment centre.\\n     * @see [Pixel coordinates on WebGL Fundamentals](https://webglfundamentals.org/webgl/lessons/webgl-shadertoy.html#pixel-coords)\\n     * @see [SO](https://stackoverflow.com/a/7158573)\\n     * @see [SO](https://stackoverflow.com/a/54237532/716898)\\n     */\\n    vec2 cellIndex = map(gl_FragCoord.xy-point.xy, -point.bb, point.bb, v0, v1);\\n\\n    cellIndex = spreadUV(cellIndex, kernelSize-1);\\n  #endif\\n\\n  vec2 maskWeight = v0;\\n\\n  for(int i = 0; i < kernelSize; ++i) {\\n    maskWeight += cellWeights[i].xy*when_lt_1117569599(abs(cellIndex-mask[i].xy), eps);\\n  }\\n\\n  float weight = maskWeight.x*maskWeight.y;\\n\\n  /** @todo Handle multiple passes properly. */\\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\\\\n      defined(grid_output_motionBase)\\n    #ifdef rescale_mass\\n      float rescaledMass = exponent(rescaleMass);\\n    #endif\\n\\n    float massTo = rescaledMass*mass;\\n  #endif\\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\\n    #ifdef rescale_motion\\n      float rescaledMotion = exponent(rescaleMotion);\\n    #endif\\n    #ifdef rescale_affine\\n      float rescaledAffine = exponent(rescaleAffine);\\n    #endif\\n\\n    vec2 motionTo = rescaledMotion*motion;\\n    mat2 affineTo = rescaledAffine*affine;\\n    vec2 massMotion = massTo*motionTo;\\n    vec2 offset = toOffset(cellIndex);\\n\\n    vec2 cellDist =\\n      toDistance(offset, cellBase, cellAt)/grid_stateShape.xy;\\n  #endif\\n  #if defined(grid_output_motionFull)\\n    #ifdef rescale_stress\\n      float rescaledStress = exponent(rescaleStress);\\n    #endif\\n\\n    mat2 stressTo = rescaledStress*stress;\\n  #endif\\n\\n  #ifdef grid_output_mass\\n    grid_output_mass = (weight*massTo)/rescaledMass;\\n  #endif\\n  #ifdef grid_output_motionFull\\n    grid_output_motionFull =\\n      (weight*(massMotion+((stressTo+affineTo)*cellDist)))/rescaledMotion;\\n  #endif\\n  #ifdef grid_output_motionBase\\n    grid_output_motionBase =\\n      (weight*(massMotion+(affineTo*cellDist)))/rescaledMotion;\\n  #endif\\n}\\n\";\n\n\nvar $3d4623c2f2b7e7e3$exports = {};\n$3d4623c2f2b7e7e3$exports = \"/** Grid-to-screen fragment shader. */\\n\\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\\n#define test_off 0\\n#define test_p2g 1\\n#define test_draw 2\\n#ifndef test\\n  #define test test_off\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nstruct Kernel2 {\\n  vec2 base;\\n  vec2 diff;\\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\\n  mat3 weights;\\n};\\n\\ngrid_useSamples\\ngrid_useReads_mass\\n\\n#ifdef grid_splits\\n  uniform sampler2D grid_states[grid_splits];\\n#else\\n  uniform sampler2D grid_states;\\n#endif\\n\\nuniform float grid_stepNow;\\nuniform vec4 grid_stateShape;\\n\\nuniform vec2 range;\\nuniform vec2 curve[4];\\nuniform vec4 colorLo;\\nuniform vec4 colorHi;\\n\\n#ifdef angleHSLA\\n  uniform vec4 angleHSLA;\\n#endif\\n\\nuniform vec2 aspect;\\n\\n#ifdef rescale_motion\\n  uniform vec2 rescaleMotion;\\n#else\\n  const float rescaledMotion = 1.0;\\n#endif\\n\\nvarying vec2 grid_uv;\\n\\nconst vec2 v0 = vec2(0);\\nconst vec2 v1 = vec2(1);\\n\\nfloat when_lt_1604150559(float x, float y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec2 when_lt_1604150559(vec2 x, vec2 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec3 when_lt_1604150559(vec3 x, vec3 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec4 when_lt_1604150559(vec4 x, vec4 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\n#ifdef angleHSLA\\n  float hue2rgb(float f1, float f2, float hue) {\\n    if (hue < 0.0)\\n        hue += 1.0;\\n    else if (hue > 1.0)\\n        hue -= 1.0;\\n    float res;\\n    if ((6.0 * hue) < 1.0)\\n        res = f1 + (f2 - f1) * 6.0 * hue;\\n    else if ((2.0 * hue) < 1.0)\\n        res = f2;\\n    else if ((3.0 * hue) < 2.0)\\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\\n    else\\n        res = f1;\\n    return res;\\n}\\n\\nvec3 hsl2rgb(vec3 hsl) {\\n    vec3 rgb;\\n    \\n    if (hsl.y == 0.0) {\\n        rgb = vec3(hsl.z); // Luminance\\n    } else {\\n        float f2;\\n        \\n        if (hsl.z < 0.5)\\n            f2 = hsl.z * (1.0 + hsl.y);\\n        else\\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\\n            \\n        float f1 = 2.0 * hsl.z - f2;\\n        \\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\\n        rgb.g = hue2rgb(f1, f2, hsl.x);\\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\\n    }   \\n    return rgb;\\n}\\n\\nvec3 hsl2rgb(float h, float s, float l) {\\n    return hsl2rgb(vec3(h, s, l));\\n}\\n\\n  const float PI = 3.14159265359;\\n\\n#endif\\n\\n/**\\n * Convenience to sample entries safely at their texel center.\\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\\n *\\n * @see [`spreadUV`](./spread-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\\n *   `[0+pad, 1-pad]`.\\n */\\n\\nvec2 offsetUV(vec2 uv, float size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, int size, float pad) {\\n  return offsetUV(uv, float(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\\n\\n/**\\n * Quadratic weight kernel.\\n *\\n * @see [Equation 123, The Material Point Method for Simulating Continuum\\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\\n *\\n * @todo Test more and ensure this is the equivalent lookup.\\n */\\n\\nstruct Kernel3 {\\n  vec3 base;\\n  vec3 diff;\\n  mat3 weights;\\n};\\n\\n/** The cell base for each kernel type. */\\n#define createToBaseShare(t) \\\\\\nt toBase(t at) { \\\\\\n  t base; \\\\\\n   \\\\\\n  return toBase(at, base); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToBase(t) \\\\\\n  t toBase(t at, out t base) { return (base = floor(at)); } \\\\\\n  createToBaseShare(t)\\n#else\\n  /**\\n   * @todo Test if this is correct for negative numbers, seems to create gaps\\n   *   between positive and negative quadrants.\\n   */\\n  #define createToBase(t) \\\\\\n  t toBase(t at, out t base) { return (base = floor(at-0.5)); } \\\\\\n  createToBaseShare(t)\\n#endif\\n\\ncreateToBase(float)\\ncreateToBase(vec2)\\ncreateToBase(vec3)\\n\\n/** The cell base for each kernel type. */\\n#define createToDiffShare(t) \\\\\\nt toDiff(t at, t base) { \\\\\\n  t diff; \\\\\\n   \\\\\\n  return toDiff(at, base, diff); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\\\\n  createToDiffShare(t)\\n#else\\n  #define createToDiff(t) \\\\\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\\\\n  createToDiffShare(t)\\n#endif\\n\\ncreateToDiff(float)\\ncreateToDiff(vec2)\\ncreateToDiff(vec3)\\n\\nvec2 fillWeight(inout vec3 w, vec2 v) { return w.xy = v; }\\nvec3 fillWeight(inout vec3 w, vec3 v) { return w = v; }\\n\\n#ifdef kernelTypeCentre\\n  #define createToWeightsMain(vec) \\\\\\n    vec w0 = 0.5-diff; \\\\\\n    vec w1 = diff; \\\\\\n    vec w2 = 0.5+diff;\\n#else\\n  #define createToWeightsMain(vec) \\\\\\n    vec w0 = 1.5-diff; \\\\\\n    vec w1 = diff-1.0; \\\\\\n    vec w2 = diff-0.5;\\n#endif\\n\\n#define createToWeights(vec, mat) \\\\\\n \\\\\\nmat toWeights(vec diff, out mat weights) { \\\\\\n  createToWeightsMain(vec) \\\\\\n   \\\\\\n  fillWeight(weights[0], 0.5*(w0*w0)); \\\\\\n  fillWeight(weights[1], 0.75-(w1*w1)); \\\\\\n  fillWeight(weights[2], 0.5*(w2*w2)); \\\\\\n   \\\\\\n  return weights; \\\\\\n} \\\\\\n \\\\\\nmat toWeights(vec diff) { \\\\\\n  mat weights; \\\\\\n   \\\\\\n  return toWeights(diff, weights); \\\\\\n}\\n\\ncreateToWeights(vec2, mat3)\\ncreateToWeights(vec3, mat3)\\n\\n#define createToKernel(vec, mat, Kernel) \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base, out vec diff, out mat weights) { \\\\\\n  base = toBase(at, base); \\\\\\n  diff = toDiff(at, base, diff); \\\\\\n  weights = toWeights(diff, weights); \\\\\\n   \\\\\\n  return Kernel(base, diff, weights); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base, out vec diff) { \\\\\\n  mat weights; \\\\\\n   \\\\\\n  return toKernel(at, base, diff, weights); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at, out vec base) { \\\\\\n  vec diff; \\\\\\n   \\\\\\n  return toKernel(at, base, diff); \\\\\\n} \\\\\\n \\\\\\nKernel toKernel(vec at) { \\\\\\n  vec base; \\\\\\n   \\\\\\n  return toKernel(at, base); \\\\\\n}\\n\\ncreateToKernel(vec2, mat3, Kernel2)\\ncreateToKernel(vec3, mat3, Kernel3)\\n\\n/** The cell offset for each kernel type. */\\n#define createToOffsetShare(t) \\\\\\nt toOffset(t offset) { \\\\\\n  t to; \\\\\\n   \\\\\\n  return toOffset(offset, to); \\\\\\n}\\n\\n#ifdef kernelTypeCentre\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\\\\n  createToOffsetShare(t)\\n#else\\n  #define createToOffset(t) \\\\\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\\\\n  createToOffsetShare(t)\\n#endif\\n\\ncreateToOffset(float)\\ncreateToOffset(vec2)\\ncreateToOffset(vec3)\\n\\n/**\\n * Cubic B\\xe9zier interpolation, CSS-style.\\n * Given p0, p1, p2, p3 as control points, and an input `x` value, find the\\n * corresponding `y` value using the B\\xe9zier curve; note that this doesn't\\n * directly use the usual `t` value as input for interpolation.\\n *\\n * @todo Split up and generalise.\\n *\\n * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\\n * @see [Finding B\\xe9zier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\\n */\\n\\n// Code generated by `bezier-gen` - start:\\n\\nfloat bezier(float cp0, float cp1, float cp2, float t) {\\n    float p0 = mix(cp0, cp1, t);\\n    float p1 = mix(cp1, cp2, t);\\n\\n    return mix(p0, p1, t);\\n}\\n\\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float t) {\\n    float p0 = mix(cp0, cp1, t);\\n    float p1 = mix(cp1, cp2, t);\\n    float p2 = mix(cp2, cp3, t);\\n\\n    p0 = mix(p0, p1, t);\\n    p1 = mix(p1, p2, t);\\n\\n    return mix(p0, p1, t);\\n}\\n\\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float cp4, float t) {\\n    float p0 = mix(cp0, cp1, t);\\n    float p1 = mix(cp1, cp2, t);\\n    float p2 = mix(cp2, cp3, t);\\n    float p3 = mix(cp3, cp4, t);\\n\\n    p0 = mix(p0, p1, t);\\n    p1 = mix(p1, p2, t);\\n    p2 = mix(p2, p3, t);\\n\\n    p0 = mix(p0, p1, t);\\n    p1 = mix(p1, p2, t);\\n\\n    return mix(p0, p1, t);\\n}\\n\\n// Code generated by `bezier-gen` - end.\\n\\n// float bezier(float p0, float p1, float p2, float p3, float t) {\\n//   float u = 1.0-t;\\n\\n//   return (3.0*u*u*t*p1)+(3.0*u*t*t*p2)+(t*t*t*p3);\\n// }\\n\\n/** @todo Generalise to other orders. */\\nfloat derivativeCubic(float p0, float p1, float p2, float p3, float t) {\\n  float u = 1.0-t;\\n\\n  return (9.0*p1*u*u)+(6.0*(p2-p1)*u*t)+(3.0*p3*t*t);\\n}\\n\\nfloat xToY(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float x) {\\n  float t = x;\\n\\n  // Netwon's method iteration.\\n  for(int i = 0; i < 4; ++i) {\\n    float xt = bezier(p0.x, p1.x, p2.x, p3.x, t);\\n    float dtx = derivativeCubic(p0.x, p1.x, p2.x, p3.x, t);\\n    float error = xt-x;\\n\\n    // Newton's iteration.\\n    t = clamp(t-(error/dtx), 0.0, 1.0);\\n  }\\n\\n  // Now that we have `t`, compute the corresponding `y` value.\\n  return bezier(p0.y, p1.y, p2.y, p3.y, t);\\n}\\n\\n#if defined(rescale_motion)\\n  /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n#endif\\n\\nvoid main() {\\n  #ifdef rescale_motion\\n    float rescaledMotion = exponent(rescaleMotion);\\n  #endif\\n\\n  vec2 motion;\\n  /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\\n  Kernel2 kernel = toKernel(grid_uv*grid_stateShape.xy);\\n\\n  for(int gx = 0; gx < kernelSize; ++gx) {\\n    for(int gy = 0; gy < kernelSize; ++gy) {\\n      vec2 offset = toOffset(vec2(gx, gy));\\n      /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\\n      vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\\n\\n      st = offsetUV(st, grid_stateShape.xy);\\n\\n      #if test == test_p2g\\n        grid_tapState(st);\\n        // gl_FragColor.rgba = grid_data[0];\\n\\n        vec4 dc = grid_data[0]-vec4(st, 0.5, 1);\\n\\n        /** @todo With high scaling this is less accurate near axes cross. */\\n        gl_FragColor.rgba = mix(vec4(0, 1, 0, 1), vec4(1, 0, 0, 1),\\n          clamp(dot(dc, dc)*1e3, 0.0, 1.0));\\n        return;\\n      #else\\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\\n\\n        #if grid_stepsPast > 1\\n          for(int stepPast = 0; stepPast < grid_stepsPast; ++stepPast) {\\n            float ago = float(stepPast)/float(grid_stepsPast);\\n\\n            grid_tapStateBy(offsetUV(st, grid_stateShape.xy), stepPast, 0);\\n            // grid_tapStateBy(st, stepPast, 0);\\n\\n            motion += rescaledMotion*(1.0-ago)*weight*\\n              grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\\n          }\\n        #else\\n          grid_tapState(offsetUV(st, grid_stateShape.xy));\\n          // grid_tapState(st);\\n\\n          motion += rescaledMotion*weight*\\n            grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\\n        #endif\\n      #endif\\n    }\\n  }\\n\\n  #ifdef paceLinear\\n    float pace = length(motion);\\n  #else\\n    float pace = dot(motion, motion);\\n  #endif\\n\\n  float at = clamp(map(pace, range.x, range.y, 0.0, 1.0), 0.0, 1.0);\\n  float to = xToY(curve[0], curve[1], curve[2], curve[3], at);\\n  // float to = at;\\n  vec2 outside = when_lt_1604150559(grid_uv, v0)+when_lt_1604150559(v1, grid_uv);\\n  float on = when_lt_1604150559(outside.x+outside.y, 0.5);\\n  vec4 color = mix(colorLo, colorHi, clamp(to, 0.0, on));\\n\\n  #ifdef angleHSLA\\n    float hue = map(atan(motion.y, motion.x), -PI, PI, 0.0, 1.0);\\n    vec3 angleColor = hsl2rgb(fract(hue+angleHSLA.x), angleHSLA.y, angleHSLA.z);\\n\\n    color.rgb = mix(color.rgb, angleColor, angleHSLA.a*on);\\n  #endif\\n\\n  // #if test != test_off\\n  //   vec2 line = fract(grid_uv*grid_stateShape.xy);\\n\\n  //   // color = mix(color, 1.0-color, lt(min(line.x, line.y), 5e-2));\\n  //   color = mix(color, vec4(1, 0, 0, 1), lt(min(line.x, line.y), 0.1));\\n  // #endif\\n\\n  gl_FragColor = clamp(color, 0.0, 1.0);\\n  gl_FragColor.rgb *= gl_FragColor.a;\\n}\\n\";\n\n\nvar $7d1830670886ce31$exports = {};\n$7d1830670886ce31$exports = \"/** Points-to-screen vertex shader. */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\n#define positionChannels points_channels_0\\n#define massChannels points_channels_2\\n\\npoints_useSamples\\npoints_useReads_position\\n\\nattribute float index;\\n\\n#ifdef points_splits\\n  uniform sampler2D points_states[points_splits];\\n#else\\n  uniform sampler2D points_states;\\n#endif\\n\\nuniform float points_stepNow;\\nuniform vec4 points_stateShape;\\n\\nuniform float wideHi;\\nuniform float wideLo;\\nuniform vec2 widths;\\nuniform vec4 colorHi;\\nuniform vec4 colorLo;\\n\\n#ifdef colorImage\\n  uniform sampler2D colorImage;\\n  uniform vec2 colorBy;\\n  uniform vec2 flip;\\n  uniform vec4 offset;\\n  uniform vec2 aspectImage;\\n#endif\\n\\nuniform float dt;\\nuniform vec2 size;\\nuniform vec2 aspectScreen;\\nuniform vec4 bounds;\\nuniform float form;\\n\\n#ifdef rescale_mass\\n  uniform vec2 rescaleMass;\\n#else\\n  const float rescaledMass = 1.0;\\n#endif\\n#ifdef rescale_position\\n  uniform vec2 rescalePosition;\\n#else\\n  const float rescaledPosition = 1.0;\\n#endif\\n\\nvarying float wide;\\nvarying vec3 sphere;\\nvarying vec4 color;\\n\\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nfloat when_gt_1604150559(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1604150559(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1604150559(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1604150559(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\n#ifdef colorImage\\n  float when_lt_529295689(float x, float y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec2 when_lt_529295689(vec2 x, vec2 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec3 when_lt_529295689(vec3 x, vec3 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nvec4 when_lt_529295689(vec4 x, vec4 y) {\\n  return max(sign(y - x), 0.0);\\n}\\n\\nfloat when_ge_2315452051(float x, float y) {\\n  return 1.0 - when_lt_529295689(x, y);\\n}\\n\\nvec2 when_ge_2315452051(vec2 x, vec2 y) {\\n  return 1.0 - when_lt_529295689(x, y);\\n}\\n\\nvec3 when_ge_2315452051(vec3 x, vec3 y) {\\n  return 1.0 - when_lt_529295689(x, y);\\n}\\n\\nvec4 when_ge_2315452051(vec4 x, vec4 y) {\\n  return 1.0 - when_lt_529295689(x, y);\\n}\\n\\n#endif\\n\\n/**\\n * Convenience to turn a 1D entry index into a 2D texture `UV` for sampling.\\n * Note that this does not wrap the y-axis, so if the `index` exceeds the range\\n * `[0, (size.x*size.y)-1]`, the result y-axis will exceed the range `[0, 1]`.\\n *\\n * @see {@link util/remain-div.glsl!}\\n *\\n * @param {float|int} `index` 1D index, expect range `[0, (size.x*size.y)-1]`.\\n * @param {float|int|vec2|ivec2} `size` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n *\\n * @returns {vec2} 2D `UV` texture sample coordinate, expect range `[0, 1]`.\\n */\\n\\n/**\\n * Equivalent to a _remainder_ operator; same as `mod` for same-signed operands,\\n * but different for differently-signed operands, like JavaScript's `%`\\n * operator.\\n * Reuses the truncated division, and returns both; as both are useful in\\n * various places, e.g: index conversion.\\n *\\n * @see [GLSL modulo](https://www.shaderific.com/glsl-functions#modulo)\\n * @see [JS modulo/remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\\n *\\n * @param {float|int} `x` The first remainder/divide operand, expect `x >= 0`.\\n * @param {float|int} `y` The second remainder/divide operand, expect `y >= 0`.\\n *\\n * @returns {vec2|ivec2} The result as `[(remainder), (truncated division)]`;\\n *   always a `vec2` if any operand is a `float`.\\n */\\n\\nivec2 remainDiv(int x, int y) {\\n  // Careful handling integer maths; decimals truncated, works like a\\n  // _remainder_ operator, rather than `mod`.\\n  int d = x/y;\\n\\n  return ivec2(x-(y*d), d);\\n}\\n\\nvec2 remainDiv(float x, int y) {\\n  int d = int(x)/y;\\n\\n  // Remainder; like `mod` but with truncated `d` not floored, reuses `d`.\\n  // return vec2(mod(x, y), d);\\n  return vec2(x-float(y*d), d);\\n}\\n\\n/**\\n * Assume higher accuracy is desired; if less computation with `int` is desired,\\n * use `remainDiv(int(x), int(y))` or `vec2(remainDiv(int(x), int(y)))` instead.\\n */\\nvec2 remainDiv(float x, float y) { return remainDiv(x, int(y)); }\\n\\n/**\\n * Assume higher accuracy is desired; if less computation with `int` is desired,\\n * use `remainDiv(x, int(y))` or `vec2(remainDiv(x, int(y)))` instead.\\n */\\nvec2 remainDiv(int x, float y) { return remainDiv(float(x), y); }\\n\\nvec2 indexUV(float index, vec2 size) {\\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(int index, ivec2 size) {\\n  return vec2(remainDiv(index, size.x))/max(vec2(size-1), 1.0);\\n}\\n\\nvec2 indexUV(float index, ivec2 size) {\\n  return remainDiv(index, size.x)/max(vec2(size-1), 1.0);\\n}\\n\\nvec2 indexUV(int index, vec2 size) {\\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(float index, float size) {\\n  return remainDiv(index, size)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(int index, float size) {\\n  return remainDiv(index, size)/max(size-1.0, 1.0);\\n}\\n\\nvec2 indexUV(float index, int size) {\\n  return remainDiv(index, size)/max(float(size-1), 1.0);\\n}\\n\\nvec2 indexUV(int index, int size) {\\n  return vec2(remainDiv(index, size))/max(float(size-1), 1.0);\\n}\\n\\n/**\\n * Convenience to sample entries safely at their texel center.\\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\\n *\\n * @see [`spreadUV`](./spread-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\\n *   `[0+pad, 1-pad]`.\\n */\\n\\nvec2 offsetUV(vec2 uv, float size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, int size, float pad) {\\n  return offsetUV(uv, float(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\\n\\n#if defined(rescale_mass) || defined(rescale_position)\\n  /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n#endif\\n\\n#if points_stepsPast > 1\\n  #define indexFormsStates\\n  #ifdef indexFormsStates\\n    /**\\n * The step and entry indexes corresponding to the number of entries and steps\\n * for pairs of elements (e.g: lines linking each index's steps); as detailed in\\n * the `indexForms` `JS` `function`.\\n * Given the vertex index and number of steps; iterates entries-then-steps.\\n *\\n * @see {@link index-forms}\\n * @see {@link util/remain-div.glsl!}\\n *\\n * @param {float|int} `index` The index of a vertex; expects simple sequential\\n *   index attribute.\\n * @param {float|int} `states` How many steps of state each entry has.\\n * @param {float|int} [`form`] How many steps of state each form covers.\\n *\\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\\n *   correct data to draw the given `form` along each entry's steps of state;\\n *   always a `vec2` if any operand is a `float`, an `ivec2` if all are `int`;\\n *   iterates with `index` by entries-then-steps.\\n */\\n\\n// Careful handling integer maths - decimals truncated.\\nivec2 indexForms_1(int index, int states, int form) {\\n  int f = form-1;\\n  ivec2 stepEntry = remainDiv(index, (states-f)*form);\\n\\n  stepEntry.s = (stepEntry.s+f)/form;\\n\\n  return stepEntry;\\n}\\n\\nvec2 indexForms_1(float index, float states, float form) {\\n  vec2 stepEntry = remainDiv(index/form, states-form+1.0);\\n\\n  stepEntry.s = ceil(stepEntry.s);\\n\\n  return stepEntry;\\n}\\n\\n// Mixed-type overloads assume higher accuracy is desired; if less computation\\n// with `int` is desired, use `indexForms(int(index), int(states), int(form))`\\n// or `vec2(indexForms(int(index), int(states), int(form)))` instead.\\n\\nvec2 indexForms_1(int index, float states, float form) {\\n  return indexForms_1(float(index), states, form);\\n}\\n\\nvec2 indexForms_1(float index, int states, float form) {\\n  return indexForms_1(index, float(states), form);\\n}\\n\\nvec2 indexForms_1(float index, float states, int form) {\\n  return indexForms_1(index, states, float(form));\\n}\\n\\nvec2 indexForms_1(float index, int states, int form) {\\n  return indexForms_1(index, float(states), float(form));\\n}\\n\\nvec2 indexForms_1(int index, float states, int form) {\\n  return indexForms_1(float(index), states, float(form));\\n}\\n\\nvec2 indexForms_1(int index, int states, float form) {\\n  return indexForms_1(float(index), float(states), form);\\n}\\n\\n// Expects pairs by default, though also works for single points and possibly\\n// useful for other forms.\\n// Mixed-type overloads assume higher accuracy is desired; if less computation\\n// with `int` is desired, use `indexForms(int(index), int(states))` or\\n// `vec2(indexForms(int(index), int(states)))` instead.\\n\\nivec2 indexForms_1(int index, int states) {\\n  return indexForms_1(index, states, 2);\\n}\\n\\nvec2 indexForms_1(float index, float states) {\\n  return indexForms_1(index, states, 2.0);\\n}\\n\\nvec2 indexForms_1(int index, float states) {\\n  return indexForms_1(float(index), states, 2.0);\\n}\\n\\nvec2 indexForms_1(float index, int states) {\\n  return indexForms_1(index, float(states), 2.0);\\n}\\n\\n  #else\\n    /**\\n * The step and entry indexes corresponding to the number of entries and steps\\n * for pairs of elements (e.g: lines linking each index's steps); as detailed in\\n * the `indexForms` `JS` `function`.\\n * Given the vertex index and number of entries; iterates steps-then-entries.\\n *\\n * Works out as 2 `remainDiv`:\\n * `[(index%form)+floor(floor(index/form)/count), floor(index/form)%count]`\\n * `[indexForm.s+floor(indexForm.t/count), indexForm.t%count]`\\n * `[indexForm.s+stepEntry.t, stepEntry.s]`\\n *\\n * @see {@link index-forms}\\n * @see {@link util/remain-div.glsl!}\\n *\\n * @param {float|int} `index` The index of a vertex; expects simple sequential\\n *   index attribute.\\n * @param {float|int} `count` How many entries are in each step of state.\\n * @param {float|int} [`form`] How many steps of state each form covers.\\n *\\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\\n *   correct data to draw the given `form` along each entry's steps of state;\\n *   always a `vec2` if any operand is a `float`, an `ivec2` if all are `int`;\\n *   iterates with `index` by steps-then-entries.\\n */\\n\\n// Careful handling integer maths - decimals truncated.\\nivec2 indexForms_0(int index, int count, int form) {\\n  ivec2 indexForm = remainDiv(index, form);\\n  ivec2 stepEntry = remainDiv(indexForm.t, count).ts;\\n\\n  stepEntry.s += indexForm.s;\\n\\n  return stepEntry;\\n}\\n\\nvec2 indexForms_0(float index, float count, float form) {\\n  vec2 indexForm = remainDiv(index, form);\\n  vec2 stepEntry = remainDiv(indexForm.t, count).ts;\\n\\n  stepEntry.s += indexForm.s;\\n\\n  return stepEntry;\\n}\\n\\n// Mixed-type overloads assume higher accuracy is desired; if less computation\\n// with `int` is desired, use `indexForms(int(index), int(count), int(form))` or\\n// `vec2(indexForms(int(index), int(count), int(form)))` instead.\\n\\nvec2 indexForms_0(int index, float count, float form) {\\n  return indexForms_0(float(index), count, form);\\n}\\n\\nvec2 indexForms_0(float index, int count, float form) {\\n  return indexForms_0(index, float(count), form);\\n}\\n\\nvec2 indexForms_0(float index, float count, int form) {\\n  return indexForms_0(index, count, float(form));\\n}\\n\\nvec2 indexForms_0(float index, int count, int form) {\\n  return indexForms_0(index, float(count), float(form));\\n}\\n\\nvec2 indexForms_0(int index, float count, int form) {\\n  return indexForms_0(float(index), count, float(form));\\n}\\n\\nvec2 indexForms_0(int index, int count, float form) {\\n  return indexForms_0(float(index), float(count), form);\\n}\\n\\n// Expects pairs by default, though also works for single points and possibly\\n// useful for other forms.\\n// Mixed-type overloads assume higher accuracy is desired; if less computation\\n// with `int` is desired, use `indexForms(int(index), int(count))` or\\n// `vec2(indexForms(int(index), int(count)))` instead.\\n\\nivec2 indexForms_0(int index, int count) {\\n  return indexForms_0(index, count, 2);\\n}\\n\\nvec2 indexForms_0(float index, float count) {\\n  return indexForms_0(index, count, 2.0);\\n}\\n\\nvec2 indexForms_0(int index, float count) {\\n  return indexForms_0(float(index), count, 2.0);\\n}\\n\\nvec2 indexForms_0(float index, int count) {\\n  return indexForms_0(index, float(count), 2.0);\\n}\\n\\n  #endif\\n#endif\\n\\nconst vec2 v0 = vec2(0);\\nconst vec2 v1 = vec2(1);\\nconst vec4 hidden = vec4(0);\\n\\n#ifdef colorImage\\n  const float colorByBase = 1.0;\\n  const float colorByImage = 2.0;\\n#endif\\n\\nvoid main() {\\n  #if points_stepsPast > 1\\n    // If multiple steps are given, find past step and entry.\\n    // Lookups mostly equivalent; input and result iteration order differ.\\n    #ifdef indexFormsStates\\n      vec2 stepEntry = indexForms_1(index, points_stepsPast, form);\\n    #else\\n      vec2 stepEntry = indexForms_0(index, points_entries, form);\\n    #endif\\n\\n    float stepPast = stepEntry.s;\\n    float entry = stepEntry.t;\\n  #else\\n    // If only 1 step is given, past step and entry are known.\\n    float stepPast = 0.0;\\n    float entry = index;\\n  #endif\\n\\n  vec2 st =\\n    offsetUV(indexUV(entry, points_stateShape.xy), points_stateShape.xy);\\n  // vec2 st = indexUV(entry, points_stateShape.xy);\\n\\n  #if points_stepsPast > 1\\n    points_tapStateBy(st, stepPast, 0);\\n  #else\\n    points_tapState(st);\\n  #endif\\n\\n  #ifdef rescale_mass\\n    float rescaledMass = exponent(rescaleMass);\\n  #endif\\n  #ifdef rescale_position\\n    float rescaledPosition = exponent(rescalePosition);\\n  #endif\\n\\n  float mass = rescaledMass*\\n    points_data[points_reads_position_mass].massChannels;\\n\\n  vec2 position = rescaledPosition*\\n    points_data[points_reads_position_position].positionChannels;\\n\\n  float show = when_gt_1604150559(mass, 0.0);\\n  vec2 boundSize = bounds.zw-bounds.xy;\\n  vec2 to = (position/max(boundSize.x, boundSize.y))*2.0;\\n  vec4 screen = mix(hidden, vec4(to, 0, 1), show);\\n\\n  screen.xy *= aspectScreen;\\n  gl_Position = screen;\\n\\n  float ago = stepPast/max(float(points_stepsPast-1), 1.0);\\n\\n  color = mix(colorHi, colorLo, ago);\\n\\n  #ifdef colorImage\\n    vec2 pq = ((fract(st*flip)*(aspectImage/aspectScreen))/offset.zw)-offset.xy;\\n    vec4 colorPixel = texture2D(colorImage, pq);\\n    float colorAt = colorBy.x;\\n\\n    colorAt = mix(colorAt, (1.0-color.a)+colorBy.x, when_ge_2315452051(colorBy.y, colorByBase));\\n    colorAt = mix(colorAt, colorPixel.a+colorBy.x, when_ge_2315452051(colorBy.y, colorByImage));\\n    color = mix(color, colorPixel, clamp(colorAt, 0.0, 1.0));\\n  #endif\\n\\n  color *= show;\\n\\n  wide = mix(wideHi, wideLo, ago)*show;\\n\\n  float pointSize = gl_PointSize = 0.5*clamp(wide/screen.w, widths.s, widths.t);\\n\\n  /**\\n   * Convert vertex position to `gl_FragCoord` window-space.\\n   * @see [SO](https://stackoverflow.com/a/7158573)\\n   * @see [SO](https://stackoverflow.com/a/54237532/716898)\\n   * @todo Why does the correct size here seem to be half the radius?\\n   */\\n  sphere = vec3(size*map(screen.xy/screen.w, -v1, v1, v0, v1), pointSize*0.5);\\n}\\n\";\n\n\nvar $f666f2a304033264$exports = {};\n$f666f2a304033264$exports = \"/** Points-to-screen fragment shader. */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying float wide;\\nvarying vec3 sphere;\\nvarying vec4 color;\\n\\nfloat when_gt_1540259130(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvoid main() {\\n  float r = sphere.p;\\n  float r2 = r*r;\\n  vec2 cf = gl_FragCoord.xy-sphere.xy;\\n  float cfl2 = dot(cf, cf);\\n  float isWide = when_gt_1540259130(wide, 1.0);\\n\\n  #ifdef useDiscard\\n    if(isWide*cfl2 > r2) { discard; }\\n  #endif\\n\\n  float fade = max(r2-(isWide*cfl2), 0.0);\\n\\n  #ifdef lengthLinear\\n    fade = sqrt(fade)/r;\\n  #else\\n    fade = fade/r2;\\n  #endif\\n\\n  gl_FragColor = color*fade;\\n  gl_FragColor.rgb *= gl_FragColor.a;\\n}\\n\";\n\n\nconst { keys: $29325f4114313b20$var$keys, assign: $29325f4114313b20$var$assign } = Object;\nconst { floor: $29325f4114313b20$var$floor, min: $29325f4114313b20$var$min, max: $29325f4114313b20$var$max, abs: $29325f4114313b20$var$abs, random: $29325f4114313b20$var$random, sign: $29325f4114313b20$var$sign, sin: $29325f4114313b20$var$sin } = Math;\nconst { GRAV_ACCEL: $29325f4114313b20$var$g } = (0, $10b53d97c9b87c6a$exports.MKS);\nconst $29325f4114313b20$var$cache = {};\nconst $29325f4114313b20$export$5d97924d29f48e83 = (0, $a1c331d8a5ab855b$export$5d97924d29f48e83);\nconst $29325f4114313b20$export$ac0cd3cc21f80dfc = (0, $a1c331d8a5ab855b$export$ac0cd3cc21f80dfc);\nconst $29325f4114313b20$export$fdb75c5ac32869de = (0, $a1c331d8a5ab855b$export$fdb75c5ac32869de);\nconst $29325f4114313b20$export$bc4be2352d4c92cc = ()=>[\n        \"angle_instanced_arrays\"\n    ];\nconst $29325f4114313b20$export$cc3e2d3244e01b7f = $29325f4114313b20$export$5d97924d29f48e83;\nconst $29325f4114313b20$export$918e5821fc7288cd = ()=>[\n        ...$29325f4114313b20$var$cache.extensionsFloat ??= $29325f4114313b20$export$ac0cd3cc21f80dfc(),\n        ...$29325f4114313b20$var$cache.extensionsDrawBuffers ??= $29325f4114313b20$export$fdb75c5ac32869de(),\n        ...$29325f4114313b20$var$cache.extensionsInstances ??= $29325f4114313b20$export$bc4be2352d4c92cc()\n    ];\nconst $29325f4114313b20$export$4bceda1224fc5ab8 = $29325f4114313b20$export$918e5821fc7288cd;\nfunction $29325f4114313b20$export$82ee245e4549d21(fields, to = {}) {\n    const vs = to.values = [];\n    const index = to.index = {};\n    const alias = to.alias = [];\n    (to.fields = fields).forEach((v, k)=>alias[index[k] = vs.push(v) - 1] = k);\n    return to;\n}\nfunction $29325f4114313b20$export$bd2891254e1e5b30(state, at, to = {}) {\n    const uniforms = (0, $fec04eaf51736497$export$1aad3af825e3305b)(to.state = state);\n    to.macros ??= (0, $e773ca7c5de577c2$export$d38b14fb9031108e)(state);\n    if (!at) return to;\n    /** Override uniforms to prefix the right property paths. */ for(let k in uniforms){\n        const u = uniforms[k];\n        uniforms[k] = (c, p, b)=>u(c, at(c, p, b), b);\n    }\n    return to;\n}\nconst $29325f4114313b20$export$47b243153dce5032 = {\n    stepNow: 0,\n    passNow: 0,\n    bound: 1\n};\nconst $29325f4114313b20$export$9f9ef40fe2e7f9e0 = {\n    stepNow: 0,\n    passNow: 0,\n    bound: 0,\n    maps: {\n        buffersMax: 0\n    }\n};\nfunction $29325f4114313b20$export$48f580ce092b95a(api, to = {}) {\n    console.log(\"mpm\", to);\n    const { command: command = api, buffer: buffer, elements: elements, clear: clear, hasExtension: hasExtension, now: now, limits: limits } = to.api = api;\n    const { pointSizeDims: pointSizeDims, lineWidthDims: lineWidthDims } = limits;\n    const hasInstances = ($29325f4114313b20$var$cache.extensionsInstances ??= $29325f4114313b20$export$bc4be2352d4c92cc()).every(hasExtension);\n    to.support = {\n        hasInstances: hasInstances\n    };\n    const vertex = to.vertex = [\n        [\n            1,\n            1\n        ],\n        [\n            1,\n            0\n        ],\n        [\n            0,\n            0\n        ],\n        [\n            0,\n            1\n        ]\n    ];\n    const quad = to.quad = [\n        [\n            0,\n            1,\n            2\n        ],\n        [\n            2,\n            3,\n            0\n        ]\n    ];\n    // const timestep = to.timer?.step ?? 1e3/120;\n    // const timestep = to.timer?.step ?? 1e3/60;\n    const timestep = to.timer?.step ?? 1e3 / 30;\n    // const timestep = to.timer?.step ?? 0;\n    /** Time control and state. */ to.timer = (0, $f233f4aac627add4$export$9dc4ecf953986f04)({\n        to: to,\n        now: timestep ? undefined : ()=>now() * 1e3,\n        period: 1e6,\n        ...to.timer,\n        // Fixed-step (add-step), or real-time (variable delta-time).\n        step: timestep || \"-\"\n    });\n    /** Target offset position `x` and `y`, magnitude `z`. */ // to.g = assign([0.5, 0.5, g*1e2], to.g);\n    // to.g = assign([0.5, 0.5, 0], to.g);\n    to.g = $29325f4114313b20$var$assign([\n        0.5,\n        -1000000000,\n        $29325f4114313b20$var$g * 1e2\n    ], to.g);\n    /** Exponential-notation scaling for storage spatial numerical accuracy. */ const rescale = to.rescale = {\n        // mass: [1, 0],\n        mass: [\n            1,\n            0\n        ],\n        // position: [1, 0],\n        position: [\n            1,\n            0\n        ],\n        // motion: [1, -6],\n        motion: [\n            1,\n            0\n        ],\n        // affine: [1, -6],\n        affine: [\n            1,\n            0\n        ],\n        // deform: [1, -6],\n        deform: [\n            1,\n            0\n        ],\n        // stress: [1, -6],\n        stress: [\n            1,\n            0\n        ],\n        ...to.rescale\n    };\n    /** Header of common settings prepended to each shader. */ to.head = {\n        to: to,\n        test: \"\",\n        kernelType: \"\",\n        // kernelType: 'Centre',\n        kernelSize: 3,\n        rescales: $29325f4114313b20$var$keys(rescale),\n        glsl: ({ test: test, kernelType: kernelType, kernelSize: kernelSize, rescales: rescales, to: { rescale: rescale } } = to.head)=>(test ? `#define test ${test}\\n` : \"\") + (kernelType ? `#define kernelType ${kernelType}\\n` : \"\") + (kernelSize ? `#define kernelSize ${kernelSize}\\n` : \"\") + (0, $ff8552abc90720ca$export$533b26079ad0b4b)((rs, r)=>{\n                const [b, p] = rescale[r];\n                return rs + (b * 10 ** p === 1 ? \"\" : `#define rescale_${r}\\n`);\n            }, rescales, \"\") + `\\n`,\n        ...to.head\n    };\n    /** Grid data. */ const grid = to.grid = {\n        to: to,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($a55a51490c3e1d8b$exports))),\n        detail: 1e2,\n        limit: 1e9,\n        bounds: [\n            -1,\n            -1,\n            1,\n            1\n        ],\n        boundsIn: [\n            1,\n            1,\n            -1,\n            -1\n        ],\n        boundsHit: 1,\n        // boundsHit: -1,\n        on: true,\n        ...to.grid\n    };\n    const { detail: gDetail, limit: gLimit, bounds: gBounds } = grid;\n    (0, $c1d306ebb49d3aa4$export$1f214a01989f466a)(null, gBounds, gLimit);\n    const gFields = grid.fields = $29325f4114313b20$export$82ee245e4549d21(new Map()/** @todo Use inverse mass to allow for infinite mass objects? */ .set(\"mass\", 1)/** Using the term `motion` since it's variously velocity or momentum. */ // .set('motionFull', 3)\n    .set(\"motionFull\", 2)/** Using the term `motion` since it's variously velocity or momentum. */ // .set('motionBase', 3)\n    .set(\"motionBase\", 2));\n    const gPre = \"grid_\";\n    const gDerives = [];\n    const { index: gIndex, values: gValues, alias: gAlias } = gFields;\n    const { mass: gMass, motionFull: gMotionFull, motionBase: gMotionBase } = gIndex;\n    gDerives[gMotionFull] = [\n        gMotionFull,\n        gMass\n    ];\n    gDerives[gMotionBase] = [\n        gMotionBase,\n        gMass\n    ];\n    const gMaps = {\n        values: gValues,\n        alias: gAlias,\n        derives: gDerives\n    };\n    const gSteps = grid.gpgpu?.steps ?? 2;\n    const gGPGPU = grid.gpgpu = (0, $01fa3bcf865876b0$export$2e2bcd8739ae039)(api, {\n        to: to,\n        pre: gPre,\n        maps: gMaps,\n        stepNow: 0,\n        steps: gSteps,\n        stepMax: gSteps,\n        side: gDetail,\n        macros: {\n            vert: 0\n        },\n        frag: (c, { to: { grid: g, head: h } })=>h.glsl(h) + g.frag,\n        uniforms: {\n            boundsIn: (c, p)=>p.to.grid.boundsIn,\n            boundsHit: (c, p)=>p.to.grid.boundsHit,\n            dt: (c, p)=>p.to.timer.dt,\n            g: (c, p)=>p.to.g,\n            rescaleMass: (c, p)=>p.to.rescale.mass,\n            rescaleMotion: (c, p)=>p.to.rescale.motion\n        },\n        ...grid.gpgpu\n    });\n    const gMerge = gGPGPU.merge;\n    grid.step = (state = grid)=>{\n        const s = state.onStep?.(state) ?? state;\n        const { on: on, gpgpu: gpgpu } = s;\n        on && gpgpu.step(gpgpu);\n        return s;\n    };\n    grid.clears = {\n        color: [\n            0,\n            0,\n            0,\n            0\n        ],\n        depth: 1,\n        framebuffer: null\n    };\n    grid.clear = ({ clears: c, gpgpu: g } = grid)=>(0, $7c7160675eb3d972$export$79b2f7037acddd43)((p, i)=>{\n            g.passNow = i;\n            (c.framebuffer = (0, $d925fdf34359f8ed$export$d86e3abd7686c23f)(g)?.framebuffer) && clear(c);\n        }, g.maps.passes);\n    /** Material points data. */ const points = to.points = {\n        to: to\n    };\n    const pFields = points.fields = $29325f4114313b20$export$82ee245e4549d21(new Map()// .set('position', 3)\n    .set(\"position\", 2)/** Using the term `motion` since it's variously velocity or momentum. */ // .set('motion', 3)\n    .set(\"motion\", 2).set(\"mass\", 1)/**\n     * Affine momentum matrix.\n     *\n     * @todo Need to pack a 3*3 matrix into fewer channels or across texels.\n     */ // .set('affine', 3*3)\n    .set(\"affine\", 4)/**\n     * Deformation gradient, its determinant is the volume change.\n     *\n     * @todo Need to pack a 3*3 matrix into fewer channels or across texels.\n     */ // .set('deform', 3*3)\n    .set(\"deform\", 4)/**\n     * Stress gradient, derived from deformation, cached to use across steps.\n     *\n     * @todo Need to pack a 3*3 matrix into fewer channels or across texels.\n     */ // .set('stress', 3*3)\n    .set(\"stress\", 4));\n    /**\n   * The `motion` and `affine` values derive from shared grid data.\n   * Other values derive from the next `motion` and `affine` values.\n   *\n   * @todo In `gl-gpgpu`, add a way to group passes in order if needed, so a\n   *   next pass can read values from the past pass if reliant on current\n   *   values it `got` from the past pass in the current step.\n   * @todo For now, add 2 `gl-gpgpu` processes here if needed:\n   *   - If there aren't enough output data channels to do it in one pass,\n   *     split the grid-to-points step into 2 parts: update the next values,\n   *     then update the values that derive from those in the same step.\n   *   - If there are enough output data channels, the step can be combined.\n   */ const gridToPoints = to.gridToPoints = {\n        to: to,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($834fcadedf4fafe1$exports))),\n        /**\n     * @todo Are mass or volume responsible for particle collision?\n     * @todo Move to looking up material types?\n     */ // mass: 1,\n        // mass: 1e2,\n        mass: 1,\n        // mass: 1e4,\n        // mass: 1e-1,\n        // volume: null,\n        // volume: 7e-4,\n        // volume: 7e-2,\n        // volume: 1e-4,\n        volume: 5e-4,\n        // volume: 1e-3,\n        // volume: 1,\n        // volume: 1e-5,\n        /** Thresholds used to test if the material is separating. */ volumeSplit: [\n            1e-6,\n            -0.001\n        ],\n        /** ASFLIP motion adjustment. */ motionAdjust: 0.97,\n        // motionAdjust: 0,\n        /** ASFLIP position adjustment range. */ positionAdjusts: [\n            0,\n            1\n        ],\n        /**\n     * Mechanics parameters.\n     *\n     * @todo Move to individual particles looking up material types?\n     */ /** Young's modulus */ youngMod: 5e5,\n        // youngMod: 1e6,\n        /** Poisson's ratio. */ poissonRatio: 0.3,\n        // poissonRatio: 0.4,\n        /** Bulk modulus. */ bulkMod: null,\n        /** Shear modulus. */ shearMod: null,\n        /**\n     * Plasticity parameters.\n     *\n     * @todo Move to individual particles looking up material types?\n     */ frictionAngle: (0, $e5bff41ea21c3f60$export$29e4e862bebba87f)(40),\n        // frictionAngle: rad(80),\n        // frictionAngle: rad(10),\n        materialFriction: null,\n        boundsClamp: true,\n        // boundsClamp: false,\n        spawnOn: {\n            // any: true,\n            any: false,\n            out: true,\n            slow: false,\n            centre: false\n        },\n        wander: [\n            0,\n            0\n        ],\n        // wander: [1, 2e5],\n        // wander: [1e3, 1e5],\n        // wander: [1, 2e12],\n        on: true,\n        ...to.gridToPoints\n    };\n    gridToPoints.volume ??= (()=>{\n        /** @todo Better volume estimate based on number of particles and size. */ const { volume: v, volumeScale: vs } = gridToPoints;\n        if (v != null) return v;\n        const [gw, gh] = grid.gpgpu.size.shape;\n        // const [pw, ph] = gridToPoints.gpgpu.size.shape;\n        return vs / gw * (vs / gh);\n    // return (vs/(gw/pw))*(vs/(gh/ph));\n    })();\n    const { index: pIndex, values: pValues, alias: pAlias } = pFields;\n    const { position: pPosition, motion: pMotion, mass: pMass, affine: pAffine, deform: pDeform, stress: pStress } = pIndex;\n    const pDerives = [];\n    pDerives[pPosition] = [\n        pPosition,\n        pMotion,\n        pMass\n    ]; // +got [pAffine, pDeform]\n    pDerives[pMotion] = [\n        pMotion,\n        pPosition\n    ];\n    pDerives[pMass] = null;\n    pDerives[pAffine] = [\n        pPosition\n    ];\n    pDerives[pDeform] = [\n        pDeform\n    ]; // +got [pAffine]\n    pDerives[pStress] = null; // +got [pDeform]\n    const pMaps = {\n        values: pValues,\n        derives: pDerives,\n        alias: pAlias\n    };\n    const pPre = \"points_\";\n    /** Inputs to map points data correctly. */ const gpLinkG = $29325f4114313b20$export$bd2891254e1e5b30({\n        ...$29325f4114313b20$export$47b243153dce5032,\n        pre: gPre,\n        steps: gSteps,\n        merge: gMerge,\n        macros: {\n            output: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...gMaps,\n            ...$29325f4114313b20$export$47b243153dce5032.maps,\n            derives: [\n                [\n                    gMotionFull,\n                    gMotionBase\n                ]\n            ]\n        })\n    }, (c, p)=>p.to.grid.gpgpu);\n    gridToPoints.link = {\n        grid: gpLinkG\n    };\n    /**\n   * @todo Broke this somehow, only 2 steps works, may be a `gpgpu` index issue.\n   * @todo Lines don't work for 2 steps but work for 3.\n   */ const pSteps = gridToPoints.gpgpu?.steps ?? 2;\n    // const pSteps = gridToPoints.gpgpu?.steps ?? 3;\n    /**\n   * Grid-to-points `gpgpu` step, gather from `grid` data, render to step\n   * `points` data.\n   */ const gpGPGPU = gridToPoints.gpgpu = (0, $01fa3bcf865876b0$export$2e2bcd8739ae039)(api, {\n        to: to,\n        pre: pPre,\n        maps: pMaps,\n        stepNow: 0,\n        steps: pSteps,\n        stepMax: pSteps,\n        // scale: 10,\n        // scale: 9,\n        // scale: 8.5,\n        scale: 8,\n        // scale: 7,\n        // scale: 4,\n        // scale: 1,\n        macros: {\n            vert: 0\n        },\n        frag: (c, { to: { gridToPoints: { frag: f, link: l }, head: h } })=>h.glsl(h) + l.grid.macros + f,\n        uniforms: {\n            ...gpLinkG.state.uniforms,\n            mass: (c, p)=>p.to.gridToPoints.mass,\n            volume: (c, p)=>p.to.gridToPoints.volume,\n            volumeSplit: (c, p)=>p.to.gridToPoints.volumeSplit,\n            motionAdjust: (c, p)=>p.to.gridToPoints.motionAdjust,\n            positionAdjusts: (c, p)=>p.to.gridToPoints.positionAdjusts,\n            bulkMod (c, { to: { gridToPoints: gp } }) {\n                const { bulkMod: bm, youngMod: ym, poissonRatio: pr } = gp;\n                return bm ?? ym / (3 * (1 - pr * 2));\n            },\n            shearMod (c, { to: { gridToPoints: gp } }) {\n                const { shearMod: sm, youngMod: ym, poissonRatio: pr } = gp;\n                return sm ?? ym / (2 * (1 + pr));\n            },\n            materialFriction (c, { to: { gridToPoints: gp } }) {\n                const { materialFriction: mf, frictionAngle: fa } = gp;\n                if (mf != null) return mf;\n                const sfa = $29325f4114313b20$var$sin(fa);\n                return 1.633 * sfa / (3 - sfa);\n            },\n            boundsClamp: (c, p)=>+(p.to.gridToPoints.boundsClamp || 0),\n            spawnOnAny: (c, p)=>+(p.to.gridToPoints.spawnOn.any || 0),\n            spawnOnOut: (c, p)=>+(p.to.gridToPoints.spawnOn.out || 0),\n            spawnOnSlow: (c, p)=>+(p.to.gridToPoints.spawnOn.slow || 0),\n            spawnOnCentre: (c, p)=>+(p.to.gridToPoints.spawnOn.centre || 0),\n            wander: (c, p)=>p.to.gridToPoints.wander,\n            dt: (c, p)=>p.to.timer.dt,\n            bounds: (c, p)=>p.to.grid.bounds,\n            chaos: (c, p)=>p.to.chaos,\n            rescaleMass: (c, p)=>p.to.rescale.mass,\n            rescalePosition: (c, p)=>p.to.rescale.position,\n            rescaleMotion: (c, p)=>p.to.rescale.motion,\n            rescaleAffine: (c, p)=>p.to.rescale.affine,\n            rescaleDeform: (c, p)=>p.to.rescale.deform,\n            rescaleStress: (c, p)=>p.to.rescale.stress\n        },\n        ...gridToPoints.gpgpu\n    });\n    const { size: gpSize, merge: pMerge, bound: pBound } = gpGPGPU;\n    const { entries: pl } = gpSize;\n    gridToPoints.step = (state = gridToPoints)=>{\n        const s = state.onStep?.(state) ?? state;\n        const { on: on, gpgpu: gpgpu } = s;\n        on && gpgpu.step(gpgpu);\n        return s;\n    };\n    /**\n   * Points-to-grid render, splat from `points` data to render `grid` data.\n   * @todo How to map `grid` textures correctly in 3x3 quads?\n   */ const pointsToGrid = to.pointsToGrid = {\n        to: to,\n        vert: (0, (/*@__PURE__*/$parcel$interopDefault($a9a4a8eabee7dea9$exports))),\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($974b845aa5371f02$exports))),\n        stretch: 1,\n        turn: 1,\n        on: true,\n        /** Straight-alpha additive blending with no multiplying channels. */ blend: {\n            enable: true,\n            func: {\n                src: 1,\n                dst: 1\n            }\n        },\n        depth: {\n            enable: false\n        },\n        ...to.pointsToGrid\n    };\n    const { [gMass]: gMassPass, [gMotionFull]: gMotionFullPass, [gMotionBase]: gMotionBasePass } = gMaps.valueToPass;\n    const pgSize = pointsToGrid.size = {};\n    const pgSplats = pointsToGrid.splats = new Set().add(gMassPass).add(gMotionFullPass).add(gMotionBasePass);\n    const pgSplatsL = pgSize.splats = pgSplats.size;\n    /**\n   * Splats per point, in the shader center on the point and scale to extend\n   * as far as the neighbouring 3 nodes.\n   *\n   * @todo Draw to all the needed grid passes, framebuffer-per-splat.\n   */ const pgInstancesL = pgSize.instances = pl * pgSplatsL;\n    /**\n   * Inputs to map points data correctly.\n   *\n   * @todo Handle vertex and fragment shaders.\n   * @todo Handle passes.\n   */ const pgLinkP = $29325f4114313b20$export$bd2891254e1e5b30({\n        ...$29325f4114313b20$export$47b243153dce5032,\n        pre: pPre,\n        steps: pSteps,\n        merge: pMerge,\n        macros: {\n            output: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...pMaps,\n            ...$29325f4114313b20$export$47b243153dce5032.maps,\n            derives: [\n                [\n                    pPosition,\n                    pMotion,\n                    pMass,\n                    pAffine,\n                    pStress\n                ]\n            ]\n        })\n    }, (c, p)=>p.to.gridToPoints.gpgpu);\n    const pgLinkG = $29325f4114313b20$export$bd2891254e1e5b30({\n        ...$29325f4114313b20$export$47b243153dce5032,\n        pre: gPre,\n        steps: gSteps,\n        merge: gMerge,\n        macros: {\n            samples: 0,\n            taps: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...gMaps,\n            ...$29325f4114313b20$export$47b243153dce5032.maps,\n            derives: null\n        })\n    }, (c, p)=>p.to.grid.gpgpu);\n    pointsToGrid.link = {\n        points: pgLinkP,\n        grid: pgLinkG\n    };\n    /** If using points, they're square and seem small, seems just big render? */ // pointsToGrid.quads = true;\n    // pointsToGrid.instanced = false;\n    // pointsToGrid.instanced = true;\n    // pointsToGrid.batch = true;\n    // pointsToGrid.batch = false;\n    // pointsToGrid.order = 'point-splat';\n    // pointsToGrid.order = 'splat-point';\n    /** Whether to draw using quads or points. */ const pgQuads = pointsToGrid.quads ??= pointSizeDims[1] < 3;\n    /** Whether to draw using instancing. */ const pgInstanced = pointsToGrid.instanced ??= hasInstances && pgQuads;\n    /** Iterate, whether to batch-draw. */ const pgBatch = pointsToGrid.batch ??= !pgInstanced && pgSplatsL > 1;\n    /** Iterate, splats-then-points or points-then-splats. */ const pgOrder = pointsToGrid.order ??= pgInstanced ? \"point-splat\" : \"splat-point\";\n    /** The form to use, suitable for `elements`. */ const pgForm = pointsToGrid.form ??= pgQuads ? quad : null;\n    /** The number of parts per-form. */ const pgFormsL = pgSize.forms = pgForm?.length ?? 1;\n    /** The number of vertexes per-form. */ const pgFormVertexesL = pgSize.formVertexes = pgForm?.[0]?.length ?? 1;\n    /** The form vertex source to use. */ const pgFormSource = pointsToGrid.formSource ??= pgQuads ? vertex : [\n        [\n            0.5,\n            0.5\n        ]\n    ];\n    /** The number of vertexes per-source. */ const pgFormSourcesL = pgSize.formSources = pgFormSource.length;\n    /** The number of vertexes per-point. */ pgSize.pointVertexes = pgFormsL * pgFormVertexesL;\n    /** The number of sources overall. */ const pgFormSourcesSplatsL = pgSize.formSourcesSplats = pgFormSourcesL * pgSplatsL;\n    /** The number of sources overall. */ const pgInstancesSourceL = pgSize.instancesSources = pgInstancesL * pgFormSourcesL;\n    /**\n   * @todo Change this to a grid `gpgpu`, overriding all the attributes and\n   *   both shaders, but reusing the framebuffer passes logic to draw all the\n   *   needed grid passes correctly.\n   */ pointsToGrid.pass = command(pointsToGrid.pipeline = {\n        vert: (c, { vert: v, quads: q, link: { points: points, grid: grid }, to: { head: h } })=>h.glsl(h) + (q ? \"#define points_grid_quads\\n\\n\" : \"\") + points.macros + grid.macros + v,\n        frag: (c, { frag: f, quads: q, link: l, to: { head: h } })=>h.glsl(h) + (q ? \"#define points_grid_quads\\n\\n\" : \"\") + l.grid.macros + f,\n        primitive: (c, p)=>p.quads ? \"triangles\" : \"points\",\n        attributes: {\n            /** Vertex only for drawing quads. */ vertex: !pgQuads ? pointsToGrid.vertex = {\n                constant: pgFormSource\n            } : buffer(pointsToGrid.vertex = pgInstanced || pgBatch ? pgFormSource : (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>(0, $71c6ad154616c491$export$4997ffc0176396a6)(i, pgFormSource), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgInstancesSourceL), 0)),\n            /** Index of each point. */ index: pgInstanced ? {\n                ...pointsToGrid.index = pgOrder === \"splat-point\" ? // Splats-then-points, more data overall.\n                {\n                    buffer: (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>i, (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pl), 0),\n                    divisor: pgSplatsL\n                } : {\n                    buffer: (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>i % pl, (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgInstancesL), 0),\n                    divisor: 1\n                },\n                buffer: buffer(pointsToGrid.index.buffer)\n            } : pgBatch ? pgOrder === \"splat-point\" && // Splats-then-points, batches.\n            ((c, p, b)=>(pointsToGrid.index ??= [])[b] ??= {\n                    constant: $29325f4114313b20$var$floor(b / p.splats.size)\n                }) : pgOrder === \"splat-point\" && // Splats-then-points, once, more data overall.\n            buffer(pointsToGrid.index = (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>$29325f4114313b20$var$floor(i / pgFormSourcesSplatsL), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgInstancesSourceL), 0)),\n            /** Index of each splat. */ splat: pgInstanced ? {\n                ...pointsToGrid.splat = pgOrder === \"splat-point\" ? // Splats-then-points, more data overall.\n                {\n                    buffer: (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>i % pgSplatsL, (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgInstancesL), 0),\n                    divisor: 1\n                } : {\n                    buffer: (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>i, (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgSplatsL), 0),\n                    divisor: pl\n                },\n                buffer: buffer(pointsToGrid.splat.buffer)\n            } : pgBatch ? pgOrder === \"splat-point\" && // Splats-then-points, batches, less data overall.\n            ((c, p, b)=>(pointsToGrid.splat ??= [])[b] ??= {\n                    constant: b % p.splats.size\n                }) : pgOrder === \"splat-point\" && // Splats-then-points, once, more data overall.\n            buffer(pointsToGrid.splat = (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>i % pgFormSourcesSplatsL, (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgInstancesSourceL), 0))\n        },\n        uniforms: {\n            ...pgLinkP.state.uniforms,\n            ...pgLinkG.state.uniforms,\n            stretch: (c, p)=>p.stretch,\n            turn: (c, p)=>p.turn,\n            bounds: (c, p)=>p.to.grid.bounds,\n            rescaleMotion: (c, p)=>p.to.rescale.motion,\n            rescaleMass: (c, p)=>p.to.rescale.mass,\n            rescaleAffine: (c, p)=>p.to.rescale.affine,\n            rescaleStress: (c, p)=>p.to.rescale.stress,\n            // Test\n            loop: (c, p)=>p.to.timer.loop\n        },\n        blend: {\n            enable: (c, p)=>p.blend.enable,\n            func: {\n                srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } })=>s ?? o,\n                srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } })=>s ?? o,\n                dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } })=>s ?? o,\n                dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } })=>s ?? o\n            }\n        },\n        depth: {\n            enable: (c, p)=>p.depth.enable\n        },\n        /** A form at a time; or all forms together. */ elements: !pgForm ? pointsToGrid.elements = null : elements(pointsToGrid.elements = pgInstanced || pgBatch ? pgForm : (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i)=>(0, $1c618fc32dcd31f6$export$37b75d0026f96b8d)([], (0, $71c6ad154616c491$export$4997ffc0176396a6)(i, pgForm), $29325f4114313b20$var$floor(i / pgFormsL) * pgFormSourcesL), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(pgInstancesL * pgFormsL), 0)),\n        count: (c, { instanced: instanced, batch: batch, size: { pointVertexes: pointVertexes, instances: instances } })=>pointVertexes * (instanced || batch ? 1 : instances),\n        instances: (c, { instanced: i, size: s })=>i ? s.instances : 1,\n        framebuffer: (c, { to: to, framebuffer: f = (0, $d925fdf34359f8ed$export$d86e3abd7686c23f)(to.grid.gpgpu) })=>f?.framebuffer\n    });\n    /** @todo Draw to all the needed grid passes, framebuffer-per-splat. */ pointsToGrid.step = (state = pointsToGrid)=>{\n        const s = state.onStep?.(state) ?? state;\n        const { on: on, batch: b, pass: pass, size: size, to: to } = s;\n        if (!on) return s;\n        const { gpgpu: gGPGPU, fields: gf } = to.grid;\n        let p = s;\n        b && (0, $5ec828b9c9659fbf$export$d02631cccf789723)(p = s.batchStates ??= [], s, 0, p.length = size.instances);\n        pass(p);\n        gGPGPU.merge?.update?.(gGPGPU);\n        return s;\n    };\n    /** Render to the screen. */ const screen = to.screen = {\n        to: to,\n        size: [\n            1,\n            1\n        ],\n        aspect: [\n            1,\n            1\n        ],\n        clears: {\n            color: [\n                0,\n                0,\n                0,\n                0\n            ],\n            depth: 1\n        },\n        clear: (s = screen)=>clear(s.clears)\n    };\n    /** Render the grid to the screen. */ const gridToScreen = to.gridToScreen = {\n        to: to,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($3d4623c2f2b7e7e3$exports))),\n        paceLinear: false,\n        // paceLinear: true,\n        /** Squared or linear pace, picked by `paceLinear`. */ ranges: [\n            // [0, 9e12],\n            [\n                0,\n                1e10\n            ],\n            // [0, 9e6]\n            [\n                0,\n                1e5\n            ]\n        ],\n        /**\n     * Squared or linear pace, picked by `paceLinear`.\n     *\n     * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n     * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n     */ curves: [\n            // [[0, 0], [0.2, 0.8], [1, 1], [1, 1]],\n            (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i, a)=>(0, $5ec828b9c9659fbf$export$d02631cccf789723)(2, i / (a.length - 1)), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(4), 0),\n            // [[0, 0], [0.5, 0.2], [0.9, 0.9], [1, 1]]\n            (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((v, i, a)=>(0, $5ec828b9c9659fbf$export$d02631cccf789723)(2, i / (a.length - 1)), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(4), 0)\n        ],\n        // colorHi: srgb('#0055ff55').buf,\n        colorHi: [\n            1,\n            1,\n            1,\n            0.15\n        ],\n        colorLo: [\n            0,\n            0,\n            0,\n            0\n        ],\n        angleHSLA: (0, $a8263434ffd59ea1$export$8f4a7c0bb78e6ea8)(\"hsla(0deg, 80%, 70%, 0.5)\").buf,\n        // angleHSLA: [0, 0, 0, 0],\n        on: true,\n        ...to.gridToScreen\n    };\n    /** Inputs to map grid data correctly. */ const gsLinkG = $29325f4114313b20$export$bd2891254e1e5b30({\n        ...$29325f4114313b20$export$9f9ef40fe2e7f9e0,\n        /**\n       * Draw all states with none bound as outputs.\n       * @todo Errors without `merge`; why, if the framebuffer isn't bound?\n       */ bound: +!gMerge,\n        pre: gPre,\n        steps: gSteps,\n        merge: gMerge,\n        macros: {\n            output: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...gMaps,\n            ...$29325f4114313b20$export$9f9ef40fe2e7f9e0.maps,\n            derives: [\n                [\n                    gMotionFull\n                ]\n            ]\n        })\n    }, (c, p)=>p.to.grid.gpgpu);\n    gridToScreen.link = {\n        grid: gsLinkG\n    };\n    gridToScreen.pass = command(gridToScreen.pipeline = {\n        vert: (c, { link: l, to: { head: h, grid: g } })=>h.glsl(h) + l.grid.macros + g.gpgpu.vert,\n        frag: (c, { frag: f, link: l, to: { head: h }, angleHSLA: angleHSLA, paceLinear: paceLinear })=>h.glsl(h) + l.grid.macros + (angleHSLA?.[3] ? \"#define angleHSLA angleHSLA\\n\\n\" : \"\") + (paceLinear ? \"#define paceLinear\\n\\n\" : \"\") + f,\n        attributes: {\n            [gPre + \"position\"]: gGPGPU.positions\n        },\n        uniforms: {\n            ...gsLinkG.state.uniforms,\n            angleHSLA: (c, p)=>p.angleHSLA,\n            range: (c, { ranges: rs, paceLinear: p })=>rs[+p],\n            ...(0, $ff8552abc90720ca$export$533b26079ad0b4b)((to, _, i)=>{\n                to[`curve[${i}]`] = (c, { curves: cs, paceLinear: p })=>cs[+p][i];\n                return to;\n            }, gridToScreen.curves[0], {}),\n            colorHi: (c, p)=>p.colorHi,\n            colorLo: (c, p)=>p.colorLo,\n            aspect: (c, p)=>p.to.screen.aspect,\n            rescaleMotion: (c, p)=>p.to.rescale.motion\n        },\n        /** @see [Premultiplied vs straight-alpha blending](https://limnu.com/webgl-blending-youre-probably-wrong/) */ blend: {\n            enable: true,\n            func: {\n                src: 1,\n                dst: \"one minus src alpha\"\n            }\n        },\n        depth: {\n            enable: false\n        },\n        count: gGPGPU.count,\n        framebuffer: (c, p)=>p.framebuffer\n    });\n    gridToScreen.draw = (state = gridToScreen)=>{\n        const s = state.onDraw?.(state) ?? state;\n        const { on: on, pass: pass } = s;\n        on && pass(s);\n        return s;\n    };\n    /**\n   * Render the points to the screen.\n   *\n   * @todo Set up a separate `gpgpu` with its own steps, to copy point position\n   *   and/or advect from the grid while staying close to source point, to track\n   *   many steps of state  without using loads of extra data.\n   */ const pointsToScreen = to.pointsToScreen = {\n        to: to,\n        vert: (0, (/*@__PURE__*/$parcel$interopDefault($7d1830670886ce31$exports))),\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($f666f2a304033264$exports))),\n        form: 1,\n        // form: 2,\n        // colorHi: srgb('#ff4400cc').buf,\n        colorHi: [\n            1,\n            1,\n            1,\n            0.5\n        ],\n        // colorLo: srgb('#75000066').buf,\n        colorLo: [\n            0,\n            0,\n            0,\n            0\n        ],\n        colorImage: null,\n        colorBy: [\n            0,\n            0\n        ],\n        flip: [\n            1,\n            -1\n        ],\n        offset: [\n            0,\n            0,\n            0,\n            0\n        ],\n        aspectImage: [\n            1,\n            1\n        ],\n        useDiscard: false,\n        lengthLinear: false,\n        wideHi: [\n            4e-3,\n            4e-6\n        ],\n        // wideHi: [6e-3, 6e-6],\n        // wideHi: [6e-2, 6e-4],\n        // wideHi: [511, 255],\n        // wideHi: [pointSizeDims[1], pointSizeDims[1]],\n        wideLo: [\n            2e-3,\n            2e-6\n        ],\n        // wideLo: [2e-3, 2e-6],\n        // wideLo: [2e-2, 2e-4],\n        // wideLo: [1, 1e-1],\n        // wideLo: [pointSizeDims[0], pointSizeDims[0]],\n        widths: [\n            ,\n            pointSizeDims,\n            lineWidthDims\n        ],\n        primitives: [\n            ,\n            \"points\",\n            \"lines\"\n        ],\n        /** @see [Premultiplied vs straight-alpha blending](https://limnu.com/webgl-blending-youre-probably-wrong/) */ // blend: { enable: true, func: { src: 1, dst: 'one minus src alpha' } },\n        blend: {\n            enable: true,\n            func: {\n                src: 1,\n                dst: 1\n            }\n        },\n        depth: {\n            enable: false\n        },\n        count: null,\n        on: true,\n        ...to.pointsToScreen\n    };\n    /** Inputs to map points data correctly. */ /**\n   * Draw all states with none bound as outputs.\n   *\n   * @todo Errors without `merge`; why, if the framebuffer isn't bound?\n   * @todo Lines don't work for 2 steps but work for 3.\n   */ const psLinkPBound = +!pMerge;\n    const psDrawSteps = pSteps - psLinkPBound;\n    const psLinkP = $29325f4114313b20$export$bd2891254e1e5b30({\n        ...$29325f4114313b20$export$9f9ef40fe2e7f9e0,\n        bound: psLinkPBound,\n        pre: pPre,\n        steps: pSteps,\n        merge: pMerge,\n        macros: {\n            output: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...pMaps,\n            ...$29325f4114313b20$export$9f9ef40fe2e7f9e0.maps,\n            derives: [\n                [\n                    pPosition,\n                    pMass\n                ]\n            ]\n        })\n    }, (c, p)=>p.to.gridToPoints.gpgpu);\n    pointsToScreen.link = {\n        points: psLinkP\n    };\n    /** @todo Lines don't work for 2 steps but work for 3. */ const psCounts = pointsToScreen.counts = (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((_, f)=>f && (0, $a08182c464031bb0$export$2e2bcd8739ae039)(psDrawSteps, f, pl), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(3), 0);\n    pointsToScreen.pass = command(pointsToScreen.pipeline = {\n        vert: (c, { vert: v, colorImage: ci, link: l, to: { head: h } })=>h.glsl(h) + (ci ? \"#define colorImage colorImage\\n\\n\" : \"\") + l.points.macros + v,\n        frag: (c, { frag: f, link: link, to: { head: h }, useDiscard: useDiscard, lengthLinear: lengthLinear })=>h.glsl(h) + link.points.macros + (useDiscard ? \"#define useDiscard\\n\\n\" : \"\") + (lengthLinear ? \"#define lengthLinear\\n\\n\" : \"\") + f,\n        primitive: (c, { form: f, primitives: ps })=>ps[f],\n        attributes: {\n            index: (0, $be4163ee67d9e1b7$export$87ed20f81f3c66ff)($29325f4114313b20$var$max(...psCounts))\n        },\n        uniforms: {\n            ...psLinkP.state.uniforms,\n            form: (c, p)=>p.form,\n            colorHi: (c, p)=>p.colorHi,\n            colorLo: (c, p)=>p.colorLo,\n            colorImage: (c, p)=>p.colorImage,\n            colorBy: (c, p)=>p.colorBy,\n            flip: (c, p)=>p.flip,\n            offset: (c, p)=>p.offset,\n            aspectImage: (c, p)=>p.aspectImage,\n            wideHi: (c, { wideHi: wls, lengthLinear: l, widths: wfs, form: f, to: to })=>(0, $70c54f136464dd78$export$7d15b64cf5a3a4c4)(wls[+l] * $29325f4114313b20$var$min(...to.screen.size), ...wfs[f]),\n            wideLo: (c, { wideLo: wls, lengthLinear: l, widths: wfs, form: f, to: to })=>(0, $70c54f136464dd78$export$7d15b64cf5a3a4c4)(wls[+l] * $29325f4114313b20$var$min(...to.screen.size), ...wfs[f]),\n            widths: (c, { widths: wfs, form: f })=>wfs[f],\n            size: (c, p)=>p.to.screen.size,\n            aspectScreen: (c, p)=>p.to.screen.aspect,\n            dt: (c, p)=>p.to.timer.dt,\n            bounds: (c, p)=>p.to.grid.bounds,\n            rescaleMass: (c, p)=>p.to.rescale.mass,\n            rescalePosition: (c, p)=>p.to.rescale.position\n        },\n        lineWidth: (c, { wideHi: wls, lengthLinear: l, widths: wfs, to: to })=>(0, $70c54f136464dd78$export$7d15b64cf5a3a4c4)(wls[+l] * $29325f4114313b20$var$min(...to.screen.size), ...wfs[2]),\n        blend: {\n            enable: (c, p)=>p.blend.enable,\n            func: {\n                srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } })=>s ?? o,\n                srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } })=>s ?? o,\n                dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } })=>s ?? o,\n                dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } })=>s ?? o\n            }\n        },\n        depth: {\n            enable: (c, p)=>p.depth.enable\n        },\n        count: (_, { count: c, counts: cs, form: f })=>c ?? cs[f],\n        framebuffer: (c, p)=>p.framebuffer\n    });\n    pointsToScreen.draw = (state = pointsToScreen)=>{\n        const s = state.onDraw?.(state) ?? state;\n        const { on: on, pass: pass } = s;\n        on && pass(s);\n        return s;\n    };\n    /** Which parts of a `pass` are used. */ to.uses = {\n        /** Whether a `pass` ticks the `timer`. */ tick: true,\n        /** Whether a `pass` clears the screen. */ clear: true,\n        /** Whether a `pass` updates the data. */ update: true,\n        /** Whether a `pass` draws to the screen. */ draw: true,\n        /** Whether a `pass` runs any post-processes or cleanup. */ post: true,\n        ...to.uses\n    };\n    /** How much a `pass` steps each `gpgpu` before the next links use them. */ to.linksBy ??= 1;\n    // to.linksBy ??= 0;\n    /** How many partial-time-step `pass`es to do per-`step` for accuracy. */ // to.passes ??= 1;\n    // to.passes ??= 4;\n    to.passes ??= 6;\n    // to.passes ??= 9;\n    to.passAt = 0;\n    to.tick = (state = to)=>{\n        const s = state.onTick?.(state) ?? state;\n        const { uses: uses, timer: t } = s;\n        if (!uses.tick) return s;\n        const { time: time, period: p } = (0, $f233f4aac627add4$export$9dc4ecf953986f04)(t);\n        t.loop = $29325f4114313b20$var$abs((time + p) % (p * 2) - p);\n        return s;\n    };\n    to.clear = (state = to)=>{\n        const s = state.onClear?.(state) ?? state;\n        const { uses: uses, screen: screen } = s;\n        uses.clear && screen.clear(screen);\n        return s;\n    };\n    to.update = (state = to)=>{\n        const s = state.onUpdate?.(state) ?? state;\n        const { uses: uses, pointsToGrid: pointsToGrid, grid: grid, gridToPoints: gridToPoints, linksBy: linksBy } = s;\n        if (!uses.update) return s;\n        const { step: gStep, gpgpu: gGPGPU, clear: gClear } = grid;\n        const { step: gpStep, gpgpu: gpGPGPU } = gridToPoints;\n        s.chaos = $29325f4114313b20$var$random();\n        /** Clear the grid output, as `pointsToGrid` can use additive blending. */ gClear(grid);\n        /** Update the data from points-to-grid. */ pointsToGrid.step(pointsToGrid);\n        /** Update the data from grid-to-grid. */ gStep(grid);\n        /** Advance `stepNow` for any next linked steps. */ linksBy && gGPGPU.stepBy(gGPGPU, linksBy);\n        /** Update the data from grid-to-points. */ gpStep(gridToPoints);\n        /** Advance `stepNow` for any next linked steps. */ linksBy && gpGPGPU.stepBy(gpGPGPU, linksBy);\n        return s;\n    };\n    to.draw = (state = to)=>{\n        const s = state.onDraw?.(state) ?? state;\n        const { uses: uses, gridToScreen: gridToScreen, pointsToScreen: pointsToScreen } = s;\n        if (!uses.draw) return s;\n        gridToScreen.draw(gridToScreen);\n        pointsToScreen.draw(pointsToScreen);\n        return s;\n    };\n    to.post = (state = to)=>{\n        const s = state.onPost?.(state) ?? state;\n        const { uses: uses, grid: grid, gridToPoints: gridToPoints, linksBy: linksBy } = s;\n        if (!uses.post) return s;\n        /** Reset `stepNow` for any next linked steps. */ if (linksBy) {\n            const gGPGPU = grid.gpgpu;\n            const gpGPGPU = gridToPoints.gpgpu;\n            gGPGPU.stepBy(gGPGPU, -linksBy);\n            gpGPGPU.stepBy(gpGPGPU, -linksBy);\n        }\n        return s;\n    };\n    to.pass = (state = to)=>{\n        const s = state.onPass?.(state) ?? state;\n        const { tick: tick, clear: clear, update: update, draw: draw, post: post } = s;\n        tick(s);\n        clear(s);\n        update(s);\n        draw(s);\n        post(s);\n        return s;\n    };\n    to.step = (state = to)=>{\n        const s = state.onStep?.(state) ?? state;\n        const { passes: passes, pass: pass, timer: timer, tick: tick, clear: clear, update: update, draw: draw, post: post } = s;\n        if (passes === 1) return pass(s);\n        const { time: t0 } = timer;\n        const { time: t1, dt: dt } = tick(s).timer;\n        const dtp = timer.dt = dt / passes;\n        // Data passes, no draw, sub-steps.\n        timer.time = t0;\n        clear(s);\n        for(s.passAt = 0; s.passAt < passes; ++s.passAt){\n            timer.time += dtp;\n            update(s);\n        }\n        // Draw pass, no data, full-step.\n        timer.time = t1;\n        timer.dt = dt;\n        s.passAt = 0;\n        draw(s);\n        post(s);\n        return s;\n    };\n    to.frame = ()=>to.step();\n    return to;\n}\nvar $29325f4114313b20$export$2e2bcd8739ae039 = $29325f4114313b20$export$48f580ce092b95a;\n\n\nvar $8867dbad34178b9a$exports = {};\n$8867dbad34178b9a$exports = \"/** Grid-fade fragment shader. */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\n#if defined(gridFade_output_fade)\\n  #define typeHash 0\\n  #define typeGauss 1\\n\\n  #ifndef type\\n    #define type typeHash\\n  #endif\\n\\n  #if type == typeGauss\\n    #define qualityTap5 0\\n    #define qualityTap9 1\\n    #define qualityTap13 2\\n\\n    #ifndef quality\\n      #define quality qualityTap5\\n    #endif\\n  #elif !defined(quality)\\n    #define quality 3\\n  #endif\\n\\n  gridFade_useSamples\\n  gridFade_useReads_fade\\n\\n  #ifdef gridFade_splits\\n    uniform sampler2D gridFade_states[gridFade_splits];\\n  #else\\n    uniform sampler2D gridFade_states;\\n  #endif\\n\\n  uniform float gridFade_stepNow;\\n  uniform vec4 gridFade_stateShape;\\n\\n  uniform float fade;\\n  uniform float expose;\\n  uniform float scale;\\n\\n  uniform vec4 colorLo;\\n  uniform float dt;\\n\\n  #if type == typeHash\\n    uniform float chaos;\\n  #endif\\n\\n  varying vec2 gridFade_uv;\\n\\n  #if type == typeGauss\\n    const vec2 axis = vec2(1, 0);\\n    const float passes = 2.0;\\n  #else\\n    const float passes = 1.0;\\n  #endif\\n\\n  #if type == typeGauss\\n    #if quality > qualityTap9\\n      vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.411764705882353) * direction;\\n  vec2 off2 = vec2(3.2941176470588234) * direction;\\n  vec2 off3 = vec2(5.176470588235294) * direction;\\n  color += texture2D(image, uv) * 0.1964825501511404;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\\n  return color;\\n}\\n\\n    #elif quality > qualityTap5\\n      vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\n    #elif quality > qualityHash\\n      vec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3333333333333333) * direction;\\n  color += texture2D(image, uv) * 0.29411764705882354;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\\n  return color; \\n}\\n\\n    #endif\\n  #else\\n    vec4 sampleFade(vec2 uv) {\\n      gridFade_tapState(uv);\\n\\n      return gridFade_data[gridFade_reads_fade_fade].gridFade_channels_fade;\\n    }\\n\\n    vec3 sampleHash(vec2 uv) { return sampleFade(uv).rgb; }\\n\\n    highp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n#ifndef TAU\\n  #define TAU 6.28318530718\\n#endif\\n\\n//Use last part of hash function to generate new random radius and angle\\nvec2 mult(inout vec2 r) {\\n  r = fract(r * vec2(12.9898,78.233));\\n  return sqrt(r.x + .001) * vec2(sin(r.y * TAU), cos(r.y * TAU));\\n}\\n\\nvec3 blur(vec2 uv, float radius, float aspect, float offset) {\\n  vec2 circle = vec2(radius);\\n  circle.x *= aspect;\\n  vec2 rnd = vec2(random(vec2(uv + offset)));\\n\\n  vec3 acc = vec3(0.0);\\n  for (int i = 0; i < quality; i++) {\\n    acc += sampleHash(uv + circle * mult(rnd)).xyz;\\n  }\\n  return acc / float(quality);\\n}\\n\\nvec3 blur(vec2 uv, float radius, float aspect) {\\n  return blur(uv, radius, aspect, 0.0);\\n}\\n\\nvec3 blur(vec2 uv, float radius) {\\n  return blur(uv, radius, 1.0);\\n}\\n\\n  #endif\\n\\n  float when_eq_2281831123(float x, float y) {\\n  return 1.0 - abs(sign(x - y));\\n}\\n\\nvec2 when_eq_2281831123(vec2 x, vec2 y) {\\n  return 1.0 - abs(sign(x - y));\\n}\\n\\nvec3 when_eq_2281831123(vec3 x, vec3 y) {\\n  return 1.0 - abs(sign(x - y));\\n}\\n\\nvec4 when_eq_2281831123(vec4 x, vec4 y) {\\n  return 1.0 - abs(sign(x - y));\\n}\\n\\n#endif\\n\\nvoid main() {\\n  #if defined(gridFade_output_fade)\\n    float end = when_eq_2281831123(fract(gridFade_stepNow/passes), 0.0);\\n\\n    #if type == typeGauss\\n      vec4 to = blur(gridFade_states[0], gridFade_uv, gridFade_stateShape.xy,\\n        mix(axis.xy, axis.yx, end)*scale);\\n    #else\\n      float radius = scale/max(gridFade_stateShape.x, gridFade_stateShape.y);\\n      float aspect = gridFade_stateShape.x/gridFade_stateShape.y;\\n\\n      vec4 to = vec4(blur(gridFade_uv, radius, aspect, chaos),\\n        /** @todo Can this extra tap be removed? */\\n        sampleFade(gridFade_uv).a);\\n    #endif\\n\\n    gridFade_output_fade =\\n      mix(to, mix(to*(1.0+(expose*dt)), colorLo, fade*dt), end);\\n  #endif\\n}\\n\";\n\n\nvar $7989cd53a482ae1e$exports = {};\n$7989cd53a482ae1e$exports = \"/** Grid-fade-to-screen fragment shader. */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\ngridFade_useSamples\\ngridFade_useReads_fade\\n\\n#ifdef gridFade_splits\\n  uniform sampler2D gridFade_states[gridFade_splits];\\n#else\\n  uniform sampler2D gridFade_states;\\n#endif\\n\\nuniform float gridFade_stepNow;\\nuniform vec4 gridFade_stateShape;\\n\\nvarying vec2 gridFade_uv;\\n\\n/**\\n * Convenience to sample entries safely at their texel center.\\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\\n *\\n * @see [`spreadUV`](./spread-uv.glsl)\\n *\\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\\n *   `[width, height]`, or if given a scalar interpret both as `side`.\\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\\n *\\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\\n *   `[0+pad, 1-pad]`.\\n */\\n\\nvec2 offsetUV(vec2 uv, float size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\\n  return ((uv*(size-1.0))+pad)/size;\\n}\\n\\nvec2 offsetUV(vec2 uv, int size, float pad) {\\n  return offsetUV(uv, float(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\\n  return offsetUV(uv, vec2(size), pad);\\n}\\n\\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\\n\\nvoid main() {\\n  vec2 uv = offsetUV(gridFade_uv, gridFade_stateShape.xy);\\n  // vec2 uv = gridFade_uv;\\n\\n  gridFade_tapState(uv);\\n\\n  vec4 to = gridFade_data[gridFade_reads_fade_fade].gridFade_channels_fade;\\n\\n  gl_FragColor = to;\\n  gl_FragColor.rgb *= gl_FragColor.a;\\n}\\n\";\n\n\nvar $d508adb7057fb369$exports = {};\n$d508adb7057fb369$exports = \"/** Optical-flow fragment shader. */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D next;\\nuniform sampler2D past;\\nuniform float gap;\\nuniform float lambda;\\nuniform float alpha;\\nuniform vec2 aspect;\\nuniform vec2 flip;\\nuniform vec4 offset;\\n\\nvarying vec2 opticalFlow_uv;\\n\\nfloat when_gt_1540259130(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nfloat when_le_1117569599(float x, float y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec2 when_le_1117569599(vec2 x, vec2 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec3 when_le_1117569599(vec3 x, vec3 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec4 when_le_1117569599(vec4 x, vec4 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\n/**\\n * Optical flow GLSL module.\\n * May work best if the views are pre-processed (e.g: blur).\\n *\\n * @see https://forum.openframeworks.cc/t/ofxflowtools-optical-flow-fluid-dynamics-and-particles-in-glsl/15470\\n * @see https://github.com/moostrik/ofxFlowTools\\n * @see https://github.com/diwi/PixelFlow\\n * @see http://thomasdiewald.com/blog/?p=2766\\n * @see https://adamferriss.com/gush/\\n * @see https://github.com/princemio/ofxMIOFlowGLSL/blob/master/src/FlowShader.cpp\\n */\\n\\n#define opticalFlowPixel_extern 0\\n#define opticalFlowPixel_normal 1\\n#define opticalFlowPixel_luma 2\\n#ifndef opticalFlowPixel\\n  #define opticalFlowPixel opticalFlowPixel_luma\\n#endif\\n\\n#if opticalFlowPixel == opticalFlowPixel_luma\\n  float luma(vec3 color) {\\n  return dot(color, vec3(0.299, 0.587, 0.114));\\n}\\n\\nfloat luma(vec4 color) {\\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\\n}\\n\\n  vec4 pixel(sampler2D texture, vec2 uv) {\\n    vec4 color = texture2D(texture, uv);\\n\\n    return vec4(vec3(luma(color)), color.a);\\n  }\\n#elif opticalFlowPixel == opticalFlowPixel_normal\\n  vec4 pixel(sampler2D texture, vec2 uv) { return texture2D(texture, uv); }\\n#else\\n  // To provide external `pixel` lookup function.\\n  vec4 pixel(sampler2D texture, vec2 uv);\\n#endif\\n\\n// @todo Sample mimaps at different LODs/scales to capture wider features.\\nvec2 opticalFlow(in vec2 uv, in sampler2D next, in sampler2D past,\\n    in float offset, in float lambda) {\\n  vec2 off = vec2(offset, 0.0);\\n\\n  vec4 gradX = (pixel(next, uv+off.xy)-pixel(next, uv-off.xy))+\\n    (pixel(past, uv+off.xy)-pixel(past, uv-off.xy));\\n\\n  vec4 gradY = (pixel(next, uv+off.yx)-pixel(next, uv-off.yx))+\\n    (pixel(past, uv+off.yx)-pixel(past, uv-off.yx));\\n\\n  vec4 gradMag = sqrt((gradX*gradX)+(gradY*gradY)+vec4(lambda));\\n\\n  vec4 diff = pixel(next, uv)-pixel(past, uv);\\n\\n  return vec2((diff*(gradX/gradMag)).x, (diff*(gradY/gradMag)).x);\\n}\\n\\nvec2 opticalFlow(in vec2 uv, in sampler2D views[2], in float offset,\\n    in float lambda) {\\n  return opticalFlow(uv, views[0], views[1], offset, lambda);\\n}\\n\\nvoid main() {\\n  vec2 uv = ((fract(opticalFlow_uv*flip)*aspect)/offset.zw)-offset.xy;\\n  vec2 to = opticalFlow(uv, next, past, gap, lambda);\\n\\n  gl_FragColor.xy = to*when_le_1117569599(0.0, uv.x)*when_le_1117569599(0.0, uv.y)*when_le_1117569599(uv.x, 1.0)*when_le_1117569599(uv.y, 1.0);\\n}\\n\";\n\n\nvar $eb18a40aad98e4fc$exports = {};\n$eb18a40aad98e4fc$exports = \"/** Optical-flow-to-grid fragment shader. */\\n\\n#ifdef GL_EXT_draw_buffers\\n  #extension GL_EXT_draw_buffers : require\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\n#if defined(grid_output_motionFull)\\n  uniform vec2 rescaleFlow;\\n  uniform sampler2D opticalFlow;\\n  uniform vec2 aspectScreen;\\n  uniform float dt;\\n\\n  #ifdef rescale_motion\\n    uniform vec2 rescaleMotion;\\n  #else\\n    const float rescaledMotion = 1.0;\\n  #endif\\n#endif\\n\\nvarying vec2 opticalFlow_uv;\\n\\n#ifdef grid_output_motionFull\\n  /** Exponential notation packed into a vector. */\\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\\n\\n#endif\\n\\nvoid main() {\\n  #ifdef grid_output_motionFull\\n    #ifdef rescale_motion\\n      float rescaledMotion = exponent(rescaleMotion);\\n    #endif\\n\\n    float rescaledFlow = exponent(rescaleFlow);\\n\\n    vec2 uv = opticalFlow_uv/aspectScreen;\\n    // vec2 uv = opticalFlow_uv;\\n    vec2 flow = rescaledFlow*dt*texture2D(opticalFlow, uv).xy;\\n\\n    grid_output_motionFull = flow/rescaledMotion;\\n  #endif\\n}\\n\";\n\n\nconst { min: $f2af27fa38b3ddf6$var$min, max: $f2af27fa38b3ddf6$var$max, sign: $f2af27fa38b3ddf6$var$sign } = Math;\nconst { isFinite: $f2af27fa38b3ddf6$var$isFinite } = Number;\nconst { createObjectURL: $f2af27fa38b3ddf6$var$createObjectURL } = URL;\nconst $f2af27fa38b3ddf6$var$screenPositions = (0, $a1c331d8a5ab855b$export$cfdc3a7c4cb854c6)();\nconst $f2af27fa38b3ddf6$export$dce0f7906c5e6747 = (size, fit, invert, to = [])=>{\n    (0, $4235b1e5a541ac0d$export$c8a0e366d15bb712)(to, size, fit(...size));\n    return invert ? (0, $eb25d460157de995$export$eb08a4e6e8934de4)(to, to) : to;\n};\nasync function $f2af27fa38b3ddf6$export$13fba5ef04f03938(to) {\n    // Set up GL.\n    const { $canvas: $canvas, pixelRatio: pixelRatio = devicePixelRatio } = to;\n    const api = (0, (/*@__PURE__*/$parcel$interopDefault($96e5255f782a85cd$exports)))({\n        canvas: $canvas,\n        pixelRatio: pixelRatio,\n        extensions: (0, $29325f4114313b20$export$cc3e2d3244e01b7f)(),\n        optionalExtensions: (0, $29325f4114313b20$export$918e5821fc7288cd)(),\n        ...to.api\n    });\n    const { command: command = api, frame: frame, texture: texture, buffer: buffer, framebuffer: framebuffer, clear: clear } = api;\n    (0, $29325f4114313b20$export$48f580ce092b95a)(api, to);\n    const { grid: grid, gridToScreen: gridToScreen, pointsToScreen: pointsToScreen } = to;\n    const { fields: { index: gIndex }, gpgpu: gGPGPU } = grid;\n    const { pre: gPre, size: gSize, merge: gMerge, maps: gMaps } = gGPGPU;\n    const demo = to.demo = {\n        to: to,\n        ...to.demo\n    };\n    /** Optical-flow interaction process. */ const ofPre = \"opticalFlow_\";\n    const opticalFlowVert = (0, $a1c331d8a5ab855b$export$dc207adda608f979).replaceAll((0, $a1c331d8a5ab855b$export$b4781c2237bde956), ofPre);\n    const opticalFlow = demo.opticalFlow = {\n        to: to,\n        vert: opticalFlowVert,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($d508adb7057fb369$exports))),\n        count: (0, $a1c331d8a5ab855b$export$832d88422d279bbc),\n        gap: 3,\n        lambda: 1e-3,\n        alpha: 1e2,\n        flip: [\n            -1,\n            -1\n        ],\n        aspect: [\n            1,\n            1\n        ],\n        size: [\n            0,\n            0\n        ],\n        offset: [\n            0,\n            0,\n            1,\n            1\n        ],\n        at: 0,\n        on: true,\n        ...demo.opticalFlow,\n        media: {\n            facingMode: \"user\",\n            video: true,\n            ...demo.opticalFlow?.media\n        },\n        input: {\n            data: document.createElement(\"video\"),\n            min: \"linear\",\n            mag: \"linear\"\n        },\n        frames: (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)(()=>texture(), (0, $5ec828b9c9659fbf$export$d02631cccf789723)(2), 0),\n        /** Overwrite blend, don't look up past values, just set new values. */ blend: {\n            enable: true,\n            func: {\n                src: 1,\n                dst: 0\n            }\n        },\n        depth: {\n            enable: false\n        },\n        framebuffer: framebuffer({\n            colorType: \"float\",\n            depth: false,\n            stencil: false\n        })\n    };\n    opticalFlow.pass = command(opticalFlow.pipeline = {\n        vert: (c, p)=>p.vert,\n        frag: (c, p)=>p.frag,\n        attributes: {\n            opticalFlow_position: buffer($f2af27fa38b3ddf6$var$screenPositions)\n        },\n        uniforms: {\n            next: (c, { frames: fs, at: at })=>(0, $71c6ad154616c491$export$4997ffc0176396a6)(at, fs),\n            past: (c, { frames: fs, at: at })=>(0, $71c6ad154616c491$export$4997ffc0176396a6)(at + 1, fs),\n            gap: (c, p)=>p.gap,\n            lambda: (c, p)=>p.lambda,\n            alpha: (c, p)=>p.alpha,\n            aspect: (c, p)=>p.aspect,\n            flip: (c, p)=>p.flip,\n            offset: (c, p)=>p.offset\n        },\n        blend: {\n            enable: (c, p)=>p.blend.enable,\n            func: {\n                srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } })=>s ?? o,\n                srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } })=>s ?? o,\n                dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } })=>s ?? o,\n                dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } })=>s ?? o\n            }\n        },\n        depth: {\n            enable: (c, p)=>p.depth.enable\n        },\n        count: (c, p)=>p.count,\n        framebuffer: (c, p)=>p.framebuffer\n    });\n    /** @todo Handle `merge.update` if `grid` has `merge`. */ opticalFlow.step = (state = opticalFlow)=>{\n        const s = state.onStep?.(state) ?? state;\n        const { on: on, pass: pass, at: at, frames: fs, input: i } = s;\n        if (!on) return s;\n        fs[s.at = (at + 1) % fs.length].subimage(i.data);\n        pass(s);\n        return s;\n    };\n    const opticalFlowToGrid = demo.opticalFlowToGrid = {\n        to: to,\n        vert: opticalFlowVert,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($eb18a40aad98e4fc$exports))),\n        count: (0, $a1c331d8a5ab855b$export$832d88422d279bbc),\n        /** Keep this in a similar scale as the `rescaleMotion` of `grid`. */ rescaleFlow: [\n            5,\n            5\n        ],\n        /** Additive blend, don't look up past values, just add any new values. */ blend: {\n            enable: true,\n            func: {\n                src: 1,\n                dst: 1\n            }\n        },\n        depth: {\n            enable: false\n        },\n        onStep: null,\n        ...demo.opticalFlowToGrid\n    };\n    const ofgLinkG = (0, $29325f4114313b20$export$bd2891254e1e5b30)({\n        ...(0, $29325f4114313b20$export$47b243153dce5032),\n        pre: gPre,\n        steps: gSize.steps,\n        merge: gMerge,\n        macros: {\n            samples: 0,\n            taps: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...gMaps,\n            ...(0, $29325f4114313b20$export$47b243153dce5032).maps,\n            derives: null\n        })\n    }, (c, p)=>p.to.grid.gpgpu);\n    opticalFlowToGrid.link = {\n        grid: ofgLinkG\n    };\n    opticalFlowToGrid.pass = command(opticalFlowToGrid.pipeline = {\n        vert: (c, p)=>p.vert,\n        frag: (c, { frag: f, link: l, to: { head: h } })=>h.glsl(h) + l.grid.macros + f,\n        attributes: {\n            opticalFlow_position: buffer($f2af27fa38b3ddf6$var$screenPositions)\n        },\n        uniforms: {\n            rescaleFlow: (c, p)=>p.rescaleFlow,\n            opticalFlow: (c, p)=>p.to.demo.opticalFlow.framebuffer.color[0],\n            aspectScreen: (c, p)=>p.to.screen.aspect,\n            dt: (c, p)=>p.to.timer.dt,\n            rescaleMotion: (c, p)=>p.to.rescale.motion\n        },\n        blend: {\n            enable: (c, p)=>p.blend.enable,\n            func: {\n                srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } })=>s ?? o,\n                srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } })=>s ?? o,\n                dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } })=>s ?? o,\n                dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } })=>s ?? o\n            }\n        },\n        depth: {\n            enable: (c, p)=>p.depth.enable\n        },\n        count: (c, p)=>p.count,\n        framebuffer: (c, p)=>(0, $d925fdf34359f8ed$export$d86e3abd7686c23f)(p.to.grid.gpgpu)?.framebuffer\n    });\n    opticalFlowToGrid.step = (state = opticalFlowToGrid)=>{\n        const s = state.onStep?.(state) ?? state;\n        const { pass: pass, to: { demo: demo, grid: grid } } = s;\n        if (!demo.opticalFlow.on) return s;\n        const { gpgpu: gGPGPU, fields: gf } = grid;\n        const { maps: gm, passNow: gp, stepBy: gStepBy } = gGPGPU;\n        gStepBy(gGPGPU, -1);\n        gGPGPU.passNow = gm.valueToPass[gf.index.motionFull];\n        pass(s);\n        gGPGPU.merge?.update?.(gGPGPU);\n        gGPGPU.passNow = gp;\n        gStepBy(gGPGPU, 1);\n    };\n    /** Set up the renders when the input video is ready. */ const ofSetup = opticalFlow.setup = async ()=>{\n        const { demo: { opticalFlow: opticalFlow }, gridToPoints: gridToPoints } = to;\n        const { input: input, frames: frames, aspect: ar, size: size, setup: setup } = opticalFlow;\n        const gpGPGPU = gridToPoints.gpgpu;\n        const { onStep: gpOnStep } = gpGPGPU;\n        const $video = input.data;\n        await $video.play();\n        const { videoWidth: w, videoHeight: h } = $video;\n        $f2af27fa38b3ddf6$export$dce0f7906c5e6747((0, $12bc9ce34a3e4340$export$dcfbb7940cfb3a48)(size, w, h), $f2af27fa38b3ddf6$var$min, true, ar);\n        opticalFlow.framebuffer.resize(w, h);\n        // Pixels units; divide `gap` by the video resolution.\n        opticalFlow.gap /= $f2af27fa38b3ddf6$var$max(w, h);\n        // Fill the flow frames with the first frame.\n        (0, $7c7160675eb3d972$export$79b2f7037acddd43)((f)=>f(input), frames);\n        gpGPGPU.onStep = (gpGPGPU)=>{\n            const s = gpOnStep?.(gpGPGPU) ?? gpGPGPU;\n            const { passAt: passAt, demo: { opticalFlow: opticalFlow, opticalFlowToGrid: opticalFlowToGrid } } = s.to;\n            !passAt && opticalFlow.step(opticalFlow);\n            opticalFlowToGrid.step(opticalFlowToGrid);\n            return s;\n        };\n        opticalFlow.on = true;\n        $video.removeEventListener(\"canplay\", setup);\n    };\n    const ofStart = opticalFlow.start = async (state = opticalFlow)=>{\n        const { media: mq, setup: setup, input: { data: $v } } = state;\n        if (!mq.video) return state;\n        try {\n            const src = state.stream = await navigator.mediaDevices.getUserMedia(mq);\n            $v.addEventListener(\"canplay\", setup);\n            \"srcObject\" in $v ? $v.srcObject = src : $v.src = $f2af27fa38b3ddf6$var$createObjectURL(src);\n        } catch (e) {\n            console.warn(e);\n        }\n        return state;\n    };\n    opticalFlow.stop = (state = opticalFlow)=>{\n        const tracks = state.input.data.srcObject?.getTracks?.();\n        (0, $7c7160675eb3d972$export$79b2f7037acddd43)((t)=>t.stop(), tracks);\n        state.on = false;\n        return state;\n    };\n    /** Grid fade. */ const gridFade = demo.gridFade = {\n        to: to,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($8867dbad34178b9a$exports))),\n        fade: 2e-3,\n        expose: 0,\n        scale: 3e1,\n        order: \"next\",\n        on: true,\n        ...demo.gridFade\n    };\n    const gfPre = \"gridFade_\";\n    const gfSteps = 2;\n    const gfMerge = false;\n    const gfFields = gridFade.fields = (0, $29325f4114313b20$export$82ee245e4549d21)(new Map().set(\"fade\", 4));\n    const gfDerives = gridFade.derives = [];\n    const { index: gfIndex, values: gfValues, alias: gfAlias } = gfFields;\n    const { fade: gfFade } = gfIndex;\n    gfDerives[gfFade] = [\n        gfFade\n    ];\n    const gfMaps = {\n        values: gfValues,\n        alias: gfAlias,\n        derives: gfDerives\n    };\n    const gfGPGPU = gridFade.gpgpu = (0, $01fa3bcf865876b0$export$2e2bcd8739ae039)(api, {\n        to: to,\n        pre: gfPre,\n        steps: gfSteps,\n        stepMax: gfSteps,\n        stepNow: 0,\n        passNow: 0,\n        shape: [\n            ...gSize.shape\n        ],\n        maps: gfMaps,\n        merge: gfMerge,\n        macros: {\n            vert: 0\n        },\n        frag: (c, { to: { demo: { gridFade: { frag: f, type: type, quality: quality } } } })=>(type ? `#define type ${type}\\n\\n` : \"\") + (quality ? `#define quality ${quality}\\n\\n` : \"\") + f,\n        type: \"uint8\",\n        min: \"linear\",\n        mag: \"linear\",\n        uniforms: {\n            fade: (c, p)=>p.to.demo.gridFade.fade,\n            expose: (c, p)=>p.to.demo.gridFade.expose,\n            scale: (c, p)=>p.to.demo.gridFade.scale,\n            colorLo: (c, p)=>p.to.gridToScreen.colorLo,\n            dt: (c, p)=>p.to.timer.dt,\n            chaos: (c, p)=>p.to.chaos\n        }\n    });\n    gridFade.step = (state = gridFade)=>{\n        const { on: on, type: type, gpgpu: gpgpu } = state;\n        if (!on) return state;\n        const { step: step } = gpgpu;\n        step(gpgpu);\n        (type === 1 || type === \"typeGauss\") && step(gpgpu);\n        return state;\n    };\n    /** Grid fade to screen. */ const gridFadeToScreen = demo.gridFadeToScreen = {\n        to: to,\n        frag: (0, (/*@__PURE__*/$parcel$interopDefault($7989cd53a482ae1e$exports))),\n        blend: {\n            enable: true,\n            func: {\n                src: 1,\n                dst: \"one minus src alpha\"\n            }\n        },\n        depth: {\n            enable: false\n        }\n    };\n    const gfsLinkGF = (0, $29325f4114313b20$export$bd2891254e1e5b30)({\n        ...(0, $29325f4114313b20$export$9f9ef40fe2e7f9e0),\n        pre: gfPre,\n        steps: gfSteps,\n        merge: gfMerge,\n        macros: {\n            output: 0\n        },\n        maps: (0, $c474fe9e4b233a62$export$798cdecdcbbf9755)({\n            ...gfMaps,\n            ...(0, $29325f4114313b20$export$9f9ef40fe2e7f9e0).maps,\n            derives: [\n                [\n                    gfFade\n                ]\n            ]\n        })\n    }, (c, p)=>p.to.demo.gridFade.gpgpu);\n    gridFadeToScreen.link = {\n        gridFade: gfsLinkGF\n    };\n    gridFadeToScreen.pass = command(gridFadeToScreen.pipeline = {\n        vert: (c, p)=>p.to.demo.gridFade.gpgpu.vert,\n        frag: (c, { frag: frag, link: { gridFade: lgf }, to: { head: h } })=>h.glsl(h) + lgf.macros + frag,\n        attributes: {\n            gridFade_position: buffer($f2af27fa38b3ddf6$var$screenPositions)\n        },\n        uniforms: {\n            ...gfsLinkGF.state.uniforms\n        },\n        blend: {\n            enable: (c, p)=>p.blend.enable,\n            func: {\n                srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } })=>s ?? o,\n                srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } })=>s ?? o,\n                dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } })=>s ?? o,\n                dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } })=>s ?? o\n            }\n        },\n        depth: {\n            enable: (c, p)=>p.depth.enable\n        },\n        count: (c, p)=>p.to.demo.gridFade.gpgpu.count\n    });\n    gridFadeToScreen.draw = (state = gridFadeToScreen)=>{\n        const { pass: pass, to: to } = state;\n        to.demo.gridFade.on && pass(state);\n        return state;\n    };\n    const { onDraw: gsOnDraw } = gridToScreen;\n    const { onDraw: psOnDraw } = pointsToScreen;\n    gridToScreen.onDraw = (gridToScreen)=>{\n        const s = gsOnDraw?.(gridToScreen) ?? gridToScreen;\n        const { gridFade: gridFade } = s.to.demo;\n        const { on: on, order: order, step: step, gpgpu: gpgpu } = gridFade;\n        order === \"past\" && step(gridFade);\n        gridToScreen.framebuffer = on ? (0, $d925fdf34359f8ed$export$d86e3abd7686c23f)(gpgpu)?.framebuffer : null;\n        return s;\n    };\n    pointsToScreen.onDraw = (pointsToScreen)=>{\n        const s = psOnDraw?.(pointsToScreen) ?? pointsToScreen;\n        const { gridFade: gridFade, gridFadeToScreen: gridFadeToScreen } = s.to.demo;\n        const { order: order, step: step } = gridFade;\n        order === \"next\" && step(gridFade);\n        gridFadeToScreen.draw(gridFadeToScreen);\n        return s;\n    };\n    demo.view ??= [];\n    /** Resize the canvas and any dependent properties. */ const resize = demo.resize = ()=>{\n        const { demo: demo, $canvas: $canvas, screen: screen, grid: grid } = to;\n        const { gridFade: gridFade, view: [vw = innerWidth, vh = innerHeight] } = demo;\n        const { bounds: bounds, limit: limit, detail: detail, gpgpu: gGPGPU } = grid;\n        const gShape = gGPGPU.size.shape;\n        const { size: ss, aspect: ar } = screen;\n        const [w, h] = (0, $c1d306ebb49d3aa4$export$b54ddf06b57709b1)(ss, (0, $12bc9ce34a3e4340$export$dcfbb7940cfb3a48)(ss, vw, vh), pixelRatio);\n        $canvas.width = w;\n        $canvas.height = h;\n        /** Screen aspect ratio, `JS`; use `min` for contain, `max` for cover. */ $f2af27fa38b3ddf6$export$dce0f7906c5e6747(ss, $f2af27fa38b3ddf6$var$max, false, ar);\n        /** Grid bounds resize proportional to screen. */ (0, $f06a7242e8e3a5ae$export$871de8747c9eaa88)((b, i)=>limit * $f2af27fa38b3ddf6$var$sign(b) * (0, $71c6ad154616c491$export$4997ffc0176396a6)(i, ar), bounds, 0);\n        /** Grid data resize proportional to screen. */ gGPGPU.resize((0, $c1d306ebb49d3aa4$export$b54ddf06b57709b1)(gShape, ar, detail));\n        /** Grid fade resize matches screen. */ gridFade.gpgpu.resize(ss);\n        /** Screen aspect ratio, `GLSL`; use `min` for contain, `max` for cover. */ $f2af27fa38b3ddf6$export$dce0f7906c5e6747(ss, $f2af27fa38b3ddf6$var$max, true, ar);\n    };\n    demo.fps ??= (0, (/*@__PURE__*/$parcel$interopDefault($480e37ad861582d4$exports)))({\n        style: \"color: #fff; background-color: #0006;\"\n    });\n    demo.start = async (state = demo)=>{\n        const { opticalFlow: opticalFlow, resize: resize, to: { timer: timer, frame: frameMPM } } = state;\n        opticalFlow.on && await ofStart();\n        addEventListener(\"resize\", resize);\n        resize();\n        const timestep = timer.step;\n        demo.queued = !$f2af27fa38b3ddf6$var$isFinite(timestep) ? frame(frameMPM) : function loop() {\n            return demo.queued = setTimeout(()=>demo.queued = frame(()=>loop(frameMPM().demo.queued.cancel())), timestep);\n        }();\n        return state;\n    };\n    return self.mpm = to;\n}\nvar $f2af27fa38b3ddf6$export$2e2bcd8739ae039 = $f2af27fa38b3ddf6$export$13fba5ef04f03938;\n\n\n\n\nconst { max: $0070d23694cd1cfa$var$max, log2: $0070d23694cd1cfa$var$log2 } = Math;\nconst { isFinite: $0070d23694cd1cfa$var$isFinite, isInteger: $0070d23694cd1cfa$var$isInteger } = Number;\nconst $0070d23694cd1cfa$var$query = new URLSearchParams(location.search);\nconst $0070d23694cd1cfa$var$test = $0070d23694cd1cfa$var$query.get(\"test\");\nconst $0070d23694cd1cfa$var$$canvas = document.querySelector(\"canvas\");\nif ($0070d23694cd1cfa$var$test === \"p2g\") {\n    const s = $0070d23694cd1cfa$var$$canvas.style;\n    s.width = s.height = \"100%\";\n    s.border = \"1px dashed red\";\n    s.margin = \"auto\";\n    s.imageRendering = \"pixelated\";\n}\n(async ()=>{\n    const mpm = self.mpm = await (0, $f2af27fa38b3ddf6$export$2e2bcd8739ae039)($0070d23694cd1cfa$var$test === \"p2g\" ? {\n        $canvas: $0070d23694cd1cfa$var$$canvas,\n        pixelRatio: 1,\n        api: {\n            attributes: {\n                antialias: false\n            }\n        },\n        head: {\n            test: \"test_\" + $0070d23694cd1cfa$var$test,\n            kernelSize: 1\n        },\n        pointsToGrid: {\n            // on: false,\n            // quads: true,\n            framebuffer: null\n        },\n        grid: {\n            on: false,\n            // detail: 2e2,\n            // detail: 1e2,\n            detail: 96,\n            // detail: 4,\n            limit: 1e8\n        },\n        gridToPoints: {\n            on: false,\n            // gpgpu: { scale: log2(96) }\n            // gpgpu: { scale: log2(96/3) }\n            // gpgpu: { scale: 4 }\n            gpgpu: {\n                scale: 5.1\n            }\n        },\n        gridToScreen: {\n            on: false\n        },\n        pointsToScreen: {\n            on: false\n        },\n        demo: {\n            view: [\n                96,\n                96\n            ],\n            opticalFlow: {\n                on: false\n            },\n            gridFade: {\n                on: false\n            }\n        },\n        passes: 1\n    } : {\n        $canvas: $0070d23694cd1cfa$var$$canvas,\n        pixelRatio: $0070d23694cd1cfa$var$max(devicePixelRatio, 1.5) || 1.5,\n        // ...\n        g: (0, $ff8552abc90720ca$export$533b26079ad0b4b)((g, _, i)=>{\n            const v = parseFloat($0070d23694cd1cfa$var$query.get(`g[${i}]`), 10);\n            $0070d23694cd1cfa$var$isFinite(v) && (g[i] = v);\n            return g;\n        }, (0, $5ec828b9c9659fbf$export$d02631cccf789723)(3), []),\n        pointsToGrid: {\n            on: $0070d23694cd1cfa$var$query.get(\"pointsToGrid.on\") !== \"false\",\n            quads: true\n        },\n        grid: {\n            on: $0070d23694cd1cfa$var$query.get(\"grid.on\") !== \"false\",\n            detail: parseFloat($0070d23694cd1cfa$var$query.get(\"grid.detail\") || 1e2, 10),\n            limit: parseFloat($0070d23694cd1cfa$var$query.get(\"grid.limit\") || 1e9, 10)\n        },\n        gridToPoints: {\n            on: $0070d23694cd1cfa$var$query.get(\"gridToPoints.on\") !== \"false\",\n            // motionAdjust: 0,\n            positionAdjusts: [\n                0,\n                0.1\n            ],\n            gpgpu: {\n                scale: parseFloat($0070d23694cd1cfa$var$query.get(\"gridToPoints.gpgpu.scale\") || 9, 10)\n            }\n        },\n        gridToScreen: {\n            on: $0070d23694cd1cfa$var$query.get(\"gridToScreen.on\") !== \"false\",\n            colorHi: [\n                0,\n                0,\n                0,\n                0.75\n            ],\n            colorLo: [\n                0,\n                0,\n                0,\n                0\n            ],\n            angleHSLA: [\n                0,\n                0.5,\n                0.5,\n                0.2\n            ]\n        },\n        pointsToScreen: {\n            on: $0070d23694cd1cfa$var$query.get(\"pointsToScreen.on\") !== \"false\",\n            colorHi: [\n                1,\n                0.53,\n                0.27,\n                0.47\n            ],\n            colorLo: [\n                0,\n                0,\n                0,\n                0\n            ]\n        },\n        demo: {\n            fps: $0070d23694cd1cfa$var$query.get(\"demo.fps\") !== \"false\" && undefined,\n            opticalFlow: {\n                on: $0070d23694cd1cfa$var$query.get(\"demo.opticalFlow.on\") !== \"false\",\n                media: (()=>{\n                    const to = {};\n                    const vq = \"demo.opticalFlow.media.video\";\n                    const v = $0070d23694cd1cfa$var$query.get(vq);\n                    const vy = v === \"true\";\n                    if (vy || v === \"false\") {\n                        to.video = vy;\n                        return to;\n                    }\n                    let size;\n                    const vw = parseFloat($0070d23694cd1cfa$var$query.get(vq + \".width\"), 10);\n                    const vh = parseFloat($0070d23694cd1cfa$var$query.get(vq + \".height\"), 10);\n                    $0070d23694cd1cfa$var$isInteger(vw) && ((size ??= to.video = {}).width = vw);\n                    $0070d23694cd1cfa$var$isInteger(vh) && ((size ??= to.video = {}).height = vh);\n                    return to;\n                })(),\n                rescaleFlow: [\n                    1,\n                    5\n                ]\n            },\n            gridFade: {\n                on: $0070d23694cd1cfa$var$query.get(\"demo.gridFade.on\") !== \"false\"\n            }\n        },\n        passes: parseFloat($0070d23694cd1cfa$var$query.get(\"passes\") || 2, 10)\n    });\n    mpm.demo.start();\n    $0070d23694cd1cfa$var$test === \"p2g\" && $0070d23694cd1cfa$var$$canvas.addEventListener(\"click\", ()=>{\n        const { pointsToGrid: pg, gridToScreen: gs } = mpm;\n        pg.framebuffer = (gs.on = !gs.on) ? undefined : null;\n        console.log(\"gridToScreen\", gs.on);\n    });\n    return mpm;\n})();\n\n})();\n//# sourceMappingURL=index.0fa02a48.js.map\n","/**\n * @todo Notice that `grid.detail` and `gridToPoints.gpgpu.scale` seem linearly\n *   connected to affect performance, probably because `pointsToGrid` tends to\n *   overlap more and cause more blending when the ratio of points to cells is\n *   high...?\n *   In any case, a way to decouple this would be to have a separate set of\n *   tracer points for rendering only that just follow the grid forces, so there\n *   can be more rendered points for the number of material points.\n *\n * @todo Fix grid artefacts:\n * - One clearer cause is `gridToPoints.positionAdjust[1] = 1`;\n *   explore, isolate, identify.\n * - One possible lesser cause is `grid.limit = 1e8`; probably to do with\n *   points crossing cells coinciding with time-step, seems to be helped by\n *   tweaking `passes` higher or lower (higher increases accuracy, lower seems\n *   to let points jump cells).\n */\n\nimport demo from './demo';\n\nimport { reduce } from '@epok.tech/fn-lists/reduce';\nimport { range } from '@epok.tech/fn-lists/range';\n\nconst { max, log2 } = Math;\nconst { isFinite, isInteger } = Number;\n\nconst query = new URLSearchParams(location.search);\nconst test = query.get('test');\n\nconst $canvas = document.querySelector('canvas');\n\nif(test === 'p2g') {\n  const s = $canvas.style;\n\n  s.width = s.height = '100%';\n  s.border = '1px dashed red';\n  s.margin = 'auto';\n  s.imageRendering = 'pixelated';\n}\n\n(async () => {\n  const mpm = self.mpm = (await demo((test === 'p2g')? {\n        $canvas,\n        pixelRatio: 1,\n        api: {\n          attributes: { antialias: false }\n        },\n        head: {\n          test: 'test_'+test,\n          kernelSize: 1\n        },\n        pointsToGrid: {\n          // on: false,\n          // quads: true,\n          framebuffer: null\n        },\n        grid: {\n          on: false,\n\n          // detail: 2e2,\n          // detail: 1e2,\n          detail: 96,\n          // detail: 4,\n\n          limit: 1e8\n          // limit: 1e5\n          // limit: 96\n          // limit: 8\n          // limit: 1\n        },\n        gridToPoints: {\n          on: false,\n          // gpgpu: { scale: log2(96) }\n          // gpgpu: { scale: log2(96/3) }\n          // gpgpu: { scale: 4 }\n          gpgpu: { scale: 5.1 }\n        },\n        gridToScreen: { on: false },\n        pointsToScreen: { on: false },\n        demo: {\n          view: [96, 96],\n          opticalFlow: { on: false },\n          gridFade: { on: false }\n        },\n        passes: 1\n      }\n    : {\n        $canvas,\n        pixelRatio: max(devicePixelRatio, 1.5) || 1.5,\n        // ...\n        g: reduce((g, _, i) => {\n            const v = parseFloat(query.get(`g[${i}]`), 10);\n\n            isFinite(v) && (g[i] = v);\n\n            return g;\n          },\n          range(3), []),\n\n        pointsToGrid: {\n          on: (query.get('pointsToGrid.on') !== 'false'),\n          quads: true\n        },\n        grid: {\n          on: (query.get('grid.on') !== 'false'),\n          detail: parseFloat(query.get('grid.detail') || 1e2, 10),\n          limit: parseFloat(query.get('grid.limit') || 1e9, 10)\n        },\n        gridToPoints: {\n          on: (query.get('gridToPoints.on') !== 'false'),\n          // motionAdjust: 0,\n          positionAdjusts: [0, 0.1],\n          gpgpu: {\n            scale:\n              parseFloat(query.get('gridToPoints.gpgpu.scale') || 9, 10),\n            // steps: 3\n          }\n        },\n        gridToScreen: {\n          on: (query.get('gridToScreen.on') !== 'false'),\n          colorHi: [0, 0, 0, 0.75],\n          colorLo: [0, 0, 0, 0],\n          angleHSLA: [0, 0.5, 0.5, 0.2]\n        },\n        pointsToScreen: {\n          on: (query.get('pointsToScreen.on') !== 'false'),\n          colorHi: [1, 0.53, 0.27, 0.47],\n          colorLo: [0, 0, 0, 0],\n          // form: 2\n        },\n        demo: {\n          fps: (query.get('demo.fps') !== 'false') && undefined,\n          opticalFlow: {\n            on: (query.get('demo.opticalFlow.on') !== 'false'),\n            media: (() => {\n              const to = {};\n              const vq = 'demo.opticalFlow.media.video';\n              const v = query.get(vq);\n              const vy = (v === 'true');\n\n              if(vy || (v === 'false')) {\n                to.video = vy;\n\n                return to;\n              }\n\n              let size;\n              const vw = parseFloat(query.get(vq+'.width'), 10);\n              const vh = parseFloat(query.get(vq+'.height'), 10);\n\n              isInteger(vw) && ((size ??= to.video = {}).width = vw);\n              isInteger(vh) && ((size ??= to.video = {}).height = vh);\n\n              return to;\n            })(),\n            rescaleFlow: [1, 5]\n          },\n          gridFade: {\n            on: (query.get('demo.gridFade.on') !== 'false')\n          }\n        },\n        passes: parseFloat(query.get('passes') || 2, 10)\n      }));\n\n  mpm.demo.start();\n\n  (test === 'p2g') && $canvas.addEventListener('click', () => {\n    const { pointsToGrid: pg, gridToScreen: gs } = mpm;\n\n    pg.framebuffer = ((gs.on = !gs.on)? undefined : null);\n    console.log('gridToScreen', gs.on);\n  });\n\n  return mpm;\n})();\n","import getRegl from 'regl';\nimport { setC2 } from '@thi.ng/vectors/setc';\nimport { mulN2 } from '@thi.ng/vectors/muln';\nimport { divN2 } from '@thi.ng/vectors/divn';\nimport { invert2 } from '@thi.ng/vectors/invert';\nimport { map } from '@epok.tech/fn-lists/map';\nimport { each } from '@epok.tech/fn-lists/each';\nimport { wrap } from '@epok.tech/fn-lists/wrap';\nimport { range } from '@epok.tech/fn-lists/range';\nimport getFPS from 'fps-indicator';\n\nimport gpgpu from '@epok.tech/gl-gpgpu/src';\nimport { mapStep } from '@epok.tech/gl-gpgpu/src/maps';\nimport { getPass } from '@epok.tech/gl-gpgpu/src/step';\n\nimport {\n    vertDef as screenVert,\n    positionsDef,\n    countDef as screenCount,\n    preDef as gpgpuPre\n  } from '@epok.tech/gl-gpgpu/src/const';\n\nimport {\n    mpm, extensions, extensionsOptional, toLink, linkPast, linkFull, toFields\n  } from '../src';\n\nimport gridFadeFrag from './grid-fade/index.frag.glsl';\nimport gridFadeToScreenFrag from './grid-fade-to-screen/index.frag.glsl';\n\nimport opticalFlowFrag from './optical-flow/index.frag.glsl';\nimport opticalFlowToGridFrag from './optical-flow-to-grid/index.frag.glsl';\n\nconst { min, max, sign } = Math;\nconst { isFinite } = Number;\nconst { createObjectURL } = URL;\n\nconst screenPositions = positionsDef();\n\n/**\n * @see [glsl-aspect](https://github.com/keeffEoghan/glsl-aspect/blob/master/src/index.glsl)\n * @see [glsl-aspect/contain](https://github.com/keeffEoghan/glsl-aspect/blob/master/src/contain.glsl)\n */\nexport const aspect = (size, fit, invert, to = []) => {\n  divN2(to, size, fit(...size));\n\n  return ((invert)? invert2(to, to) : to);\n};\n\nexport async function demo(to) {\n  // Set up GL.\n  const { $canvas, pixelRatio = devicePixelRatio } = to;\n\n  const api = getRegl({\n    canvas: $canvas, pixelRatio,\n    extensions: extensions(), optionalExtensions: extensionsOptional(),\n    ...to.api\n  });\n\n  const { command = api, frame, texture, buffer, framebuffer, clear } = api;\n\n  mpm(api, to);\n\n  const { grid, gridToScreen, pointsToScreen } = to;\n  const { fields: { index: gIndex }, gpgpu: gGPGPU } = grid;\n  const { pre: gPre, size: gSize, merge: gMerge, maps: gMaps } = gGPGPU;\n\n  const demo = to.demo = { to, ...to.demo };\n\n  /** Optical-flow interaction process. */\n\n  const ofPre = 'opticalFlow_';\n  const opticalFlowVert = screenVert.replaceAll(gpgpuPre, ofPre);\n\n  const opticalFlow = demo.opticalFlow = {\n    to,\n    vert: opticalFlowVert,\n    frag: opticalFlowFrag,\n    count: screenCount,\n    gap: 3, lambda: 1e-3, alpha: 1e2,\n    flip: [-1, -1], aspect: [1, 1], size: [0, 0], offset: [0, 0, 1, 1],\n    at: 0,\n\n    on: true,\n    ...demo.opticalFlow,\n\n    media: { facingMode: 'user', video: true, ...demo.opticalFlow?.media },\n    input: {\n      data: document.createElement('video'),\n      min: 'linear', mag: 'linear'\n    },\n    frames: map(() => texture(), range(2), 0),\n    /** Overwrite blend, don't look up past values, just set new values. */\n    blend: { enable: true, func: { src: 1, dst: 0 } },\n    depth: { enable: false },\n\n    framebuffer:\n      framebuffer({ colorType: 'float', depth: false, stencil: false })\n  };\n\n  opticalFlow.pass = command(opticalFlow.pipeline = {\n    vert: (c, p) => p.vert,\n    frag: (c, p) => p.frag,\n\n    attributes: { opticalFlow_position: buffer(screenPositions) },\n\n    uniforms: {\n      next: (c, { frames: fs, at }) => wrap(at, fs),\n      past: (c, { frames: fs, at }) => wrap(at+1, fs),\n      gap: (c, p) => p.gap,\n      lambda: (c, p) => p.lambda,\n      alpha: (c, p) => p.alpha,\n      aspect: (c, p) => p.aspect,\n      flip: (c, p) => p.flip,\n      offset: (c, p) => p.offset\n    },\n\n    blend: {\n      enable: (c, p) => p.blend.enable,\n\n      func: {\n        srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } }) => s ?? o,\n        srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } }) => s ?? o,\n        dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } }) => s ?? o,\n        dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } }) => s ?? o\n      }\n    },\n\n    depth: { enable: (c, p) => p.depth.enable },\n    count: (c, p) => p.count,\n    framebuffer: (c, p) => p.framebuffer\n  });\n\n  /** @todo Handle `merge.update` if `grid` has `merge`. */\n  opticalFlow.step = (state = opticalFlow) => {\n    const s = state.onStep?.(state) ?? state;\n    const { on, pass, at, frames: fs, input: i } = s;\n\n    if(!on) { return s; }\n\n    fs[s.at = (at+1)%fs.length].subimage(i.data);\n    pass(s);\n\n    return s;\n  };\n\n  const opticalFlowToGrid = demo.opticalFlowToGrid = {\n    to,\n    vert: opticalFlowVert,\n    frag: opticalFlowToGridFrag,\n    count: screenCount,\n    /** Keep this in a similar scale as the `rescaleMotion` of `grid`. */\n    rescaleFlow: [5, 5],\n    /** Additive blend, don't look up past values, just add any new values. */\n    blend: { enable: true, func: { src: 1, dst: 1 } },\n    depth: { enable: false },\n    onStep: null,\n    ...demo.opticalFlowToGrid\n  };\n\n  const ofgLinkG = toLink({\n      ...linkPast,\n      pre: gPre, steps: gSize.steps, merge: gMerge,\n      macros: { samples: 0, taps: 0 },\n      maps: mapStep({ ...gMaps, ...linkPast.maps, derives: null })\n    },\n    (c, p) => p.to.grid.gpgpu);\n\n  opticalFlowToGrid.link = { grid: ofgLinkG };\n\n  opticalFlowToGrid.pass = command(opticalFlowToGrid.pipeline = {\n    vert: (c, p) => p.vert,\n\n    frag: (c, { frag: f, link: l, to: { head: h } }) =>\n      h.glsl(h)+l.grid.macros+f,\n\n    attributes: { opticalFlow_position: buffer(screenPositions) },\n\n    uniforms: {\n      rescaleFlow: (c, p) => p.rescaleFlow,\n      opticalFlow: (c, p) => p.to.demo.opticalFlow.framebuffer.color[0],\n      aspectScreen: (c, p) => p.to.screen.aspect,\n      dt: (c, p) => p.to.timer.dt,\n      rescaleMotion: (c, p) => p.to.rescale.motion\n    },\n\n    blend: {\n      enable: (c, p) => p.blend.enable,\n\n      func: {\n        srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } }) => s ?? o,\n        srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } }) => s ?? o,\n        dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } }) => s ?? o,\n        dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } }) => s ?? o\n      }\n    },\n\n    depth: { enable: (c, p) => p.depth.enable },\n    count: (c, p) => p.count,\n    framebuffer: (c, p) => getPass(p.to.grid.gpgpu)?.framebuffer\n  });\n\n  opticalFlowToGrid.step = (state = opticalFlowToGrid) => {\n    const s = state.onStep?.(state) ?? state;\n    const { pass, to: { demo, grid } } = s;\n\n    if(!demo.opticalFlow.on) { return s; }\n\n    const { gpgpu: gGPGPU, fields: gf } = grid;\n    const { maps: gm, passNow: gp, stepBy: gStepBy } = gGPGPU;\n\n    gStepBy(gGPGPU, -1);\n    gGPGPU.passNow = gm.valueToPass[gf.index.motionFull];\n    pass(s);\n    gGPGPU.merge?.update?.(gGPGPU);\n    gGPGPU.passNow = gp;\n    gStepBy(gGPGPU, 1);\n  };\n\n  /** Set up the renders when the input video is ready. */\n  const ofSetup = opticalFlow.setup = async () => {\n    const { demo: { opticalFlow }, gridToPoints } = to;\n    const { input, frames, aspect: ar, size, setup } = opticalFlow;\n    const gpGPGPU = gridToPoints.gpgpu;\n    const { onStep: gpOnStep } = gpGPGPU;\n    const $video = input.data;\n\n    await $video.play();\n\n    const { videoWidth: w, videoHeight: h } = $video;\n\n    aspect(setC2(size, w, h), min, true, ar);\n    opticalFlow.framebuffer.resize(w, h);\n    // Pixels units; divide `gap` by the video resolution.\n    opticalFlow.gap /= max(w, h);\n    // Fill the flow frames with the first frame.\n    each((f) => f(input), frames);\n\n    gpGPGPU.onStep = (gpGPGPU) => {\n      const s = gpOnStep?.(gpGPGPU) ?? gpGPGPU;\n      const { passAt, demo: { opticalFlow, opticalFlowToGrid } } = s.to;\n\n      !passAt && opticalFlow.step(opticalFlow);\n      opticalFlowToGrid.step(opticalFlowToGrid);\n\n      return s;\n    };\n\n    opticalFlow.on = true;\n    $video.removeEventListener('canplay', setup);\n  };\n\n  const ofStart = opticalFlow.start = async (state = opticalFlow) => {\n    const { media: mq, setup, input: { data: $v } } = state;\n\n    if(!mq.video) { return state; }\n\n    try {\n      const src = state.stream = await navigator.mediaDevices.getUserMedia(mq);\n\n      $v.addEventListener('canplay', setup);\n      (('srcObject' in $v)? $v.srcObject = src : $v.src = createObjectURL(src));\n    }\n    catch(e) { console.warn(e); }\n\n    return state;\n  };\n\n  opticalFlow.stop = (state = opticalFlow) => {\n    const tracks = state.input.data.srcObject?.getTracks?.();\n\n    each((t) => t.stop(), tracks);\n    state.on = false;\n\n    return state;\n  };\n\n  /** Grid fade. */\n  const gridFade = demo.gridFade = {\n    to,\n    frag: gridFadeFrag,\n    fade: 2e-3,\n    expose: 0,\n    scale: 3e1,\n    order: 'next',\n    on: true,\n    ...demo.gridFade\n  };\n\n  const gfPre = 'gridFade_';\n  const gfSteps = 2;\n  const gfMerge = false;\n  const gfFields = gridFade.fields = toFields((new Map()).set('fade', 4));\n\n  const gfDerives = gridFade.derives = [];\n  const { index: gfIndex, values: gfValues, alias: gfAlias } = gfFields;\n  const { fade: gfFade } = gfIndex;\n\n  gfDerives[gfFade] = [gfFade];\n\n  const gfMaps = { values: gfValues, alias: gfAlias, derives: gfDerives };\n\n  const gfGPGPU = gridFade.gpgpu = gpgpu(api, {\n    to,\n    pre: gfPre,\n    steps: gfSteps, stepMax: gfSteps,\n    stepNow: 0, passNow: 0,\n    shape: [...gSize.shape],\n    maps: gfMaps,\n    merge: gfMerge,\n    macros: { vert: 0 },\n\n    frag: (c, { to: { demo: { gridFade: { frag: f, type, quality } } } }) =>\n      ((type)? `#define type ${type}\\n\\n` : '')+\n      ((quality)? `#define quality ${quality}\\n\\n` : '')+\n      f,\n\n    type: 'uint8',\n    min: 'linear', mag: 'linear',\n\n    uniforms: {\n      fade: (c, p) => p.to.demo.gridFade.fade,\n      expose: (c, p) => p.to.demo.gridFade.expose,\n      scale: (c, p) => p.to.demo.gridFade.scale,\n\n      colorLo: (c, p) => p.to.gridToScreen.colorLo,\n      dt: (c, p) => p.to.timer.dt,\n      chaos: (c, p) => p.to.chaos\n    }\n  });\n\n  gridFade.step = (state = gridFade) => {\n    const { on, type, gpgpu } = state;\n\n    if(!on) { return state; }\n\n    const { step } = gpgpu;\n\n    step(gpgpu);\n    ((type === 1) || (type === 'typeGauss')) && step(gpgpu);\n\n    return state;\n  };\n\n  /** Grid fade to screen. */\n  const gridFadeToScreen = demo.gridFadeToScreen = {\n    to,\n    frag: gridFadeToScreenFrag,\n\n    blend: { enable: true, func: { src: 1, dst: 'one minus src alpha' } },\n    depth: { enable: false }\n  };\n\n  const gfsLinkGF = toLink({\n      ...linkFull, pre: gfPre, steps: gfSteps, merge: gfMerge,\n      macros: { output: 0 },\n      maps: mapStep({ ...gfMaps, ...linkFull.maps, derives: [[gfFade]] })\n    },\n    (c, p) => p.to.demo.gridFade.gpgpu);\n\n  gridFadeToScreen.link = { gridFade: gfsLinkGF };\n\n  gridFadeToScreen.pass = command(gridFadeToScreen.pipeline = {\n    vert: (c, p) => p.to.demo.gridFade.gpgpu.vert,\n\n    frag: (c, { frag, link: { gridFade: lgf }, to: { head: h } }) =>\n      h.glsl(h)+lgf.macros+frag,\n\n    attributes: { gridFade_position: buffer(screenPositions) },\n    uniforms: { ...gfsLinkGF.state.uniforms },\n\n    blend: {\n      enable: (c, p) => p.blend.enable,\n\n      func: {\n        srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } }) => s ?? o,\n        srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } }) => s ?? o,\n        dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } }) => s ?? o,\n        dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } }) => s ?? o\n      }\n    },\n\n    depth: { enable: (c, p) => p.depth.enable },\n    count: (c, p) => p.to.demo.gridFade.gpgpu.count\n  });\n\n  gridFadeToScreen.draw = (state = gridFadeToScreen) => {\n    const { pass, to } = state;\n\n    to.demo.gridFade.on && pass(state);\n\n    return state;\n  };\n\n  const { onDraw: gsOnDraw } = gridToScreen;\n  const { onDraw: psOnDraw } = pointsToScreen;\n\n  gridToScreen.onDraw = (gridToScreen) => {\n    const s = gsOnDraw?.(gridToScreen) ?? gridToScreen;\n    const { gridFade } = s.to.demo;\n    const { on, order, step, gpgpu } = gridFade;\n\n    (order === 'past') && step(gridFade);\n    gridToScreen.framebuffer = ((on)? getPass(gpgpu)?.framebuffer : null);\n\n    return s;\n  };\n\n  pointsToScreen.onDraw = (pointsToScreen) => {\n    const s = psOnDraw?.(pointsToScreen) ?? pointsToScreen;\n    const { gridFade, gridFadeToScreen } = s.to.demo;\n    const { order, step } = gridFade;\n\n    (order === 'next') && step(gridFade);\n    gridFadeToScreen.draw(gridFadeToScreen);\n\n    return s;\n  };\n\n  demo.view ??= [];\n\n  /** Resize the canvas and any dependent properties. */\n  const resize = demo.resize = () => {\n    const { demo, $canvas, screen, grid } = to;\n    const { gridFade, view: [vw = innerWidth, vh = innerHeight] } = demo;\n    const { bounds, limit, detail, gpgpu: gGPGPU } = grid;\n    const gShape = gGPGPU.size.shape;\n    const { size: ss, aspect: ar } = screen;\n    const [w, h] = mulN2(ss, setC2(ss, vw, vh), pixelRatio);\n\n    $canvas.width = w;\n    $canvas.height = h;\n\n    /** Screen aspect ratio, `JS`; use `min` for contain, `max` for cover. */\n    aspect(ss, max, false, ar);\n    /** Grid bounds resize proportional to screen. */\n    map((b, i) => (limit*sign(b))*wrap(i, ar), bounds, 0);\n    /** Grid data resize proportional to screen. */\n    gGPGPU.resize(mulN2(gShape, ar, detail));\n    /** Grid fade resize matches screen. */\n    gridFade.gpgpu.resize(ss);\n    /** Screen aspect ratio, `GLSL`; use `min` for contain, `max` for cover. */\n    aspect(ss, max, true, ar);\n  };\n\n  demo.fps ??= getFPS({ style: 'color: #fff; background-color: #0006;' });\n\n  demo.start = async (state = demo) => {\n    const { opticalFlow, resize, to: { timer, frame: frameMPM } } = state;\n\n    opticalFlow.on && await ofStart();\n\n    addEventListener('resize', resize);\n    resize();\n\n    const timestep = timer.step;\n\n    demo.queued = ((!isFinite(timestep))? frame(frameMPM)\n      : (function loop() {\n          return demo.queued = setTimeout(() =>\n              demo.queued = frame(() => loop(frameMPM().demo.queued.cancel())),\n            timestep);\n        })());\n\n    return state;\n  };\n\n  return self.mpm = to;\n}\n\nexport default demo;\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.createREGL = factory());\n}(this, (function () { 'use strict';\n\nvar isTypedArray = function (x) {\n  return (\n    x instanceof Uint8Array ||\n    x instanceof Uint16Array ||\n    x instanceof Uint32Array ||\n    x instanceof Int8Array ||\n    x instanceof Int16Array ||\n    x instanceof Int32Array ||\n    x instanceof Float32Array ||\n    x instanceof Float64Array ||\n    x instanceof Uint8ClampedArray\n  )\n}\n\nvar extend = function (base, opts) {\n  var keys = Object.keys(opts)\n  for (var i = 0; i < keys.length; ++i) {\n    base[keys[i]] = opts[keys[i]]\n  }\n  return base\n}\n\n// Error checking and parameter validation.\n//\n// Statements for the form `check.someProcedure(...)` get removed by\n// a browserify transform for optimized/minified bundles.\n//\n/* globals atob */\nvar endl = '\\n'\n\n// only used for extracting shader names.  if atob not present, then errors\n// will be slightly crappier\nfunction decodeB64 (str) {\n  if (typeof atob !== 'undefined') {\n    return atob(str)\n  }\n  return 'base64:' + str\n}\n\nfunction raise (message) {\n  var error = new Error('(regl) ' + message)\n  console.error(error)\n  throw error\n}\n\nfunction check (pred, message) {\n  if (!pred) {\n    raise(message)\n  }\n}\n\nfunction encolon (message) {\n  if (message) {\n    return ': ' + message\n  }\n  return ''\n}\n\nfunction checkParameter (param, possibilities, message) {\n  if (!(param in possibilities)) {\n    raise('unknown parameter (' + param + ')' + encolon(message) +\n          '. possible values: ' + Object.keys(possibilities).join())\n  }\n}\n\nfunction checkIsTypedArray (data, message) {\n  if (!isTypedArray(data)) {\n    raise(\n      'invalid parameter type' + encolon(message) +\n      '. must be a typed array')\n  }\n}\n\nfunction standardTypeEh (value, type) {\n  switch (type) {\n    case 'number': return typeof value === 'number'\n    case 'object': return typeof value === 'object'\n    case 'string': return typeof value === 'string'\n    case 'boolean': return typeof value === 'boolean'\n    case 'function': return typeof value === 'function'\n    case 'undefined': return typeof value === 'undefined'\n    case 'symbol': return typeof value === 'symbol'\n  }\n}\n\nfunction checkTypeOf (value, type, message) {\n  if (!standardTypeEh(value, type)) {\n    raise(\n      'invalid parameter type' + encolon(message) +\n      '. expected ' + type + ', got ' + (typeof value))\n  }\n}\n\nfunction checkNonNegativeInt (value, message) {\n  if (!((value >= 0) &&\n        ((value | 0) === value))) {\n    raise('invalid parameter type, (' + value + ')' + encolon(message) +\n          '. must be a nonnegative integer')\n  }\n}\n\nfunction checkOneOf (value, list, message) {\n  if (list.indexOf(value) < 0) {\n    raise('invalid value' + encolon(message) + '. must be one of: ' + list)\n  }\n}\n\nvar constructorKeys = [\n  'gl',\n  'canvas',\n  'container',\n  'attributes',\n  'pixelRatio',\n  'extensions',\n  'optionalExtensions',\n  'profile',\n  'onDone'\n]\n\nfunction checkConstructor (obj) {\n  Object.keys(obj).forEach(function (key) {\n    if (constructorKeys.indexOf(key) < 0) {\n      raise('invalid regl constructor argument \"' + key + '\". must be one of ' + constructorKeys)\n    }\n  })\n}\n\nfunction leftPad (str, n) {\n  str = str + ''\n  while (str.length < n) {\n    str = ' ' + str\n  }\n  return str\n}\n\nfunction ShaderFile () {\n  this.name = 'unknown'\n  this.lines = []\n  this.index = {}\n  this.hasErrors = false\n}\n\nfunction ShaderLine (number, line) {\n  this.number = number\n  this.line = line\n  this.errors = []\n}\n\nfunction ShaderError (fileNumber, lineNumber, message) {\n  this.file = fileNumber\n  this.line = lineNumber\n  this.message = message\n}\n\nfunction guessCommand () {\n  var error = new Error()\n  var stack = (error.stack || error).toString()\n  var pat = /compileProcedure.*\\n\\s*at.*\\((.*)\\)/.exec(stack)\n  if (pat) {\n    return pat[1]\n  }\n  var pat2 = /compileProcedure.*\\n\\s*at\\s+(.*)(\\n|$)/.exec(stack)\n  if (pat2) {\n    return pat2[1]\n  }\n  return 'unknown'\n}\n\nfunction guessCallSite () {\n  var error = new Error()\n  var stack = (error.stack || error).toString()\n  var pat = /at REGLCommand.*\\n\\s+at.*\\((.*)\\)/.exec(stack)\n  if (pat) {\n    return pat[1]\n  }\n  var pat2 = /at REGLCommand.*\\n\\s+at\\s+(.*)\\n/.exec(stack)\n  if (pat2) {\n    return pat2[1]\n  }\n  return 'unknown'\n}\n\nfunction parseSource (source, command) {\n  var lines = source.split('\\n')\n  var lineNumber = 1\n  var fileNumber = 0\n  var files = {\n    unknown: new ShaderFile(),\n    0: new ShaderFile()\n  }\n  files.unknown.name = files[0].name = command || guessCommand()\n  files.unknown.lines.push(new ShaderLine(0, ''))\n  for (var i = 0; i < lines.length; ++i) {\n    var line = lines[i]\n    var parts = /^\\s*#\\s*(\\w+)\\s+(.+)\\s*$/.exec(line)\n    if (parts) {\n      switch (parts[1]) {\n        case 'line':\n          var lineNumberInfo = /(\\d+)(\\s+\\d+)?/.exec(parts[2])\n          if (lineNumberInfo) {\n            lineNumber = lineNumberInfo[1] | 0\n            if (lineNumberInfo[2]) {\n              fileNumber = lineNumberInfo[2] | 0\n              if (!(fileNumber in files)) {\n                files[fileNumber] = new ShaderFile()\n              }\n            }\n          }\n          break\n        case 'define':\n          var nameInfo = /SHADER_NAME(_B64)?\\s+(.*)$/.exec(parts[2])\n          if (nameInfo) {\n            files[fileNumber].name = (nameInfo[1]\n              ? decodeB64(nameInfo[2])\n              : nameInfo[2])\n          }\n          break\n      }\n    }\n    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line))\n  }\n  Object.keys(files).forEach(function (fileNumber) {\n    var file = files[fileNumber]\n    file.lines.forEach(function (line) {\n      file.index[line.number] = line\n    })\n  })\n  return files\n}\n\nfunction parseErrorLog (errLog) {\n  var result = []\n  errLog.split('\\n').forEach(function (errMsg) {\n    if (errMsg.length < 5) {\n      return\n    }\n    var parts = /^ERROR:\\s+(\\d+):(\\d+):\\s*(.*)$/.exec(errMsg)\n    if (parts) {\n      result.push(new ShaderError(\n        parts[1] | 0,\n        parts[2] | 0,\n        parts[3].trim()))\n    } else if (errMsg.length > 0) {\n      result.push(new ShaderError('unknown', 0, errMsg))\n    }\n  })\n  return result\n}\n\nfunction annotateFiles (files, errors) {\n  errors.forEach(function (error) {\n    var file = files[error.file]\n    if (file) {\n      var line = file.index[error.line]\n      if (line) {\n        line.errors.push(error)\n        file.hasErrors = true\n        return\n      }\n    }\n    files.unknown.hasErrors = true\n    files.unknown.lines[0].errors.push(error)\n  })\n}\n\nfunction checkShaderError (gl, shader, source, type, command) {\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader)\n    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    checkCommandType(source, 'string', typeName + ' shader source must be a string', command)\n    var files = parseSource(source, command)\n    var errors = parseErrorLog(errLog)\n    annotateFiles(files, errors)\n\n    Object.keys(files).forEach(function (fileNumber) {\n      var file = files[fileNumber]\n      if (!file.hasErrors) {\n        return\n      }\n\n      var strings = ['']\n      var styles = ['']\n\n      function push (str, style) {\n        strings.push(str)\n        styles.push(style || '')\n      }\n\n      push('file number ' + fileNumber + ': ' + file.name + '\\n', 'color:red;text-decoration:underline;font-weight:bold')\n\n      file.lines.forEach(function (line) {\n        if (line.errors.length > 0) {\n          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold')\n          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold')\n\n          // try to guess token\n          var offset = 0\n          line.errors.forEach(function (error) {\n            var message = error.message\n            var token = /^\\s*'(.*)'\\s*:\\s*(.*)$/.exec(message)\n            if (token) {\n              var tokenPat = token[1]\n              message = token[2]\n              switch (tokenPat) {\n                case 'assign':\n                  tokenPat = '='\n                  break\n              }\n              offset = Math.max(line.line.indexOf(tokenPat, offset), 0)\n            } else {\n              offset = 0\n            }\n\n            push(leftPad('| ', 6))\n            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold')\n            push(leftPad('| ', 6))\n            push(message + endl, 'font-weight:bold')\n          })\n          push(leftPad('| ', 6) + endl)\n        } else {\n          push(leftPad(line.number, 4) + '|  ')\n          push(line.line + endl, 'color:red')\n        }\n      })\n      if (typeof document !== 'undefined' && !window.chrome) {\n        styles[0] = strings.join('%c')\n        console.log.apply(console, styles)\n      } else {\n        console.log(strings.join(''))\n      }\n    })\n\n    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name)\n  }\n}\n\nfunction checkLinkError (gl, program, fragShader, vertShader, command) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program)\n    var fragParse = parseSource(fragShader, command)\n    var vertParse = parseSource(vertShader, command)\n\n    var header = 'Error linking program with vertex shader, \"' +\n      vertParse[0].name + '\", and fragment shader \"' + fragParse[0].name + '\"'\n\n    if (typeof document !== 'undefined') {\n      console.log('%c' + header + endl + '%c' + errLog,\n        'color:red;text-decoration:underline;font-weight:bold',\n        'color:red')\n    } else {\n      console.log(header + endl + errLog)\n    }\n    check.raise(header)\n  }\n}\n\nfunction saveCommandRef (object) {\n  object._commandRef = guessCommand()\n}\n\nfunction saveDrawCommandInfo (opts, uniforms, attributes, stringStore) {\n  saveCommandRef(opts)\n\n  function id (str) {\n    if (str) {\n      return stringStore.id(str)\n    }\n    return 0\n  }\n  opts._fragId = id(opts.static.frag)\n  opts._vertId = id(opts.static.vert)\n\n  function addProps (dict, set) {\n    Object.keys(set).forEach(function (u) {\n      dict[stringStore.id(u)] = true\n    })\n  }\n\n  var uniformSet = opts._uniformSet = {}\n  addProps(uniformSet, uniforms.static)\n  addProps(uniformSet, uniforms.dynamic)\n\n  var attributeSet = opts._attributeSet = {}\n  addProps(attributeSet, attributes.static)\n  addProps(attributeSet, attributes.dynamic)\n\n  opts._hasCount = (\n    'count' in opts.static ||\n    'count' in opts.dynamic ||\n    'elements' in opts.static ||\n    'elements' in opts.dynamic)\n}\n\nfunction commandRaise (message, command) {\n  var callSite = guessCallSite()\n  raise(message +\n    ' in command ' + (command || guessCommand()) +\n    (callSite === 'unknown' ? '' : ' called from ' + callSite))\n}\n\nfunction checkCommand (pred, message, command) {\n  if (!pred) {\n    commandRaise(message, command || guessCommand())\n  }\n}\n\nfunction checkParameterCommand (param, possibilities, message, command) {\n  if (!(param in possibilities)) {\n    commandRaise(\n      'unknown parameter (' + param + ')' + encolon(message) +\n      '. possible values: ' + Object.keys(possibilities).join(),\n      command || guessCommand())\n  }\n}\n\nfunction checkCommandType (value, type, message, command) {\n  if (!standardTypeEh(value, type)) {\n    commandRaise(\n      'invalid parameter type' + encolon(message) +\n      '. expected ' + type + ', got ' + (typeof value),\n      command || guessCommand())\n  }\n}\n\nfunction checkOptional (block) {\n  block()\n}\n\nfunction checkFramebufferFormat (attachment, texFormats, rbFormats) {\n  if (attachment.texture) {\n    checkOneOf(\n      attachment.texture._texture.internalformat,\n      texFormats,\n      'unsupported texture format for attachment')\n  } else {\n    checkOneOf(\n      attachment.renderbuffer._renderbuffer.format,\n      rbFormats,\n      'unsupported renderbuffer format for attachment')\n  }\n}\n\nvar GL_CLAMP_TO_EDGE = 0x812F\n\nvar GL_NEAREST = 0x2600\nvar GL_NEAREST_MIPMAP_NEAREST = 0x2700\nvar GL_LINEAR_MIPMAP_NEAREST = 0x2701\nvar GL_NEAREST_MIPMAP_LINEAR = 0x2702\nvar GL_LINEAR_MIPMAP_LINEAR = 0x2703\n\nvar GL_BYTE = 5120\nvar GL_UNSIGNED_BYTE = 5121\nvar GL_SHORT = 5122\nvar GL_UNSIGNED_SHORT = 5123\nvar GL_INT = 5124\nvar GL_UNSIGNED_INT = 5125\nvar GL_FLOAT = 5126\n\nvar GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033\nvar GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034\nvar GL_UNSIGNED_SHORT_5_6_5 = 0x8363\nvar GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA\n\nvar GL_HALF_FLOAT_OES = 0x8D61\n\nvar TYPE_SIZE = {}\n\nTYPE_SIZE[GL_BYTE] =\nTYPE_SIZE[GL_UNSIGNED_BYTE] = 1\n\nTYPE_SIZE[GL_SHORT] =\nTYPE_SIZE[GL_UNSIGNED_SHORT] =\nTYPE_SIZE[GL_HALF_FLOAT_OES] =\nTYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] =\nTYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] =\nTYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2\n\nTYPE_SIZE[GL_INT] =\nTYPE_SIZE[GL_UNSIGNED_INT] =\nTYPE_SIZE[GL_FLOAT] =\nTYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4\n\nfunction pixelSize (type, channels) {\n  if (type === GL_UNSIGNED_SHORT_5_5_5_1 ||\n      type === GL_UNSIGNED_SHORT_4_4_4_4 ||\n      type === GL_UNSIGNED_SHORT_5_6_5) {\n    return 2\n  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {\n    return 4\n  } else {\n    return TYPE_SIZE[type] * channels\n  }\n}\n\nfunction isPow2 (v) {\n  return !(v & (v - 1)) && (!!v)\n}\n\nfunction checkTexture2D (info, mipData, limits) {\n  var i\n  var w = mipData.width\n  var h = mipData.height\n  var c = mipData.channels\n\n  // Check texture shape\n  check(w > 0 && w <= limits.maxTextureSize &&\n        h > 0 && h <= limits.maxTextureSize,\n  'invalid texture shape')\n\n  // check wrap mode\n  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {\n    check(isPow2(w) && isPow2(h),\n      'incompatible wrap mode for texture, both width and height must be power of 2')\n  }\n\n  if (mipData.mipmask === 1) {\n    if (w !== 1 && h !== 1) {\n      check(\n        info.minFilter !== GL_NEAREST_MIPMAP_NEAREST &&\n        info.minFilter !== GL_NEAREST_MIPMAP_LINEAR &&\n        info.minFilter !== GL_LINEAR_MIPMAP_NEAREST &&\n        info.minFilter !== GL_LINEAR_MIPMAP_LINEAR,\n        'min filter requires mipmap')\n    }\n  } else {\n    // texture must be power of 2\n    check(isPow2(w) && isPow2(h),\n      'texture must be a square power of 2 to support mipmapping')\n    check(mipData.mipmask === (w << 1) - 1,\n      'missing or incomplete mipmap data')\n  }\n\n  if (mipData.type === GL_FLOAT) {\n    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {\n      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST,\n        'filter not supported, must enable oes_texture_float_linear')\n    }\n    check(!info.genMipmaps,\n      'mipmap generation not supported with float textures')\n  }\n\n  // check image complete\n  var mipimages = mipData.images\n  for (i = 0; i < 16; ++i) {\n    if (mipimages[i]) {\n      var mw = w >> i\n      var mh = h >> i\n      check(mipData.mipmask & (1 << i), 'missing mipmap data')\n\n      var img = mipimages[i]\n\n      check(\n        img.width === mw &&\n        img.height === mh,\n        'invalid shape for mip images')\n\n      check(\n        img.format === mipData.format &&\n        img.internalformat === mipData.internalformat &&\n        img.type === mipData.type,\n        'incompatible type for mip image')\n\n      if (img.compressed) {\n        // TODO: check size for compressed images\n      } else if (img.data) {\n        // check(img.data.byteLength === mw * mh *\n        // Math.max(pixelSize(img.type, c), img.unpackAlignment),\n        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment\n        check(img.data.byteLength === rowSize * mh,\n          'invalid data for image, buffer size is inconsistent with image format')\n      } else if (img.element) {\n        // TODO: check element can be loaded\n      } else if (img.copy) {\n        // TODO: check compatible format and type\n      }\n    } else if (!info.genMipmaps) {\n      check((mipData.mipmask & (1 << i)) === 0, 'extra mipmap data')\n    }\n  }\n\n  if (mipData.compressed) {\n    check(!info.genMipmaps,\n      'mipmap generation for compressed images not supported')\n  }\n}\n\nfunction checkTextureCube (texture, info, faces, limits) {\n  var w = texture.width\n  var h = texture.height\n  var c = texture.channels\n\n  // Check texture shape\n  check(\n    w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize,\n    'invalid texture shape')\n  check(\n    w === h,\n    'cube map must be square')\n  check(\n    info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE,\n    'wrap mode not supported by cube map')\n\n  for (var i = 0; i < faces.length; ++i) {\n    var face = faces[i]\n    check(\n      face.width === w && face.height === h,\n      'inconsistent cube map face shape')\n\n    if (info.genMipmaps) {\n      check(!face.compressed,\n        'can not generate mipmap for compressed textures')\n      check(face.mipmask === 1,\n        'can not specify mipmaps and generate mipmaps')\n    } else {\n      // TODO: check mip and filter mode\n    }\n\n    var mipmaps = face.images\n    for (var j = 0; j < 16; ++j) {\n      var img = mipmaps[j]\n      if (img) {\n        var mw = w >> j\n        var mh = h >> j\n        check(face.mipmask & (1 << j), 'missing mipmap data')\n        check(\n          img.width === mw &&\n          img.height === mh,\n          'invalid shape for mip images')\n        check(\n          img.format === texture.format &&\n          img.internalformat === texture.internalformat &&\n          img.type === texture.type,\n          'incompatible type for mip image')\n\n        if (img.compressed) {\n          // TODO: check size for compressed images\n        } else if (img.data) {\n          check(img.data.byteLength === mw * mh *\n            Math.max(pixelSize(img.type, c), img.unpackAlignment),\n          'invalid data for image, buffer size is inconsistent with image format')\n        } else if (img.element) {\n          // TODO: check element can be loaded\n        } else if (img.copy) {\n          // TODO: check compatible format and type\n        }\n      }\n    }\n  }\n}\n\nvar check$1 = extend(check, {\n  optional: checkOptional,\n  raise: raise,\n  commandRaise: commandRaise,\n  command: checkCommand,\n  parameter: checkParameter,\n  commandParameter: checkParameterCommand,\n  constructor: checkConstructor,\n  type: checkTypeOf,\n  commandType: checkCommandType,\n  isTypedArray: checkIsTypedArray,\n  nni: checkNonNegativeInt,\n  oneOf: checkOneOf,\n  shaderError: checkShaderError,\n  linkError: checkLinkError,\n  callSite: guessCallSite,\n  saveCommandRef: saveCommandRef,\n  saveDrawInfo: saveDrawCommandInfo,\n  framebufferFormat: checkFramebufferFormat,\n  guessCommand: guessCommand,\n  texture2D: checkTexture2D,\n  textureCube: checkTextureCube\n});\n\nvar VARIABLE_COUNTER = 0\n\nvar DYN_FUNC = 0\nvar DYN_CONSTANT = 5\nvar DYN_ARRAY = 6\n\nfunction DynamicVariable (type, data) {\n  this.id = (VARIABLE_COUNTER++)\n  this.type = type\n  this.data = data\n}\n\nfunction escapeStr (str) {\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\n}\n\nfunction splitParts (str) {\n  if (str.length === 0) {\n    return []\n  }\n\n  var firstChar = str.charAt(0)\n  var lastChar = str.charAt(str.length - 1)\n\n  if (str.length > 1 &&\n      firstChar === lastChar &&\n      (firstChar === '\"' || firstChar === \"'\")) {\n    return ['\"' + escapeStr(str.substr(1, str.length - 2)) + '\"']\n  }\n\n  var parts = /\\[(false|true|null|\\d+|'[^']*'|\"[^\"]*\")\\]/.exec(str)\n  if (parts) {\n    return (\n      splitParts(str.substr(0, parts.index))\n        .concat(splitParts(parts[1]))\n        .concat(splitParts(str.substr(parts.index + parts[0].length)))\n    )\n  }\n\n  var subparts = str.split('.')\n  if (subparts.length === 1) {\n    return ['\"' + escapeStr(str) + '\"']\n  }\n\n  var result = []\n  for (var i = 0; i < subparts.length; ++i) {\n    result = result.concat(splitParts(subparts[i]))\n  }\n  return result\n}\n\nfunction toAccessorString (str) {\n  return '[' + splitParts(str).join('][') + ']'\n}\n\nfunction defineDynamic (type, data) {\n  return new DynamicVariable(type, toAccessorString(data + ''))\n}\n\nfunction isDynamic (x) {\n  return (typeof x === 'function' && !x._reglType) || (x instanceof DynamicVariable)\n}\n\nfunction unbox (x, path) {\n  if (typeof x === 'function') {\n    return new DynamicVariable(DYN_FUNC, x)\n  } else if (typeof x === 'number' || typeof x === 'boolean') {\n    return new DynamicVariable(DYN_CONSTANT, x)\n  } else if (Array.isArray(x)) {\n    return new DynamicVariable(DYN_ARRAY, x.map(function (y, i) { return unbox(y, path + '[' + i + ']') }))\n  } else if (x instanceof DynamicVariable) {\n    return x\n  }\n  check$1(false, 'invalid option type in uniform ' + path)\n}\n\nvar dynamic = {\n  DynamicVariable: DynamicVariable,\n  define: defineDynamic,\n  isDynamic: isDynamic,\n  unbox: unbox,\n  accessor: toAccessorString\n};\n\n/* globals requestAnimationFrame, cancelAnimationFrame */\nvar raf = {\n  next: typeof requestAnimationFrame === 'function'\n    ? function (cb) { return requestAnimationFrame(cb) }\n    : function (cb) { return setTimeout(cb, 16) },\n  cancel: typeof cancelAnimationFrame === 'function'\n    ? function (raf) { return cancelAnimationFrame(raf) }\n    : clearTimeout\n};\n\n/* globals performance */\nvar clock = (typeof performance !== 'undefined' && performance.now)\n    ? function () { return performance.now() }\n    : function () { return +(new Date()) };\n\nfunction createStringStore () {\n  var stringIds = { '': 0 }\n  var stringValues = ['']\n  return {\n    id: function (str) {\n      var result = stringIds[str]\n      if (result) {\n        return result\n      }\n      result = stringIds[str] = stringValues.length\n      stringValues.push(str)\n      return result\n    },\n\n    str: function (id) {\n      return stringValues[id]\n    }\n  }\n}\n\n// Context and canvas creation helper functions\nfunction createCanvas (element, onDone, pixelRatio) {\n  var canvas = document.createElement('canvas')\n  extend(canvas.style, {\n    border: 0,\n    margin: 0,\n    padding: 0,\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  })\n  element.appendChild(canvas)\n\n  if (element === document.body) {\n    canvas.style.position = 'absolute'\n    extend(element.style, {\n      margin: 0,\n      padding: 0\n    })\n  }\n\n  function resize () {\n    var w = window.innerWidth\n    var h = window.innerHeight\n    if (element !== document.body) {\n      var bounds = canvas.getBoundingClientRect()\n      w = bounds.right - bounds.left\n      h = bounds.bottom - bounds.top\n    }\n    canvas.width = pixelRatio * w\n    canvas.height = pixelRatio * h\n  }\n\n  var resizeObserver\n  if (element !== document.body && typeof ResizeObserver === 'function') {\n    // ignore 'ResizeObserver' is not defined\n    // eslint-disable-next-line\n    resizeObserver = new ResizeObserver(function () {\n      // setTimeout to avoid flicker\n      setTimeout(resize)\n    })\n    resizeObserver.observe(element)\n  } else {\n    window.addEventListener('resize', resize, false)\n  }\n\n  function onDestroy () {\n    if (resizeObserver) {\n      resizeObserver.disconnect()\n    } else {\n      window.removeEventListener('resize', resize)\n    }\n    element.removeChild(canvas)\n  }\n\n  resize()\n\n  return {\n    canvas: canvas,\n    onDestroy: onDestroy\n  }\n}\n\nfunction createContext (canvas, contextAttributes) {\n  function get (name) {\n    try {\n      return canvas.getContext(name, contextAttributes)\n    } catch (e) {\n      return null\n    }\n  }\n  return (\n    get('webgl') ||\n    get('experimental-webgl') ||\n    get('webgl-experimental')\n  )\n}\n\nfunction isHTMLElement (obj) {\n  return (\n    typeof obj.nodeName === 'string' &&\n    typeof obj.appendChild === 'function' &&\n    typeof obj.getBoundingClientRect === 'function'\n  )\n}\n\nfunction isWebGLContext (obj) {\n  return (\n    typeof obj.drawArrays === 'function' ||\n    typeof obj.drawElements === 'function'\n  )\n}\n\nfunction parseExtensions (input) {\n  if (typeof input === 'string') {\n    return input.split()\n  }\n  check$1(Array.isArray(input), 'invalid extension array')\n  return input\n}\n\nfunction getElement (desc) {\n  if (typeof desc === 'string') {\n    check$1(typeof document !== 'undefined', 'not supported outside of DOM')\n    return document.querySelector(desc)\n  }\n  return desc\n}\n\nfunction parseArgs (args_) {\n  var args = args_ || {}\n  var element, container, canvas, gl\n  var contextAttributes = {}\n  var extensions = []\n  var optionalExtensions = []\n  var pixelRatio = (typeof window === 'undefined' ? 1 : window.devicePixelRatio)\n  var profile = false\n  var onDone = function (err) {\n    if (err) {\n      check$1.raise(err)\n    }\n  }\n  var onDestroy = function () {}\n  if (typeof args === 'string') {\n    check$1(\n      typeof document !== 'undefined',\n      'selector queries only supported in DOM enviroments')\n    element = document.querySelector(args)\n    check$1(element, 'invalid query string for element')\n  } else if (typeof args === 'object') {\n    if (isHTMLElement(args)) {\n      element = args\n    } else if (isWebGLContext(args)) {\n      gl = args\n      canvas = gl.canvas\n    } else {\n      check$1.constructor(args)\n      if ('gl' in args) {\n        gl = args.gl\n      } else if ('canvas' in args) {\n        canvas = getElement(args.canvas)\n      } else if ('container' in args) {\n        container = getElement(args.container)\n      }\n      if ('attributes' in args) {\n        contextAttributes = args.attributes\n        check$1.type(contextAttributes, 'object', 'invalid context attributes')\n      }\n      if ('extensions' in args) {\n        extensions = parseExtensions(args.extensions)\n      }\n      if ('optionalExtensions' in args) {\n        optionalExtensions = parseExtensions(args.optionalExtensions)\n      }\n      if ('onDone' in args) {\n        check$1.type(\n          args.onDone, 'function',\n          'invalid or missing onDone callback')\n        onDone = args.onDone\n      }\n      if ('profile' in args) {\n        profile = !!args.profile\n      }\n      if ('pixelRatio' in args) {\n        pixelRatio = +args.pixelRatio\n        check$1(pixelRatio > 0, 'invalid pixel ratio')\n      }\n    }\n  } else {\n    check$1.raise('invalid arguments to regl')\n  }\n\n  if (element) {\n    if (element.nodeName.toLowerCase() === 'canvas') {\n      canvas = element\n    } else {\n      container = element\n    }\n  }\n\n  if (!gl) {\n    if (!canvas) {\n      check$1(\n        typeof document !== 'undefined',\n        'must manually specify webgl context outside of DOM environments')\n      var result = createCanvas(container || document.body, onDone, pixelRatio)\n      if (!result) {\n        return null\n      }\n      canvas = result.canvas\n      onDestroy = result.onDestroy\n    }\n    // workaround for chromium bug, premultiplied alpha value is platform dependent\n    if (contextAttributes.premultipliedAlpha === undefined) contextAttributes.premultipliedAlpha = true\n    gl = createContext(canvas, contextAttributes)\n  }\n\n  if (!gl) {\n    onDestroy()\n    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org')\n    return null\n  }\n\n  return {\n    gl: gl,\n    canvas: canvas,\n    container: container,\n    extensions: extensions,\n    optionalExtensions: optionalExtensions,\n    pixelRatio: pixelRatio,\n    profile: profile,\n    onDone: onDone,\n    onDestroy: onDestroy\n  }\n}\n\nfunction createExtensionCache (gl, config) {\n  var extensions = {}\n\n  function tryLoadExtension (name_) {\n    check$1.type(name_, 'string', 'extension name must be string')\n    var name = name_.toLowerCase()\n    var ext\n    try {\n      ext = extensions[name] = gl.getExtension(name)\n    } catch (e) {}\n    return !!ext\n  }\n\n  for (var i = 0; i < config.extensions.length; ++i) {\n    var name = config.extensions[i]\n    if (!tryLoadExtension(name)) {\n      config.onDestroy()\n      config.onDone('\"' + name + '\" extension is not supported by the current WebGL context, try upgrading your system or a different browser')\n      return null\n    }\n  }\n\n  config.optionalExtensions.forEach(tryLoadExtension)\n\n  return {\n    extensions: extensions,\n    restore: function () {\n      Object.keys(extensions).forEach(function (name) {\n        if (extensions[name] && !tryLoadExtension(name)) {\n          throw new Error('(regl): error restoring extension ' + name)\n        }\n      })\n    }\n  }\n}\n\nfunction loop (n, f) {\n  var result = Array(n)\n  for (var i = 0; i < n; ++i) {\n    result[i] = f(i)\n  }\n  return result\n}\n\nvar GL_BYTE$1 = 5120\nvar GL_UNSIGNED_BYTE$2 = 5121\nvar GL_SHORT$1 = 5122\nvar GL_UNSIGNED_SHORT$1 = 5123\nvar GL_INT$1 = 5124\nvar GL_UNSIGNED_INT$1 = 5125\nvar GL_FLOAT$2 = 5126\n\nfunction nextPow16 (v) {\n  for (var i = 16; i <= (1 << 28); i *= 16) {\n    if (v <= i) {\n      return i\n    }\n  }\n  return 0\n}\n\nfunction log2 (v) {\n  var r, shift\n  r = (v > 0xFFFF) << 4\n  v >>>= r\n  shift = (v > 0xFF) << 3\n  v >>>= shift; r |= shift\n  shift = (v > 0xF) << 2\n  v >>>= shift; r |= shift\n  shift = (v > 0x3) << 1\n  v >>>= shift; r |= shift\n  return r | (v >> 1)\n}\n\nfunction createPool () {\n  var bufferPool = loop(8, function () {\n    return []\n  })\n\n  function alloc (n) {\n    var sz = nextPow16(n)\n    var bin = bufferPool[log2(sz) >> 2]\n    if (bin.length > 0) {\n      return bin.pop()\n    }\n    return new ArrayBuffer(sz)\n  }\n\n  function free (buf) {\n    bufferPool[log2(buf.byteLength) >> 2].push(buf)\n  }\n\n  function allocType (type, n) {\n    var result = null\n    switch (type) {\n      case GL_BYTE$1:\n        result = new Int8Array(alloc(n), 0, n)\n        break\n      case GL_UNSIGNED_BYTE$2:\n        result = new Uint8Array(alloc(n), 0, n)\n        break\n      case GL_SHORT$1:\n        result = new Int16Array(alloc(2 * n), 0, n)\n        break\n      case GL_UNSIGNED_SHORT$1:\n        result = new Uint16Array(alloc(2 * n), 0, n)\n        break\n      case GL_INT$1:\n        result = new Int32Array(alloc(4 * n), 0, n)\n        break\n      case GL_UNSIGNED_INT$1:\n        result = new Uint32Array(alloc(4 * n), 0, n)\n        break\n      case GL_FLOAT$2:\n        result = new Float32Array(alloc(4 * n), 0, n)\n        break\n      default:\n        return null\n    }\n    if (result.length !== n) {\n      return result.subarray(0, n)\n    }\n    return result\n  }\n\n  function freeType (array) {\n    free(array.buffer)\n  }\n\n  return {\n    alloc: alloc,\n    free: free,\n    allocType: allocType,\n    freeType: freeType\n  }\n}\n\nvar pool = createPool()\n\n// zero pool for initial zero data\npool.zero = createPool()\n\nvar GL_SUBPIXEL_BITS = 0x0D50\nvar GL_RED_BITS = 0x0D52\nvar GL_GREEN_BITS = 0x0D53\nvar GL_BLUE_BITS = 0x0D54\nvar GL_ALPHA_BITS = 0x0D55\nvar GL_DEPTH_BITS = 0x0D56\nvar GL_STENCIL_BITS = 0x0D57\n\nvar GL_ALIASED_POINT_SIZE_RANGE = 0x846D\nvar GL_ALIASED_LINE_WIDTH_RANGE = 0x846E\n\nvar GL_MAX_TEXTURE_SIZE = 0x0D33\nvar GL_MAX_VIEWPORT_DIMS = 0x0D3A\nvar GL_MAX_VERTEX_ATTRIBS = 0x8869\nvar GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB\nvar GL_MAX_VARYING_VECTORS = 0x8DFC\nvar GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D\nvar GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C\nvar GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872\nvar GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD\nvar GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C\nvar GL_MAX_RENDERBUFFER_SIZE = 0x84E8\n\nvar GL_VENDOR = 0x1F00\nvar GL_RENDERER = 0x1F01\nvar GL_VERSION = 0x1F02\nvar GL_SHADING_LANGUAGE_VERSION = 0x8B8C\n\nvar GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF\n\nvar GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF\nvar GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824\n\nvar GL_TEXTURE_2D = 0x0DE1\nvar GL_TEXTURE_CUBE_MAP = 0x8513\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515\nvar GL_TEXTURE0 = 0x84C0\nvar GL_RGBA = 0x1908\nvar GL_FLOAT$1 = 0x1406\nvar GL_UNSIGNED_BYTE$1 = 0x1401\nvar GL_FRAMEBUFFER = 0x8D40\nvar GL_FRAMEBUFFER_COMPLETE = 0x8CD5\nvar GL_COLOR_ATTACHMENT0 = 0x8CE0\nvar GL_COLOR_BUFFER_BIT$1 = 0x4000\n\nvar wrapLimits = function (gl, extensions) {\n  var maxAnisotropic = 1\n  if (extensions.ext_texture_filter_anisotropic) {\n    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n  }\n\n  var maxDrawbuffers = 1\n  var maxColorAttachments = 1\n  if (extensions.webgl_draw_buffers) {\n    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL)\n    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL)\n  }\n\n  // detect if reading float textures is available (Safari doesn't support)\n  var readFloat = !!extensions.oes_texture_float\n  if (readFloat) {\n    var readFloatTexture = gl.createTexture()\n    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture)\n    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null)\n\n    var fbo = gl.createFramebuffer()\n    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo)\n    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0)\n    gl.bindTexture(GL_TEXTURE_2D, null)\n\n    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false\n\n    else {\n      gl.viewport(0, 0, 1, 1)\n      gl.clearColor(1.0, 0.0, 0.0, 1.0)\n      gl.clear(GL_COLOR_BUFFER_BIT$1)\n      var pixels = pool.allocType(GL_FLOAT$1, 4)\n      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels)\n\n      if (gl.getError()) readFloat = false\n      else {\n        gl.deleteFramebuffer(fbo)\n        gl.deleteTexture(readFloatTexture)\n\n        readFloat = pixels[0] === 1.0\n      }\n\n      pool.freeType(pixels)\n    }\n  }\n\n  // detect non power of two cube textures support (IE doesn't support)\n  var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent))\n\n  var npotTextureCube = true\n\n  if (!isIE) {\n    var cubeTexture = gl.createTexture()\n    var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36)\n    gl.activeTexture(GL_TEXTURE0)\n    gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture)\n    gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data)\n    pool.freeType(data)\n    gl.bindTexture(GL_TEXTURE_CUBE_MAP, null)\n    gl.deleteTexture(cubeTexture)\n    npotTextureCube = !gl.getError()\n  }\n\n  return {\n    // drawing buffer bit depth\n    colorBits: [\n      gl.getParameter(GL_RED_BITS),\n      gl.getParameter(GL_GREEN_BITS),\n      gl.getParameter(GL_BLUE_BITS),\n      gl.getParameter(GL_ALPHA_BITS)\n    ],\n    depthBits: gl.getParameter(GL_DEPTH_BITS),\n    stencilBits: gl.getParameter(GL_STENCIL_BITS),\n    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),\n\n    // supported extensions\n    extensions: Object.keys(extensions).filter(function (ext) {\n      return !!extensions[ext]\n    }),\n\n    // max aniso samples\n    maxAnisotropic: maxAnisotropic,\n\n    // max draw buffers\n    maxDrawbuffers: maxDrawbuffers,\n    maxColorAttachments: maxColorAttachments,\n\n    // point and line size ranges\n    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),\n    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),\n    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),\n    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),\n    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),\n    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),\n    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),\n    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),\n    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),\n    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),\n    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),\n    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),\n    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),\n\n    // vendor info\n    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),\n    renderer: gl.getParameter(GL_RENDERER),\n    vendor: gl.getParameter(GL_VENDOR),\n    version: gl.getParameter(GL_VERSION),\n\n    // quirks\n    readFloat: readFloat,\n    npotTextureCube: npotTextureCube\n  }\n}\n\nfunction isNDArrayLike (obj) {\n  return (\n    !!obj &&\n    typeof obj === 'object' &&\n    Array.isArray(obj.shape) &&\n    Array.isArray(obj.stride) &&\n    typeof obj.offset === 'number' &&\n    obj.shape.length === obj.stride.length &&\n    (Array.isArray(obj.data) ||\n      isTypedArray(obj.data)))\n}\n\nvar values = function (obj) {\n  return Object.keys(obj).map(function (key) { return obj[key] })\n}\n\nvar flattenUtils = {\n  shape: arrayShape$1,\n  flatten: flattenArray\n};\n\nfunction flatten1D (array, nx, out) {\n  for (var i = 0; i < nx; ++i) {\n    out[i] = array[i]\n  }\n}\n\nfunction flatten2D (array, nx, ny, out) {\n  var ptr = 0\n  for (var i = 0; i < nx; ++i) {\n    var row = array[i]\n    for (var j = 0; j < ny; ++j) {\n      out[ptr++] = row[j]\n    }\n  }\n}\n\nfunction flatten3D (array, nx, ny, nz, out, ptr_) {\n  var ptr = ptr_\n  for (var i = 0; i < nx; ++i) {\n    var row = array[i]\n    for (var j = 0; j < ny; ++j) {\n      var col = row[j]\n      for (var k = 0; k < nz; ++k) {\n        out[ptr++] = col[k]\n      }\n    }\n  }\n}\n\nfunction flattenRec (array, shape, level, out, ptr) {\n  var stride = 1\n  for (var i = level + 1; i < shape.length; ++i) {\n    stride *= shape[i]\n  }\n  var n = shape[level]\n  if (shape.length - level === 4) {\n    var nx = shape[level + 1]\n    var ny = shape[level + 2]\n    var nz = shape[level + 3]\n    for (i = 0; i < n; ++i) {\n      flatten3D(array[i], nx, ny, nz, out, ptr)\n      ptr += stride\n    }\n  } else {\n    for (i = 0; i < n; ++i) {\n      flattenRec(array[i], shape, level + 1, out, ptr)\n      ptr += stride\n    }\n  }\n}\n\nfunction flattenArray (array, shape, type, out_) {\n  var sz = 1\n  if (shape.length) {\n    for (var i = 0; i < shape.length; ++i) {\n      sz *= shape[i]\n    }\n  } else {\n    sz = 0\n  }\n  var out = out_ || pool.allocType(type, sz)\n  switch (shape.length) {\n    case 0:\n      break\n    case 1:\n      flatten1D(array, shape[0], out)\n      break\n    case 2:\n      flatten2D(array, shape[0], shape[1], out)\n      break\n    case 3:\n      flatten3D(array, shape[0], shape[1], shape[2], out, 0)\n      break\n    default:\n      flattenRec(array, shape, 0, out, 0)\n  }\n  return out\n}\n\nfunction arrayShape$1 (array_) {\n  var shape = []\n  for (var array = array_; array.length; array = array[0]) {\n    shape.push(array.length)\n  }\n  return shape\n}\n\nvar arrayTypes =  {\n\t\"[object Int8Array]\": 5120,\n\t\"[object Int16Array]\": 5122,\n\t\"[object Int32Array]\": 5124,\n\t\"[object Uint8Array]\": 5121,\n\t\"[object Uint8ClampedArray]\": 5121,\n\t\"[object Uint16Array]\": 5123,\n\t\"[object Uint32Array]\": 5125,\n\t\"[object Float32Array]\": 5126,\n\t\"[object Float64Array]\": 5121,\n\t\"[object ArrayBuffer]\": 5121\n};\n\nvar int8 = 5120;\nvar int16 = 5122;\nvar int32 = 5124;\nvar uint8 = 5121;\nvar uint16 = 5123;\nvar uint32 = 5125;\nvar float = 5126;\nvar float32 = 5126;\nvar glTypes = {\n\tint8: int8,\n\tint16: int16,\n\tint32: int32,\n\tuint8: uint8,\n\tuint16: uint16,\n\tuint32: uint32,\n\tfloat: float,\n\tfloat32: float32\n};\n\nvar dynamic$1 = 35048;\nvar stream = 35040;\nvar usageTypes = {\n\tdynamic: dynamic$1,\n\tstream: stream,\n\t\"static\": 35044\n};\n\nvar arrayFlatten = flattenUtils.flatten\nvar arrayShape = flattenUtils.shape\n\nvar GL_STATIC_DRAW = 0x88E4\nvar GL_STREAM_DRAW = 0x88E0\n\nvar GL_UNSIGNED_BYTE$3 = 5121\nvar GL_FLOAT$3 = 5126\n\nvar DTYPES_SIZES = []\nDTYPES_SIZES[5120] = 1 // int8\nDTYPES_SIZES[5122] = 2 // int16\nDTYPES_SIZES[5124] = 4 // int32\nDTYPES_SIZES[5121] = 1 // uint8\nDTYPES_SIZES[5123] = 2 // uint16\nDTYPES_SIZES[5125] = 4 // uint32\nDTYPES_SIZES[5126] = 4 // float32\n\nfunction typedArrayCode (data) {\n  return arrayTypes[Object.prototype.toString.call(data)] | 0\n}\n\nfunction copyArray (out, inp) {\n  for (var i = 0; i < inp.length; ++i) {\n    out[i] = inp[i]\n  }\n}\n\nfunction transpose (\n  result, data, shapeX, shapeY, strideX, strideY, offset) {\n  var ptr = 0\n  for (var i = 0; i < shapeX; ++i) {\n    for (var j = 0; j < shapeY; ++j) {\n      result[ptr++] = data[strideX * i + strideY * j + offset]\n    }\n  }\n}\n\nfunction wrapBufferState (gl, stats, config, destroyBuffer) {\n  var bufferCount = 0\n  var bufferSet = {}\n\n  function REGLBuffer (type) {\n    this.id = bufferCount++\n    this.buffer = gl.createBuffer()\n    this.type = type\n    this.usage = GL_STATIC_DRAW\n    this.byteLength = 0\n    this.dimension = 1\n    this.dtype = GL_UNSIGNED_BYTE$3\n\n    this.persistentData = null\n\n    if (config.profile) {\n      this.stats = { size: 0 }\n    }\n  }\n\n  REGLBuffer.prototype.bind = function () {\n    gl.bindBuffer(this.type, this.buffer)\n  }\n\n  REGLBuffer.prototype.destroy = function () {\n    destroy(this)\n  }\n\n  var streamPool = []\n\n  function createStream (type, data) {\n    var buffer = streamPool.pop()\n    if (!buffer) {\n      buffer = new REGLBuffer(type)\n    }\n    buffer.bind()\n    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false)\n    return buffer\n  }\n\n  function destroyStream (stream$$1) {\n    streamPool.push(stream$$1)\n  }\n\n  function initBufferFromTypedArray (buffer, data, usage) {\n    buffer.byteLength = data.byteLength\n    gl.bufferData(buffer.type, data, usage)\n  }\n\n  function initBufferFromData (buffer, data, usage, dtype, dimension, persist) {\n    var shape\n    buffer.usage = usage\n    if (Array.isArray(data)) {\n      buffer.dtype = dtype || GL_FLOAT$3\n      if (data.length > 0) {\n        var flatData\n        if (Array.isArray(data[0])) {\n          shape = arrayShape(data)\n          var dim = 1\n          for (var i = 1; i < shape.length; ++i) {\n            dim *= shape[i]\n          }\n          buffer.dimension = dim\n          flatData = arrayFlatten(data, shape, buffer.dtype)\n          initBufferFromTypedArray(buffer, flatData, usage)\n          if (persist) {\n            buffer.persistentData = flatData\n          } else {\n            pool.freeType(flatData)\n          }\n        } else if (typeof data[0] === 'number') {\n          buffer.dimension = dimension\n          var typedData = pool.allocType(buffer.dtype, data.length)\n          copyArray(typedData, data)\n          initBufferFromTypedArray(buffer, typedData, usage)\n          if (persist) {\n            buffer.persistentData = typedData\n          } else {\n            pool.freeType(typedData)\n          }\n        } else if (isTypedArray(data[0])) {\n          buffer.dimension = data[0].length\n          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3\n          flatData = arrayFlatten(\n            data,\n            [data.length, data[0].length],\n            buffer.dtype)\n          initBufferFromTypedArray(buffer, flatData, usage)\n          if (persist) {\n            buffer.persistentData = flatData\n          } else {\n            pool.freeType(flatData)\n          }\n        } else {\n          check$1.raise('invalid buffer data')\n        }\n      }\n    } else if (isTypedArray(data)) {\n      buffer.dtype = dtype || typedArrayCode(data)\n      buffer.dimension = dimension\n      initBufferFromTypedArray(buffer, data, usage)\n      if (persist) {\n        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer))\n      }\n    } else if (isNDArrayLike(data)) {\n      shape = data.shape\n      var stride = data.stride\n      var offset = data.offset\n\n      var shapeX = 0\n      var shapeY = 0\n      var strideX = 0\n      var strideY = 0\n      if (shape.length === 1) {\n        shapeX = shape[0]\n        shapeY = 1\n        strideX = stride[0]\n        strideY = 0\n      } else if (shape.length === 2) {\n        shapeX = shape[0]\n        shapeY = shape[1]\n        strideX = stride[0]\n        strideY = stride[1]\n      } else {\n        check$1.raise('invalid shape')\n      }\n\n      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3\n      buffer.dimension = shapeY\n\n      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY)\n      transpose(transposeData,\n        data.data,\n        shapeX, shapeY,\n        strideX, strideY,\n        offset)\n      initBufferFromTypedArray(buffer, transposeData, usage)\n      if (persist) {\n        buffer.persistentData = transposeData\n      } else {\n        pool.freeType(transposeData)\n      }\n    } else if (data instanceof ArrayBuffer) {\n      buffer.dtype = GL_UNSIGNED_BYTE$3\n      buffer.dimension = dimension\n      initBufferFromTypedArray(buffer, data, usage)\n      if (persist) {\n        buffer.persistentData = new Uint8Array(new Uint8Array(data))\n      }\n    } else {\n      check$1.raise('invalid buffer data')\n    }\n  }\n\n  function destroy (buffer) {\n    stats.bufferCount--\n\n    // remove attribute link\n    destroyBuffer(buffer)\n\n    var handle = buffer.buffer\n    check$1(handle, 'buffer must not be deleted already')\n    gl.deleteBuffer(handle)\n    buffer.buffer = null\n    delete bufferSet[buffer.id]\n  }\n\n  function createBuffer (options, type, deferInit, persistent) {\n    stats.bufferCount++\n\n    var buffer = new REGLBuffer(type)\n    bufferSet[buffer.id] = buffer\n\n    function reglBuffer (options) {\n      var usage = GL_STATIC_DRAW\n      var data = null\n      var byteLength = 0\n      var dtype = 0\n      var dimension = 1\n      if (Array.isArray(options) ||\n          isTypedArray(options) ||\n          isNDArrayLike(options) ||\n          options instanceof ArrayBuffer) {\n        data = options\n      } else if (typeof options === 'number') {\n        byteLength = options | 0\n      } else if (options) {\n        check$1.type(\n          options, 'object',\n          'buffer arguments must be an object, a number or an array')\n\n        if ('data' in options) {\n          check$1(\n            data === null ||\n            Array.isArray(data) ||\n            isTypedArray(data) ||\n            isNDArrayLike(data),\n            'invalid data for buffer')\n          data = options.data\n        }\n\n        if ('usage' in options) {\n          check$1.parameter(options.usage, usageTypes, 'invalid buffer usage')\n          usage = usageTypes[options.usage]\n        }\n\n        if ('type' in options) {\n          check$1.parameter(options.type, glTypes, 'invalid buffer type')\n          dtype = glTypes[options.type]\n        }\n\n        if ('dimension' in options) {\n          check$1.type(options.dimension, 'number', 'invalid dimension')\n          dimension = options.dimension | 0\n        }\n\n        if ('length' in options) {\n          check$1.nni(byteLength, 'buffer length must be a nonnegative integer')\n          byteLength = options.length | 0\n        }\n      }\n\n      buffer.bind()\n      if (!data) {\n        // #475\n        if (byteLength) gl.bufferData(buffer.type, byteLength, usage)\n        buffer.dtype = dtype || GL_UNSIGNED_BYTE$3\n        buffer.usage = usage\n        buffer.dimension = dimension\n        buffer.byteLength = byteLength\n      } else {\n        initBufferFromData(buffer, data, usage, dtype, dimension, persistent)\n      }\n\n      if (config.profile) {\n        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype]\n      }\n\n      return reglBuffer\n    }\n\n    function setSubData (data, offset) {\n      check$1(offset + data.byteLength <= buffer.byteLength,\n        'invalid buffer subdata call, buffer is too small. ' + ' Can\\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength)\n\n      gl.bufferSubData(buffer.type, offset, data)\n    }\n\n    function subdata (data, offset_) {\n      var offset = (offset_ || 0) | 0\n      var shape\n      buffer.bind()\n      if (isTypedArray(data) || data instanceof ArrayBuffer) {\n        setSubData(data, offset)\n      } else if (Array.isArray(data)) {\n        if (data.length > 0) {\n          if (typeof data[0] === 'number') {\n            var converted = pool.allocType(buffer.dtype, data.length)\n            copyArray(converted, data)\n            setSubData(converted, offset)\n            pool.freeType(converted)\n          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n            shape = arrayShape(data)\n            var flatData = arrayFlatten(data, shape, buffer.dtype)\n            setSubData(flatData, offset)\n            pool.freeType(flatData)\n          } else {\n            check$1.raise('invalid buffer data')\n          }\n        }\n      } else if (isNDArrayLike(data)) {\n        shape = data.shape\n        var stride = data.stride\n\n        var shapeX = 0\n        var shapeY = 0\n        var strideX = 0\n        var strideY = 0\n        if (shape.length === 1) {\n          shapeX = shape[0]\n          shapeY = 1\n          strideX = stride[0]\n          strideY = 0\n        } else if (shape.length === 2) {\n          shapeX = shape[0]\n          shapeY = shape[1]\n          strideX = stride[0]\n          strideY = stride[1]\n        } else {\n          check$1.raise('invalid shape')\n        }\n        var dtype = Array.isArray(data.data)\n          ? buffer.dtype\n          : typedArrayCode(data.data)\n\n        var transposeData = pool.allocType(dtype, shapeX * shapeY)\n        transpose(transposeData,\n          data.data,\n          shapeX, shapeY,\n          strideX, strideY,\n          data.offset)\n        setSubData(transposeData, offset)\n        pool.freeType(transposeData)\n      } else {\n        check$1.raise('invalid data for buffer subdata')\n      }\n      return reglBuffer\n    }\n\n    if (!deferInit) {\n      reglBuffer(options)\n    }\n\n    reglBuffer._reglType = 'buffer'\n    reglBuffer._buffer = buffer\n    reglBuffer.subdata = subdata\n    if (config.profile) {\n      reglBuffer.stats = buffer.stats\n    }\n    reglBuffer.destroy = function () { destroy(buffer) }\n\n    return reglBuffer\n  }\n\n  function restoreBuffers () {\n    values(bufferSet).forEach(function (buffer) {\n      buffer.buffer = gl.createBuffer()\n      gl.bindBuffer(buffer.type, buffer.buffer)\n      gl.bufferData(\n        buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage)\n    })\n  }\n\n  if (config.profile) {\n    stats.getTotalBufferSize = function () {\n      var total = 0\n      // TODO: Right now, the streams are not part of the total count.\n      Object.keys(bufferSet).forEach(function (key) {\n        total += bufferSet[key].stats.size\n      })\n      return total\n    }\n  }\n\n  return {\n    create: createBuffer,\n\n    createStream: createStream,\n    destroyStream: destroyStream,\n\n    clear: function () {\n      values(bufferSet).forEach(destroy)\n      streamPool.forEach(destroy)\n    },\n\n    getBuffer: function (wrapper) {\n      if (wrapper && wrapper._buffer instanceof REGLBuffer) {\n        return wrapper._buffer\n      }\n      return null\n    },\n\n    restore: restoreBuffers,\n\n    _initBuffer: initBufferFromData\n  }\n}\n\nvar points = 0;\nvar point = 0;\nvar lines = 1;\nvar line = 1;\nvar triangles = 4;\nvar triangle = 4;\nvar primTypes = {\n\tpoints: points,\n\tpoint: point,\n\tlines: lines,\n\tline: line,\n\ttriangles: triangles,\n\ttriangle: triangle,\n\t\"line loop\": 2,\n\t\"line strip\": 3,\n\t\"triangle strip\": 5,\n\t\"triangle fan\": 6\n};\n\nvar GL_POINTS = 0\nvar GL_LINES = 1\nvar GL_TRIANGLES = 4\n\nvar GL_BYTE$2 = 5120\nvar GL_UNSIGNED_BYTE$4 = 5121\nvar GL_SHORT$2 = 5122\nvar GL_UNSIGNED_SHORT$2 = 5123\nvar GL_INT$2 = 5124\nvar GL_UNSIGNED_INT$2 = 5125\n\nvar GL_ELEMENT_ARRAY_BUFFER = 34963\n\nvar GL_STREAM_DRAW$1 = 0x88E0\nvar GL_STATIC_DRAW$1 = 0x88E4\n\nfunction wrapElementsState (gl, extensions, bufferState, stats) {\n  var elementSet = {}\n  var elementCount = 0\n\n  var elementTypes = {\n    'uint8': GL_UNSIGNED_BYTE$4,\n    'uint16': GL_UNSIGNED_SHORT$2\n  }\n\n  if (extensions.oes_element_index_uint) {\n    elementTypes.uint32 = GL_UNSIGNED_INT$2\n  }\n\n  function REGLElementBuffer (buffer) {\n    this.id = elementCount++\n    elementSet[this.id] = this\n    this.buffer = buffer\n    this.primType = GL_TRIANGLES\n    this.vertCount = 0\n    this.type = 0\n  }\n\n  REGLElementBuffer.prototype.bind = function () {\n    this.buffer.bind()\n  }\n\n  var bufferPool = []\n\n  function createElementStream (data) {\n    var result = bufferPool.pop()\n    if (!result) {\n      result = new REGLElementBuffer(bufferState.create(\n        null,\n        GL_ELEMENT_ARRAY_BUFFER,\n        true,\n        false)._buffer)\n    }\n    initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0)\n    return result\n  }\n\n  function destroyElementStream (elements) {\n    bufferPool.push(elements)\n  }\n\n  function initElements (\n    elements,\n    data,\n    usage,\n    prim,\n    count,\n    byteLength,\n    type) {\n    elements.buffer.bind()\n    var dtype\n    if (data) {\n      var predictedType = type\n      if (!type && (\n        !isTypedArray(data) ||\n         (isNDArrayLike(data) && !isTypedArray(data.data)))) {\n        predictedType = extensions.oes_element_index_uint\n          ? GL_UNSIGNED_INT$2\n          : GL_UNSIGNED_SHORT$2\n      }\n      bufferState._initBuffer(\n        elements.buffer,\n        data,\n        usage,\n        predictedType,\n        3)\n    } else {\n      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage)\n      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4\n      elements.buffer.usage = usage\n      elements.buffer.dimension = 3\n      elements.buffer.byteLength = byteLength\n    }\n\n    dtype = type\n    if (!type) {\n      switch (elements.buffer.dtype) {\n        case GL_UNSIGNED_BYTE$4:\n        case GL_BYTE$2:\n          dtype = GL_UNSIGNED_BYTE$4\n          break\n\n        case GL_UNSIGNED_SHORT$2:\n        case GL_SHORT$2:\n          dtype = GL_UNSIGNED_SHORT$2\n          break\n\n        case GL_UNSIGNED_INT$2:\n        case GL_INT$2:\n          dtype = GL_UNSIGNED_INT$2\n          break\n\n        default:\n          check$1.raise('unsupported type for element array')\n      }\n      elements.buffer.dtype = dtype\n    }\n    elements.type = dtype\n\n    // Check oes_element_index_uint extension\n    check$1(\n      dtype !== GL_UNSIGNED_INT$2 ||\n      !!extensions.oes_element_index_uint,\n      '32 bit element buffers not supported, enable oes_element_index_uint first')\n\n    // try to guess default primitive type and arguments\n    var vertCount = count\n    if (vertCount < 0) {\n      vertCount = elements.buffer.byteLength\n      if (dtype === GL_UNSIGNED_SHORT$2) {\n        vertCount >>= 1\n      } else if (dtype === GL_UNSIGNED_INT$2) {\n        vertCount >>= 2\n      }\n    }\n    elements.vertCount = vertCount\n\n    // try to guess primitive type from cell dimension\n    var primType = prim\n    if (prim < 0) {\n      primType = GL_TRIANGLES\n      var dimension = elements.buffer.dimension\n      if (dimension === 1) primType = GL_POINTS\n      if (dimension === 2) primType = GL_LINES\n      if (dimension === 3) primType = GL_TRIANGLES\n    }\n    elements.primType = primType\n  }\n\n  function destroyElements (elements) {\n    stats.elementsCount--\n\n    check$1(elements.buffer !== null, 'must not double destroy elements')\n    delete elementSet[elements.id]\n    elements.buffer.destroy()\n    elements.buffer = null\n  }\n\n  function createElements (options, persistent) {\n    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true)\n    var elements = new REGLElementBuffer(buffer._buffer)\n    stats.elementsCount++\n\n    function reglElements (options) {\n      if (!options) {\n        buffer()\n        elements.primType = GL_TRIANGLES\n        elements.vertCount = 0\n        elements.type = GL_UNSIGNED_BYTE$4\n      } else if (typeof options === 'number') {\n        buffer(options)\n        elements.primType = GL_TRIANGLES\n        elements.vertCount = options | 0\n        elements.type = GL_UNSIGNED_BYTE$4\n      } else {\n        var data = null\n        var usage = GL_STATIC_DRAW$1\n        var primType = -1\n        var vertCount = -1\n        var byteLength = 0\n        var dtype = 0\n        if (Array.isArray(options) ||\n            isTypedArray(options) ||\n            isNDArrayLike(options)) {\n          data = options\n        } else {\n          check$1.type(options, 'object', 'invalid arguments for elements')\n          if ('data' in options) {\n            data = options.data\n            check$1(\n              Array.isArray(data) ||\n                isTypedArray(data) ||\n                isNDArrayLike(data),\n              'invalid data for element buffer')\n          }\n          if ('usage' in options) {\n            check$1.parameter(\n              options.usage,\n              usageTypes,\n              'invalid element buffer usage')\n            usage = usageTypes[options.usage]\n          }\n          if ('primitive' in options) {\n            check$1.parameter(\n              options.primitive,\n              primTypes,\n              'invalid element buffer primitive')\n            primType = primTypes[options.primitive]\n          }\n          if ('count' in options) {\n            check$1(\n              typeof options.count === 'number' && options.count >= 0,\n              'invalid vertex count for elements')\n            vertCount = options.count | 0\n          }\n          if ('type' in options) {\n            check$1.parameter(\n              options.type,\n              elementTypes,\n              'invalid buffer type')\n            dtype = elementTypes[options.type]\n          }\n          if ('length' in options) {\n            byteLength = options.length | 0\n          } else {\n            byteLength = vertCount\n            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {\n              byteLength *= 2\n            } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {\n              byteLength *= 4\n            }\n          }\n        }\n        initElements(\n          elements,\n          data,\n          usage,\n          primType,\n          vertCount,\n          byteLength,\n          dtype)\n      }\n\n      return reglElements\n    }\n\n    reglElements(options)\n\n    reglElements._reglType = 'elements'\n    reglElements._elements = elements\n    reglElements.subdata = function (data, offset) {\n      buffer.subdata(data, offset)\n      return reglElements\n    }\n    reglElements.destroy = function () {\n      destroyElements(elements)\n    }\n\n    return reglElements\n  }\n\n  return {\n    create: createElements,\n    createStream: createElementStream,\n    destroyStream: destroyElementStream,\n    getElements: function (elements) {\n      if (typeof elements === 'function' &&\n          elements._elements instanceof REGLElementBuffer) {\n        return elements._elements\n      }\n      return null\n    },\n    clear: function () {\n      values(elementSet).forEach(destroyElements)\n    }\n  }\n}\n\nvar FLOAT = new Float32Array(1)\nvar INT = new Uint32Array(FLOAT.buffer)\n\nvar GL_UNSIGNED_SHORT$4 = 5123\n\nfunction convertToHalfFloat (array) {\n  var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length)\n\n  for (var i = 0; i < array.length; ++i) {\n    if (isNaN(array[i])) {\n      ushorts[i] = 0xffff\n    } else if (array[i] === Infinity) {\n      ushorts[i] = 0x7c00\n    } else if (array[i] === -Infinity) {\n      ushorts[i] = 0xfc00\n    } else {\n      FLOAT[0] = array[i]\n      var x = INT[0]\n\n      var sgn = (x >>> 31) << 15\n      var exp = ((x << 1) >>> 24) - 127\n      var frac = (x >> 13) & ((1 << 10) - 1)\n\n      if (exp < -24) {\n        // round non-representable denormals to 0\n        ushorts[i] = sgn\n      } else if (exp < -14) {\n        // handle denormals\n        var s = -14 - exp\n        ushorts[i] = sgn + ((frac + (1 << 10)) >> s)\n      } else if (exp > 15) {\n        // round overflow to +/- Infinity\n        ushorts[i] = sgn + 0x7c00\n      } else {\n        // otherwise convert directly\n        ushorts[i] = sgn + ((exp + 15) << 10) + frac\n      }\n    }\n  }\n\n  return ushorts\n}\n\nfunction isArrayLike (s) {\n  return Array.isArray(s) || isTypedArray(s)\n}\n\nvar isPow2$1 = function (v) {\n  return !(v & (v - 1)) && (!!v)\n}\n\nvar GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3\n\nvar GL_TEXTURE_2D$1 = 0x0DE1\nvar GL_TEXTURE_CUBE_MAP$1 = 0x8513\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515\n\nvar GL_RGBA$1 = 0x1908\nvar GL_ALPHA = 0x1906\nvar GL_RGB = 0x1907\nvar GL_LUMINANCE = 0x1909\nvar GL_LUMINANCE_ALPHA = 0x190A\n\nvar GL_RGBA4 = 0x8056\nvar GL_RGB5_A1 = 0x8057\nvar GL_RGB565 = 0x8D62\n\nvar GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033\nvar GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034\nvar GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363\nvar GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA\n\nvar GL_DEPTH_COMPONENT = 0x1902\nvar GL_DEPTH_STENCIL = 0x84F9\n\nvar GL_SRGB_EXT = 0x8C40\nvar GL_SRGB_ALPHA_EXT = 0x8C42\n\nvar GL_HALF_FLOAT_OES$1 = 0x8D61\n\nvar GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0\nvar GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1\nvar GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2\nvar GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3\n\nvar GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92\nvar GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93\nvar GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE\n\nvar GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00\nvar GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01\nvar GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02\nvar GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03\n\nvar GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64\n\nvar GL_UNSIGNED_BYTE$5 = 0x1401\nvar GL_UNSIGNED_SHORT$3 = 0x1403\nvar GL_UNSIGNED_INT$3 = 0x1405\nvar GL_FLOAT$4 = 0x1406\n\nvar GL_TEXTURE_WRAP_S = 0x2802\nvar GL_TEXTURE_WRAP_T = 0x2803\n\nvar GL_REPEAT = 0x2901\nvar GL_CLAMP_TO_EDGE$1 = 0x812F\nvar GL_MIRRORED_REPEAT = 0x8370\n\nvar GL_TEXTURE_MAG_FILTER = 0x2800\nvar GL_TEXTURE_MIN_FILTER = 0x2801\n\nvar GL_NEAREST$1 = 0x2600\nvar GL_LINEAR = 0x2601\nvar GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700\nvar GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701\nvar GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702\nvar GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703\n\nvar GL_GENERATE_MIPMAP_HINT = 0x8192\nvar GL_DONT_CARE = 0x1100\nvar GL_FASTEST = 0x1101\nvar GL_NICEST = 0x1102\n\nvar GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE\n\nvar GL_UNPACK_ALIGNMENT = 0x0CF5\nvar GL_UNPACK_FLIP_Y_WEBGL = 0x9240\nvar GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241\nvar GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243\n\nvar GL_BROWSER_DEFAULT_WEBGL = 0x9244\n\nvar GL_TEXTURE0$1 = 0x84C0\n\nvar MIPMAP_FILTERS = [\n  GL_NEAREST_MIPMAP_NEAREST$1,\n  GL_NEAREST_MIPMAP_LINEAR$1,\n  GL_LINEAR_MIPMAP_NEAREST$1,\n  GL_LINEAR_MIPMAP_LINEAR$1\n]\n\nvar CHANNELS_FORMAT = [\n  0,\n  GL_LUMINANCE,\n  GL_LUMINANCE_ALPHA,\n  GL_RGB,\n  GL_RGBA$1\n]\n\nvar FORMAT_CHANNELS = {}\nFORMAT_CHANNELS[GL_LUMINANCE] =\nFORMAT_CHANNELS[GL_ALPHA] =\nFORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1\nFORMAT_CHANNELS[GL_DEPTH_STENCIL] =\nFORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2\nFORMAT_CHANNELS[GL_RGB] =\nFORMAT_CHANNELS[GL_SRGB_EXT] = 3\nFORMAT_CHANNELS[GL_RGBA$1] =\nFORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4\n\nfunction objectName (str) {\n  return '[object ' + str + ']'\n}\n\nvar CANVAS_CLASS = objectName('HTMLCanvasElement')\nvar OFFSCREENCANVAS_CLASS = objectName('OffscreenCanvas')\nvar CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D')\nvar BITMAP_CLASS = objectName('ImageBitmap')\nvar IMAGE_CLASS = objectName('HTMLImageElement')\nvar VIDEO_CLASS = objectName('HTMLVideoElement')\n\nvar PIXEL_CLASSES = Object.keys(arrayTypes).concat([\n  CANVAS_CLASS,\n  OFFSCREENCANVAS_CLASS,\n  CONTEXT2D_CLASS,\n  BITMAP_CLASS,\n  IMAGE_CLASS,\n  VIDEO_CLASS\n])\n\n// for every texture type, store\n// the size in bytes.\nvar TYPE_SIZES = []\nTYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1\nTYPE_SIZES[GL_FLOAT$4] = 4\nTYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2\n\nTYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2\nTYPE_SIZES[GL_UNSIGNED_INT$3] = 4\n\nvar FORMAT_SIZES_SPECIAL = []\nFORMAT_SIZES_SPECIAL[GL_RGBA4] = 2\nFORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2\nFORMAT_SIZES_SPECIAL[GL_RGB565] = 2\nFORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5\n\nfunction isNumericArray (arr) {\n  return (\n    Array.isArray(arr) &&\n    (arr.length === 0 ||\n    typeof arr[0] === 'number'))\n}\n\nfunction isRectArray (arr) {\n  if (!Array.isArray(arr)) {\n    return false\n  }\n  var width = arr.length\n  if (width === 0 || !isArrayLike(arr[0])) {\n    return false\n  }\n  return true\n}\n\nfunction classString (x) {\n  return Object.prototype.toString.call(x)\n}\n\nfunction isCanvasElement (object) {\n  return classString(object) === CANVAS_CLASS\n}\n\nfunction isOffscreenCanvas (object) {\n  return classString(object) === OFFSCREENCANVAS_CLASS\n}\n\nfunction isContext2D (object) {\n  return classString(object) === CONTEXT2D_CLASS\n}\n\nfunction isBitmap (object) {\n  return classString(object) === BITMAP_CLASS\n}\n\nfunction isImageElement (object) {\n  return classString(object) === IMAGE_CLASS\n}\n\nfunction isVideoElement (object) {\n  return classString(object) === VIDEO_CLASS\n}\n\nfunction isPixelData (object) {\n  if (!object) {\n    return false\n  }\n  var className = classString(object)\n  if (PIXEL_CLASSES.indexOf(className) >= 0) {\n    return true\n  }\n  return (\n    isNumericArray(object) ||\n    isRectArray(object) ||\n    isNDArrayLike(object))\n}\n\nfunction typedArrayCode$1 (data) {\n  return arrayTypes[Object.prototype.toString.call(data)] | 0\n}\n\nfunction convertData (result, data) {\n  var n = data.length\n  switch (result.type) {\n    case GL_UNSIGNED_BYTE$5:\n    case GL_UNSIGNED_SHORT$3:\n    case GL_UNSIGNED_INT$3:\n    case GL_FLOAT$4:\n      var converted = pool.allocType(result.type, n)\n      converted.set(data)\n      result.data = converted\n      break\n\n    case GL_HALF_FLOAT_OES$1:\n      result.data = convertToHalfFloat(data)\n      break\n\n    default:\n      check$1.raise('unsupported texture type, must specify a typed array')\n  }\n}\n\nfunction preConvert (image, n) {\n  return pool.allocType(\n    image.type === GL_HALF_FLOAT_OES$1\n      ? GL_FLOAT$4\n      : image.type, n)\n}\n\nfunction postConvert (image, data) {\n  if (image.type === GL_HALF_FLOAT_OES$1) {\n    image.data = convertToHalfFloat(data)\n    pool.freeType(data)\n  } else {\n    image.data = data\n  }\n}\n\nfunction transposeData (image, array, strideX, strideY, strideC, offset) {\n  var w = image.width\n  var h = image.height\n  var c = image.channels\n  var n = w * h * c\n  var data = preConvert(image, n)\n\n  var p = 0\n  for (var i = 0; i < h; ++i) {\n    for (var j = 0; j < w; ++j) {\n      for (var k = 0; k < c; ++k) {\n        data[p++] = array[strideX * j + strideY * i + strideC * k + offset]\n      }\n    }\n  }\n\n  postConvert(image, data)\n}\n\nfunction getTextureSize (format, type, width, height, isMipmap, isCube) {\n  var s\n  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {\n    // we have a special array for dealing with weird color formats such as RGB5A1\n    s = FORMAT_SIZES_SPECIAL[format]\n  } else {\n    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type]\n  }\n\n  if (isCube) {\n    s *= 6\n  }\n\n  if (isMipmap) {\n    // compute the total size of all the mipmaps.\n    var total = 0\n\n    var w = width\n    while (w >= 1) {\n      // we can only use mipmaps on a square image,\n      // so we can simply use the width and ignore the height:\n      total += s * w * w\n      w /= 2\n    }\n    return total\n  } else {\n    return s * width * height\n  }\n}\n\nfunction createTextureSet (\n  gl, extensions, limits, reglPoll, contextState, stats, config) {\n  // -------------------------------------------------------\n  // Initialize constants and parameter tables here\n  // -------------------------------------------------------\n  var mipmapHint = {\n    \"don't care\": GL_DONT_CARE,\n    'dont care': GL_DONT_CARE,\n    'nice': GL_NICEST,\n    'fast': GL_FASTEST\n  }\n\n  var wrapModes = {\n    'repeat': GL_REPEAT,\n    'clamp': GL_CLAMP_TO_EDGE$1,\n    'mirror': GL_MIRRORED_REPEAT\n  }\n\n  var magFilters = {\n    'nearest': GL_NEAREST$1,\n    'linear': GL_LINEAR\n  }\n\n  var minFilters = extend({\n    'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,\n    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,\n    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,\n    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,\n    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1\n  }, magFilters)\n\n  var colorSpace = {\n    'none': 0,\n    'browser': GL_BROWSER_DEFAULT_WEBGL\n  }\n\n  var textureTypes = {\n    'uint8': GL_UNSIGNED_BYTE$5,\n    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,\n    'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,\n    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1\n  }\n\n  var textureFormats = {\n    'alpha': GL_ALPHA,\n    'luminance': GL_LUMINANCE,\n    'luminance alpha': GL_LUMINANCE_ALPHA,\n    'rgb': GL_RGB,\n    'rgba': GL_RGBA$1,\n    'rgba4': GL_RGBA4,\n    'rgb5 a1': GL_RGB5_A1,\n    'rgb565': GL_RGB565\n  }\n\n  var compressedTextureFormats = {}\n\n  if (extensions.ext_srgb) {\n    textureFormats.srgb = GL_SRGB_EXT\n    textureFormats.srgba = GL_SRGB_ALPHA_EXT\n  }\n\n  if (extensions.oes_texture_float) {\n    textureTypes.float32 = textureTypes.float = GL_FLOAT$4\n  }\n\n  if (extensions.oes_texture_half_float) {\n    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1\n  }\n\n  if (extensions.webgl_depth_texture) {\n    extend(textureFormats, {\n      'depth': GL_DEPTH_COMPONENT,\n      'depth stencil': GL_DEPTH_STENCIL\n    })\n\n    extend(textureTypes, {\n      'uint16': GL_UNSIGNED_SHORT$3,\n      'uint32': GL_UNSIGNED_INT$3,\n      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1\n    })\n  }\n\n  if (extensions.webgl_compressed_texture_s3tc) {\n    extend(compressedTextureFormats, {\n      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,\n      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,\n      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,\n      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT\n    })\n  }\n\n  if (extensions.webgl_compressed_texture_atc) {\n    extend(compressedTextureFormats, {\n      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,\n      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n    })\n  }\n\n  if (extensions.webgl_compressed_texture_pvrtc) {\n    extend(compressedTextureFormats, {\n      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\n    })\n  }\n\n  if (extensions.webgl_compressed_texture_etc1) {\n    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL\n  }\n\n  // Copy over all texture formats\n  var supportedCompressedFormats = Array.prototype.slice.call(\n    gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS))\n  Object.keys(compressedTextureFormats).forEach(function (name) {\n    var format = compressedTextureFormats[name]\n    if (supportedCompressedFormats.indexOf(format) >= 0) {\n      textureFormats[name] = format\n    }\n  })\n\n  var supportedFormats = Object.keys(textureFormats)\n  limits.textureFormats = supportedFormats\n\n  // associate with every format string its\n  // corresponding GL-value.\n  var textureFormatsInvert = []\n  Object.keys(textureFormats).forEach(function (key) {\n    var val = textureFormats[key]\n    textureFormatsInvert[val] = key\n  })\n\n  // associate with every type string its\n  // corresponding GL-value.\n  var textureTypesInvert = []\n  Object.keys(textureTypes).forEach(function (key) {\n    var val = textureTypes[key]\n    textureTypesInvert[val] = key\n  })\n\n  var magFiltersInvert = []\n  Object.keys(magFilters).forEach(function (key) {\n    var val = magFilters[key]\n    magFiltersInvert[val] = key\n  })\n\n  var minFiltersInvert = []\n  Object.keys(minFilters).forEach(function (key) {\n    var val = minFilters[key]\n    minFiltersInvert[val] = key\n  })\n\n  var wrapModesInvert = []\n  Object.keys(wrapModes).forEach(function (key) {\n    var val = wrapModes[key]\n    wrapModesInvert[val] = key\n  })\n\n  // colorFormats[] gives the format (channels) associated to an\n  // internalformat\n  var colorFormats = supportedFormats.reduce(function (color, key) {\n    var glenum = textureFormats[key]\n    if (glenum === GL_LUMINANCE ||\n        glenum === GL_ALPHA ||\n        glenum === GL_LUMINANCE ||\n        glenum === GL_LUMINANCE_ALPHA ||\n        glenum === GL_DEPTH_COMPONENT ||\n        glenum === GL_DEPTH_STENCIL ||\n        (extensions.ext_srgb &&\n                (glenum === GL_SRGB_EXT ||\n                 glenum === GL_SRGB_ALPHA_EXT))) {\n      color[glenum] = glenum\n    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {\n      color[glenum] = GL_RGBA$1\n    } else {\n      color[glenum] = GL_RGB\n    }\n    return color\n  }, {})\n\n  function TexFlags () {\n    // format info\n    this.internalformat = GL_RGBA$1\n    this.format = GL_RGBA$1\n    this.type = GL_UNSIGNED_BYTE$5\n    this.compressed = false\n\n    // pixel storage\n    this.premultiplyAlpha = false\n    this.flipY = false\n    this.unpackAlignment = 1\n    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL\n\n    // shape info\n    this.width = 0\n    this.height = 0\n    this.channels = 0\n  }\n\n  function copyFlags (result, other) {\n    result.internalformat = other.internalformat\n    result.format = other.format\n    result.type = other.type\n    result.compressed = other.compressed\n\n    result.premultiplyAlpha = other.premultiplyAlpha\n    result.flipY = other.flipY\n    result.unpackAlignment = other.unpackAlignment\n    result.colorSpace = other.colorSpace\n\n    result.width = other.width\n    result.height = other.height\n    result.channels = other.channels\n  }\n\n  function parseFlags (flags, options) {\n    if (typeof options !== 'object' || !options) {\n      return\n    }\n\n    if ('premultiplyAlpha' in options) {\n      check$1.type(options.premultiplyAlpha, 'boolean',\n        'invalid premultiplyAlpha')\n      flags.premultiplyAlpha = options.premultiplyAlpha\n    }\n\n    if ('flipY' in options) {\n      check$1.type(options.flipY, 'boolean',\n        'invalid texture flip')\n      flags.flipY = options.flipY\n    }\n\n    if ('alignment' in options) {\n      check$1.oneOf(options.alignment, [1, 2, 4, 8],\n        'invalid texture unpack alignment')\n      flags.unpackAlignment = options.alignment\n    }\n\n    if ('colorSpace' in options) {\n      check$1.parameter(options.colorSpace, colorSpace,\n        'invalid colorSpace')\n      flags.colorSpace = colorSpace[options.colorSpace]\n    }\n\n    if ('type' in options) {\n      var type = options.type\n      check$1(extensions.oes_texture_float ||\n        !(type === 'float' || type === 'float32'),\n      'you must enable the OES_texture_float extension in order to use floating point textures.')\n      check$1(extensions.oes_texture_half_float ||\n        !(type === 'half float' || type === 'float16'),\n      'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.')\n      check$1(extensions.webgl_depth_texture ||\n        !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'),\n      'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.')\n      check$1.parameter(type, textureTypes,\n        'invalid texture type')\n      flags.type = textureTypes[type]\n    }\n\n    var w = flags.width\n    var h = flags.height\n    var c = flags.channels\n    var hasChannels = false\n    if ('shape' in options) {\n      check$1(Array.isArray(options.shape) && options.shape.length >= 2,\n        'shape must be an array')\n      w = options.shape[0]\n      h = options.shape[1]\n      if (options.shape.length === 3) {\n        c = options.shape[2]\n        check$1(c > 0 && c <= 4, 'invalid number of channels')\n        hasChannels = true\n      }\n      check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width')\n      check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height')\n    } else {\n      if ('radius' in options) {\n        w = h = options.radius\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius')\n      }\n      if ('width' in options) {\n        w = options.width\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width')\n      }\n      if ('height' in options) {\n        h = options.height\n        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height')\n      }\n      if ('channels' in options) {\n        c = options.channels\n        check$1(c > 0 && c <= 4, 'invalid number of channels')\n        hasChannels = true\n      }\n    }\n    flags.width = w | 0\n    flags.height = h | 0\n    flags.channels = c | 0\n\n    var hasFormat = false\n    if ('format' in options) {\n      var formatStr = options.format\n      check$1(extensions.webgl_depth_texture ||\n        !(formatStr === 'depth' || formatStr === 'depth stencil'),\n      'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.')\n      check$1.parameter(formatStr, textureFormats,\n        'invalid texture format')\n      var internalformat = flags.internalformat = textureFormats[formatStr]\n      flags.format = colorFormats[internalformat]\n      if (formatStr in textureTypes) {\n        if (!('type' in options)) {\n          flags.type = textureTypes[formatStr]\n        }\n      }\n      if (formatStr in compressedTextureFormats) {\n        flags.compressed = true\n      }\n      hasFormat = true\n    }\n\n    // Reconcile channels and format\n    if (!hasChannels && hasFormat) {\n      flags.channels = FORMAT_CHANNELS[flags.format]\n    } else if (hasChannels && !hasFormat) {\n      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {\n        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels]\n      }\n    } else if (hasFormat && hasChannels) {\n      check$1(\n        flags.channels === FORMAT_CHANNELS[flags.format],\n        'number of channels inconsistent with specified format')\n    }\n  }\n\n  function setFlags (flags) {\n    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY)\n    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha)\n    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace)\n    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment)\n  }\n\n  // -------------------------------------------------------\n  // Tex image data\n  // -------------------------------------------------------\n  function TexImage () {\n    TexFlags.call(this)\n\n    this.xOffset = 0\n    this.yOffset = 0\n\n    // data\n    this.data = null\n    this.needsFree = false\n\n    // html element\n    this.element = null\n\n    // copyTexImage info\n    this.needsCopy = false\n  }\n\n  function parseImage (image, options) {\n    var data = null\n    if (isPixelData(options)) {\n      data = options\n    } else if (options) {\n      check$1.type(options, 'object', 'invalid pixel data type')\n      parseFlags(image, options)\n      if ('x' in options) {\n        image.xOffset = options.x | 0\n      }\n      if ('y' in options) {\n        image.yOffset = options.y | 0\n      }\n      if (isPixelData(options.data)) {\n        data = options.data\n      }\n    }\n\n    check$1(\n      !image.compressed ||\n      data instanceof Uint8Array,\n      'compressed texture data must be stored in a uint8array')\n\n    if (options.copy) {\n      check$1(!data, 'can not specify copy and data field for the same texture')\n      var viewW = contextState.viewportWidth\n      var viewH = contextState.viewportHeight\n      image.width = image.width || (viewW - image.xOffset)\n      image.height = image.height || (viewH - image.yOffset)\n      image.needsCopy = true\n      check$1(image.xOffset >= 0 && image.xOffset < viewW &&\n            image.yOffset >= 0 && image.yOffset < viewH &&\n            image.width > 0 && image.width <= viewW &&\n            image.height > 0 && image.height <= viewH,\n      'copy texture read out of bounds')\n    } else if (!data) {\n      image.width = image.width || 1\n      image.height = image.height || 1\n      image.channels = image.channels || 4\n    } else if (isTypedArray(data)) {\n      image.channels = image.channels || 4\n      image.data = data\n      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {\n        image.type = typedArrayCode$1(data)\n      }\n    } else if (isNumericArray(data)) {\n      image.channels = image.channels || 4\n      convertData(image, data)\n      image.alignment = 1\n      image.needsFree = true\n    } else if (isNDArrayLike(data)) {\n      var array = data.data\n      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {\n        image.type = typedArrayCode$1(array)\n      }\n      var shape = data.shape\n      var stride = data.stride\n      var shapeX, shapeY, shapeC, strideX, strideY, strideC\n      if (shape.length === 3) {\n        shapeC = shape[2]\n        strideC = stride[2]\n      } else {\n        check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D')\n        shapeC = 1\n        strideC = 1\n      }\n      shapeX = shape[0]\n      shapeY = shape[1]\n      strideX = stride[0]\n      strideY = stride[1]\n      image.alignment = 1\n      image.width = shapeX\n      image.height = shapeY\n      image.channels = shapeC\n      image.format = image.internalformat = CHANNELS_FORMAT[shapeC]\n      image.needsFree = true\n      transposeData(image, array, strideX, strideY, strideC, data.offset)\n    } else if (isCanvasElement(data) || isOffscreenCanvas(data) || isContext2D(data)) {\n      if (isCanvasElement(data) || isOffscreenCanvas(data)) {\n        image.element = data\n      } else {\n        image.element = data.canvas\n      }\n      image.width = image.element.width\n      image.height = image.element.height\n      image.channels = 4\n    } else if (isBitmap(data)) {\n      image.element = data\n      image.width = data.width\n      image.height = data.height\n      image.channels = 4\n    } else if (isImageElement(data)) {\n      image.element = data\n      image.width = data.naturalWidth\n      image.height = data.naturalHeight\n      image.channels = 4\n    } else if (isVideoElement(data)) {\n      image.element = data\n      image.width = data.videoWidth\n      image.height = data.videoHeight\n      image.channels = 4\n    } else if (isRectArray(data)) {\n      var w = image.width || data[0].length\n      var h = image.height || data.length\n      var c = image.channels\n      if (isArrayLike(data[0][0])) {\n        c = c || data[0][0].length\n      } else {\n        c = c || 1\n      }\n      var arrayShape = flattenUtils.shape(data)\n      var n = 1\n      for (var dd = 0; dd < arrayShape.length; ++dd) {\n        n *= arrayShape[dd]\n      }\n      var allocData = preConvert(image, n)\n      flattenUtils.flatten(data, arrayShape, '', allocData)\n      postConvert(image, allocData)\n      image.alignment = 1\n      image.width = w\n      image.height = h\n      image.channels = c\n      image.format = image.internalformat = CHANNELS_FORMAT[c]\n      image.needsFree = true\n    }\n\n    if (image.type === GL_FLOAT$4) {\n      check$1(limits.extensions.indexOf('oes_texture_float') >= 0,\n        'oes_texture_float extension not enabled')\n    } else if (image.type === GL_HALF_FLOAT_OES$1) {\n      check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0,\n        'oes_texture_half_float extension not enabled')\n    }\n\n    // do compressed texture  validation here.\n  }\n\n  function setImage (info, target, miplevel) {\n    var element = info.element\n    var data = info.data\n    var internalformat = info.internalformat\n    var format = info.format\n    var type = info.type\n    var width = info.width\n    var height = info.height\n\n    setFlags(info)\n\n    if (element) {\n      gl.texImage2D(target, miplevel, format, format, type, element)\n    } else if (info.compressed) {\n      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data)\n    } else if (info.needsCopy) {\n      reglPoll()\n      gl.copyTexImage2D(\n        target, miplevel, format, info.xOffset, info.yOffset, width, height, 0)\n    } else {\n      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data || null)\n    }\n  }\n\n  function setSubImage (info, target, x, y, miplevel) {\n    var element = info.element\n    var data = info.data\n    var internalformat = info.internalformat\n    var format = info.format\n    var type = info.type\n    var width = info.width\n    var height = info.height\n\n    setFlags(info)\n\n    if (element) {\n      gl.texSubImage2D(\n        target, miplevel, x, y, format, type, element)\n    } else if (info.compressed) {\n      gl.compressedTexSubImage2D(\n        target, miplevel, x, y, internalformat, width, height, data)\n    } else if (info.needsCopy) {\n      reglPoll()\n      gl.copyTexSubImage2D(\n        target, miplevel, x, y, info.xOffset, info.yOffset, width, height)\n    } else {\n      gl.texSubImage2D(\n        target, miplevel, x, y, width, height, format, type, data)\n    }\n  }\n\n  // texImage pool\n  var imagePool = []\n\n  function allocImage () {\n    return imagePool.pop() || new TexImage()\n  }\n\n  function freeImage (image) {\n    if (image.needsFree) {\n      pool.freeType(image.data)\n    }\n    TexImage.call(image)\n    imagePool.push(image)\n  }\n\n  // -------------------------------------------------------\n  // Mip map\n  // -------------------------------------------------------\n  function MipMap () {\n    TexFlags.call(this)\n\n    this.genMipmaps = false\n    this.mipmapHint = GL_DONT_CARE\n    this.mipmask = 0\n    this.images = Array(16)\n  }\n\n  function parseMipMapFromShape (mipmap, width, height) {\n    var img = mipmap.images[0] = allocImage()\n    mipmap.mipmask = 1\n    img.width = mipmap.width = width\n    img.height = mipmap.height = height\n    img.channels = mipmap.channels = 4\n  }\n\n  function parseMipMapFromObject (mipmap, options) {\n    var imgData = null\n    if (isPixelData(options)) {\n      imgData = mipmap.images[0] = allocImage()\n      copyFlags(imgData, mipmap)\n      parseImage(imgData, options)\n      mipmap.mipmask = 1\n    } else {\n      parseFlags(mipmap, options)\n      if (Array.isArray(options.mipmap)) {\n        var mipData = options.mipmap\n        for (var i = 0; i < mipData.length; ++i) {\n          imgData = mipmap.images[i] = allocImage()\n          copyFlags(imgData, mipmap)\n          imgData.width >>= i\n          imgData.height >>= i\n          parseImage(imgData, mipData[i])\n          mipmap.mipmask |= (1 << i)\n        }\n      } else {\n        imgData = mipmap.images[0] = allocImage()\n        copyFlags(imgData, mipmap)\n        parseImage(imgData, options)\n        mipmap.mipmask = 1\n      }\n    }\n    copyFlags(mipmap, mipmap.images[0])\n\n    // For textures of the compressed format WEBGL_compressed_texture_s3tc\n    // we must have that\n    //\n    // \"When level equals zero width and height must be a multiple of 4.\n    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. \"\n    //\n    // but we do not yet support having multiple mipmap levels for compressed textures,\n    // so we only test for level zero.\n\n    if (\n      mipmap.compressed &&\n      (\n        mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT ||\n        mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT ||\n        mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT ||\n        mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT\n      )\n    ) {\n      check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0,\n        'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4')\n    }\n  }\n\n  function setMipMap (mipmap, target) {\n    var images = mipmap.images\n    for (var i = 0; i < images.length; ++i) {\n      if (!images[i]) {\n        return\n      }\n      setImage(images[i], target, i)\n    }\n  }\n\n  var mipPool = []\n\n  function allocMipMap () {\n    var result = mipPool.pop() || new MipMap()\n    TexFlags.call(result)\n    result.mipmask = 0\n    for (var i = 0; i < 16; ++i) {\n      result.images[i] = null\n    }\n    return result\n  }\n\n  function freeMipMap (mipmap) {\n    var images = mipmap.images\n    for (var i = 0; i < images.length; ++i) {\n      if (images[i]) {\n        freeImage(images[i])\n      }\n      images[i] = null\n    }\n    mipPool.push(mipmap)\n  }\n\n  // -------------------------------------------------------\n  // Tex info\n  // -------------------------------------------------------\n  function TexInfo () {\n    this.minFilter = GL_NEAREST$1\n    this.magFilter = GL_NEAREST$1\n\n    this.wrapS = GL_CLAMP_TO_EDGE$1\n    this.wrapT = GL_CLAMP_TO_EDGE$1\n\n    this.anisotropic = 1\n\n    this.genMipmaps = false\n    this.mipmapHint = GL_DONT_CARE\n  }\n\n  function parseTexInfo (info, options) {\n    if ('min' in options) {\n      var minFilter = options.min\n      check$1.parameter(minFilter, minFilters)\n      info.minFilter = minFilters[minFilter]\n      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {\n        info.genMipmaps = true\n      }\n    }\n\n    if ('mag' in options) {\n      var magFilter = options.mag\n      check$1.parameter(magFilter, magFilters)\n      info.magFilter = magFilters[magFilter]\n    }\n\n    var wrapS = info.wrapS\n    var wrapT = info.wrapT\n    if ('wrap' in options) {\n      var wrap = options.wrap\n      if (typeof wrap === 'string') {\n        check$1.parameter(wrap, wrapModes)\n        wrapS = wrapT = wrapModes[wrap]\n      } else if (Array.isArray(wrap)) {\n        check$1.parameter(wrap[0], wrapModes)\n        check$1.parameter(wrap[1], wrapModes)\n        wrapS = wrapModes[wrap[0]]\n        wrapT = wrapModes[wrap[1]]\n      }\n    } else {\n      if ('wrapS' in options) {\n        var optWrapS = options.wrapS\n        check$1.parameter(optWrapS, wrapModes)\n        wrapS = wrapModes[optWrapS]\n      }\n      if ('wrapT' in options) {\n        var optWrapT = options.wrapT\n        check$1.parameter(optWrapT, wrapModes)\n        wrapT = wrapModes[optWrapT]\n      }\n    }\n    info.wrapS = wrapS\n    info.wrapT = wrapT\n\n    if ('anisotropic' in options) {\n      var anisotropic = options.anisotropic\n      check$1(typeof anisotropic === 'number' &&\n         anisotropic >= 1 && anisotropic <= limits.maxAnisotropic,\n      'aniso samples must be between 1 and ')\n      info.anisotropic = options.anisotropic\n    }\n\n    if ('mipmap' in options) {\n      var hasMipMap = false\n      switch (typeof options.mipmap) {\n        case 'string':\n          check$1.parameter(options.mipmap, mipmapHint,\n            'invalid mipmap hint')\n          info.mipmapHint = mipmapHint[options.mipmap]\n          info.genMipmaps = true\n          hasMipMap = true\n          break\n\n        case 'boolean':\n          hasMipMap = info.genMipmaps = options.mipmap\n          break\n\n        case 'object':\n          check$1(Array.isArray(options.mipmap), 'invalid mipmap type')\n          info.genMipmaps = false\n          hasMipMap = true\n          break\n\n        default:\n          check$1.raise('invalid mipmap type')\n      }\n      if (hasMipMap && !('min' in options)) {\n        info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1\n      }\n    }\n  }\n\n  function setTexInfo (info, target) {\n    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter)\n    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter)\n    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS)\n    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT)\n    if (extensions.ext_texture_filter_anisotropic) {\n      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic)\n    }\n    if (info.genMipmaps) {\n      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint)\n      gl.generateMipmap(target)\n    }\n  }\n\n  // -------------------------------------------------------\n  // Full texture object\n  // -------------------------------------------------------\n  var textureCount = 0\n  var textureSet = {}\n  var numTexUnits = limits.maxTextureUnits\n  var textureUnits = Array(numTexUnits).map(function () {\n    return null\n  })\n\n  function REGLTexture (target) {\n    TexFlags.call(this)\n    this.mipmask = 0\n    this.internalformat = GL_RGBA$1\n\n    this.id = textureCount++\n\n    this.refCount = 1\n\n    this.target = target\n    this.texture = gl.createTexture()\n\n    this.unit = -1\n    this.bindCount = 0\n\n    this.texInfo = new TexInfo()\n\n    if (config.profile) {\n      this.stats = { size: 0 }\n    }\n  }\n\n  function tempBind (texture) {\n    gl.activeTexture(GL_TEXTURE0$1)\n    gl.bindTexture(texture.target, texture.texture)\n  }\n\n  function tempRestore () {\n    var prev = textureUnits[0]\n    if (prev) {\n      gl.bindTexture(prev.target, prev.texture)\n    } else {\n      gl.bindTexture(GL_TEXTURE_2D$1, null)\n    }\n  }\n\n  function destroy (texture) {\n    var handle = texture.texture\n    check$1(handle, 'must not double destroy texture')\n    var unit = texture.unit\n    var target = texture.target\n    if (unit >= 0) {\n      gl.activeTexture(GL_TEXTURE0$1 + unit)\n      gl.bindTexture(target, null)\n      textureUnits[unit] = null\n    }\n    gl.deleteTexture(handle)\n    texture.texture = null\n    texture.params = null\n    texture.pixels = null\n    texture.refCount = 0\n    delete textureSet[texture.id]\n    stats.textureCount--\n  }\n\n  extend(REGLTexture.prototype, {\n    bind: function () {\n      var texture = this\n      texture.bindCount += 1\n      var unit = texture.unit\n      if (unit < 0) {\n        for (var i = 0; i < numTexUnits; ++i) {\n          var other = textureUnits[i]\n          if (other) {\n            if (other.bindCount > 0) {\n              continue\n            }\n            other.unit = -1\n          }\n          textureUnits[i] = texture\n          unit = i\n          break\n        }\n        if (unit >= numTexUnits) {\n          check$1.raise('insufficient number of texture units')\n        }\n        if (config.profile && stats.maxTextureUnits < (unit + 1)) {\n          stats.maxTextureUnits = unit + 1 // +1, since the units are zero-based\n        }\n        texture.unit = unit\n        gl.activeTexture(GL_TEXTURE0$1 + unit)\n        gl.bindTexture(texture.target, texture.texture)\n      }\n      return unit\n    },\n\n    unbind: function () {\n      this.bindCount -= 1\n    },\n\n    decRef: function () {\n      if (--this.refCount <= 0) {\n        destroy(this)\n      }\n    }\n  })\n\n  function createTexture2D (a, b) {\n    var texture = new REGLTexture(GL_TEXTURE_2D$1)\n    textureSet[texture.id] = texture\n    stats.textureCount++\n\n    function reglTexture2D (a, b) {\n      var texInfo = texture.texInfo\n      TexInfo.call(texInfo)\n      var mipData = allocMipMap()\n\n      if (typeof a === 'number') {\n        if (typeof b === 'number') {\n          parseMipMapFromShape(mipData, a | 0, b | 0)\n        } else {\n          parseMipMapFromShape(mipData, a | 0, a | 0)\n        }\n      } else if (a) {\n        check$1.type(a, 'object', 'invalid arguments to regl.texture')\n        parseTexInfo(texInfo, a)\n        parseMipMapFromObject(mipData, a)\n      } else {\n        // empty textures get assigned a default shape of 1x1\n        parseMipMapFromShape(mipData, 1, 1)\n      }\n\n      if (texInfo.genMipmaps) {\n        mipData.mipmask = (mipData.width << 1) - 1\n      }\n      texture.mipmask = mipData.mipmask\n\n      copyFlags(texture, mipData)\n\n      check$1.texture2D(texInfo, mipData, limits)\n      texture.internalformat = mipData.internalformat\n\n      reglTexture2D.width = mipData.width\n      reglTexture2D.height = mipData.height\n\n      tempBind(texture)\n      setMipMap(mipData, GL_TEXTURE_2D$1)\n      setTexInfo(texInfo, GL_TEXTURE_2D$1)\n      tempRestore()\n\n      freeMipMap(mipData)\n\n      if (config.profile) {\n        texture.stats.size = getTextureSize(\n          texture.internalformat,\n          texture.type,\n          mipData.width,\n          mipData.height,\n          texInfo.genMipmaps,\n          false)\n      }\n      reglTexture2D.format = textureFormatsInvert[texture.internalformat]\n      reglTexture2D.type = textureTypesInvert[texture.type]\n\n      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter]\n      reglTexture2D.min = minFiltersInvert[texInfo.minFilter]\n\n      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS]\n      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT]\n\n      return reglTexture2D\n    }\n\n    function subimage (image, x_, y_, level_) {\n      check$1(!!image, 'must specify image data')\n\n      var x = x_ | 0\n      var y = y_ | 0\n      var level = level_ | 0\n\n      var imageData = allocImage()\n      copyFlags(imageData, texture)\n      imageData.width = 0\n      imageData.height = 0\n      parseImage(imageData, image)\n      imageData.width = imageData.width || ((texture.width >> level) - x)\n      imageData.height = imageData.height || ((texture.height >> level) - y)\n\n      check$1(\n        texture.type === imageData.type &&\n        texture.format === imageData.format &&\n        texture.internalformat === imageData.internalformat,\n        'incompatible format for texture.subimage')\n      check$1(\n        x >= 0 && y >= 0 &&\n        x + imageData.width <= texture.width &&\n        y + imageData.height <= texture.height,\n        'texture.subimage write out of bounds')\n      check$1(\n        texture.mipmask & (1 << level),\n        'missing mipmap data')\n      check$1(\n        imageData.data || imageData.element || imageData.needsCopy,\n        'missing image data')\n\n      tempBind(texture)\n      setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level)\n      tempRestore()\n\n      freeImage(imageData)\n\n      return reglTexture2D\n    }\n\n    function resize (w_, h_) {\n      var w = w_ | 0\n      var h = (h_ | 0) || w\n      if (w === texture.width && h === texture.height) {\n        return reglTexture2D\n      }\n\n      reglTexture2D.width = texture.width = w\n      reglTexture2D.height = texture.height = h\n\n      tempBind(texture)\n\n      for (var i = 0; texture.mipmask >> i; ++i) {\n        var _w = w >> i\n        var _h = h >> i\n        if (!_w || !_h) break\n        gl.texImage2D(\n          GL_TEXTURE_2D$1,\n          i,\n          texture.format,\n          _w,\n          _h,\n          0,\n          texture.format,\n          texture.type,\n          null)\n      }\n      tempRestore()\n\n      // also, recompute the texture size.\n      if (config.profile) {\n        texture.stats.size = getTextureSize(\n          texture.internalformat,\n          texture.type,\n          w,\n          h,\n          false,\n          false)\n      }\n\n      return reglTexture2D\n    }\n\n    reglTexture2D(a, b)\n\n    reglTexture2D.subimage = subimage\n    reglTexture2D.resize = resize\n    reglTexture2D._reglType = 'texture2d'\n    reglTexture2D._texture = texture\n    if (config.profile) {\n      reglTexture2D.stats = texture.stats\n    }\n    reglTexture2D.destroy = function () {\n      texture.decRef()\n    }\n\n    return reglTexture2D\n  }\n\n  function createTextureCube (a0, a1, a2, a3, a4, a5) {\n    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1)\n    textureSet[texture.id] = texture\n    stats.cubeCount++\n\n    var faces = new Array(6)\n\n    function reglTextureCube (a0, a1, a2, a3, a4, a5) {\n      var i\n      var texInfo = texture.texInfo\n      TexInfo.call(texInfo)\n      for (i = 0; i < 6; ++i) {\n        faces[i] = allocMipMap()\n      }\n\n      if (typeof a0 === 'number' || !a0) {\n        var s = (a0 | 0) || 1\n        for (i = 0; i < 6; ++i) {\n          parseMipMapFromShape(faces[i], s, s)\n        }\n      } else if (typeof a0 === 'object') {\n        if (a1) {\n          parseMipMapFromObject(faces[0], a0)\n          parseMipMapFromObject(faces[1], a1)\n          parseMipMapFromObject(faces[2], a2)\n          parseMipMapFromObject(faces[3], a3)\n          parseMipMapFromObject(faces[4], a4)\n          parseMipMapFromObject(faces[5], a5)\n        } else {\n          parseTexInfo(texInfo, a0)\n          parseFlags(texture, a0)\n          if ('faces' in a0) {\n            var faceInput = a0.faces\n            check$1(Array.isArray(faceInput) && faceInput.length === 6,\n              'cube faces must be a length 6 array')\n            for (i = 0; i < 6; ++i) {\n              check$1(typeof faceInput[i] === 'object' && !!faceInput[i],\n                'invalid input for cube map face')\n              copyFlags(faces[i], texture)\n              parseMipMapFromObject(faces[i], faceInput[i])\n            }\n          } else {\n            for (i = 0; i < 6; ++i) {\n              parseMipMapFromObject(faces[i], a0)\n            }\n          }\n        }\n      } else {\n        check$1.raise('invalid arguments to cube map')\n      }\n\n      copyFlags(texture, faces[0])\n      check$1.optional(function () {\n        if (!limits.npotTextureCube) {\n          check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions')\n        }\n      })\n\n      if (texInfo.genMipmaps) {\n        texture.mipmask = (faces[0].width << 1) - 1\n      } else {\n        texture.mipmask = faces[0].mipmask\n      }\n\n      check$1.textureCube(texture, texInfo, faces, limits)\n      texture.internalformat = faces[0].internalformat\n\n      reglTextureCube.width = faces[0].width\n      reglTextureCube.height = faces[0].height\n\n      tempBind(texture)\n      for (i = 0; i < 6; ++i) {\n        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i)\n      }\n      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1)\n      tempRestore()\n\n      if (config.profile) {\n        texture.stats.size = getTextureSize(\n          texture.internalformat,\n          texture.type,\n          reglTextureCube.width,\n          reglTextureCube.height,\n          texInfo.genMipmaps,\n          true)\n      }\n\n      reglTextureCube.format = textureFormatsInvert[texture.internalformat]\n      reglTextureCube.type = textureTypesInvert[texture.type]\n\n      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter]\n      reglTextureCube.min = minFiltersInvert[texInfo.minFilter]\n\n      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS]\n      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT]\n\n      for (i = 0; i < 6; ++i) {\n        freeMipMap(faces[i])\n      }\n\n      return reglTextureCube\n    }\n\n    function subimage (face, image, x_, y_, level_) {\n      check$1(!!image, 'must specify image data')\n      check$1(typeof face === 'number' && face === (face | 0) &&\n        face >= 0 && face < 6, 'invalid face')\n\n      var x = x_ | 0\n      var y = y_ | 0\n      var level = level_ | 0\n\n      var imageData = allocImage()\n      copyFlags(imageData, texture)\n      imageData.width = 0\n      imageData.height = 0\n      parseImage(imageData, image)\n      imageData.width = imageData.width || ((texture.width >> level) - x)\n      imageData.height = imageData.height || ((texture.height >> level) - y)\n\n      check$1(\n        texture.type === imageData.type &&\n        texture.format === imageData.format &&\n        texture.internalformat === imageData.internalformat,\n        'incompatible format for texture.subimage')\n      check$1(\n        x >= 0 && y >= 0 &&\n        x + imageData.width <= texture.width &&\n        y + imageData.height <= texture.height,\n        'texture.subimage write out of bounds')\n      check$1(\n        texture.mipmask & (1 << level),\n        'missing mipmap data')\n      check$1(\n        imageData.data || imageData.element || imageData.needsCopy,\n        'missing image data')\n\n      tempBind(texture)\n      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level)\n      tempRestore()\n\n      freeImage(imageData)\n\n      return reglTextureCube\n    }\n\n    function resize (radius_) {\n      var radius = radius_ | 0\n      if (radius === texture.width) {\n        return\n      }\n\n      reglTextureCube.width = texture.width = radius\n      reglTextureCube.height = texture.height = radius\n\n      tempBind(texture)\n      for (var i = 0; i < 6; ++i) {\n        for (var j = 0; texture.mipmask >> j; ++j) {\n          gl.texImage2D(\n            GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i,\n            j,\n            texture.format,\n            radius >> j,\n            radius >> j,\n            0,\n            texture.format,\n            texture.type,\n            null)\n        }\n      }\n      tempRestore()\n\n      if (config.profile) {\n        texture.stats.size = getTextureSize(\n          texture.internalformat,\n          texture.type,\n          reglTextureCube.width,\n          reglTextureCube.height,\n          false,\n          true)\n      }\n\n      return reglTextureCube\n    }\n\n    reglTextureCube(a0, a1, a2, a3, a4, a5)\n\n    reglTextureCube.subimage = subimage\n    reglTextureCube.resize = resize\n    reglTextureCube._reglType = 'textureCube'\n    reglTextureCube._texture = texture\n    if (config.profile) {\n      reglTextureCube.stats = texture.stats\n    }\n    reglTextureCube.destroy = function () {\n      texture.decRef()\n    }\n\n    return reglTextureCube\n  }\n\n  // Called when regl is destroyed\n  function destroyTextures () {\n    for (var i = 0; i < numTexUnits; ++i) {\n      gl.activeTexture(GL_TEXTURE0$1 + i)\n      gl.bindTexture(GL_TEXTURE_2D$1, null)\n      textureUnits[i] = null\n    }\n    values(textureSet).forEach(destroy)\n\n    stats.cubeCount = 0\n    stats.textureCount = 0\n  }\n\n  if (config.profile) {\n    stats.getTotalTextureSize = function () {\n      var total = 0\n      Object.keys(textureSet).forEach(function (key) {\n        total += textureSet[key].stats.size\n      })\n      return total\n    }\n  }\n\n  function restoreTextures () {\n    for (var i = 0; i < numTexUnits; ++i) {\n      var tex = textureUnits[i]\n      if (tex) {\n        tex.bindCount = 0\n        tex.unit = -1\n        textureUnits[i] = null\n      }\n    }\n\n    values(textureSet).forEach(function (texture) {\n      texture.texture = gl.createTexture()\n      gl.bindTexture(texture.target, texture.texture)\n      for (var i = 0; i < 32; ++i) {\n        if ((texture.mipmask & (1 << i)) === 0) {\n          continue\n        }\n        if (texture.target === GL_TEXTURE_2D$1) {\n          gl.texImage2D(GL_TEXTURE_2D$1,\n            i,\n            texture.internalformat,\n            texture.width >> i,\n            texture.height >> i,\n            0,\n            texture.internalformat,\n            texture.type,\n            null)\n        } else {\n          for (var j = 0; j < 6; ++j) {\n            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j,\n              i,\n              texture.internalformat,\n              texture.width >> i,\n              texture.height >> i,\n              0,\n              texture.internalformat,\n              texture.type,\n              null)\n          }\n        }\n      }\n      setTexInfo(texture.texInfo, texture.target)\n    })\n  }\n\n  function refreshTextures () {\n    for (var i = 0; i < numTexUnits; ++i) {\n      var tex = textureUnits[i]\n      if (tex) {\n        tex.bindCount = 0\n        tex.unit = -1\n        textureUnits[i] = null\n      }\n      gl.activeTexture(GL_TEXTURE0$1 + i)\n      gl.bindTexture(GL_TEXTURE_2D$1, null)\n      gl.bindTexture(GL_TEXTURE_CUBE_MAP$1, null)\n    }\n  }\n\n  return {\n    create2D: createTexture2D,\n    createCube: createTextureCube,\n    clear: destroyTextures,\n    getTexture: function (wrapper) {\n      return null\n    },\n    restore: restoreTextures,\n    refresh: refreshTextures\n  }\n}\n\nvar GL_RENDERBUFFER = 0x8D41\n\nvar GL_RGBA4$1 = 0x8056\nvar GL_RGB5_A1$1 = 0x8057\nvar GL_RGB565$1 = 0x8D62\nvar GL_DEPTH_COMPONENT16 = 0x81A5\nvar GL_STENCIL_INDEX8 = 0x8D48\nvar GL_DEPTH_STENCIL$1 = 0x84F9\n\nvar GL_SRGB8_ALPHA8_EXT = 0x8C43\n\nvar GL_RGBA32F_EXT = 0x8814\n\nvar GL_RGBA16F_EXT = 0x881A\nvar GL_RGB16F_EXT = 0x881B\n\nvar FORMAT_SIZES = []\n\nFORMAT_SIZES[GL_RGBA4$1] = 2\nFORMAT_SIZES[GL_RGB5_A1$1] = 2\nFORMAT_SIZES[GL_RGB565$1] = 2\n\nFORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2\nFORMAT_SIZES[GL_STENCIL_INDEX8] = 1\nFORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4\n\nFORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4\nFORMAT_SIZES[GL_RGBA32F_EXT] = 16\nFORMAT_SIZES[GL_RGBA16F_EXT] = 8\nFORMAT_SIZES[GL_RGB16F_EXT] = 6\n\nfunction getRenderbufferSize (format, width, height) {\n  return FORMAT_SIZES[format] * width * height\n}\n\nvar wrapRenderbuffers = function (gl, extensions, limits, stats, config) {\n  var formatTypes = {\n    'rgba4': GL_RGBA4$1,\n    'rgb565': GL_RGB565$1,\n    'rgb5 a1': GL_RGB5_A1$1,\n    'depth': GL_DEPTH_COMPONENT16,\n    'stencil': GL_STENCIL_INDEX8,\n    'depth stencil': GL_DEPTH_STENCIL$1\n  }\n\n  if (extensions.ext_srgb) {\n    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT\n  }\n\n  if (extensions.ext_color_buffer_half_float) {\n    formatTypes['rgba16f'] = GL_RGBA16F_EXT\n    formatTypes['rgb16f'] = GL_RGB16F_EXT\n  }\n\n  if (extensions.webgl_color_buffer_float) {\n    formatTypes['rgba32f'] = GL_RGBA32F_EXT\n  }\n\n  var formatTypesInvert = []\n  Object.keys(formatTypes).forEach(function (key) {\n    var val = formatTypes[key]\n    formatTypesInvert[val] = key\n  })\n\n  var renderbufferCount = 0\n  var renderbufferSet = {}\n\n  function REGLRenderbuffer (renderbuffer) {\n    this.id = renderbufferCount++\n    this.refCount = 1\n\n    this.renderbuffer = renderbuffer\n\n    this.format = GL_RGBA4$1\n    this.width = 0\n    this.height = 0\n\n    if (config.profile) {\n      this.stats = { size: 0 }\n    }\n  }\n\n  REGLRenderbuffer.prototype.decRef = function () {\n    if (--this.refCount <= 0) {\n      destroy(this)\n    }\n  }\n\n  function destroy (rb) {\n    var handle = rb.renderbuffer\n    check$1(handle, 'must not double destroy renderbuffer')\n    gl.bindRenderbuffer(GL_RENDERBUFFER, null)\n    gl.deleteRenderbuffer(handle)\n    rb.renderbuffer = null\n    rb.refCount = 0\n    delete renderbufferSet[rb.id]\n    stats.renderbufferCount--\n  }\n\n  function createRenderbuffer (a, b) {\n    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer())\n    renderbufferSet[renderbuffer.id] = renderbuffer\n    stats.renderbufferCount++\n\n    function reglRenderbuffer (a, b) {\n      var w = 0\n      var h = 0\n      var format = GL_RGBA4$1\n\n      if (typeof a === 'object' && a) {\n        var options = a\n        if ('shape' in options) {\n          var shape = options.shape\n          check$1(Array.isArray(shape) && shape.length >= 2,\n            'invalid renderbuffer shape')\n          w = shape[0] | 0\n          h = shape[1] | 0\n        } else {\n          if ('radius' in options) {\n            w = h = options.radius | 0\n          }\n          if ('width' in options) {\n            w = options.width | 0\n          }\n          if ('height' in options) {\n            h = options.height | 0\n          }\n        }\n        if ('format' in options) {\n          check$1.parameter(options.format, formatTypes,\n            'invalid renderbuffer format')\n          format = formatTypes[options.format]\n        }\n      } else if (typeof a === 'number') {\n        w = a | 0\n        if (typeof b === 'number') {\n          h = b | 0\n        } else {\n          h = w\n        }\n      } else if (!a) {\n        w = h = 1\n      } else {\n        check$1.raise('invalid arguments to renderbuffer constructor')\n      }\n\n      // check shape\n      check$1(\n        w > 0 && h > 0 &&\n        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,\n        'invalid renderbuffer size')\n\n      if (w === renderbuffer.width &&\n          h === renderbuffer.height &&\n          format === renderbuffer.format) {\n        return\n      }\n\n      reglRenderbuffer.width = renderbuffer.width = w\n      reglRenderbuffer.height = renderbuffer.height = h\n      renderbuffer.format = format\n\n      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer)\n      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h)\n\n      check$1(\n        gl.getError() === 0,\n        'invalid render buffer format')\n\n      if (config.profile) {\n        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height)\n      }\n      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format]\n\n      return reglRenderbuffer\n    }\n\n    function resize (w_, h_) {\n      var w = w_ | 0\n      var h = (h_ | 0) || w\n\n      if (w === renderbuffer.width && h === renderbuffer.height) {\n        return reglRenderbuffer\n      }\n\n      // check shape\n      check$1(\n        w > 0 && h > 0 &&\n        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,\n        'invalid renderbuffer size')\n\n      reglRenderbuffer.width = renderbuffer.width = w\n      reglRenderbuffer.height = renderbuffer.height = h\n\n      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer)\n      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h)\n\n      check$1(\n        gl.getError() === 0,\n        'invalid render buffer format')\n\n      // also, recompute size.\n      if (config.profile) {\n        renderbuffer.stats.size = getRenderbufferSize(\n          renderbuffer.format, renderbuffer.width, renderbuffer.height)\n      }\n\n      return reglRenderbuffer\n    }\n\n    reglRenderbuffer(a, b)\n\n    reglRenderbuffer.resize = resize\n    reglRenderbuffer._reglType = 'renderbuffer'\n    reglRenderbuffer._renderbuffer = renderbuffer\n    if (config.profile) {\n      reglRenderbuffer.stats = renderbuffer.stats\n    }\n    reglRenderbuffer.destroy = function () {\n      renderbuffer.decRef()\n    }\n\n    return reglRenderbuffer\n  }\n\n  if (config.profile) {\n    stats.getTotalRenderbufferSize = function () {\n      var total = 0\n      Object.keys(renderbufferSet).forEach(function (key) {\n        total += renderbufferSet[key].stats.size\n      })\n      return total\n    }\n  }\n\n  function restoreRenderbuffers () {\n    values(renderbufferSet).forEach(function (rb) {\n      rb.renderbuffer = gl.createRenderbuffer()\n      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer)\n      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height)\n    })\n    gl.bindRenderbuffer(GL_RENDERBUFFER, null)\n  }\n\n  return {\n    create: createRenderbuffer,\n    clear: function () {\n      values(renderbufferSet).forEach(destroy)\n    },\n    restore: restoreRenderbuffers\n  }\n}\n\n// We store these constants so that the minifier can inline them\nvar GL_FRAMEBUFFER$1 = 0x8D40\nvar GL_RENDERBUFFER$1 = 0x8D41\n\nvar GL_TEXTURE_2D$2 = 0x0DE1\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515\n\nvar GL_COLOR_ATTACHMENT0$1 = 0x8CE0\nvar GL_DEPTH_ATTACHMENT = 0x8D00\nvar GL_STENCIL_ATTACHMENT = 0x8D20\nvar GL_DEPTH_STENCIL_ATTACHMENT = 0x821A\n\nvar GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5\nvar GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6\nvar GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7\nvar GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9\nvar GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD\n\nvar GL_HALF_FLOAT_OES$2 = 0x8D61\nvar GL_UNSIGNED_BYTE$6 = 0x1401\nvar GL_FLOAT$5 = 0x1406\n\nvar GL_RGB$1 = 0x1907\nvar GL_RGBA$2 = 0x1908\n\nvar GL_DEPTH_COMPONENT$1 = 0x1902\n\nvar colorTextureFormatEnums = [\n  GL_RGB$1,\n  GL_RGBA$2\n]\n\n// for every texture format, store\n// the number of channels\nvar textureFormatChannels = []\ntextureFormatChannels[GL_RGBA$2] = 4\ntextureFormatChannels[GL_RGB$1] = 3\n\n// for every texture type, store\n// the size in bytes.\nvar textureTypeSizes = []\ntextureTypeSizes[GL_UNSIGNED_BYTE$6] = 1\ntextureTypeSizes[GL_FLOAT$5] = 4\ntextureTypeSizes[GL_HALF_FLOAT_OES$2] = 2\n\nvar GL_RGBA4$2 = 0x8056\nvar GL_RGB5_A1$2 = 0x8057\nvar GL_RGB565$2 = 0x8D62\nvar GL_DEPTH_COMPONENT16$1 = 0x81A5\nvar GL_STENCIL_INDEX8$1 = 0x8D48\nvar GL_DEPTH_STENCIL$2 = 0x84F9\n\nvar GL_SRGB8_ALPHA8_EXT$1 = 0x8C43\n\nvar GL_RGBA32F_EXT$1 = 0x8814\n\nvar GL_RGBA16F_EXT$1 = 0x881A\nvar GL_RGB16F_EXT$1 = 0x881B\n\nvar colorRenderbufferFormatEnums = [\n  GL_RGBA4$2,\n  GL_RGB5_A1$2,\n  GL_RGB565$2,\n  GL_SRGB8_ALPHA8_EXT$1,\n  GL_RGBA16F_EXT$1,\n  GL_RGB16F_EXT$1,\n  GL_RGBA32F_EXT$1\n]\n\nvar statusCode = {}\nstatusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete'\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment'\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions'\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment'\nstatusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported'\n\nfunction wrapFBOState (\n  gl,\n  extensions,\n  limits,\n  textureState,\n  renderbufferState,\n  stats) {\n  var framebufferState = {\n    cur: null,\n    next: null,\n    dirty: false,\n    setFBO: null\n  }\n\n  var colorTextureFormats = ['rgba']\n  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1']\n\n  if (extensions.ext_srgb) {\n    colorRenderbufferFormats.push('srgba')\n  }\n\n  if (extensions.ext_color_buffer_half_float) {\n    colorRenderbufferFormats.push('rgba16f', 'rgb16f')\n  }\n\n  if (extensions.webgl_color_buffer_float) {\n    colorRenderbufferFormats.push('rgba32f')\n  }\n\n  var colorTypes = ['uint8']\n  if (extensions.oes_texture_half_float) {\n    colorTypes.push('half float', 'float16')\n  }\n  if (extensions.oes_texture_float) {\n    colorTypes.push('float', 'float32')\n  }\n\n  function FramebufferAttachment (target, texture, renderbuffer) {\n    this.target = target\n    this.texture = texture\n    this.renderbuffer = renderbuffer\n\n    var w = 0\n    var h = 0\n    if (texture) {\n      w = texture.width\n      h = texture.height\n    } else if (renderbuffer) {\n      w = renderbuffer.width\n      h = renderbuffer.height\n    }\n    this.width = w\n    this.height = h\n  }\n\n  function decRef (attachment) {\n    if (attachment) {\n      if (attachment.texture) {\n        attachment.texture._texture.decRef()\n      }\n      if (attachment.renderbuffer) {\n        attachment.renderbuffer._renderbuffer.decRef()\n      }\n    }\n  }\n\n  function incRefAndCheckShape (attachment, width, height) {\n    if (!attachment) {\n      return\n    }\n    if (attachment.texture) {\n      var texture = attachment.texture._texture\n      var tw = Math.max(1, texture.width)\n      var th = Math.max(1, texture.height)\n      check$1(tw === width && th === height,\n        'inconsistent width/height for supplied texture')\n      texture.refCount += 1\n    } else {\n      var renderbuffer = attachment.renderbuffer._renderbuffer\n      check$1(\n        renderbuffer.width === width && renderbuffer.height === height,\n        'inconsistent width/height for renderbuffer')\n      renderbuffer.refCount += 1\n    }\n  }\n\n  function attach (location, attachment) {\n    if (attachment) {\n      if (attachment.texture) {\n        gl.framebufferTexture2D(\n          GL_FRAMEBUFFER$1,\n          location,\n          attachment.target,\n          attachment.texture._texture.texture,\n          0)\n      } else {\n        gl.framebufferRenderbuffer(\n          GL_FRAMEBUFFER$1,\n          location,\n          GL_RENDERBUFFER$1,\n          attachment.renderbuffer._renderbuffer.renderbuffer)\n      }\n    }\n  }\n\n  function parseAttachment (attachment) {\n    var target = GL_TEXTURE_2D$2\n    var texture = null\n    var renderbuffer = null\n\n    var data = attachment\n    if (typeof attachment === 'object') {\n      data = attachment.data\n      if ('target' in attachment) {\n        target = attachment.target | 0\n      }\n    }\n\n    check$1.type(data, 'function', 'invalid attachment data')\n\n    var type = data._reglType\n    if (type === 'texture2d') {\n      texture = data\n      check$1(target === GL_TEXTURE_2D$2)\n    } else if (type === 'textureCube') {\n      texture = data\n      check$1(\n        target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 &&\n        target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6,\n        'invalid cube map target')\n    } else if (type === 'renderbuffer') {\n      renderbuffer = data\n      target = GL_RENDERBUFFER$1\n    } else {\n      check$1.raise('invalid regl object for attachment')\n    }\n\n    return new FramebufferAttachment(target, texture, renderbuffer)\n  }\n\n  function allocAttachment (\n    width,\n    height,\n    isTexture,\n    format,\n    type) {\n    if (isTexture) {\n      var texture = textureState.create2D({\n        width: width,\n        height: height,\n        format: format,\n        type: type\n      })\n      texture._texture.refCount = 0\n      return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null)\n    } else {\n      var rb = renderbufferState.create({\n        width: width,\n        height: height,\n        format: format\n      })\n      rb._renderbuffer.refCount = 0\n      return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb)\n    }\n  }\n\n  function unwrapAttachment (attachment) {\n    return attachment && (attachment.texture || attachment.renderbuffer)\n  }\n\n  function resizeAttachment (attachment, w, h) {\n    if (attachment) {\n      if (attachment.texture) {\n        attachment.texture.resize(w, h)\n      } else if (attachment.renderbuffer) {\n        attachment.renderbuffer.resize(w, h)\n      }\n      attachment.width = w\n      attachment.height = h\n    }\n  }\n\n  var framebufferCount = 0\n  var framebufferSet = {}\n\n  function REGLFramebuffer () {\n    this.id = framebufferCount++\n    framebufferSet[this.id] = this\n\n    this.framebuffer = gl.createFramebuffer()\n    this.width = 0\n    this.height = 0\n\n    this.colorAttachments = []\n    this.depthAttachment = null\n    this.stencilAttachment = null\n    this.depthStencilAttachment = null\n  }\n\n  function decFBORefs (framebuffer) {\n    framebuffer.colorAttachments.forEach(decRef)\n    decRef(framebuffer.depthAttachment)\n    decRef(framebuffer.stencilAttachment)\n    decRef(framebuffer.depthStencilAttachment)\n  }\n\n  function destroy (framebuffer) {\n    var handle = framebuffer.framebuffer\n    check$1(handle, 'must not double destroy framebuffer')\n    gl.deleteFramebuffer(handle)\n    framebuffer.framebuffer = null\n    stats.framebufferCount--\n    delete framebufferSet[framebuffer.id]\n  }\n\n  function updateFramebuffer (framebuffer) {\n    var i\n\n    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer)\n    var colorAttachments = framebuffer.colorAttachments\n    for (i = 0; i < colorAttachments.length; ++i) {\n      attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i])\n    }\n    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {\n      gl.framebufferTexture2D(\n        GL_FRAMEBUFFER$1,\n        GL_COLOR_ATTACHMENT0$1 + i,\n        GL_TEXTURE_2D$2,\n        null,\n        0)\n    }\n\n    gl.framebufferTexture2D(\n      GL_FRAMEBUFFER$1,\n      GL_DEPTH_STENCIL_ATTACHMENT,\n      GL_TEXTURE_2D$2,\n      null,\n      0)\n    gl.framebufferTexture2D(\n      GL_FRAMEBUFFER$1,\n      GL_DEPTH_ATTACHMENT,\n      GL_TEXTURE_2D$2,\n      null,\n      0)\n    gl.framebufferTexture2D(\n      GL_FRAMEBUFFER$1,\n      GL_STENCIL_ATTACHMENT,\n      GL_TEXTURE_2D$2,\n      null,\n      0)\n\n    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment)\n    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment)\n    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment)\n\n    // Check status code\n    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1)\n    if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {\n      check$1.raise('framebuffer configuration not supported, status = ' +\n        statusCode[status])\n    }\n\n    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null)\n    framebufferState.cur = framebufferState.next\n\n    // FIXME: Clear error code here.  This is a work around for a bug in\n    // headless-gl\n    gl.getError()\n  }\n\n  function createFBO (a0, a1) {\n    var framebuffer = new REGLFramebuffer()\n    stats.framebufferCount++\n\n    function reglFramebuffer (a, b) {\n      var i\n\n      check$1(framebufferState.next !== framebuffer,\n        'can not update framebuffer which is currently in use')\n\n      var width = 0\n      var height = 0\n\n      var needsDepth = true\n      var needsStencil = true\n\n      var colorBuffer = null\n      var colorTexture = true\n      var colorFormat = 'rgba'\n      var colorType = 'uint8'\n      var colorCount = 1\n\n      var depthBuffer = null\n      var stencilBuffer = null\n      var depthStencilBuffer = null\n      var depthStencilTexture = false\n\n      if (typeof a === 'number') {\n        width = a | 0\n        height = (b | 0) || width\n      } else if (!a) {\n        width = height = 1\n      } else {\n        check$1.type(a, 'object', 'invalid arguments for framebuffer')\n        var options = a\n\n        if ('shape' in options) {\n          var shape = options.shape\n          check$1(Array.isArray(shape) && shape.length >= 2,\n            'invalid shape for framebuffer')\n          width = shape[0]\n          height = shape[1]\n        } else {\n          if ('radius' in options) {\n            width = height = options.radius\n          }\n          if ('width' in options) {\n            width = options.width\n          }\n          if ('height' in options) {\n            height = options.height\n          }\n        }\n\n        if ('color' in options ||\n            'colors' in options) {\n          colorBuffer =\n            options.color ||\n            options.colors\n          if (Array.isArray(colorBuffer)) {\n            check$1(\n              colorBuffer.length === 1 || extensions.webgl_draw_buffers,\n              'multiple render targets not supported')\n          }\n        }\n\n        if (!colorBuffer) {\n          if ('colorCount' in options) {\n            colorCount = options.colorCount | 0\n            check$1(colorCount > 0, 'invalid color buffer count')\n          }\n\n          if ('colorTexture' in options) {\n            colorTexture = !!options.colorTexture\n            colorFormat = 'rgba4'\n          }\n\n          if ('colorType' in options) {\n            colorType = options.colorType\n            if (!colorTexture) {\n              if (colorType === 'half float' || colorType === 'float16') {\n                check$1(extensions.ext_color_buffer_half_float,\n                  'you must enable EXT_color_buffer_half_float to use 16-bit render buffers')\n                colorFormat = 'rgba16f'\n              } else if (colorType === 'float' || colorType === 'float32') {\n                check$1(extensions.webgl_color_buffer_float,\n                  'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers')\n                colorFormat = 'rgba32f'\n              }\n            } else {\n              check$1(extensions.oes_texture_float ||\n                !(colorType === 'float' || colorType === 'float32'),\n              'you must enable OES_texture_float in order to use floating point framebuffer objects')\n              check$1(extensions.oes_texture_half_float ||\n                !(colorType === 'half float' || colorType === 'float16'),\n              'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects')\n            }\n            check$1.oneOf(colorType, colorTypes, 'invalid color type')\n          }\n\n          if ('colorFormat' in options) {\n            colorFormat = options.colorFormat\n            if (colorTextureFormats.indexOf(colorFormat) >= 0) {\n              colorTexture = true\n            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {\n              colorTexture = false\n            } else {\n              check$1.optional(function () {\n                if (colorTexture) {\n                  check$1.oneOf(\n                    options.colorFormat, colorTextureFormats,\n                    'invalid color format for texture')\n                } else {\n                  check$1.oneOf(\n                    options.colorFormat, colorRenderbufferFormats,\n                    'invalid color format for renderbuffer')\n                }\n              })\n            }\n          }\n        }\n\n        if ('depthTexture' in options || 'depthStencilTexture' in options) {\n          depthStencilTexture = !!(options.depthTexture ||\n            options.depthStencilTexture)\n          check$1(!depthStencilTexture || extensions.webgl_depth_texture,\n            'webgl_depth_texture extension not supported')\n        }\n\n        if ('depth' in options) {\n          if (typeof options.depth === 'boolean') {\n            needsDepth = options.depth\n          } else {\n            depthBuffer = options.depth\n            needsStencil = false\n          }\n        }\n\n        if ('stencil' in options) {\n          if (typeof options.stencil === 'boolean') {\n            needsStencil = options.stencil\n          } else {\n            stencilBuffer = options.stencil\n            needsDepth = false\n          }\n        }\n\n        if ('depthStencil' in options) {\n          if (typeof options.depthStencil === 'boolean') {\n            needsDepth = needsStencil = options.depthStencil\n          } else {\n            depthStencilBuffer = options.depthStencil\n            needsDepth = false\n            needsStencil = false\n          }\n        }\n      }\n\n      // parse attachments\n      var colorAttachments = null\n      var depthAttachment = null\n      var stencilAttachment = null\n      var depthStencilAttachment = null\n\n      // Set up color attachments\n      if (Array.isArray(colorBuffer)) {\n        colorAttachments = colorBuffer.map(parseAttachment)\n      } else if (colorBuffer) {\n        colorAttachments = [parseAttachment(colorBuffer)]\n      } else {\n        colorAttachments = new Array(colorCount)\n        for (i = 0; i < colorCount; ++i) {\n          colorAttachments[i] = allocAttachment(\n            width,\n            height,\n            colorTexture,\n            colorFormat,\n            colorType)\n        }\n      }\n\n      check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1,\n        'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.')\n      check$1(colorAttachments.length <= limits.maxColorAttachments,\n        'too many color attachments, not supported')\n\n      width = width || colorAttachments[0].width\n      height = height || colorAttachments[0].height\n\n      if (depthBuffer) {\n        depthAttachment = parseAttachment(depthBuffer)\n      } else if (needsDepth && !needsStencil) {\n        depthAttachment = allocAttachment(\n          width,\n          height,\n          depthStencilTexture,\n          'depth',\n          'uint32')\n      }\n\n      if (stencilBuffer) {\n        stencilAttachment = parseAttachment(stencilBuffer)\n      } else if (needsStencil && !needsDepth) {\n        stencilAttachment = allocAttachment(\n          width,\n          height,\n          false,\n          'stencil',\n          'uint8')\n      }\n\n      if (depthStencilBuffer) {\n        depthStencilAttachment = parseAttachment(depthStencilBuffer)\n      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {\n        depthStencilAttachment = allocAttachment(\n          width,\n          height,\n          depthStencilTexture,\n          'depth stencil',\n          'depth stencil')\n      }\n\n      check$1(\n        (!!depthBuffer) + (!!stencilBuffer) + (!!depthStencilBuffer) <= 1,\n        'invalid framebuffer configuration, can specify exactly one depth/stencil attachment')\n\n      var commonColorAttachmentSize = null\n\n      for (i = 0; i < colorAttachments.length; ++i) {\n        incRefAndCheckShape(colorAttachments[i], width, height)\n        check$1(!colorAttachments[i] ||\n          (colorAttachments[i].texture &&\n            colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0) ||\n          (colorAttachments[i].renderbuffer &&\n            colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0),\n        'framebuffer color attachment ' + i + ' is invalid')\n\n        if (colorAttachments[i] && colorAttachments[i].texture) {\n          var colorAttachmentSize =\n              textureFormatChannels[colorAttachments[i].texture._texture.format] *\n              textureTypeSizes[colorAttachments[i].texture._texture.type]\n\n          if (commonColorAttachmentSize === null) {\n            commonColorAttachmentSize = colorAttachmentSize\n          } else {\n            // We need to make sure that all color attachments have the same number of bitplanes\n            // (that is, the same numer of bits per pixel)\n            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.\n            check$1(commonColorAttachmentSize === colorAttachmentSize,\n              'all color attachments much have the same number of bits per pixel.')\n          }\n        }\n      }\n      incRefAndCheckShape(depthAttachment, width, height)\n      check$1(!depthAttachment ||\n        (depthAttachment.texture &&\n          depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1) ||\n        (depthAttachment.renderbuffer &&\n          depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1),\n      'invalid depth attachment for framebuffer object')\n      incRefAndCheckShape(stencilAttachment, width, height)\n      check$1(!stencilAttachment ||\n        (stencilAttachment.renderbuffer &&\n          stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1),\n      'invalid stencil attachment for framebuffer object')\n      incRefAndCheckShape(depthStencilAttachment, width, height)\n      check$1(!depthStencilAttachment ||\n        (depthStencilAttachment.texture &&\n          depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2) ||\n        (depthStencilAttachment.renderbuffer &&\n          depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2),\n      'invalid depth-stencil attachment for framebuffer object')\n\n      // decrement references\n      decFBORefs(framebuffer)\n\n      framebuffer.width = width\n      framebuffer.height = height\n\n      framebuffer.colorAttachments = colorAttachments\n      framebuffer.depthAttachment = depthAttachment\n      framebuffer.stencilAttachment = stencilAttachment\n      framebuffer.depthStencilAttachment = depthStencilAttachment\n\n      reglFramebuffer.color = colorAttachments.map(unwrapAttachment)\n      reglFramebuffer.depth = unwrapAttachment(depthAttachment)\n      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment)\n      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment)\n\n      reglFramebuffer.width = framebuffer.width\n      reglFramebuffer.height = framebuffer.height\n\n      updateFramebuffer(framebuffer)\n\n      return reglFramebuffer\n    }\n\n    function resize (w_, h_) {\n      check$1(framebufferState.next !== framebuffer,\n        'can not resize a framebuffer which is currently in use')\n\n      var w = Math.max(w_ | 0, 1)\n      var h = Math.max((h_ | 0) || w, 1)\n      if (w === framebuffer.width && h === framebuffer.height) {\n        return reglFramebuffer\n      }\n\n      // resize all buffers\n      var colorAttachments = framebuffer.colorAttachments\n      for (var i = 0; i < colorAttachments.length; ++i) {\n        resizeAttachment(colorAttachments[i], w, h)\n      }\n      resizeAttachment(framebuffer.depthAttachment, w, h)\n      resizeAttachment(framebuffer.stencilAttachment, w, h)\n      resizeAttachment(framebuffer.depthStencilAttachment, w, h)\n\n      framebuffer.width = reglFramebuffer.width = w\n      framebuffer.height = reglFramebuffer.height = h\n\n      updateFramebuffer(framebuffer)\n\n      return reglFramebuffer\n    }\n\n    reglFramebuffer(a0, a1)\n\n    return extend(reglFramebuffer, {\n      resize: resize,\n      _reglType: 'framebuffer',\n      _framebuffer: framebuffer,\n      destroy: function () {\n        destroy(framebuffer)\n        decFBORefs(framebuffer)\n      },\n      use: function (block) {\n        framebufferState.setFBO({\n          framebuffer: reglFramebuffer\n        }, block)\n      }\n    })\n  }\n\n  function createCubeFBO (options) {\n    var faces = Array(6)\n\n    function reglFramebufferCube (a) {\n      var i\n\n      check$1(faces.indexOf(framebufferState.next) < 0,\n        'can not update framebuffer which is currently in use')\n\n      var params = {\n        color: null\n      }\n\n      var radius = 0\n\n      var colorBuffer = null\n      var colorFormat = 'rgba'\n      var colorType = 'uint8'\n      var colorCount = 1\n\n      if (typeof a === 'number') {\n        radius = a | 0\n      } else if (!a) {\n        radius = 1\n      } else {\n        check$1.type(a, 'object', 'invalid arguments for framebuffer')\n        var options = a\n\n        if ('shape' in options) {\n          var shape = options.shape\n          check$1(\n            Array.isArray(shape) && shape.length >= 2,\n            'invalid shape for framebuffer')\n          check$1(\n            shape[0] === shape[1],\n            'cube framebuffer must be square')\n          radius = shape[0]\n        } else {\n          if ('radius' in options) {\n            radius = options.radius | 0\n          }\n          if ('width' in options) {\n            radius = options.width | 0\n            if ('height' in options) {\n              check$1(options.height === radius, 'must be square')\n            }\n          } else if ('height' in options) {\n            radius = options.height | 0\n          }\n        }\n\n        if ('color' in options ||\n            'colors' in options) {\n          colorBuffer =\n            options.color ||\n            options.colors\n          if (Array.isArray(colorBuffer)) {\n            check$1(\n              colorBuffer.length === 1 || extensions.webgl_draw_buffers,\n              'multiple render targets not supported')\n          }\n        }\n\n        if (!colorBuffer) {\n          if ('colorCount' in options) {\n            colorCount = options.colorCount | 0\n            check$1(colorCount > 0, 'invalid color buffer count')\n          }\n\n          if ('colorType' in options) {\n            check$1.oneOf(\n              options.colorType, colorTypes,\n              'invalid color type')\n            colorType = options.colorType\n          }\n\n          if ('colorFormat' in options) {\n            colorFormat = options.colorFormat\n            check$1.oneOf(\n              options.colorFormat, colorTextureFormats,\n              'invalid color format for texture')\n          }\n        }\n\n        if ('depth' in options) {\n          params.depth = options.depth\n        }\n\n        if ('stencil' in options) {\n          params.stencil = options.stencil\n        }\n\n        if ('depthStencil' in options) {\n          params.depthStencil = options.depthStencil\n        }\n      }\n\n      var colorCubes\n      if (colorBuffer) {\n        if (Array.isArray(colorBuffer)) {\n          colorCubes = []\n          for (i = 0; i < colorBuffer.length; ++i) {\n            colorCubes[i] = colorBuffer[i]\n          }\n        } else {\n          colorCubes = [ colorBuffer ]\n        }\n      } else {\n        colorCubes = Array(colorCount)\n        var cubeMapParams = {\n          radius: radius,\n          format: colorFormat,\n          type: colorType\n        }\n        for (i = 0; i < colorCount; ++i) {\n          colorCubes[i] = textureState.createCube(cubeMapParams)\n        }\n      }\n\n      // Check color cubes\n      params.color = Array(colorCubes.length)\n      for (i = 0; i < colorCubes.length; ++i) {\n        var cube = colorCubes[i]\n        check$1(\n          typeof cube === 'function' && cube._reglType === 'textureCube',\n          'invalid cube map')\n        radius = radius || cube.width\n        check$1(\n          cube.width === radius && cube.height === radius,\n          'invalid cube map shape')\n        params.color[i] = {\n          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,\n          data: colorCubes[i]\n        }\n      }\n\n      for (i = 0; i < 6; ++i) {\n        for (var j = 0; j < colorCubes.length; ++j) {\n          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i\n        }\n        // reuse depth-stencil attachments across all cube maps\n        if (i > 0) {\n          params.depth = faces[0].depth\n          params.stencil = faces[0].stencil\n          params.depthStencil = faces[0].depthStencil\n        }\n        if (faces[i]) {\n          (faces[i])(params)\n        } else {\n          faces[i] = createFBO(params)\n        }\n      }\n\n      return extend(reglFramebufferCube, {\n        width: radius,\n        height: radius,\n        color: colorCubes\n      })\n    }\n\n    function resize (radius_) {\n      var i\n      var radius = radius_ | 0\n      check$1(radius > 0 && radius <= limits.maxCubeMapSize,\n        'invalid radius for cube fbo')\n\n      if (radius === reglFramebufferCube.width) {\n        return reglFramebufferCube\n      }\n\n      var colors = reglFramebufferCube.color\n      for (i = 0; i < colors.length; ++i) {\n        colors[i].resize(radius)\n      }\n\n      for (i = 0; i < 6; ++i) {\n        faces[i].resize(radius)\n      }\n\n      reglFramebufferCube.width = reglFramebufferCube.height = radius\n\n      return reglFramebufferCube\n    }\n\n    reglFramebufferCube(options)\n\n    return extend(reglFramebufferCube, {\n      faces: faces,\n      resize: resize,\n      _reglType: 'framebufferCube',\n      destroy: function () {\n        faces.forEach(function (f) {\n          f.destroy()\n        })\n      }\n    })\n  }\n\n  function restoreFramebuffers () {\n    framebufferState.cur = null\n    framebufferState.next = null\n    framebufferState.dirty = true\n    values(framebufferSet).forEach(function (fb) {\n      fb.framebuffer = gl.createFramebuffer()\n      updateFramebuffer(fb)\n    })\n  }\n\n  return extend(framebufferState, {\n    getFramebuffer: function (object) {\n      if (typeof object === 'function' && object._reglType === 'framebuffer') {\n        var fbo = object._framebuffer\n        if (fbo instanceof REGLFramebuffer) {\n          return fbo\n        }\n      }\n      return null\n    },\n    create: createFBO,\n    createCube: createCubeFBO,\n    clear: function () {\n      values(framebufferSet).forEach(destroy)\n    },\n    restore: restoreFramebuffers\n  })\n}\n\nvar GL_FLOAT$6 = 5126\nvar GL_ARRAY_BUFFER$1 = 34962\nvar GL_ELEMENT_ARRAY_BUFFER$1 = 34963\n\nvar VAO_OPTIONS = [\n  'attributes',\n  'elements',\n  'offset',\n  'count',\n  'primitive',\n  'instances'\n]\n\nfunction AttributeRecord () {\n  this.state = 0\n\n  this.x = 0.0\n  this.y = 0.0\n  this.z = 0.0\n  this.w = 0.0\n\n  this.buffer = null\n  this.size = 0\n  this.normalized = false\n  this.type = GL_FLOAT$6\n  this.offset = 0\n  this.stride = 0\n  this.divisor = 0\n}\n\nfunction wrapAttributeState (\n  gl,\n  extensions,\n  limits,\n  stats,\n  bufferState,\n  elementState,\n  drawState) {\n  var NUM_ATTRIBUTES = limits.maxAttributes\n  var attributeBindings = new Array(NUM_ATTRIBUTES)\n  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {\n    attributeBindings[i] = new AttributeRecord()\n  }\n  var vaoCount = 0\n  var vaoSet = {}\n\n  var state = {\n    Record: AttributeRecord,\n    scope: {},\n    state: attributeBindings,\n    currentVAO: null,\n    targetVAO: null,\n    restore: extVAO() ? restoreVAO : function () {},\n    createVAO: createVAO,\n    getVAO: getVAO,\n    destroyBuffer: destroyBuffer,\n    setVAO: extVAO() ? setVAOEXT : setVAOEmulated,\n    clear: extVAO() ? destroyVAOEXT : function () {}\n  }\n\n  function destroyBuffer (buffer) {\n    for (var i = 0; i < attributeBindings.length; ++i) {\n      var record = attributeBindings[i]\n      if (record.buffer === buffer) {\n        gl.disableVertexAttribArray(i)\n        record.buffer = null\n      }\n    }\n  }\n\n  function extVAO () {\n    return extensions.oes_vertex_array_object\n  }\n\n  function extInstanced () {\n    return extensions.angle_instanced_arrays\n  }\n\n  function getVAO (vao) {\n    if (typeof vao === 'function' && vao._vao) {\n      return vao._vao\n    }\n    return null\n  }\n\n  function setVAOEXT (vao) {\n    if (vao === state.currentVAO) {\n      return\n    }\n    var ext = extVAO()\n    if (vao) {\n      ext.bindVertexArrayOES(vao.vao)\n    } else {\n      ext.bindVertexArrayOES(null)\n    }\n    state.currentVAO = vao\n  }\n\n  function setVAOEmulated (vao) {\n    if (vao === state.currentVAO) {\n      return\n    }\n    if (vao) {\n      vao.bindAttrs()\n    } else {\n      var exti = extInstanced()\n      for (var i = 0; i < attributeBindings.length; ++i) {\n        var binding = attributeBindings[i]\n        if (binding.buffer) {\n          gl.enableVertexAttribArray(i)\n          binding.buffer.bind()\n          gl.vertexAttribPointer(i, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset)\n          if (exti && binding.divisor) {\n            exti.vertexAttribDivisorANGLE(i, binding.divisor)\n          }\n        } else {\n          gl.disableVertexAttribArray(i)\n          gl.vertexAttrib4f(i, binding.x, binding.y, binding.z, binding.w)\n        }\n      }\n      if (drawState.elements) {\n        gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, drawState.elements.buffer.buffer)\n      } else {\n        gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null)\n      }\n    }\n    state.currentVAO = vao\n  }\n\n  function destroyVAOEXT () {\n    values(vaoSet).forEach(function (vao) {\n      vao.destroy()\n    })\n  }\n\n  function REGLVAO () {\n    this.id = ++vaoCount\n    this.attributes = []\n    this.elements = null\n    this.ownsElements = false\n    this.count = 0\n    this.offset = 0\n    this.instances = -1\n    this.primitive = 4\n    var extension = extVAO()\n    if (extension) {\n      this.vao = extension.createVertexArrayOES()\n    } else {\n      this.vao = null\n    }\n    vaoSet[this.id] = this\n    this.buffers = []\n  }\n\n  REGLVAO.prototype.bindAttrs = function () {\n    var exti = extInstanced()\n    var attributes = this.attributes\n    for (var i = 0; i < attributes.length; ++i) {\n      var attr = attributes[i]\n      if (attr.buffer) {\n        gl.enableVertexAttribArray(i)\n        gl.bindBuffer(GL_ARRAY_BUFFER$1, attr.buffer.buffer)\n        gl.vertexAttribPointer(i, attr.size, attr.type, attr.normalized, attr.stride, attr.offset)\n        if (exti && attr.divisor) {\n          exti.vertexAttribDivisorANGLE(i, attr.divisor)\n        }\n      } else {\n        gl.disableVertexAttribArray(i)\n        gl.vertexAttrib4f(i, attr.x, attr.y, attr.z, attr.w)\n      }\n    }\n    for (var j = attributes.length; j < NUM_ATTRIBUTES; ++j) {\n      gl.disableVertexAttribArray(j)\n    }\n    var elements = elementState.getElements(this.elements)\n    if (elements) {\n      gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, elements.buffer.buffer)\n    } else {\n      gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null)\n    }\n  }\n\n  REGLVAO.prototype.refresh = function () {\n    var ext = extVAO()\n    if (ext) {\n      ext.bindVertexArrayOES(this.vao)\n      this.bindAttrs()\n      state.currentVAO = null\n      ext.bindVertexArrayOES(null)\n    }\n  }\n\n  REGLVAO.prototype.destroy = function () {\n    if (this.vao) {\n      var extension = extVAO()\n      if (this === state.currentVAO) {\n        state.currentVAO = null\n        extension.bindVertexArrayOES(null)\n      }\n      extension.deleteVertexArrayOES(this.vao)\n      this.vao = null\n    }\n    if (this.ownsElements) {\n      this.elements.destroy()\n      this.elements = null\n      this.ownsElements = false\n    }\n    if (vaoSet[this.id]) {\n      delete vaoSet[this.id]\n      stats.vaoCount -= 1\n    }\n  }\n\n  function restoreVAO () {\n    var ext = extVAO()\n    if (ext) {\n      values(vaoSet).forEach(function (vao) {\n        vao.refresh()\n      })\n    }\n  }\n\n  function createVAO (_attr) {\n    var vao = new REGLVAO()\n    stats.vaoCount += 1\n\n    function updateVAO (options) {\n      var attributes\n      if (Array.isArray(options)) {\n        attributes = options\n        if (vao.elements && vao.ownsElements) {\n          vao.elements.destroy()\n        }\n        vao.elements = null\n        vao.ownsElements = false\n        vao.offset = 0\n        vao.count = 0\n        vao.instances = -1\n        vao.primitive = 4\n      } else {\n        check$1(typeof options === 'object', 'invalid arguments for create vao')\n        check$1('attributes' in options, 'must specify attributes for vao')\n        if (options.elements) {\n          var elements = options.elements\n          if (vao.ownsElements) {\n            if (typeof elements === 'function' && elements._reglType === 'elements') {\n              vao.elements.destroy()\n              vao.ownsElements = false\n            } else {\n              vao.elements(elements)\n              vao.ownsElements = false\n            }\n          } else if (elementState.getElements(options.elements)) {\n            vao.elements = options.elements\n            vao.ownsElements = false\n          } else {\n            vao.elements = elementState.create(options.elements)\n            vao.ownsElements = true\n          }\n        } else {\n          vao.elements = null\n          vao.ownsElements = false\n        }\n        attributes = options.attributes\n\n        // set default vao\n        vao.offset = 0\n        vao.count = -1\n        vao.instances = -1\n        vao.primitive = 4\n\n        // copy element properties\n        if (vao.elements) {\n          vao.count = vao.elements._elements.vertCount\n          vao.primitive = vao.elements._elements.primType\n        }\n\n        if ('offset' in options) {\n          vao.offset = options.offset | 0\n        }\n        if ('count' in options) {\n          vao.count = options.count | 0\n        }\n        if ('instances' in options) {\n          vao.instances = options.instances | 0\n        }\n        if ('primitive' in options) {\n          check$1(options.primitive in primTypes, 'bad primitive type: ' + options.primitive)\n          vao.primitive = primTypes[options.primitive]\n        }\n\n        check$1.optional(() => {\n          var keys = Object.keys(options)\n          for (var i = 0; i < keys.length; ++i) {\n            check$1(VAO_OPTIONS.indexOf(keys[i]) >= 0, 'invalid option for vao: \"' + keys[i] + '\" valid options are ' + VAO_OPTIONS)\n          }\n        })\n        check$1(Array.isArray(attributes), 'attributes must be an array')\n      }\n\n      check$1(attributes.length < NUM_ATTRIBUTES, 'too many attributes')\n      check$1(attributes.length > 0, 'must specify at least one attribute')\n\n      var bufUpdated = {}\n      var nattributes = vao.attributes\n      nattributes.length = attributes.length\n      for (var i = 0; i < attributes.length; ++i) {\n        var spec = attributes[i]\n        var rec = nattributes[i] = new AttributeRecord()\n        var data = spec.data || spec\n        if (Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data)) {\n          var buf\n          if (vao.buffers[i]) {\n            buf = vao.buffers[i]\n            if (isTypedArray(data) && buf._buffer.byteLength >= data.byteLength) {\n              buf.subdata(data)\n            } else {\n              buf.destroy()\n              vao.buffers[i] = null\n            }\n          }\n          if (!vao.buffers[i]) {\n            buf = vao.buffers[i] = bufferState.create(spec, GL_ARRAY_BUFFER$1, false, true)\n          }\n          rec.buffer = bufferState.getBuffer(buf)\n          rec.size = rec.buffer.dimension | 0\n          rec.normalized = false\n          rec.type = rec.buffer.dtype\n          rec.offset = 0\n          rec.stride = 0\n          rec.divisor = 0\n          rec.state = 1\n          bufUpdated[i] = 1\n        } else if (bufferState.getBuffer(spec)) {\n          rec.buffer = bufferState.getBuffer(spec)\n          rec.size = rec.buffer.dimension | 0\n          rec.normalized = false\n          rec.type = rec.buffer.dtype\n          rec.offset = 0\n          rec.stride = 0\n          rec.divisor = 0\n          rec.state = 1\n        } else if (bufferState.getBuffer(spec.buffer)) {\n          rec.buffer = bufferState.getBuffer(spec.buffer)\n          rec.size = ((+spec.size) || rec.buffer.dimension) | 0\n          rec.normalized = !!spec.normalized || false\n          if ('type' in spec) {\n            check$1.parameter(spec.type, glTypes, 'invalid buffer type')\n            rec.type = glTypes[spec.type]\n          } else {\n            rec.type = rec.buffer.dtype\n          }\n          rec.offset = (spec.offset || 0) | 0\n          rec.stride = (spec.stride || 0) | 0\n          rec.divisor = (spec.divisor || 0) | 0\n          rec.state = 1\n\n          check$1(rec.size >= 1 && rec.size <= 4, 'size must be between 1 and 4')\n          check$1(rec.offset >= 0, 'invalid offset')\n          check$1(rec.stride >= 0 && rec.stride <= 255, 'stride must be between 0 and 255')\n          check$1(rec.divisor >= 0, 'divisor must be positive')\n          check$1(!rec.divisor || !!extensions.angle_instanced_arrays, 'ANGLE_instanced_arrays must be enabled to use divisor')\n        } else if ('x' in spec) {\n          check$1(i > 0, 'first attribute must not be a constant')\n          rec.x = +spec.x || 0\n          rec.y = +spec.y || 0\n          rec.z = +spec.z || 0\n          rec.w = +spec.w || 0\n          rec.state = 2\n        } else {\n          check$1(false, 'invalid attribute spec for location ' + i)\n        }\n      }\n\n      // retire unused buffers\n      for (var j = 0; j < vao.buffers.length; ++j) {\n        if (!bufUpdated[j] && vao.buffers[j]) {\n          vao.buffers[j].destroy()\n          vao.buffers[j] = null\n        }\n      }\n\n      vao.refresh()\n      return updateVAO\n    }\n\n    updateVAO.destroy = function () {\n      for (var j = 0; j < vao.buffers.length; ++j) {\n        if (vao.buffers[j]) {\n          vao.buffers[j].destroy()\n        }\n      }\n      vao.buffers.length = 0\n\n      if (vao.ownsElements) {\n        vao.elements.destroy()\n        vao.elements = null\n        vao.ownsElements = false\n      }\n\n      vao.destroy()\n    }\n\n    updateVAO._vao = vao\n    updateVAO._reglType = 'vao'\n\n    return updateVAO(_attr)\n  }\n\n  return state\n}\n\nvar GL_FRAGMENT_SHADER = 35632\nvar GL_VERTEX_SHADER = 35633\n\nvar GL_ACTIVE_UNIFORMS = 0x8B86\nvar GL_ACTIVE_ATTRIBUTES = 0x8B89\n\nfunction wrapShaderState (gl, stringStore, stats, config) {\n  // ===================================================\n  // glsl compilation and linking\n  // ===================================================\n  var fragShaders = {}\n  var vertShaders = {}\n\n  function ActiveInfo (name, id, location, info) {\n    this.name = name\n    this.id = id\n    this.location = location\n    this.info = info\n  }\n\n  function insertActiveInfo (list, info) {\n    for (var i = 0; i < list.length; ++i) {\n      if (list[i].id === info.id) {\n        list[i].location = info.location\n        return\n      }\n    }\n    list.push(info)\n  }\n\n  function getShader (type, id, command) {\n    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders\n    var shader = cache[id]\n\n    if (!shader) {\n      var source = stringStore.str(id)\n      shader = gl.createShader(type)\n      gl.shaderSource(shader, source)\n      gl.compileShader(shader)\n      check$1.shaderError(gl, shader, source, type, command)\n      cache[id] = shader\n    }\n\n    return shader\n  }\n\n  // ===================================================\n  // program linking\n  // ===================================================\n  var programCache = {}\n  var programList = []\n\n  var PROGRAM_COUNTER = 0\n\n  function REGLProgram (fragId, vertId) {\n    this.id = PROGRAM_COUNTER++\n    this.fragId = fragId\n    this.vertId = vertId\n    this.program = null\n    this.uniforms = []\n    this.attributes = []\n    this.refCount = 1\n\n    if (config.profile) {\n      this.stats = {\n        uniformsCount: 0,\n        attributesCount: 0\n      }\n    }\n  }\n\n  function linkProgram (desc, command, attributeLocations) {\n    var i, info\n\n    // -------------------------------\n    // compile & link\n    // -------------------------------\n    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId)\n    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId)\n\n    var program = desc.program = gl.createProgram()\n    gl.attachShader(program, fragShader)\n    gl.attachShader(program, vertShader)\n    if (attributeLocations) {\n      for (i = 0; i < attributeLocations.length; ++i) {\n        var binding = attributeLocations[i]\n        gl.bindAttribLocation(program, binding[0], binding[1])\n      }\n    }\n\n    gl.linkProgram(program)\n    check$1.linkError(\n      gl,\n      program,\n      stringStore.str(desc.fragId),\n      stringStore.str(desc.vertId),\n      command)\n\n    // -------------------------------\n    // grab uniforms\n    // -------------------------------\n    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS)\n    if (config.profile) {\n      desc.stats.uniformsCount = numUniforms\n    }\n    var uniforms = desc.uniforms\n    for (i = 0; i < numUniforms; ++i) {\n      info = gl.getActiveUniform(program, i)\n      if (info) {\n        if (info.size > 1) {\n          for (var j = 0; j < info.size; ++j) {\n            var name = info.name.replace('[0]', '[' + j + ']')\n            insertActiveInfo(uniforms, new ActiveInfo(\n              name,\n              stringStore.id(name),\n              gl.getUniformLocation(program, name),\n              info))\n          }\n        }\n        var uniName = info.name\n        if (info.size > 1) {\n          uniName = uniName.replace('[0]', '')\n        }\n        insertActiveInfo(uniforms, new ActiveInfo(\n          uniName,\n          stringStore.id(uniName),\n          gl.getUniformLocation(program, uniName),\n          info))\n      }\n    }\n\n    // -------------------------------\n    // grab attributes\n    // -------------------------------\n    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES)\n    if (config.profile) {\n      desc.stats.attributesCount = numAttributes\n    }\n\n    var attributes = desc.attributes\n    for (i = 0; i < numAttributes; ++i) {\n      info = gl.getActiveAttrib(program, i)\n      if (info) {\n        insertActiveInfo(attributes, new ActiveInfo(\n          info.name,\n          stringStore.id(info.name),\n          gl.getAttribLocation(program, info.name),\n          info))\n      }\n    }\n  }\n\n  if (config.profile) {\n    stats.getMaxUniformsCount = function () {\n      var m = 0\n      programList.forEach(function (desc) {\n        if (desc.stats.uniformsCount > m) {\n          m = desc.stats.uniformsCount\n        }\n      })\n      return m\n    }\n\n    stats.getMaxAttributesCount = function () {\n      var m = 0\n      programList.forEach(function (desc) {\n        if (desc.stats.attributesCount > m) {\n          m = desc.stats.attributesCount\n        }\n      })\n      return m\n    }\n  }\n\n  function restoreShaders () {\n    fragShaders = {}\n    vertShaders = {}\n    for (var i = 0; i < programList.length; ++i) {\n      linkProgram(programList[i], null, programList[i].attributes.map(function (info) {\n        return [info.location, info.name]\n      }))\n    }\n  }\n\n  return {\n    clear: function () {\n      var deleteShader = gl.deleteShader.bind(gl)\n      values(fragShaders).forEach(deleteShader)\n      fragShaders = {}\n      values(vertShaders).forEach(deleteShader)\n      vertShaders = {}\n\n      programList.forEach(function (desc) {\n        gl.deleteProgram(desc.program)\n      })\n      programList.length = 0\n      programCache = {}\n\n      stats.shaderCount = 0\n    },\n\n    program: function (vertId, fragId, command, attribLocations) {\n      check$1.command(vertId >= 0, 'missing vertex shader', command)\n      check$1.command(fragId >= 0, 'missing fragment shader', command)\n\n      var cache = programCache[fragId]\n      if (!cache) {\n        cache = programCache[fragId] = {}\n      }\n      var prevProgram = cache[vertId]\n      if (prevProgram) {\n        prevProgram.refCount++\n        if (!attribLocations) {\n          return prevProgram\n        }\n      }\n      var program = new REGLProgram(fragId, vertId)\n      stats.shaderCount++\n      linkProgram(program, command, attribLocations)\n      if (!prevProgram) {\n        cache[vertId] = program\n      }\n      programList.push(program)\n      return extend(program, {\n        destroy: function () {\n          program.refCount--\n          if (program.refCount <= 0) {\n            gl.deleteProgram(program.program)\n            var idx = programList.indexOf(program)\n            programList.splice(idx, 1)\n            stats.shaderCount--\n          }\n          // no program is linked to this vert anymore\n          if (cache[program.vertId].refCount <= 0) {\n            gl.deleteShader(vertShaders[program.vertId])\n            delete vertShaders[program.vertId]\n            delete programCache[program.fragId][program.vertId]\n          }\n          // no program is linked to this frag anymore\n          if (!Object.keys(programCache[program.fragId]).length) {\n            gl.deleteShader(fragShaders[program.fragId])\n            delete fragShaders[program.fragId]\n            delete programCache[program.fragId]\n          }\n        }\n      })\n    },\n\n    restore: restoreShaders,\n\n    shader: getShader,\n\n    frag: -1,\n    vert: -1\n  }\n}\n\nvar GL_RGBA$3 = 6408\nvar GL_UNSIGNED_BYTE$7 = 5121\nvar GL_PACK_ALIGNMENT = 0x0D05\nvar GL_FLOAT$7 = 0x1406 // 5126\n\nfunction wrapReadPixels (\n  gl,\n  framebufferState,\n  reglPoll,\n  context,\n  glAttributes,\n  extensions,\n  limits) {\n  function readPixelsImpl (input) {\n    var type\n    if (framebufferState.next === null) {\n      check$1(\n        glAttributes.preserveDrawingBuffer,\n        'you must create a webgl context with \"preserveDrawingBuffer\":true in order to read pixels from the drawing buffer')\n      type = GL_UNSIGNED_BYTE$7\n    } else {\n      check$1(\n        framebufferState.next.colorAttachments[0].texture !== null,\n        'You cannot read from a renderbuffer')\n      type = framebufferState.next.colorAttachments[0].texture._texture.type\n\n      check$1.optional(function () {\n        if (extensions.oes_texture_float) {\n          check$1(\n            type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7,\n            'Reading from a framebuffer is only allowed for the types \\'uint8\\' and \\'float\\'')\n\n          if (type === GL_FLOAT$7) {\n            check$1(limits.readFloat, 'Reading \\'float\\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float')\n          }\n        } else {\n          check$1(\n            type === GL_UNSIGNED_BYTE$7,\n            'Reading from a framebuffer is only allowed for the type \\'uint8\\'')\n        }\n      })\n    }\n\n    var x = 0\n    var y = 0\n    var width = context.framebufferWidth\n    var height = context.framebufferHeight\n    var data = null\n\n    if (isTypedArray(input)) {\n      data = input\n    } else if (input) {\n      check$1.type(input, 'object', 'invalid arguments to regl.read()')\n      x = input.x | 0\n      y = input.y | 0\n      check$1(\n        x >= 0 && x < context.framebufferWidth,\n        'invalid x offset for regl.read')\n      check$1(\n        y >= 0 && y < context.framebufferHeight,\n        'invalid y offset for regl.read')\n      width = (input.width || (context.framebufferWidth - x)) | 0\n      height = (input.height || (context.framebufferHeight - y)) | 0\n      data = input.data || null\n    }\n\n    // sanity check input.data\n    if (data) {\n      if (type === GL_UNSIGNED_BYTE$7) {\n        check$1(\n          data instanceof Uint8Array,\n          'buffer must be \\'Uint8Array\\' when reading from a framebuffer of type \\'uint8\\'')\n      } else if (type === GL_FLOAT$7) {\n        check$1(\n          data instanceof Float32Array,\n          'buffer must be \\'Float32Array\\' when reading from a framebuffer of type \\'float\\'')\n      }\n    }\n\n    check$1(\n      width > 0 && width + x <= context.framebufferWidth,\n      'invalid width for read pixels')\n    check$1(\n      height > 0 && height + y <= context.framebufferHeight,\n      'invalid height for read pixels')\n\n    // Update WebGL state\n    reglPoll()\n\n    // Compute size\n    var size = width * height * 4\n\n    // Allocate data\n    if (!data) {\n      if (type === GL_UNSIGNED_BYTE$7) {\n        data = new Uint8Array(size)\n      } else if (type === GL_FLOAT$7) {\n        data = data || new Float32Array(size)\n      }\n    }\n\n    // Type check\n    check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray')\n    check$1(data.byteLength >= size, 'data buffer for regl.read() too small')\n\n    // Run read pixels\n    gl.pixelStorei(GL_PACK_ALIGNMENT, 4)\n    gl.readPixels(x, y, width, height, GL_RGBA$3,\n      type,\n      data)\n\n    return data\n  }\n\n  function readPixelsFBO (options) {\n    var result\n    framebufferState.setFBO({\n      framebuffer: options.framebuffer\n    }, function () {\n      result = readPixelsImpl(options)\n    })\n    return result\n  }\n\n  function readPixels (options) {\n    if (!options || !('framebuffer' in options)) {\n      return readPixelsImpl(options)\n    } else {\n      return readPixelsFBO(options)\n    }\n  }\n\n  return readPixels\n}\n\nfunction slice (x) {\n  return Array.prototype.slice.call(x)\n}\n\nfunction join (x) {\n  return slice(x).join('')\n}\n\nfunction createEnvironment () {\n  // Unique variable id counter\n  var varCounter = 0\n\n  // Linked values are passed from this scope into the generated code block\n  // Calling link() passes a value into the generated scope and returns\n  // the variable name which it is bound to\n  var linkedNames = []\n  var linkedValues = []\n  function link (value) {\n    for (var i = 0; i < linkedValues.length; ++i) {\n      if (linkedValues[i] === value) {\n        return linkedNames[i]\n      }\n    }\n\n    var name = 'g' + (varCounter++)\n    linkedNames.push(name)\n    linkedValues.push(value)\n    return name\n  }\n\n  // create a code block\n  function block () {\n    var code = []\n    function push () {\n      code.push.apply(code, slice(arguments))\n    }\n\n    var vars = []\n    function def () {\n      var name = 'v' + (varCounter++)\n      vars.push(name)\n\n      if (arguments.length > 0) {\n        code.push(name, '=')\n        code.push.apply(code, slice(arguments))\n        code.push(';')\n      }\n\n      return name\n    }\n\n    return extend(push, {\n      def: def,\n      toString: function () {\n        return join([\n          (vars.length > 0 ? 'var ' + vars.join(',') + ';' : ''),\n          join(code)\n        ])\n      }\n    })\n  }\n\n  function scope () {\n    var entry = block()\n    var exit = block()\n\n    var entryToString = entry.toString\n    var exitToString = exit.toString\n\n    function save (object, prop) {\n      exit(object, prop, '=', entry.def(object, prop), ';')\n    }\n\n    return extend(function () {\n      entry.apply(entry, slice(arguments))\n    }, {\n      def: entry.def,\n      entry: entry,\n      exit: exit,\n      save: save,\n      set: function (object, prop, value) {\n        save(object, prop)\n        entry(object, prop, '=', value, ';')\n      },\n      toString: function () {\n        return entryToString() + exitToString()\n      }\n    })\n  }\n\n  function conditional () {\n    var pred = join(arguments)\n    var thenBlock = scope()\n    var elseBlock = scope()\n\n    var thenToString = thenBlock.toString\n    var elseToString = elseBlock.toString\n\n    return extend(thenBlock, {\n      then: function () {\n        thenBlock.apply(thenBlock, slice(arguments))\n        return this\n      },\n      else: function () {\n        elseBlock.apply(elseBlock, slice(arguments))\n        return this\n      },\n      toString: function () {\n        var elseClause = elseToString()\n        if (elseClause) {\n          elseClause = 'else{' + elseClause + '}'\n        }\n        return join([\n          'if(', pred, '){',\n          thenToString(),\n          '}', elseClause\n        ])\n      }\n    })\n  }\n\n  // procedure list\n  var globalBlock = block()\n  var procedures = {}\n  function proc (name, count) {\n    var args = []\n    function arg () {\n      var name = 'a' + args.length\n      args.push(name)\n      return name\n    }\n\n    count = count || 0\n    for (var i = 0; i < count; ++i) {\n      arg()\n    }\n\n    var body = scope()\n    var bodyToString = body.toString\n\n    var result = procedures[name] = extend(body, {\n      arg: arg,\n      toString: function () {\n        return join([\n          'function(', args.join(), '){',\n          bodyToString(),\n          '}'\n        ])\n      }\n    })\n\n    return result\n  }\n\n  function compile () {\n    var code = ['\"use strict\";',\n      globalBlock,\n      'return {']\n    Object.keys(procedures).forEach(function (name) {\n      code.push('\"', name, '\":', procedures[name].toString(), ',')\n    })\n    code.push('}')\n    var src = join(code)\n      .replace(/;/g, ';\\n')\n      .replace(/}/g, '}\\n')\n      .replace(/{/g, '{\\n')\n    var proc = Function.apply(null, linkedNames.concat(src))\n    return proc.apply(null, linkedValues)\n  }\n\n  return {\n    global: globalBlock,\n    link: link,\n    block: block,\n    proc: proc,\n    scope: scope,\n    cond: conditional,\n    compile: compile\n  }\n}\n\n// \"cute\" names for vector components\nvar CUTE_COMPONENTS = 'xyzw'.split('')\n\nvar GL_UNSIGNED_BYTE$8 = 5121\n\nvar ATTRIB_STATE_POINTER = 1\nvar ATTRIB_STATE_CONSTANT = 2\n\nvar DYN_FUNC$1 = 0\nvar DYN_PROP$1 = 1\nvar DYN_CONTEXT$1 = 2\nvar DYN_STATE$1 = 3\nvar DYN_THUNK = 4\nvar DYN_CONSTANT$1 = 5\nvar DYN_ARRAY$1 = 6\n\nvar S_DITHER = 'dither'\nvar S_BLEND_ENABLE = 'blend.enable'\nvar S_BLEND_COLOR = 'blend.color'\nvar S_BLEND_EQUATION = 'blend.equation'\nvar S_BLEND_FUNC = 'blend.func'\nvar S_DEPTH_ENABLE = 'depth.enable'\nvar S_DEPTH_FUNC = 'depth.func'\nvar S_DEPTH_RANGE = 'depth.range'\nvar S_DEPTH_MASK = 'depth.mask'\nvar S_COLOR_MASK = 'colorMask'\nvar S_CULL_ENABLE = 'cull.enable'\nvar S_CULL_FACE = 'cull.face'\nvar S_FRONT_FACE = 'frontFace'\nvar S_LINE_WIDTH = 'lineWidth'\nvar S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable'\nvar S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset'\nvar S_SAMPLE_ALPHA = 'sample.alpha'\nvar S_SAMPLE_ENABLE = 'sample.enable'\nvar S_SAMPLE_COVERAGE = 'sample.coverage'\nvar S_STENCIL_ENABLE = 'stencil.enable'\nvar S_STENCIL_MASK = 'stencil.mask'\nvar S_STENCIL_FUNC = 'stencil.func'\nvar S_STENCIL_OPFRONT = 'stencil.opFront'\nvar S_STENCIL_OPBACK = 'stencil.opBack'\nvar S_SCISSOR_ENABLE = 'scissor.enable'\nvar S_SCISSOR_BOX = 'scissor.box'\nvar S_VIEWPORT = 'viewport'\n\nvar S_PROFILE = 'profile'\n\nvar S_FRAMEBUFFER = 'framebuffer'\nvar S_VERT = 'vert'\nvar S_FRAG = 'frag'\nvar S_ELEMENTS = 'elements'\nvar S_PRIMITIVE = 'primitive'\nvar S_COUNT = 'count'\nvar S_OFFSET = 'offset'\nvar S_INSTANCES = 'instances'\nvar S_VAO = 'vao'\n\nvar SUFFIX_WIDTH = 'Width'\nvar SUFFIX_HEIGHT = 'Height'\n\nvar S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH\nvar S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT\nvar S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH\nvar S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT\nvar S_DRAWINGBUFFER = 'drawingBuffer'\nvar S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH\nvar S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT\n\nvar NESTED_OPTIONS = [\n  S_BLEND_FUNC,\n  S_BLEND_EQUATION,\n  S_STENCIL_FUNC,\n  S_STENCIL_OPFRONT,\n  S_STENCIL_OPBACK,\n  S_SAMPLE_COVERAGE,\n  S_VIEWPORT,\n  S_SCISSOR_BOX,\n  S_POLYGON_OFFSET_OFFSET\n]\n\nvar GL_ARRAY_BUFFER$2 = 34962\nvar GL_ELEMENT_ARRAY_BUFFER$2 = 34963\n\nvar GL_FRAGMENT_SHADER$1 = 35632\nvar GL_VERTEX_SHADER$1 = 35633\n\nvar GL_TEXTURE_2D$3 = 0x0DE1\nvar GL_TEXTURE_CUBE_MAP$2 = 0x8513\n\nvar GL_CULL_FACE = 0x0B44\nvar GL_BLEND = 0x0BE2\nvar GL_DITHER = 0x0BD0\nvar GL_STENCIL_TEST = 0x0B90\nvar GL_DEPTH_TEST = 0x0B71\nvar GL_SCISSOR_TEST = 0x0C11\nvar GL_POLYGON_OFFSET_FILL = 0x8037\nvar GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E\nvar GL_SAMPLE_COVERAGE = 0x80A0\n\nvar GL_FLOAT$8 = 5126\nvar GL_FLOAT_VEC2 = 35664\nvar GL_FLOAT_VEC3 = 35665\nvar GL_FLOAT_VEC4 = 35666\nvar GL_INT$3 = 5124\nvar GL_INT_VEC2 = 35667\nvar GL_INT_VEC3 = 35668\nvar GL_INT_VEC4 = 35669\nvar GL_BOOL = 35670\nvar GL_BOOL_VEC2 = 35671\nvar GL_BOOL_VEC3 = 35672\nvar GL_BOOL_VEC4 = 35673\nvar GL_FLOAT_MAT2 = 35674\nvar GL_FLOAT_MAT3 = 35675\nvar GL_FLOAT_MAT4 = 35676\nvar GL_SAMPLER_2D = 35678\nvar GL_SAMPLER_CUBE = 35680\n\nvar GL_TRIANGLES$1 = 4\n\nvar GL_FRONT = 1028\nvar GL_BACK = 1029\nvar GL_CW = 0x0900\nvar GL_CCW = 0x0901\nvar GL_MIN_EXT = 0x8007\nvar GL_MAX_EXT = 0x8008\nvar GL_ALWAYS = 519\nvar GL_KEEP = 7680\nvar GL_ZERO = 0\nvar GL_ONE = 1\nvar GL_FUNC_ADD = 0x8006\nvar GL_LESS = 513\n\nvar GL_FRAMEBUFFER$2 = 0x8D40\nvar GL_COLOR_ATTACHMENT0$2 = 0x8CE0\n\nvar blendFuncs = {\n  '0': 0,\n  '1': 1,\n  'zero': 0,\n  'one': 1,\n  'src color': 768,\n  'one minus src color': 769,\n  'src alpha': 770,\n  'one minus src alpha': 771,\n  'dst color': 774,\n  'one minus dst color': 775,\n  'dst alpha': 772,\n  'one minus dst alpha': 773,\n  'constant color': 32769,\n  'one minus constant color': 32770,\n  'constant alpha': 32771,\n  'one minus constant alpha': 32772,\n  'src alpha saturate': 776\n}\n\n// There are invalid values for srcRGB and dstRGB. See:\n// https://www.khronos.org/registry/webgl/specs/1.0/#6.13\n// https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56\nvar invalidBlendCombinations = [\n  'constant color, constant alpha',\n  'one minus constant color, constant alpha',\n  'constant color, one minus constant alpha',\n  'one minus constant color, one minus constant alpha',\n  'constant alpha, constant color',\n  'constant alpha, one minus constant color',\n  'one minus constant alpha, constant color',\n  'one minus constant alpha, one minus constant color'\n]\n\nvar compareFuncs = {\n  'never': 512,\n  'less': 513,\n  '<': 513,\n  'equal': 514,\n  '=': 514,\n  '==': 514,\n  '===': 514,\n  'lequal': 515,\n  '<=': 515,\n  'greater': 516,\n  '>': 516,\n  'notequal': 517,\n  '!=': 517,\n  '!==': 517,\n  'gequal': 518,\n  '>=': 518,\n  'always': 519\n}\n\nvar stencilOps = {\n  '0': 0,\n  'zero': 0,\n  'keep': 7680,\n  'replace': 7681,\n  'increment': 7682,\n  'decrement': 7683,\n  'increment wrap': 34055,\n  'decrement wrap': 34056,\n  'invert': 5386\n}\n\nvar shaderType = {\n  'frag': GL_FRAGMENT_SHADER$1,\n  'vert': GL_VERTEX_SHADER$1\n}\n\nvar orientationType = {\n  'cw': GL_CW,\n  'ccw': GL_CCW\n}\n\nfunction isBufferArgs (x) {\n  return Array.isArray(x) ||\n    isTypedArray(x) ||\n    isNDArrayLike(x)\n}\n\n// Make sure viewport is processed first\nfunction sortState (state) {\n  return state.sort(function (a, b) {\n    if (a === S_VIEWPORT) {\n      return -1\n    } else if (b === S_VIEWPORT) {\n      return 1\n    }\n    return (a < b) ? -1 : 1\n  })\n}\n\nfunction Declaration (thisDep, contextDep, propDep, append) {\n  this.thisDep = thisDep\n  this.contextDep = contextDep\n  this.propDep = propDep\n  this.append = append\n}\n\nfunction isStatic (decl) {\n  return decl && !(decl.thisDep || decl.contextDep || decl.propDep)\n}\n\nfunction createStaticDecl (append) {\n  return new Declaration(false, false, false, append)\n}\n\nfunction createDynamicDecl (dyn, append) {\n  var type = dyn.type\n  if (type === DYN_FUNC$1) {\n    var numArgs = dyn.data.length\n    return new Declaration(\n      true,\n      numArgs >= 1,\n      numArgs >= 2,\n      append)\n  } else if (type === DYN_THUNK) {\n    var data = dyn.data\n    return new Declaration(\n      data.thisDep,\n      data.contextDep,\n      data.propDep,\n      append)\n  } else if (type === DYN_CONSTANT$1) {\n    return new Declaration(\n      false,\n      false,\n      false,\n      append)\n  } else if (type === DYN_ARRAY$1) {\n    var thisDep = false\n    var contextDep = false\n    var propDep = false\n    for (var i = 0; i < dyn.data.length; ++i) {\n      var subDyn = dyn.data[i]\n      if (subDyn.type === DYN_PROP$1) {\n        propDep = true\n      } else if (subDyn.type === DYN_CONTEXT$1) {\n        contextDep = true\n      } else if (subDyn.type === DYN_STATE$1) {\n        thisDep = true\n      } else if (subDyn.type === DYN_FUNC$1) {\n        thisDep = true\n        var subArgs = subDyn.data\n        if (subArgs >= 1) {\n          contextDep = true\n        }\n        if (subArgs >= 2) {\n          propDep = true\n        }\n      } else if (subDyn.type === DYN_THUNK) {\n        thisDep = thisDep || subDyn.data.thisDep\n        contextDep = contextDep || subDyn.data.contextDep\n        propDep = propDep || subDyn.data.propDep\n      }\n    }\n    return new Declaration(\n      thisDep,\n      contextDep,\n      propDep,\n      append)\n  } else {\n    return new Declaration(\n      type === DYN_STATE$1,\n      type === DYN_CONTEXT$1,\n      type === DYN_PROP$1,\n      append)\n  }\n}\n\nvar SCOPE_DECL = new Declaration(false, false, false, function () {})\n\nfunction reglCore (\n  gl,\n  stringStore,\n  extensions,\n  limits,\n  bufferState,\n  elementState,\n  textureState,\n  framebufferState,\n  uniformState,\n  attributeState,\n  shaderState,\n  drawState,\n  contextState,\n  timer,\n  config) {\n  var AttributeRecord = attributeState.Record\n\n  var blendEquations = {\n    'add': 32774,\n    'subtract': 32778,\n    'reverse subtract': 32779\n  }\n  if (extensions.ext_blend_minmax) {\n    blendEquations.min = GL_MIN_EXT\n    blendEquations.max = GL_MAX_EXT\n  }\n\n  var extInstancing = extensions.angle_instanced_arrays\n  var extDrawBuffers = extensions.webgl_draw_buffers\n  var extVertexArrays = extensions.oes_vertex_array_object\n\n  // ===================================================\n  // ===================================================\n  // WEBGL STATE\n  // ===================================================\n  // ===================================================\n  var currentState = {\n    dirty: true,\n    profile: config.profile\n  }\n  var nextState = {}\n  var GL_STATE_NAMES = []\n  var GL_FLAGS = {}\n  var GL_VARIABLES = {}\n\n  function propName (name) {\n    return name.replace('.', '_')\n  }\n\n  function stateFlag (sname, cap, init) {\n    var name = propName(sname)\n    GL_STATE_NAMES.push(sname)\n    nextState[name] = currentState[name] = !!init\n    GL_FLAGS[name] = cap\n  }\n\n  function stateVariable (sname, func, init) {\n    var name = propName(sname)\n    GL_STATE_NAMES.push(sname)\n    if (Array.isArray(init)) {\n      currentState[name] = init.slice()\n      nextState[name] = init.slice()\n    } else {\n      currentState[name] = nextState[name] = init\n    }\n    GL_VARIABLES[name] = func\n  }\n\n  // Dithering\n  stateFlag(S_DITHER, GL_DITHER)\n\n  // Blending\n  stateFlag(S_BLEND_ENABLE, GL_BLEND)\n  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0])\n  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate',\n    [GL_FUNC_ADD, GL_FUNC_ADD])\n  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate',\n    [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO])\n\n  // Depth\n  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true)\n  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS)\n  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1])\n  stateVariable(S_DEPTH_MASK, 'depthMask', true)\n\n  // Color mask\n  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true])\n\n  // Face culling\n  stateFlag(S_CULL_ENABLE, GL_CULL_FACE)\n  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK)\n\n  // Front face orientation\n  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW)\n\n  // Line width\n  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1)\n\n  // Polygon offset\n  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL)\n  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0])\n\n  // Sample coverage\n  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE)\n  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE)\n  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false])\n\n  // Stencil\n  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST)\n  stateVariable(S_STENCIL_MASK, 'stencilMask', -1)\n  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1])\n  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate',\n    [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP])\n  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate',\n    [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP])\n\n  // Scissor\n  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST)\n  stateVariable(S_SCISSOR_BOX, 'scissor',\n    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight])\n\n  // Viewport\n  stateVariable(S_VIEWPORT, S_VIEWPORT,\n    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight])\n\n  // ===================================================\n  // ===================================================\n  // ENVIRONMENT\n  // ===================================================\n  // ===================================================\n  var sharedState = {\n    gl: gl,\n    context: contextState,\n    strings: stringStore,\n    next: nextState,\n    current: currentState,\n    draw: drawState,\n    elements: elementState,\n    buffer: bufferState,\n    shader: shaderState,\n    attributes: attributeState.state,\n    vao: attributeState,\n    uniforms: uniformState,\n    framebuffer: framebufferState,\n    extensions: extensions,\n\n    timer: timer,\n    isBufferArgs: isBufferArgs\n  }\n\n  var sharedConstants = {\n    primTypes: primTypes,\n    compareFuncs: compareFuncs,\n    blendFuncs: blendFuncs,\n    blendEquations: blendEquations,\n    stencilOps: stencilOps,\n    glTypes: glTypes,\n    orientationType: orientationType\n  }\n\n  check$1.optional(function () {\n    sharedState.isArrayLike = isArrayLike\n  })\n\n  if (extDrawBuffers) {\n    sharedConstants.backBuffer = [GL_BACK]\n    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {\n      if (i === 0) {\n        return [0]\n      }\n      return loop(i, function (j) {\n        return GL_COLOR_ATTACHMENT0$2 + j\n      })\n    })\n  }\n\n  var drawCallCounter = 0\n  function createREGLEnvironment () {\n    var env = createEnvironment()\n    var link = env.link\n    var global = env.global\n    env.id = drawCallCounter++\n\n    env.batchId = '0'\n\n    // link shared state\n    var SHARED = link(sharedState)\n    var shared = env.shared = {\n      props: 'a0'\n    }\n    Object.keys(sharedState).forEach(function (prop) {\n      shared[prop] = global.def(SHARED, '.', prop)\n    })\n\n    // Inject runtime assertion stuff for debug builds\n    check$1.optional(function () {\n      env.CHECK = link(check$1)\n      env.commandStr = check$1.guessCommand()\n      env.command = link(env.commandStr)\n      env.assert = function (block, pred, message) {\n        block(\n          'if(!(', pred, '))',\n          this.CHECK, '.commandRaise(', link(message), ',', this.command, ');')\n      }\n\n      sharedConstants.invalidBlendCombinations = invalidBlendCombinations\n    })\n\n    // Copy GL state variables over\n    var nextVars = env.next = {}\n    var currentVars = env.current = {}\n    Object.keys(GL_VARIABLES).forEach(function (variable) {\n      if (Array.isArray(currentState[variable])) {\n        nextVars[variable] = global.def(shared.next, '.', variable)\n        currentVars[variable] = global.def(shared.current, '.', variable)\n      }\n    })\n\n    // Initialize shared constants\n    var constants = env.constants = {}\n    Object.keys(sharedConstants).forEach(function (name) {\n      constants[name] = global.def(JSON.stringify(sharedConstants[name]))\n    })\n\n    // Helper function for calling a block\n    env.invoke = function (block, x) {\n      switch (x.type) {\n        case DYN_FUNC$1:\n          var argList = [\n            'this',\n            shared.context,\n            shared.props,\n            env.batchId\n          ]\n          return block.def(\n            link(x.data), '.call(',\n            argList.slice(0, Math.max(x.data.length + 1, 4)),\n            ')')\n        case DYN_PROP$1:\n          return block.def(shared.props, x.data)\n        case DYN_CONTEXT$1:\n          return block.def(shared.context, x.data)\n        case DYN_STATE$1:\n          return block.def('this', x.data)\n        case DYN_THUNK:\n          x.data.append(env, block)\n          return x.data.ref\n        case DYN_CONSTANT$1:\n          return x.data.toString()\n        case DYN_ARRAY$1:\n          return x.data.map(function (y) {\n            return env.invoke(block, y)\n          })\n      }\n    }\n\n    env.attribCache = {}\n\n    var scopeAttribs = {}\n    env.scopeAttrib = function (name) {\n      var id = stringStore.id(name)\n      if (id in scopeAttribs) {\n        return scopeAttribs[id]\n      }\n      var binding = attributeState.scope[id]\n      if (!binding) {\n        binding = attributeState.scope[id] = new AttributeRecord()\n      }\n      var result = scopeAttribs[id] = link(binding)\n      return result\n    }\n\n    return env\n  }\n\n  // ===================================================\n  // ===================================================\n  // PARSING\n  // ===================================================\n  // ===================================================\n  function parseProfile (options) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    var profileEnable\n    if (S_PROFILE in staticOptions) {\n      var value = !!staticOptions[S_PROFILE]\n      profileEnable = createStaticDecl(function (env, scope) {\n        return value\n      })\n      profileEnable.enable = value\n    } else if (S_PROFILE in dynamicOptions) {\n      var dyn = dynamicOptions[S_PROFILE]\n      profileEnable = createDynamicDecl(dyn, function (env, scope) {\n        return env.invoke(scope, dyn)\n      })\n    }\n\n    return profileEnable\n  }\n\n  function parseFramebuffer (options, env) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    if (S_FRAMEBUFFER in staticOptions) {\n      var framebuffer = staticOptions[S_FRAMEBUFFER]\n      if (framebuffer) {\n        framebuffer = framebufferState.getFramebuffer(framebuffer)\n        check$1.command(framebuffer, 'invalid framebuffer object')\n        return createStaticDecl(function (env, block) {\n          var FRAMEBUFFER = env.link(framebuffer)\n          var shared = env.shared\n          block.set(\n            shared.framebuffer,\n            '.next',\n            FRAMEBUFFER)\n          var CONTEXT = shared.context\n          block.set(\n            CONTEXT,\n            '.' + S_FRAMEBUFFER_WIDTH,\n            FRAMEBUFFER + '.width')\n          block.set(\n            CONTEXT,\n            '.' + S_FRAMEBUFFER_HEIGHT,\n            FRAMEBUFFER + '.height')\n          return FRAMEBUFFER\n        })\n      } else {\n        return createStaticDecl(function (env, scope) {\n          var shared = env.shared\n          scope.set(\n            shared.framebuffer,\n            '.next',\n            'null')\n          var CONTEXT = shared.context\n          scope.set(\n            CONTEXT,\n            '.' + S_FRAMEBUFFER_WIDTH,\n            CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH)\n          scope.set(\n            CONTEXT,\n            '.' + S_FRAMEBUFFER_HEIGHT,\n            CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT)\n          return 'null'\n        })\n      }\n    } else if (S_FRAMEBUFFER in dynamicOptions) {\n      var dyn = dynamicOptions[S_FRAMEBUFFER]\n      return createDynamicDecl(dyn, function (env, scope) {\n        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn)\n        var shared = env.shared\n        var FRAMEBUFFER_STATE = shared.framebuffer\n        var FRAMEBUFFER = scope.def(\n          FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')')\n\n        check$1.optional(function () {\n          env.assert(scope,\n            '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER,\n            'invalid framebuffer object')\n        })\n\n        scope.set(\n          FRAMEBUFFER_STATE,\n          '.next',\n          FRAMEBUFFER)\n        var CONTEXT = shared.context\n        scope.set(\n          CONTEXT,\n          '.' + S_FRAMEBUFFER_WIDTH,\n          FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' +\n          CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH)\n        scope.set(\n          CONTEXT,\n          '.' + S_FRAMEBUFFER_HEIGHT,\n          FRAMEBUFFER +\n          '?' + FRAMEBUFFER + '.height:' +\n          CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT)\n        return FRAMEBUFFER\n      })\n    } else {\n      return null\n    }\n  }\n\n  function parseViewportScissor (options, framebuffer, env) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    function parseBox (param) {\n      if (param in staticOptions) {\n        var box = staticOptions[param]\n        check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr)\n\n        var isStatic = true\n        var x = box.x | 0\n        var y = box.y | 0\n        var w, h\n        if ('width' in box) {\n          w = box.width | 0\n          check$1.command(w >= 0, 'invalid ' + param, env.commandStr)\n        } else {\n          isStatic = false\n        }\n        if ('height' in box) {\n          h = box.height | 0\n          check$1.command(h >= 0, 'invalid ' + param, env.commandStr)\n        } else {\n          isStatic = false\n        }\n\n        return new Declaration(\n          !isStatic && framebuffer && framebuffer.thisDep,\n          !isStatic && framebuffer && framebuffer.contextDep,\n          !isStatic && framebuffer && framebuffer.propDep,\n          function (env, scope) {\n            var CONTEXT = env.shared.context\n            var BOX_W = w\n            if (!('width' in box)) {\n              BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x)\n            }\n            var BOX_H = h\n            if (!('height' in box)) {\n              BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y)\n            }\n            return [x, y, BOX_W, BOX_H]\n          })\n      } else if (param in dynamicOptions) {\n        var dynBox = dynamicOptions[param]\n        var result = createDynamicDecl(dynBox, function (env, scope) {\n          var BOX = env.invoke(scope, dynBox)\n\n          check$1.optional(function () {\n            env.assert(scope,\n              BOX + '&&typeof ' + BOX + '===\"object\"',\n              'invalid ' + param)\n          })\n\n          var CONTEXT = env.shared.context\n          var BOX_X = scope.def(BOX, '.x|0')\n          var BOX_Y = scope.def(BOX, '.y|0')\n          var BOX_W = scope.def(\n            '\"width\" in ', BOX, '?', BOX, '.width|0:',\n            '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')')\n          var BOX_H = scope.def(\n            '\"height\" in ', BOX, '?', BOX, '.height|0:',\n            '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')')\n\n          check$1.optional(function () {\n            env.assert(scope,\n              BOX_W + '>=0&&' +\n              BOX_H + '>=0',\n              'invalid ' + param)\n          })\n\n          return [BOX_X, BOX_Y, BOX_W, BOX_H]\n        })\n        if (framebuffer) {\n          result.thisDep = result.thisDep || framebuffer.thisDep\n          result.contextDep = result.contextDep || framebuffer.contextDep\n          result.propDep = result.propDep || framebuffer.propDep\n        }\n        return result\n      } else if (framebuffer) {\n        return new Declaration(\n          framebuffer.thisDep,\n          framebuffer.contextDep,\n          framebuffer.propDep,\n          function (env, scope) {\n            var CONTEXT = env.shared.context\n            return [\n              0, 0,\n              scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH),\n              scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)]\n          })\n      } else {\n        return null\n      }\n    }\n\n    var viewport = parseBox(S_VIEWPORT)\n\n    if (viewport) {\n      var prevViewport = viewport\n      viewport = new Declaration(\n        viewport.thisDep,\n        viewport.contextDep,\n        viewport.propDep,\n        function (env, scope) {\n          var VIEWPORT = prevViewport.append(env, scope)\n          var CONTEXT = env.shared.context\n          scope.set(\n            CONTEXT,\n            '.' + S_VIEWPORT_WIDTH,\n            VIEWPORT[2])\n          scope.set(\n            CONTEXT,\n            '.' + S_VIEWPORT_HEIGHT,\n            VIEWPORT[3])\n          return VIEWPORT\n        })\n    }\n\n    return {\n      viewport: viewport,\n      scissor_box: parseBox(S_SCISSOR_BOX)\n    }\n  }\n\n  function parseAttribLocations (options, attributes) {\n    var staticOptions = options.static\n    var staticProgram =\n      typeof staticOptions[S_FRAG] === 'string' &&\n      typeof staticOptions[S_VERT] === 'string'\n    if (staticProgram) {\n      if (Object.keys(attributes.dynamic).length > 0) {\n        return null\n      }\n      var staticAttributes = attributes.static\n      var sAttributes = Object.keys(staticAttributes)\n      if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === 'number') {\n        var bindings = []\n        for (var i = 0; i < sAttributes.length; ++i) {\n          check$1(typeof staticAttributes[sAttributes[i]] === 'number', 'must specify all vertex attribute locations when using vaos')\n          bindings.push([staticAttributes[sAttributes[i]] | 0, sAttributes[i]])\n        }\n        return bindings\n      }\n    }\n    return null\n  }\n\n  function parseProgram (options, env, attribLocations) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    function parseShader (name) {\n      if (name in staticOptions) {\n        var id = stringStore.id(staticOptions[name])\n        check$1.optional(function () {\n          shaderState.shader(shaderType[name], id, check$1.guessCommand())\n        })\n        var result = createStaticDecl(function () {\n          return id\n        })\n        result.id = id\n        return result\n      } else if (name in dynamicOptions) {\n        var dyn = dynamicOptions[name]\n        return createDynamicDecl(dyn, function (env, scope) {\n          var str = env.invoke(scope, dyn)\n          var id = scope.def(env.shared.strings, '.id(', str, ')')\n          check$1.optional(function () {\n            scope(\n              env.shared.shader, '.shader(',\n              shaderType[name], ',',\n              id, ',',\n              env.command, ');')\n          })\n          return id\n        })\n      }\n      return null\n    }\n\n    var frag = parseShader(S_FRAG)\n    var vert = parseShader(S_VERT)\n\n    var program = null\n    var progVar\n    if (isStatic(frag) && isStatic(vert)) {\n      program = shaderState.program(vert.id, frag.id, null, attribLocations)\n      progVar = createStaticDecl(function (env, scope) {\n        return env.link(program)\n      })\n    } else {\n      progVar = new Declaration(\n        (frag && frag.thisDep) || (vert && vert.thisDep),\n        (frag && frag.contextDep) || (vert && vert.contextDep),\n        (frag && frag.propDep) || (vert && vert.propDep),\n        function (env, scope) {\n          var SHADER_STATE = env.shared.shader\n          var fragId\n          if (frag) {\n            fragId = frag.append(env, scope)\n          } else {\n            fragId = scope.def(SHADER_STATE, '.', S_FRAG)\n          }\n          var vertId\n          if (vert) {\n            vertId = vert.append(env, scope)\n          } else {\n            vertId = scope.def(SHADER_STATE, '.', S_VERT)\n          }\n          var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId\n          check$1.optional(function () {\n            progDef += ',' + env.command\n          })\n          return scope.def(progDef + ')')\n        })\n    }\n\n    return {\n      frag: frag,\n      vert: vert,\n      progVar: progVar,\n      program: program\n    }\n  }\n\n  function parseDraw (options, env) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    // TODO: should use VAO to get default values for offset properties\n    // should move vao parse into here and out of the old stuff\n\n    var staticDraw = {}\n    var vaoActive = false\n\n    function parseVAO () {\n      if (S_VAO in staticOptions) {\n        var vao = staticOptions[S_VAO]\n        if (vao !== null && attributeState.getVAO(vao) === null) {\n          vao = attributeState.createVAO(vao)\n        }\n\n        vaoActive = true\n        staticDraw.vao = vao\n\n        return createStaticDecl(function (env) {\n          var vaoRef = attributeState.getVAO(vao)\n          if (vaoRef) {\n            return env.link(vaoRef)\n          } else {\n            return 'null'\n          }\n        })\n      } else if (S_VAO in dynamicOptions) {\n        vaoActive = true\n        var dyn = dynamicOptions[S_VAO]\n        return createDynamicDecl(dyn, function (env, scope) {\n          var vaoRef = env.invoke(scope, dyn)\n          return scope.def(env.shared.vao + '.getVAO(' + vaoRef + ')')\n        })\n      }\n      return null\n    }\n\n    var vao = parseVAO()\n\n    var elementsActive = false\n\n    function parseElements () {\n      if (S_ELEMENTS in staticOptions) {\n        var elements = staticOptions[S_ELEMENTS]\n        staticDraw.elements = elements\n        if (isBufferArgs(elements)) {\n          var e = staticDraw.elements = elementState.create(elements, true)\n          elements = elementState.getElements(e)\n          elementsActive = true\n        } else if (elements) {\n          elements = elementState.getElements(elements)\n          elementsActive = true\n          check$1.command(elements, 'invalid elements', env.commandStr)\n        }\n\n        var result = createStaticDecl(function (env, scope) {\n          if (elements) {\n            var result = env.link(elements)\n            env.ELEMENTS = result\n            return result\n          }\n          env.ELEMENTS = null\n          return null\n        })\n        result.value = elements\n        return result\n      } else if (S_ELEMENTS in dynamicOptions) {\n        elementsActive = true\n\n        var dyn = dynamicOptions[S_ELEMENTS]\n        return createDynamicDecl(dyn, function (env, scope) {\n          var shared = env.shared\n\n          var IS_BUFFER_ARGS = shared.isBufferArgs\n          var ELEMENT_STATE = shared.elements\n\n          var elementDefn = env.invoke(scope, dyn)\n          var elements = scope.def('null')\n          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')')\n\n          var ifte = env.cond(elementStream)\n            .then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');')\n            .else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');')\n\n          check$1.optional(function () {\n            env.assert(ifte.else,\n              '!' + elementDefn + '||' + elements,\n              'invalid elements')\n          })\n\n          scope.entry(ifte)\n          scope.exit(\n            env.cond(elementStream)\n              .then(ELEMENT_STATE, '.destroyStream(', elements, ');'))\n\n          env.ELEMENTS = elements\n\n          return elements\n        })\n      } else if (vaoActive) {\n        return new Declaration(\n          vao.thisDep,\n          vao.contextDep,\n          vao.propDep,\n          function (env, scope) {\n            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.elements + '.getElements(' + env.shared.vao + '.currentVAO.elements):null')\n          })\n      }\n      return null\n    }\n\n    var elements = parseElements()\n\n    function parsePrimitive () {\n      if (S_PRIMITIVE in staticOptions) {\n        var primitive = staticOptions[S_PRIMITIVE]\n        staticDraw.primitive = primitive\n        check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr)\n        return createStaticDecl(function (env, scope) {\n          return primTypes[primitive]\n        })\n      } else if (S_PRIMITIVE in dynamicOptions) {\n        var dynPrimitive = dynamicOptions[S_PRIMITIVE]\n        return createDynamicDecl(dynPrimitive, function (env, scope) {\n          var PRIM_TYPES = env.constants.primTypes\n          var prim = env.invoke(scope, dynPrimitive)\n          check$1.optional(function () {\n            env.assert(scope,\n              prim + ' in ' + PRIM_TYPES,\n              'invalid primitive, must be one of ' + Object.keys(primTypes))\n          })\n          return scope.def(PRIM_TYPES, '[', prim, ']')\n        })\n      } else if (elementsActive) {\n        if (isStatic(elements)) {\n          if (elements.value) {\n            return createStaticDecl(function (env, scope) {\n              return scope.def(env.ELEMENTS, '.primType')\n            })\n          } else {\n            return createStaticDecl(function () {\n              return GL_TRIANGLES$1\n            })\n          }\n        } else {\n          return new Declaration(\n            elements.thisDep,\n            elements.contextDep,\n            elements.propDep,\n            function (env, scope) {\n              var elements = env.ELEMENTS\n              return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1)\n            })\n        }\n      } else if (vaoActive) {\n        return new Declaration(\n          vao.thisDep,\n          vao.contextDep,\n          vao.propDep,\n          function (env, scope) {\n            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.primitive:' + GL_TRIANGLES$1)\n          })\n      }\n      return null\n    }\n\n    function parseParam (param, isOffset) {\n      if (param in staticOptions) {\n        var value = staticOptions[param] | 0\n        if (isOffset) {\n          staticDraw.offset = value\n        } else {\n          staticDraw.instances = value\n        }\n        check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr)\n        return createStaticDecl(function (env, scope) {\n          if (isOffset) {\n            env.OFFSET = value\n          }\n          return value\n        })\n      } else if (param in dynamicOptions) {\n        var dynValue = dynamicOptions[param]\n        return createDynamicDecl(dynValue, function (env, scope) {\n          var result = env.invoke(scope, dynValue)\n          if (isOffset) {\n            env.OFFSET = result\n            check$1.optional(function () {\n              env.assert(scope,\n                result + '>=0',\n                'invalid ' + param)\n            })\n          }\n          return result\n        })\n      } else if (isOffset) {\n        if (elementsActive) {\n          return createStaticDecl(function (env, scope) {\n            env.OFFSET = 0\n            return 0\n          })\n        } else if (vaoActive) {\n          return new Declaration(\n            vao.thisDep,\n            vao.contextDep,\n            vao.propDep,\n            function (env, scope) {\n              return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.offset:0')\n            })\n        }\n      } else if (vaoActive) {\n        return new Declaration(\n          vao.thisDep,\n          vao.contextDep,\n          vao.propDep,\n          function (env, scope) {\n            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.instances:-1')\n          })\n      }\n      return null\n    }\n\n    var OFFSET = parseParam(S_OFFSET, true)\n\n    function parseVertCount () {\n      if (S_COUNT in staticOptions) {\n        var count = staticOptions[S_COUNT] | 0\n        staticDraw.count = count\n        check$1.command(\n          typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr)\n        return createStaticDecl(function () {\n          return count\n        })\n      } else if (S_COUNT in dynamicOptions) {\n        var dynCount = dynamicOptions[S_COUNT]\n        return createDynamicDecl(dynCount, function (env, scope) {\n          var result = env.invoke(scope, dynCount)\n          check$1.optional(function () {\n            env.assert(scope,\n              'typeof ' + result + '===\"number\"&&' +\n              result + '>=0&&' +\n              result + '===(' + result + '|0)',\n              'invalid vertex count')\n          })\n          return result\n        })\n      } else if (elementsActive) {\n        if (isStatic(elements)) {\n          if (elements) {\n            if (OFFSET) {\n              return new Declaration(\n                OFFSET.thisDep,\n                OFFSET.contextDep,\n                OFFSET.propDep,\n                function (env, scope) {\n                  var result = scope.def(\n                    env.ELEMENTS, '.vertCount-', env.OFFSET)\n\n                  check$1.optional(function () {\n                    env.assert(scope,\n                      result + '>=0',\n                      'invalid vertex offset/element buffer too small')\n                  })\n\n                  return result\n                })\n            } else {\n              return createStaticDecl(function (env, scope) {\n                return scope.def(env.ELEMENTS, '.vertCount')\n              })\n            }\n          } else {\n            var result = createStaticDecl(function () {\n              return -1\n            })\n            check$1.optional(function () {\n              result.MISSING = true\n            })\n            return result\n          }\n        } else {\n          var variable = new Declaration(\n            elements.thisDep || OFFSET.thisDep,\n            elements.contextDep || OFFSET.contextDep,\n            elements.propDep || OFFSET.propDep,\n            function (env, scope) {\n              var elements = env.ELEMENTS\n              if (env.OFFSET) {\n                return scope.def(elements, '?', elements, '.vertCount-',\n                  env.OFFSET, ':-1')\n              }\n              return scope.def(elements, '?', elements, '.vertCount:-1')\n            })\n          check$1.optional(function () {\n            variable.DYNAMIC = true\n          })\n          return variable\n        }\n      } else if (vaoActive) {\n        var countVariable = new Declaration(\n          vao.thisDep,\n          vao.contextDep,\n          vao.propDep,\n          function (env, scope) {\n            return scope.def(env.shared.vao, '.currentVAO?', env.shared.vao, '.currentVAO.count:-1')\n          })\n        return countVariable\n      }\n      return null\n    }\n\n    var primitive = parsePrimitive()\n    var count = parseVertCount()\n    var instances = parseParam(S_INSTANCES, false)\n\n    return {\n      elements: elements,\n      primitive: primitive,\n      count: count,\n      instances: instances,\n      offset: OFFSET,\n      vao: vao,\n\n      vaoActive: vaoActive,\n      elementsActive: elementsActive,\n\n      // static draw props\n      static: staticDraw\n    }\n  }\n\n  function parseGLState (options, env) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    var STATE = {}\n\n    GL_STATE_NAMES.forEach(function (prop) {\n      var param = propName(prop)\n\n      function parseParam (parseStatic, parseDynamic) {\n        if (prop in staticOptions) {\n          var value = parseStatic(staticOptions[prop])\n          STATE[param] = createStaticDecl(function () {\n            return value\n          })\n        } else if (prop in dynamicOptions) {\n          var dyn = dynamicOptions[prop]\n          STATE[param] = createDynamicDecl(dyn, function (env, scope) {\n            return parseDynamic(env, scope, env.invoke(scope, dyn))\n          })\n        }\n      }\n\n      switch (prop) {\n        case S_CULL_ENABLE:\n        case S_BLEND_ENABLE:\n        case S_DITHER:\n        case S_STENCIL_ENABLE:\n        case S_DEPTH_ENABLE:\n        case S_SCISSOR_ENABLE:\n        case S_POLYGON_OFFSET_ENABLE:\n        case S_SAMPLE_ALPHA:\n        case S_SAMPLE_ENABLE:\n        case S_DEPTH_MASK:\n          return parseParam(\n            function (value) {\n              check$1.commandType(value, 'boolean', prop, env.commandStr)\n              return value\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  'typeof ' + value + '===\"boolean\"',\n                  'invalid flag ' + prop, env.commandStr)\n              })\n              return value\n            })\n\n        case S_DEPTH_FUNC:\n          return parseParam(\n            function (value) {\n              check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr)\n              return compareFuncs[value]\n            },\n            function (env, scope, value) {\n              var COMPARE_FUNCS = env.constants.compareFuncs\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + ' in ' + COMPARE_FUNCS,\n                  'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs))\n              })\n              return scope.def(COMPARE_FUNCS, '[', value, ']')\n            })\n\n        case S_DEPTH_RANGE:\n          return parseParam(\n            function (value) {\n              check$1.command(\n                isArrayLike(value) &&\n                value.length === 2 &&\n                typeof value[0] === 'number' &&\n                typeof value[1] === 'number' &&\n                value[0] <= value[1],\n                'depth range is 2d array',\n                env.commandStr)\n              return value\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  env.shared.isArrayLike + '(' + value + ')&&' +\n                  value + '.length===2&&' +\n                  'typeof ' + value + '[0]===\"number\"&&' +\n                  'typeof ' + value + '[1]===\"number\"&&' +\n                  value + '[0]<=' + value + '[1]',\n                  'depth range must be a 2d array')\n              })\n\n              var Z_NEAR = scope.def('+', value, '[0]')\n              var Z_FAR = scope.def('+', value, '[1]')\n              return [Z_NEAR, Z_FAR]\n            })\n\n        case S_BLEND_FUNC:\n          return parseParam(\n            function (value) {\n              check$1.commandType(value, 'object', 'blend.func', env.commandStr)\n              var srcRGB = ('srcRGB' in value ? value.srcRGB : value.src)\n              var srcAlpha = ('srcAlpha' in value ? value.srcAlpha : value.src)\n              var dstRGB = ('dstRGB' in value ? value.dstRGB : value.dst)\n              var dstAlpha = ('dstAlpha' in value ? value.dstAlpha : value.dst)\n              check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr)\n              check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr)\n              check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr)\n              check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr)\n\n              check$1.command(\n                (invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1),\n                'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr)\n\n              return [\n                blendFuncs[srcRGB],\n                blendFuncs[dstRGB],\n                blendFuncs[srcAlpha],\n                blendFuncs[dstAlpha]\n              ]\n            },\n            function (env, scope, value) {\n              var BLEND_FUNCS = env.constants.blendFuncs\n\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + '&&typeof ' + value + '===\"object\"',\n                  'invalid blend func, must be an object')\n              })\n\n              function read (prefix, suffix) {\n                var func = scope.def(\n                  '\"', prefix, suffix, '\" in ', value,\n                  '?', value, '.', prefix, suffix,\n                  ':', value, '.', prefix)\n\n                check$1.optional(function () {\n                  env.assert(scope,\n                    func + ' in ' + BLEND_FUNCS,\n                    'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs))\n                })\n\n                return func\n              }\n\n              var srcRGB = read('src', 'RGB')\n              var dstRGB = read('dst', 'RGB')\n\n              check$1.optional(function () {\n                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations\n\n                env.assert(scope,\n                  INVALID_BLEND_COMBINATIONS +\n                           '.indexOf(' + srcRGB + '+\", \"+' + dstRGB + ') === -1 ',\n                  'unallowed blending combination for (srcRGB, dstRGB)'\n                )\n              })\n\n              var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']')\n              var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']')\n              var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']')\n              var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']')\n\n              return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA]\n            })\n\n        case S_BLEND_EQUATION:\n          return parseParam(\n            function (value) {\n              if (typeof value === 'string') {\n                check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr)\n                return [\n                  blendEquations[value],\n                  blendEquations[value]\n                ]\n              } else if (typeof value === 'object') {\n                check$1.commandParameter(\n                  value.rgb, blendEquations, prop + '.rgb', env.commandStr)\n                check$1.commandParameter(\n                  value.alpha, blendEquations, prop + '.alpha', env.commandStr)\n                return [\n                  blendEquations[value.rgb],\n                  blendEquations[value.alpha]\n                ]\n              } else {\n                check$1.commandRaise('invalid blend.equation', env.commandStr)\n              }\n            },\n            function (env, scope, value) {\n              var BLEND_EQUATIONS = env.constants.blendEquations\n\n              var RGB = scope.def()\n              var ALPHA = scope.def()\n\n              var ifte = env.cond('typeof ', value, '===\"string\"')\n\n              check$1.optional(function () {\n                function checkProp (block, name, value) {\n                  env.assert(block,\n                    value + ' in ' + BLEND_EQUATIONS,\n                    'invalid ' + name + ', must be one of ' + Object.keys(blendEquations))\n                }\n                checkProp(ifte.then, prop, value)\n\n                env.assert(ifte.else,\n                  value + '&&typeof ' + value + '===\"object\"',\n                  'invalid ' + prop)\n                checkProp(ifte.else, prop + '.rgb', value + '.rgb')\n                checkProp(ifte.else, prop + '.alpha', value + '.alpha')\n              })\n\n              ifte.then(\n                RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];')\n              ifte.else(\n                RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];',\n                ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];')\n\n              scope(ifte)\n\n              return [RGB, ALPHA]\n            })\n\n        case S_BLEND_COLOR:\n          return parseParam(\n            function (value) {\n              check$1.command(\n                isArrayLike(value) &&\n                value.length === 4,\n                'blend.color must be a 4d array', env.commandStr)\n              return loop(4, function (i) {\n                return +value[i]\n              })\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  env.shared.isArrayLike + '(' + value + ')&&' +\n                  value + '.length===4',\n                  'blend.color must be a 4d array')\n              })\n              return loop(4, function (i) {\n                return scope.def('+', value, '[', i, ']')\n              })\n            })\n\n        case S_STENCIL_MASK:\n          return parseParam(\n            function (value) {\n              check$1.commandType(value, 'number', param, env.commandStr)\n              return value | 0\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  'typeof ' + value + '===\"number\"',\n                  'invalid stencil.mask')\n              })\n              return scope.def(value, '|0')\n            })\n\n        case S_STENCIL_FUNC:\n          return parseParam(\n            function (value) {\n              check$1.commandType(value, 'object', param, env.commandStr)\n              var cmp = value.cmp || 'keep'\n              var ref = value.ref || 0\n              var mask = 'mask' in value ? value.mask : -1\n              check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr)\n              check$1.commandType(ref, 'number', prop + '.ref', env.commandStr)\n              check$1.commandType(mask, 'number', prop + '.mask', env.commandStr)\n              return [\n                compareFuncs[cmp],\n                ref,\n                mask\n              ]\n            },\n            function (env, scope, value) {\n              var COMPARE_FUNCS = env.constants.compareFuncs\n              check$1.optional(function () {\n                function assert () {\n                  env.assert(scope,\n                    Array.prototype.join.call(arguments, ''),\n                    'invalid stencil.func')\n                }\n                assert(value + '&&typeof ', value, '===\"object\"')\n                assert('!(\"cmp\" in ', value, ')||(',\n                  value, '.cmp in ', COMPARE_FUNCS, ')')\n              })\n              var cmp = scope.def(\n                '\"cmp\" in ', value,\n                '?', COMPARE_FUNCS, '[', value, '.cmp]',\n                ':', GL_KEEP)\n              var ref = scope.def(value, '.ref|0')\n              var mask = scope.def(\n                '\"mask\" in ', value,\n                '?', value, '.mask|0:-1')\n              return [cmp, ref, mask]\n            })\n\n        case S_STENCIL_OPFRONT:\n        case S_STENCIL_OPBACK:\n          return parseParam(\n            function (value) {\n              check$1.commandType(value, 'object', param, env.commandStr)\n              var fail = value.fail || 'keep'\n              var zfail = value.zfail || 'keep'\n              var zpass = value.zpass || 'keep'\n              check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr)\n              check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr)\n              check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr)\n              return [\n                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,\n                stencilOps[fail],\n                stencilOps[zfail],\n                stencilOps[zpass]\n              ]\n            },\n            function (env, scope, value) {\n              var STENCIL_OPS = env.constants.stencilOps\n\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + '&&typeof ' + value + '===\"object\"',\n                  'invalid ' + prop)\n              })\n\n              function read (name) {\n                check$1.optional(function () {\n                  env.assert(scope,\n                    '!(\"' + name + '\" in ' + value + ')||' +\n                    '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')',\n                    'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps))\n                })\n\n                return scope.def(\n                  '\"', name, '\" in ', value,\n                  '?', STENCIL_OPS, '[', value, '.', name, ']:',\n                  GL_KEEP)\n              }\n\n              return [\n                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,\n                read('fail'),\n                read('zfail'),\n                read('zpass')\n              ]\n            })\n\n        case S_POLYGON_OFFSET_OFFSET:\n          return parseParam(\n            function (value) {\n              check$1.commandType(value, 'object', param, env.commandStr)\n              var factor = value.factor | 0\n              var units = value.units | 0\n              check$1.commandType(factor, 'number', param + '.factor', env.commandStr)\n              check$1.commandType(units, 'number', param + '.units', env.commandStr)\n              return [factor, units]\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + '&&typeof ' + value + '===\"object\"',\n                  'invalid ' + prop)\n              })\n\n              var FACTOR = scope.def(value, '.factor|0')\n              var UNITS = scope.def(value, '.units|0')\n\n              return [FACTOR, UNITS]\n            })\n\n        case S_CULL_FACE:\n          return parseParam(\n            function (value) {\n              var face = 0\n              if (value === 'front') {\n                face = GL_FRONT\n              } else if (value === 'back') {\n                face = GL_BACK\n              }\n              check$1.command(!!face, param, env.commandStr)\n              return face\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + '===\"front\"||' +\n                  value + '===\"back\"',\n                  'invalid cull.face')\n              })\n              return scope.def(value, '===\"front\"?', GL_FRONT, ':', GL_BACK)\n            })\n\n        case S_LINE_WIDTH:\n          return parseParam(\n            function (value) {\n              check$1.command(\n                typeof value === 'number' &&\n                value >= limits.lineWidthDims[0] &&\n                value <= limits.lineWidthDims[1],\n                'invalid line width, must be a positive number between ' +\n                limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr)\n              return value\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  'typeof ' + value + '===\"number\"&&' +\n                  value + '>=' + limits.lineWidthDims[0] + '&&' +\n                  value + '<=' + limits.lineWidthDims[1],\n                  'invalid line width')\n              })\n\n              return value\n            })\n\n        case S_FRONT_FACE:\n          return parseParam(\n            function (value) {\n              check$1.commandParameter(value, orientationType, param, env.commandStr)\n              return orientationType[value]\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + '===\"cw\"||' +\n                  value + '===\"ccw\"',\n                  'invalid frontFace, must be one of cw,ccw')\n              })\n              return scope.def(value + '===\"cw\"?' + GL_CW + ':' + GL_CCW)\n            })\n\n        case S_COLOR_MASK:\n          return parseParam(\n            function (value) {\n              check$1.command(\n                isArrayLike(value) && value.length === 4,\n                'color.mask must be length 4 array', env.commandStr)\n              return value.map(function (v) { return !!v })\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  env.shared.isArrayLike + '(' + value + ')&&' +\n                  value + '.length===4',\n                  'invalid color.mask')\n              })\n              return loop(4, function (i) {\n                return '!!' + value + '[' + i + ']'\n              })\n            })\n\n        case S_SAMPLE_COVERAGE:\n          return parseParam(\n            function (value) {\n              check$1.command(typeof value === 'object' && value, param, env.commandStr)\n              var sampleValue = 'value' in value ? value.value : 1\n              var sampleInvert = !!value.invert\n              check$1.command(\n                typeof sampleValue === 'number' &&\n                sampleValue >= 0 && sampleValue <= 1,\n                'sample.coverage.value must be a number between 0 and 1', env.commandStr)\n              return [sampleValue, sampleInvert]\n            },\n            function (env, scope, value) {\n              check$1.optional(function () {\n                env.assert(scope,\n                  value + '&&typeof ' + value + '===\"object\"',\n                  'invalid sample.coverage')\n              })\n              var VALUE = scope.def(\n                '\"value\" in ', value, '?+', value, '.value:1')\n              var INVERT = scope.def('!!', value, '.invert')\n              return [VALUE, INVERT]\n            })\n      }\n    })\n\n    return STATE\n  }\n\n  function parseUniforms (uniforms, env) {\n    var staticUniforms = uniforms.static\n    var dynamicUniforms = uniforms.dynamic\n\n    var UNIFORMS = {}\n\n    Object.keys(staticUniforms).forEach(function (name) {\n      var value = staticUniforms[name]\n      var result\n      if (typeof value === 'number' ||\n          typeof value === 'boolean') {\n        result = createStaticDecl(function () {\n          return value\n        })\n      } else if (typeof value === 'function') {\n        var reglType = value._reglType\n        if (reglType === 'texture2d' ||\n            reglType === 'textureCube') {\n          result = createStaticDecl(function (env) {\n            return env.link(value)\n          })\n        } else if (reglType === 'framebuffer' ||\n                   reglType === 'framebufferCube') {\n          check$1.command(value.color.length > 0,\n            'missing color attachment for framebuffer sent to uniform \"' + name + '\"', env.commandStr)\n          result = createStaticDecl(function (env) {\n            return env.link(value.color[0])\n          })\n        } else {\n          check$1.commandRaise('invalid data for uniform \"' + name + '\"', env.commandStr)\n        }\n      } else if (isArrayLike(value)) {\n        result = createStaticDecl(function (env) {\n          var ITEM = env.global.def('[',\n            loop(value.length, function (i) {\n              check$1.command(\n                typeof value[i] === 'number' ||\n                typeof value[i] === 'boolean',\n                'invalid uniform ' + name, env.commandStr)\n              return value[i]\n            }), ']')\n          return ITEM\n        })\n      } else {\n        check$1.commandRaise('invalid or missing data for uniform \"' + name + '\"', env.commandStr)\n      }\n      result.value = value\n      UNIFORMS[name] = result\n    })\n\n    Object.keys(dynamicUniforms).forEach(function (key) {\n      var dyn = dynamicUniforms[key]\n      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {\n        return env.invoke(scope, dyn)\n      })\n    })\n\n    return UNIFORMS\n  }\n\n  function parseAttributes (attributes, env) {\n    var staticAttributes = attributes.static\n    var dynamicAttributes = attributes.dynamic\n\n    var attributeDefs = {}\n\n    Object.keys(staticAttributes).forEach(function (attribute) {\n      var value = staticAttributes[attribute]\n      var id = stringStore.id(attribute)\n\n      var record = new AttributeRecord()\n      if (isBufferArgs(value)) {\n        record.state = ATTRIB_STATE_POINTER\n        record.buffer = bufferState.getBuffer(\n          bufferState.create(value, GL_ARRAY_BUFFER$2, false, true))\n        record.type = 0\n      } else {\n        var buffer = bufferState.getBuffer(value)\n        if (buffer) {\n          record.state = ATTRIB_STATE_POINTER\n          record.buffer = buffer\n          record.type = 0\n        } else {\n          check$1.command(typeof value === 'object' && value,\n            'invalid data for attribute ' + attribute, env.commandStr)\n          if ('constant' in value) {\n            var constant = value.constant\n            record.buffer = 'null'\n            record.state = ATTRIB_STATE_CONSTANT\n            if (typeof constant === 'number') {\n              record.x = constant\n            } else {\n              check$1.command(\n                isArrayLike(constant) &&\n                constant.length > 0 &&\n                constant.length <= 4,\n                'invalid constant for attribute ' + attribute, env.commandStr)\n              CUTE_COMPONENTS.forEach(function (c, i) {\n                if (i < constant.length) {\n                  record[c] = constant[i]\n                }\n              })\n            }\n          } else {\n            if (isBufferArgs(value.buffer)) {\n              buffer = bufferState.getBuffer(\n                bufferState.create(value.buffer, GL_ARRAY_BUFFER$2, false, true))\n            } else {\n              buffer = bufferState.getBuffer(value.buffer)\n            }\n            check$1.command(!!buffer, 'missing buffer for attribute \"' + attribute + '\"', env.commandStr)\n\n            var offset = value.offset | 0\n            check$1.command(offset >= 0,\n              'invalid offset for attribute \"' + attribute + '\"', env.commandStr)\n\n            var stride = value.stride | 0\n            check$1.command(stride >= 0 && stride < 256,\n              'invalid stride for attribute \"' + attribute + '\", must be integer betweeen [0, 255]', env.commandStr)\n\n            var size = value.size | 0\n            check$1.command(!('size' in value) || (size > 0 && size <= 4),\n              'invalid size for attribute \"' + attribute + '\", must be 1,2,3,4', env.commandStr)\n\n            var normalized = !!value.normalized\n\n            var type = 0\n            if ('type' in value) {\n              check$1.commandParameter(\n                value.type, glTypes,\n                'invalid type for attribute ' + attribute, env.commandStr)\n              type = glTypes[value.type]\n            }\n\n            var divisor = value.divisor | 0\n            check$1.optional(function () {\n              if ('divisor' in value) {\n                check$1.command(divisor === 0 || extInstancing,\n                  'cannot specify divisor for attribute \"' + attribute + '\", instancing not supported', env.commandStr)\n                check$1.command(divisor >= 0,\n                  'invalid divisor for attribute \"' + attribute + '\"', env.commandStr)\n              }\n\n              var command = env.commandStr\n\n              var VALID_KEYS = [\n                'buffer',\n                'offset',\n                'divisor',\n                'normalized',\n                'type',\n                'size',\n                'stride'\n              ]\n\n              Object.keys(value).forEach(function (prop) {\n                check$1.command(\n                  VALID_KEYS.indexOf(prop) >= 0,\n                  'unknown parameter \"' + prop + '\" for attribute pointer \"' + attribute + '\" (valid parameters are ' + VALID_KEYS + ')',\n                  command)\n              })\n            })\n\n            record.buffer = buffer\n            record.state = ATTRIB_STATE_POINTER\n            record.size = size\n            record.normalized = normalized\n            record.type = type || buffer.dtype\n            record.offset = offset\n            record.stride = stride\n            record.divisor = divisor\n          }\n        }\n      }\n\n      attributeDefs[attribute] = createStaticDecl(function (env, scope) {\n        var cache = env.attribCache\n        if (id in cache) {\n          return cache[id]\n        }\n        var result = {\n          isStream: false\n        }\n        Object.keys(record).forEach(function (key) {\n          result[key] = record[key]\n        })\n        if (record.buffer) {\n          result.buffer = env.link(record.buffer)\n          result.type = result.type || (result.buffer + '.dtype')\n        }\n        cache[id] = result\n        return result\n      })\n    })\n\n    Object.keys(dynamicAttributes).forEach(function (attribute) {\n      var dyn = dynamicAttributes[attribute]\n\n      function appendAttributeCode (env, block) {\n        var VALUE = env.invoke(block, dyn)\n\n        var shared = env.shared\n        var constants = env.constants\n\n        var IS_BUFFER_ARGS = shared.isBufferArgs\n        var BUFFER_STATE = shared.buffer\n\n        // Perform validation on attribute\n        check$1.optional(function () {\n          env.assert(block,\n            VALUE + '&&(typeof ' + VALUE + '===\"object\"||typeof ' +\n            VALUE + '===\"function\")&&(' +\n            IS_BUFFER_ARGS + '(' + VALUE + ')||' +\n            BUFFER_STATE + '.getBuffer(' + VALUE + ')||' +\n            BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' +\n            IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' +\n            '(\"constant\" in ' + VALUE +\n            '&&(typeof ' + VALUE + '.constant===\"number\"||' +\n            shared.isArrayLike + '(' + VALUE + '.constant))))',\n            'invalid dynamic attribute \"' + attribute + '\"')\n        })\n\n        // allocate names for result\n        var result = {\n          isStream: block.def(false)\n        }\n        var defaultRecord = new AttributeRecord()\n        defaultRecord.state = ATTRIB_STATE_POINTER\n        Object.keys(defaultRecord).forEach(function (key) {\n          result[key] = block.def('' + defaultRecord[key])\n        })\n\n        var BUFFER = result.buffer\n        var TYPE = result.type\n        block(\n          'if(', IS_BUFFER_ARGS, '(', VALUE, ')){',\n          result.isStream, '=true;',\n          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$2, ',', VALUE, ');',\n          TYPE, '=', BUFFER, '.dtype;',\n          '}else{',\n          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');',\n          'if(', BUFFER, '){',\n          TYPE, '=', BUFFER, '.dtype;',\n          '}else if(\"constant\" in ', VALUE, '){',\n          result.state, '=', ATTRIB_STATE_CONSTANT, ';',\n          'if(typeof ' + VALUE + '.constant === \"number\"){',\n          result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;',\n          CUTE_COMPONENTS.slice(1).map(function (n) {\n            return result[n]\n          }).join('='), '=0;',\n          '}else{',\n          CUTE_COMPONENTS.map(function (name, i) {\n            return (\n              result[name] + '=' + VALUE + '.constant.length>' + i +\n              '?' + VALUE + '.constant[' + i + ']:0;'\n            )\n          }).join(''),\n          '}}else{',\n          'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){',\n          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$2, ',', VALUE, '.buffer);',\n          '}else{',\n          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);',\n          '}',\n          TYPE, '=\"type\" in ', VALUE, '?',\n          constants.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;',\n          result.normalized, '=!!', VALUE, '.normalized;')\n        function emitReadRecord (name) {\n          block(result[name], '=', VALUE, '.', name, '|0;')\n        }\n        emitReadRecord('size')\n        emitReadRecord('offset')\n        emitReadRecord('stride')\n        emitReadRecord('divisor')\n\n        block('}}')\n\n        block.exit(\n          'if(', result.isStream, '){',\n          BUFFER_STATE, '.destroyStream(', BUFFER, ');',\n          '}')\n\n        return result\n      }\n\n      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode)\n    })\n\n    return attributeDefs\n  }\n\n  function parseContext (context) {\n    var staticContext = context.static\n    var dynamicContext = context.dynamic\n    var result = {}\n\n    Object.keys(staticContext).forEach(function (name) {\n      var value = staticContext[name]\n      result[name] = createStaticDecl(function (env, scope) {\n        if (typeof value === 'number' || typeof value === 'boolean') {\n          return '' + value\n        } else {\n          return env.link(value)\n        }\n      })\n    })\n\n    Object.keys(dynamicContext).forEach(function (name) {\n      var dyn = dynamicContext[name]\n      result[name] = createDynamicDecl(dyn, function (env, scope) {\n        return env.invoke(scope, dyn)\n      })\n    })\n\n    return result\n  }\n\n  function parseArguments (options, attributes, uniforms, context, env) {\n    var staticOptions = options.static\n    var dynamicOptions = options.dynamic\n\n    check$1.optional(function () {\n      var KEY_NAMES = [\n        S_FRAMEBUFFER,\n        S_VERT,\n        S_FRAG,\n        S_ELEMENTS,\n        S_PRIMITIVE,\n        S_OFFSET,\n        S_COUNT,\n        S_INSTANCES,\n        S_PROFILE,\n        S_VAO\n      ].concat(GL_STATE_NAMES)\n\n      function checkKeys (dict) {\n        Object.keys(dict).forEach(function (key) {\n          check$1.command(\n            KEY_NAMES.indexOf(key) >= 0,\n            'unknown parameter \"' + key + '\"',\n            env.commandStr)\n        })\n      }\n\n      checkKeys(staticOptions)\n      checkKeys(dynamicOptions)\n    })\n\n    var attribLocations = parseAttribLocations(options, attributes)\n\n    var framebuffer = parseFramebuffer(options, env)\n    var viewportAndScissor = parseViewportScissor(options, framebuffer, env)\n    var draw = parseDraw(options, env)\n    var state = parseGLState(options, env)\n    var shader = parseProgram(options, env, attribLocations)\n\n    function copyBox (name) {\n      var defn = viewportAndScissor[name]\n      if (defn) {\n        state[name] = defn\n      }\n    }\n    copyBox(S_VIEWPORT)\n    copyBox(propName(S_SCISSOR_BOX))\n\n    var dirty = Object.keys(state).length > 0\n\n    var result = {\n      framebuffer: framebuffer,\n      draw: draw,\n      shader: shader,\n      state: state,\n      dirty: dirty,\n      scopeVAO: null,\n      drawVAO: null,\n      useVAO: false,\n      attributes: {}\n    }\n\n    result.profile = parseProfile(options, env)\n    result.uniforms = parseUniforms(uniforms, env)\n    result.drawVAO = result.scopeVAO = draw.vao\n    // special case: check if we can statically allocate a vertex array object for this program\n    if (!result.drawVAO &&\n      shader.program &&\n      !attribLocations &&\n      extensions.angle_instanced_arrays &&\n      draw.static.elements) {\n      var useVAO = true\n      var staticBindings = shader.program.attributes.map(function (attr) {\n        var binding = attributes.static[attr]\n        useVAO = useVAO && !!binding\n        return binding\n      })\n      if (useVAO && staticBindings.length > 0) {\n        var vao = attributeState.getVAO(attributeState.createVAO({\n          attributes: staticBindings,\n          elements: draw.static.elements\n        }))\n        result.drawVAO = new Declaration(null, null, null, function (env, scope) {\n          return env.link(vao)\n        })\n        result.useVAO = true\n      }\n    }\n    if (attribLocations) {\n      result.useVAO = true\n    } else {\n      result.attributes = parseAttributes(attributes, env)\n    }\n    result.context = parseContext(context, env)\n    return result\n  }\n\n  // ===================================================\n  // ===================================================\n  // COMMON UPDATE FUNCTIONS\n  // ===================================================\n  // ===================================================\n  function emitContext (env, scope, context) {\n    var shared = env.shared\n    var CONTEXT = shared.context\n\n    var contextEnter = env.scope()\n\n    Object.keys(context).forEach(function (name) {\n      scope.save(CONTEXT, '.' + name)\n      var defn = context[name]\n      var value = defn.append(env, scope)\n      if (Array.isArray(value)) {\n        contextEnter(CONTEXT, '.', name, '=[', value.join(), '];')\n      } else {\n        contextEnter(CONTEXT, '.', name, '=', value, ';')\n      }\n    })\n\n    scope(contextEnter)\n  }\n\n  // ===================================================\n  // ===================================================\n  // COMMON DRAWING FUNCTIONS\n  // ===================================================\n  // ===================================================\n  function emitPollFramebuffer (env, scope, framebuffer, skipCheck) {\n    var shared = env.shared\n\n    var GL = shared.gl\n    var FRAMEBUFFER_STATE = shared.framebuffer\n    var EXT_DRAW_BUFFERS\n    if (extDrawBuffers) {\n      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers')\n    }\n\n    var constants = env.constants\n\n    var DRAW_BUFFERS = constants.drawBuffer\n    var BACK_BUFFER = constants.backBuffer\n\n    var NEXT\n    if (framebuffer) {\n      NEXT = framebuffer.append(env, scope)\n    } else {\n      NEXT = scope.def(FRAMEBUFFER_STATE, '.next')\n    }\n\n    if (!skipCheck) {\n      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){')\n    }\n    scope(\n      'if(', NEXT, '){',\n      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);')\n    if (extDrawBuffers) {\n      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(',\n        DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);')\n    }\n    scope('}else{',\n      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);')\n    if (extDrawBuffers) {\n      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');')\n    }\n    scope(\n      '}',\n      FRAMEBUFFER_STATE, '.cur=', NEXT, ';')\n    if (!skipCheck) {\n      scope('}')\n    }\n  }\n\n  function emitPollState (env, scope, args) {\n    var shared = env.shared\n\n    var GL = shared.gl\n\n    var CURRENT_VARS = env.current\n    var NEXT_VARS = env.next\n    var CURRENT_STATE = shared.current\n    var NEXT_STATE = shared.next\n\n    var block = env.cond(CURRENT_STATE, '.dirty')\n\n    GL_STATE_NAMES.forEach(function (prop) {\n      var param = propName(prop)\n      if (param in args.state) {\n        return\n      }\n\n      var NEXT, CURRENT\n      if (param in NEXT_VARS) {\n        NEXT = NEXT_VARS[param]\n        CURRENT = CURRENT_VARS[param]\n        var parts = loop(currentState[param].length, function (i) {\n          return block.def(NEXT, '[', i, ']')\n        })\n        block(env.cond(parts.map(function (p, i) {\n          return p + '!==' + CURRENT + '[' + i + ']'\n        }).join('||'))\n          .then(\n            GL, '.', GL_VARIABLES[param], '(', parts, ');',\n            parts.map(function (p, i) {\n              return CURRENT + '[' + i + ']=' + p\n            }).join(';'), ';'))\n      } else {\n        NEXT = block.def(NEXT_STATE, '.', param)\n        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param)\n        block(ifte)\n        if (param in GL_FLAGS) {\n          ifte(\n            env.cond(NEXT)\n              .then(GL, '.enable(', GL_FLAGS[param], ');')\n              .else(GL, '.disable(', GL_FLAGS[param], ');'),\n            CURRENT_STATE, '.', param, '=', NEXT, ';')\n        } else {\n          ifte(\n            GL, '.', GL_VARIABLES[param], '(', NEXT, ');',\n            CURRENT_STATE, '.', param, '=', NEXT, ';')\n        }\n      }\n    })\n    if (Object.keys(args.state).length === 0) {\n      block(CURRENT_STATE, '.dirty=false;')\n    }\n    scope(block)\n  }\n\n  function emitSetOptions (env, scope, options, filter) {\n    var shared = env.shared\n    var CURRENT_VARS = env.current\n    var CURRENT_STATE = shared.current\n    var GL = shared.gl\n    sortState(Object.keys(options)).forEach(function (param) {\n      var defn = options[param]\n      if (filter && !filter(defn)) {\n        return\n      }\n      var variable = defn.append(env, scope)\n      if (GL_FLAGS[param]) {\n        var flag = GL_FLAGS[param]\n        if (isStatic(defn)) {\n          if (variable) {\n            scope(GL, '.enable(', flag, ');')\n          } else {\n            scope(GL, '.disable(', flag, ');')\n          }\n        } else {\n          scope(env.cond(variable)\n            .then(GL, '.enable(', flag, ');')\n            .else(GL, '.disable(', flag, ');'))\n        }\n        scope(CURRENT_STATE, '.', param, '=', variable, ';')\n      } else if (isArrayLike(variable)) {\n        var CURRENT = CURRENT_VARS[param]\n        scope(\n          GL, '.', GL_VARIABLES[param], '(', variable, ');',\n          variable.map(function (v, i) {\n            return CURRENT + '[' + i + ']=' + v\n          }).join(';'), ';')\n      } else {\n        scope(\n          GL, '.', GL_VARIABLES[param], '(', variable, ');',\n          CURRENT_STATE, '.', param, '=', variable, ';')\n      }\n    })\n  }\n\n  function injectExtensions (env, scope) {\n    if (extInstancing) {\n      env.instancing = scope.def(\n        env.shared.extensions, '.angle_instanced_arrays')\n    }\n  }\n\n  function emitProfile (env, scope, args, useScope, incrementCounter) {\n    var shared = env.shared\n    var STATS = env.stats\n    var CURRENT_STATE = shared.current\n    var TIMER = shared.timer\n    var profileArg = args.profile\n\n    function perfCounter () {\n      if (typeof performance === 'undefined') {\n        return 'Date.now()'\n      } else {\n        return 'performance.now()'\n      }\n    }\n\n    var CPU_START, QUERY_COUNTER\n    function emitProfileStart (block) {\n      CPU_START = scope.def()\n      block(CPU_START, '=', perfCounter(), ';')\n      if (typeof incrementCounter === 'string') {\n        block(STATS, '.count+=', incrementCounter, ';')\n      } else {\n        block(STATS, '.count++;')\n      }\n      if (timer) {\n        if (useScope) {\n          QUERY_COUNTER = scope.def()\n          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();')\n        } else {\n          block(TIMER, '.beginQuery(', STATS, ');')\n        }\n      }\n    }\n\n    function emitProfileEnd (block) {\n      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';')\n      if (timer) {\n        if (useScope) {\n          block(TIMER, '.pushScopeStats(',\n            QUERY_COUNTER, ',',\n            TIMER, '.getNumPendingQueries(),',\n            STATS, ');')\n        } else {\n          block(TIMER, '.endQuery();')\n        }\n      }\n    }\n\n    function scopeProfile (value) {\n      var prev = scope.def(CURRENT_STATE, '.profile')\n      scope(CURRENT_STATE, '.profile=', value, ';')\n      scope.exit(CURRENT_STATE, '.profile=', prev, ';')\n    }\n\n    var USE_PROFILE\n    if (profileArg) {\n      if (isStatic(profileArg)) {\n        if (profileArg.enable) {\n          emitProfileStart(scope)\n          emitProfileEnd(scope.exit)\n          scopeProfile('true')\n        } else {\n          scopeProfile('false')\n        }\n        return\n      }\n      USE_PROFILE = profileArg.append(env, scope)\n      scopeProfile(USE_PROFILE)\n    } else {\n      USE_PROFILE = scope.def(CURRENT_STATE, '.profile')\n    }\n\n    var start = env.block()\n    emitProfileStart(start)\n    scope('if(', USE_PROFILE, '){', start, '}')\n    var end = env.block()\n    emitProfileEnd(end)\n    scope.exit('if(', USE_PROFILE, '){', end, '}')\n  }\n\n  function emitAttributes (env, scope, args, attributes, filter) {\n    var shared = env.shared\n\n    function typeLength (x) {\n      switch (x) {\n        case GL_FLOAT_VEC2:\n        case GL_INT_VEC2:\n        case GL_BOOL_VEC2:\n          return 2\n        case GL_FLOAT_VEC3:\n        case GL_INT_VEC3:\n        case GL_BOOL_VEC3:\n          return 3\n        case GL_FLOAT_VEC4:\n        case GL_INT_VEC4:\n        case GL_BOOL_VEC4:\n          return 4\n        default:\n          return 1\n      }\n    }\n\n    function emitBindAttribute (ATTRIBUTE, size, record) {\n      var GL = shared.gl\n\n      var LOCATION = scope.def(ATTRIBUTE, '.location')\n      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']')\n\n      var STATE = record.state\n      var BUFFER = record.buffer\n      var CONST_COMPONENTS = [\n        record.x,\n        record.y,\n        record.z,\n        record.w\n      ]\n\n      var COMMON_KEYS = [\n        'buffer',\n        'normalized',\n        'offset',\n        'stride'\n      ]\n\n      function emitBuffer () {\n        scope(\n          'if(!', BINDING, '.buffer){',\n          GL, '.enableVertexAttribArray(', LOCATION, ');}')\n\n        var TYPE = record.type\n        var SIZE\n        if (!record.size) {\n          SIZE = size\n        } else {\n          SIZE = scope.def(record.size, '||', size)\n        }\n\n        scope('if(',\n          BINDING, '.type!==', TYPE, '||',\n          BINDING, '.size!==', SIZE, '||',\n          COMMON_KEYS.map(function (key) {\n            return BINDING + '.' + key + '!==' + record[key]\n          }).join('||'),\n          '){',\n          GL, '.bindBuffer(', GL_ARRAY_BUFFER$2, ',', BUFFER, '.buffer);',\n          GL, '.vertexAttribPointer(', [\n            LOCATION,\n            SIZE,\n            TYPE,\n            record.normalized,\n            record.stride,\n            record.offset\n          ], ');',\n          BINDING, '.type=', TYPE, ';',\n          BINDING, '.size=', SIZE, ';',\n          COMMON_KEYS.map(function (key) {\n            return BINDING + '.' + key + '=' + record[key] + ';'\n          }).join(''),\n          '}')\n\n        if (extInstancing) {\n          var DIVISOR = record.divisor\n          scope(\n            'if(', BINDING, '.divisor!==', DIVISOR, '){',\n            env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');',\n            BINDING, '.divisor=', DIVISOR, ';}')\n        }\n      }\n\n      function emitConstant () {\n        scope(\n          'if(', BINDING, '.buffer){',\n          GL, '.disableVertexAttribArray(', LOCATION, ');',\n          BINDING, '.buffer=null;',\n          '}if(', CUTE_COMPONENTS.map(function (c, i) {\n            return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i]\n          }).join('||'), '){',\n          GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');',\n          CUTE_COMPONENTS.map(function (c, i) {\n            return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';'\n          }).join(''),\n          '}')\n      }\n\n      if (STATE === ATTRIB_STATE_POINTER) {\n        emitBuffer()\n      } else if (STATE === ATTRIB_STATE_CONSTANT) {\n        emitConstant()\n      } else {\n        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){')\n        emitBuffer()\n        scope('}else{')\n        emitConstant()\n        scope('}')\n      }\n    }\n\n    attributes.forEach(function (attribute) {\n      var name = attribute.name\n      var arg = args.attributes[name]\n      var record\n      if (arg) {\n        if (!filter(arg)) {\n          return\n        }\n        record = arg.append(env, scope)\n      } else {\n        if (!filter(SCOPE_DECL)) {\n          return\n        }\n        var scopeAttrib = env.scopeAttrib(name)\n        check$1.optional(function () {\n          env.assert(scope,\n            scopeAttrib + '.state',\n            'missing attribute ' + name)\n        })\n        record = {}\n        Object.keys(new AttributeRecord()).forEach(function (key) {\n          record[key] = scope.def(scopeAttrib, '.', key)\n        })\n      }\n      emitBindAttribute(\n        env.link(attribute), typeLength(attribute.info.type), record)\n    })\n  }\n\n  function emitUniforms (env, scope, args, uniforms, filter, isBatchInnerLoop) {\n    var shared = env.shared\n    var GL = shared.gl\n\n    var definedArrUniforms = {}\n    var infix\n    for (var i = 0; i < uniforms.length; ++i) {\n      var uniform = uniforms[i]\n      var name = uniform.name\n      var type = uniform.info.type\n      var size = uniform.info.size\n      var arg = args.uniforms[name]\n      if (size > 1) {\n        // either foo[n] or foos, avoid define both\n        if (!arg) {\n          continue\n        }\n        var arrUniformName = name.replace('[0]', '')\n        if (definedArrUniforms[arrUniformName]) {\n          continue\n        }\n        definedArrUniforms[arrUniformName] = 1\n      }\n      var UNIFORM = env.link(uniform)\n      var LOCATION = UNIFORM + '.location'\n\n      var VALUE\n      if (arg) {\n        if (!filter(arg)) {\n          continue\n        }\n        if (isStatic(arg)) {\n          var value = arg.value\n          check$1.command(\n            value !== null && typeof value !== 'undefined',\n            'missing uniform \"' + name + '\"', env.commandStr)\n          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {\n            check$1.command(\n              typeof value === 'function' &&\n              ((type === GL_SAMPLER_2D &&\n                (value._reglType === 'texture2d' ||\n                value._reglType === 'framebuffer')) ||\n              (type === GL_SAMPLER_CUBE &&\n                (value._reglType === 'textureCube' ||\n                value._reglType === 'framebufferCube'))),\n              'invalid texture for uniform ' + name, env.commandStr)\n            var TEX_VALUE = env.link(value._texture || value.color[0]._texture)\n            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());')\n            scope.exit(TEX_VALUE, '.unbind();')\n          } else if (\n            type === GL_FLOAT_MAT2 ||\n            type === GL_FLOAT_MAT3 ||\n            type === GL_FLOAT_MAT4) {\n            check$1.optional(function () {\n              check$1.command(isArrayLike(value),\n                'invalid matrix for uniform ' + name, env.commandStr)\n              check$1.command(\n                (type === GL_FLOAT_MAT2 && value.length === 4) ||\n                (type === GL_FLOAT_MAT3 && value.length === 9) ||\n                (type === GL_FLOAT_MAT4 && value.length === 16),\n                'invalid length for matrix uniform ' + name, env.commandStr)\n            })\n            var MAT_VALUE = env.global.def('new Float32Array([' +\n              Array.prototype.slice.call(value) + '])')\n            var dim = 2\n            if (type === GL_FLOAT_MAT3) {\n              dim = 3\n            } else if (type === GL_FLOAT_MAT4) {\n              dim = 4\n            }\n            scope(\n              GL, '.uniformMatrix', dim, 'fv(',\n              LOCATION, ',false,', MAT_VALUE, ');')\n          } else {\n            switch (type) {\n              case GL_FLOAT$8:\n                if (size === 1) {\n                  check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr)\n                } else {\n                  check$1.command(\n                    isArrayLike(value) && (value.length === size),\n                    'uniform ' + name, env.commandStr)\n                }\n                infix = '1f'\n                break\n              case GL_FLOAT_VEC2:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2),\n                  'uniform ' + name, env.commandStr)\n                infix = '2f'\n                break\n              case GL_FLOAT_VEC3:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3),\n                  'uniform ' + name, env.commandStr)\n                infix = '3f'\n                break\n              case GL_FLOAT_VEC4:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4),\n                  'uniform ' + name, env.commandStr)\n                infix = '4f'\n                break\n              case GL_BOOL:\n                if (size === 1) {\n                  check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr)\n                } else {\n                  check$1.command(\n                    isArrayLike(value) && (value.length === size),\n                    'uniform ' + name, env.commandStr)\n                }\n                infix = '1i'\n                break\n              case GL_INT$3:\n                if (size === 1) {\n                  check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr)\n                } else {\n                  check$1.command(\n                    isArrayLike(value) && (value.length === size),\n                    'uniform ' + name, env.commandStr)\n                }\n                infix = '1i'\n                break\n              case GL_BOOL_VEC2:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2),\n                  'uniform ' + name, env.commandStr)\n                infix = '2i'\n                break\n              case GL_INT_VEC2:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2),\n                  'uniform ' + name, env.commandStr)\n                infix = '2i'\n                break\n              case GL_BOOL_VEC3:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3),\n                  'uniform ' + name, env.commandStr)\n                infix = '3i'\n                break\n              case GL_INT_VEC3:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3),\n                  'uniform ' + name, env.commandStr)\n                infix = '3i'\n                break\n              case GL_BOOL_VEC4:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4),\n                  'uniform ' + name, env.commandStr)\n                infix = '4i'\n                break\n              case GL_INT_VEC4:\n                check$1.command(\n                  isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4),\n                  'uniform ' + name, env.commandStr)\n                infix = '4i'\n                break\n            }\n            if (size > 1) {\n              infix += 'v'\n              value = env.global.def('[' +\n              Array.prototype.slice.call(value) + ']')\n            } else {\n              value = isArrayLike(value) ? Array.prototype.slice.call(value) : value\n            }\n            scope(GL, '.uniform', infix, '(', LOCATION, ',',\n              value,\n              ');')\n          }\n          continue\n        } else {\n          VALUE = arg.append(env, scope)\n        }\n      } else {\n        if (!filter(SCOPE_DECL)) {\n          continue\n        }\n        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']')\n      }\n\n      if (type === GL_SAMPLER_2D) {\n        check$1(!Array.isArray(VALUE), 'must specify a scalar prop for textures')\n        scope(\n          'if(', VALUE, '&&', VALUE, '._reglType===\"framebuffer\"){',\n          VALUE, '=', VALUE, '.color[0];',\n          '}')\n      } else if (type === GL_SAMPLER_CUBE) {\n        check$1(!Array.isArray(VALUE), 'must specify a scalar prop for cube maps')\n        scope(\n          'if(', VALUE, '&&', VALUE, '._reglType===\"framebufferCube\"){',\n          VALUE, '=', VALUE, '.color[0];',\n          '}')\n      }\n\n      // perform type validation\n      check$1.optional(function () {\n        function emitCheck (pred, message) {\n          env.assert(scope, pred,\n            'bad data or missing for uniform \"' + name + '\".  ' + message)\n        }\n\n        function checkType (type, size) {\n          if (size === 1) {\n            check$1(!Array.isArray(VALUE), 'must not specify an array type for uniform')\n          }\n          emitCheck(\n            'Array.isArray(' + VALUE + ') && typeof ' + VALUE + '[0]===\" ' + type + '\"' +\n            ' || typeof ' + VALUE + '===\"' + type + '\"',\n            'invalid type, expected ' + type)\n        }\n\n        function checkVector (n, type, size) {\n          if (Array.isArray(VALUE)) {\n            check$1(VALUE.length && VALUE.length % n === 0 && VALUE.length <= n * size, 'must have length of ' + (size === 1 ? '' : 'n * ') + n)\n          } else {\n            emitCheck(\n              shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length && ' + VALUE + '.length % ' + n + ' === 0' +\n              ' && ' + VALUE + '.length<=' + n * size,\n              'invalid vector, should have length of ' + (size === 1 ? '' : 'n * ') + n, env.commandStr)\n          }\n        }\n\n        function checkTexture (target) {\n          check$1(!Array.isArray(VALUE), 'must not specify a value type')\n          emitCheck(\n            'typeof ' + VALUE + '===\"function\"&&' +\n            VALUE + '._reglType===\"texture' +\n            (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '\"',\n            'invalid texture type', env.commandStr)\n        }\n\n        switch (type) {\n          case GL_INT$3:\n            checkType('number', size)\n            break\n          case GL_INT_VEC2:\n            checkVector(2, 'number', size)\n            break\n          case GL_INT_VEC3:\n            checkVector(3, 'number', size)\n            break\n          case GL_INT_VEC4:\n            checkVector(4, 'number', size)\n            break\n          case GL_FLOAT$8:\n            checkType('number', size)\n            break\n          case GL_FLOAT_VEC2:\n            checkVector(2, 'number', size)\n            break\n          case GL_FLOAT_VEC3:\n            checkVector(3, 'number', size)\n            break\n          case GL_FLOAT_VEC4:\n            checkVector(4, 'number', size)\n            break\n          case GL_BOOL:\n            checkType('boolean', size)\n            break\n          case GL_BOOL_VEC2:\n            checkVector(2, 'boolean', size)\n            break\n          case GL_BOOL_VEC3:\n            checkVector(3, 'boolean', size)\n            break\n          case GL_BOOL_VEC4:\n            checkVector(4, 'boolean', size)\n            break\n          case GL_FLOAT_MAT2:\n            checkVector(4, 'number', size)\n            break\n          case GL_FLOAT_MAT3:\n            checkVector(9, 'number', size)\n            break\n          case GL_FLOAT_MAT4:\n            checkVector(16, 'number', size)\n            break\n          case GL_SAMPLER_2D:\n            checkTexture(GL_TEXTURE_2D$3)\n            break\n          case GL_SAMPLER_CUBE:\n            checkTexture(GL_TEXTURE_CUBE_MAP$2)\n            break\n        }\n      })\n\n      var unroll = 1\n      switch (type) {\n        case GL_SAMPLER_2D:\n        case GL_SAMPLER_CUBE:\n          var TEX = scope.def(VALUE, '._texture')\n          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());')\n          scope.exit(TEX, '.unbind();')\n          continue\n\n        case GL_INT$3:\n        case GL_BOOL:\n          infix = '1i'\n          break\n\n        case GL_INT_VEC2:\n        case GL_BOOL_VEC2:\n          infix = '2i'\n          unroll = 2\n          break\n\n        case GL_INT_VEC3:\n        case GL_BOOL_VEC3:\n          infix = '3i'\n          unroll = 3\n          break\n\n        case GL_INT_VEC4:\n        case GL_BOOL_VEC4:\n          infix = '4i'\n          unroll = 4\n          break\n\n        case GL_FLOAT$8:\n          infix = '1f'\n          break\n\n        case GL_FLOAT_VEC2:\n          infix = '2f'\n          unroll = 2\n          break\n\n        case GL_FLOAT_VEC3:\n          infix = '3f'\n          unroll = 3\n          break\n\n        case GL_FLOAT_VEC4:\n          infix = '4f'\n          unroll = 4\n          break\n\n        case GL_FLOAT_MAT2:\n          infix = 'Matrix2fv'\n          break\n\n        case GL_FLOAT_MAT3:\n          infix = 'Matrix3fv'\n          break\n\n        case GL_FLOAT_MAT4:\n          infix = 'Matrix4fv'\n          break\n      }\n\n      if (infix.indexOf('Matrix') === -1 && size > 1) {\n        infix += 'v'\n        unroll = 1\n      }\n\n      if (infix.charAt(0) === 'M') {\n        scope(GL, '.uniform', infix, '(', LOCATION, ',')\n        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2)\n        var STORAGE = env.global.def('new Float32Array(', matSize, ')')\n        if (Array.isArray(VALUE)) {\n          scope(\n            'false,(',\n            loop(matSize, function (i) {\n              return STORAGE + '[' + i + ']=' + VALUE[i]\n            }), ',', STORAGE, ')')\n        } else {\n          scope(\n            'false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(',\n            loop(matSize, function (i) {\n              return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']'\n            }), ',', STORAGE, ')')\n        }\n        scope(');')\n      } else if (unroll > 1) {\n        var prev = []\n        var cur = []\n        for (var j = 0; j < unroll; ++j) {\n          if (Array.isArray(VALUE)) {\n            cur.push(VALUE[j])\n          } else {\n            cur.push(scope.def(VALUE + '[' + j + ']'))\n          }\n          if (isBatchInnerLoop) {\n            prev.push(scope.def())\n          }\n        }\n        if (isBatchInnerLoop) {\n          scope('if(!', env.batchId, '||', prev.map(function (p, i) {\n            return p + '!==' + cur[i]\n          }).join('||'), '){', prev.map(function (p, i) {\n            return p + '=' + cur[i] + ';'\n          }).join(''))\n        }\n        scope(GL, '.uniform', infix, '(', LOCATION, ',', cur.join(','), ');')\n        if (isBatchInnerLoop) {\n          scope('}')\n        }\n      } else {\n        check$1(!Array.isArray(VALUE), 'uniform value must not be an array')\n        if (isBatchInnerLoop) {\n          var prevS = scope.def()\n          scope('if(!', env.batchId, '||', prevS, '!==', VALUE, '){',\n            prevS, '=', VALUE, ';')\n        }\n        scope(GL, '.uniform', infix, '(', LOCATION, ',', VALUE, ');')\n        if (isBatchInnerLoop) {\n          scope('}')\n        }\n      }\n    }\n  }\n\n  function emitDraw (env, outer, inner, args) {\n    var shared = env.shared\n    var GL = shared.gl\n    var DRAW_STATE = shared.draw\n\n    var drawOptions = args.draw\n\n    function emitElements () {\n      var defn = drawOptions.elements\n      var ELEMENTS\n      var scope = outer\n      if (defn) {\n        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {\n          scope = inner\n        }\n        ELEMENTS = defn.append(env, scope)\n        if (drawOptions.elementsActive) {\n          scope(\n            'if(' + ELEMENTS + ')' +\n            GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$2 + ',' + ELEMENTS + '.buffer.buffer);')\n        }\n      } else {\n        ELEMENTS = scope.def()\n        scope(\n          ELEMENTS, '=', DRAW_STATE, '.', S_ELEMENTS, ';',\n          'if(', ELEMENTS, '){',\n          GL, '.bindBuffer(', GL_ELEMENT_ARRAY_BUFFER$2, ',', ELEMENTS, '.buffer.buffer);}',\n          'else if(', shared.vao, '.currentVAO){',\n          ELEMENTS, '=', env.shared.elements + '.getElements(' + shared.vao, '.currentVAO.elements);',\n          (!extVertexArrays ? 'if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$2 + ',' + ELEMENTS + '.buffer.buffer);' : ''),\n          '}')\n      }\n      return ELEMENTS\n    }\n\n    function emitCount () {\n      var defn = drawOptions.count\n      var COUNT\n      var scope = outer\n      if (defn) {\n        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {\n          scope = inner\n        }\n        COUNT = defn.append(env, scope)\n        check$1.optional(function () {\n          if (defn.MISSING) {\n            env.assert(outer, 'false', 'missing vertex count')\n          }\n          if (defn.DYNAMIC) {\n            env.assert(scope, COUNT + '>=0', 'missing vertex count')\n          }\n        })\n      } else {\n        COUNT = scope.def(DRAW_STATE, '.', S_COUNT)\n        check$1.optional(function () {\n          env.assert(scope, COUNT + '>=0', 'missing vertex count')\n        })\n      }\n      return COUNT\n    }\n\n    var ELEMENTS = emitElements()\n    function emitValue (name) {\n      var defn = drawOptions[name]\n      if (defn) {\n        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {\n          return defn.append(env, inner)\n        } else {\n          return defn.append(env, outer)\n        }\n      } else {\n        return outer.def(DRAW_STATE, '.', name)\n      }\n    }\n\n    var PRIMITIVE = emitValue(S_PRIMITIVE)\n    var OFFSET = emitValue(S_OFFSET)\n\n    var COUNT = emitCount()\n    if (typeof COUNT === 'number') {\n      if (COUNT === 0) {\n        return\n      }\n    } else {\n      inner('if(', COUNT, '){')\n      inner.exit('}')\n    }\n\n    var INSTANCES, EXT_INSTANCING\n    if (extInstancing) {\n      INSTANCES = emitValue(S_INSTANCES)\n      EXT_INSTANCING = env.instancing\n    }\n\n    var ELEMENT_TYPE = ELEMENTS + '.type'\n\n    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive\n\n    function emitInstancing () {\n      function drawElements () {\n        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [\n          PRIMITIVE,\n          COUNT,\n          ELEMENT_TYPE,\n          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)',\n          INSTANCES\n        ], ');')\n      }\n\n      function drawArrays () {\n        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(',\n          [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');')\n      }\n\n      if (ELEMENTS && ELEMENTS !== 'null') {\n        if (!elementsStatic) {\n          inner('if(', ELEMENTS, '){')\n          drawElements()\n          inner('}else{')\n          drawArrays()\n          inner('}')\n        } else {\n          drawElements()\n        }\n      } else {\n        drawArrays()\n      }\n    }\n\n    function emitRegular () {\n      function drawElements () {\n        inner(GL + '.drawElements(' + [\n          PRIMITIVE,\n          COUNT,\n          ELEMENT_TYPE,\n          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'\n        ] + ');')\n      }\n\n      function drawArrays () {\n        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');')\n      }\n\n      if (ELEMENTS && ELEMENTS !== 'null') {\n        if (!elementsStatic) {\n          inner('if(', ELEMENTS, '){')\n          drawElements()\n          inner('}else{')\n          drawArrays()\n          inner('}')\n        } else {\n          drawElements()\n        }\n      } else {\n        drawArrays()\n      }\n    }\n\n    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {\n      if (typeof INSTANCES === 'string') {\n        inner('if(', INSTANCES, '>0){')\n        emitInstancing()\n        inner('}else if(', INSTANCES, '<0){')\n        emitRegular()\n        inner('}')\n      } else {\n        emitInstancing()\n      }\n    } else {\n      emitRegular()\n    }\n  }\n\n  function createBody (emitBody, parentEnv, args, program, count) {\n    var env = createREGLEnvironment()\n    var scope = env.proc('body', count)\n    check$1.optional(function () {\n      env.commandStr = parentEnv.commandStr\n      env.command = env.link(parentEnv.commandStr)\n    })\n    if (extInstancing) {\n      env.instancing = scope.def(\n        env.shared.extensions, '.angle_instanced_arrays')\n    }\n    emitBody(env, scope, args, program)\n    return env.compile().body\n  }\n\n  // ===================================================\n  // ===================================================\n  // DRAW PROC\n  // ===================================================\n  // ===================================================\n  function emitDrawBody (env, draw, args, program) {\n    injectExtensions(env, draw)\n    if (args.useVAO) {\n      if (args.drawVAO) {\n        draw(env.shared.vao, '.setVAO(', args.drawVAO.append(env, draw), ');')\n      } else {\n        draw(env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);')\n      }\n    } else {\n      draw(env.shared.vao, '.setVAO(null);')\n      emitAttributes(env, draw, args, program.attributes, function () {\n        return true\n      })\n    }\n    emitUniforms(env, draw, args, program.uniforms, function () {\n      return true\n    }, false)\n    emitDraw(env, draw, draw, args)\n  }\n\n  function emitDrawProc (env, args) {\n    var draw = env.proc('draw', 1)\n\n    injectExtensions(env, draw)\n\n    emitContext(env, draw, args.context)\n    emitPollFramebuffer(env, draw, args.framebuffer)\n\n    emitPollState(env, draw, args)\n    emitSetOptions(env, draw, args.state)\n\n    emitProfile(env, draw, args, false, true)\n\n    var program = args.shader.progVar.append(env, draw)\n    draw(env.shared.gl, '.useProgram(', program, '.program);')\n\n    if (args.shader.program) {\n      emitDrawBody(env, draw, args, args.shader.program)\n    } else {\n      draw(env.shared.vao, '.setVAO(null);')\n      var drawCache = env.global.def('{}')\n      var PROG_ID = draw.def(program, '.id')\n      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']')\n      draw(\n        env.cond(CACHED_PROC)\n          .then(CACHED_PROC, '.call(this,a0);')\n          .else(\n            CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=',\n            env.link(function (program) {\n              return createBody(emitDrawBody, env, args, program, 1)\n            }), '(', program, ');',\n            CACHED_PROC, '.call(this,a0);'))\n    }\n\n    if (Object.keys(args.state).length > 0) {\n      draw(env.shared.current, '.dirty=true;')\n    }\n    if (env.shared.vao) {\n      draw(env.shared.vao, '.setVAO(null);')\n    }\n  }\n\n  // ===================================================\n  // ===================================================\n  // BATCH PROC\n  // ===================================================\n  // ===================================================\n\n  function emitBatchDynamicShaderBody (env, scope, args, program) {\n    env.batchId = 'a1'\n\n    injectExtensions(env, scope)\n\n    function all () {\n      return true\n    }\n\n    emitAttributes(env, scope, args, program.attributes, all)\n    emitUniforms(env, scope, args, program.uniforms, all, false)\n    emitDraw(env, scope, scope, args)\n  }\n\n  function emitBatchBody (env, scope, args, program) {\n    injectExtensions(env, scope)\n\n    var contextDynamic = args.contextDep\n\n    var BATCH_ID = scope.def()\n    var PROP_LIST = 'a0'\n    var NUM_PROPS = 'a1'\n    var PROPS = scope.def()\n    env.shared.props = PROPS\n    env.batchId = BATCH_ID\n\n    var outer = env.scope()\n    var inner = env.scope()\n\n    scope(\n      outer.entry,\n      'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){',\n      PROPS, '=', PROP_LIST, '[', BATCH_ID, '];',\n      inner,\n      '}',\n      outer.exit)\n\n    function isInnerDefn (defn) {\n      return ((defn.contextDep && contextDynamic) || defn.propDep)\n    }\n\n    function isOuterDefn (defn) {\n      return !isInnerDefn(defn)\n    }\n\n    if (args.needsContext) {\n      emitContext(env, inner, args.context)\n    }\n    if (args.needsFramebuffer) {\n      emitPollFramebuffer(env, inner, args.framebuffer)\n    }\n    emitSetOptions(env, inner, args.state, isInnerDefn)\n\n    if (args.profile && isInnerDefn(args.profile)) {\n      emitProfile(env, inner, args, false, true)\n    }\n\n    if (!program) {\n      var progCache = env.global.def('{}')\n      var PROGRAM = args.shader.progVar.append(env, inner)\n      var PROG_ID = inner.def(PROGRAM, '.id')\n      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']')\n      inner(\n        env.shared.gl, '.useProgram(', PROGRAM, '.program);',\n        'if(!', CACHED_PROC, '){',\n        CACHED_PROC, '=', progCache, '[', PROG_ID, ']=',\n        env.link(function (program) {\n          return createBody(\n            emitBatchDynamicShaderBody, env, args, program, 2)\n        }), '(', PROGRAM, ');}',\n        CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');')\n    } else {\n      if (args.useVAO) {\n        if (args.drawVAO) {\n          if (isInnerDefn(args.drawVAO)) {\n            // vao is a prop\n            inner(env.shared.vao, '.setVAO(', args.drawVAO.append(env, inner), ');')\n          } else {\n            // vao is invariant\n            outer(env.shared.vao, '.setVAO(', args.drawVAO.append(env, outer), ');')\n          }\n        } else {\n          // scoped vao binding\n          outer(env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);')\n        }\n      } else {\n        outer(env.shared.vao, '.setVAO(null);')\n        emitAttributes(env, outer, args, program.attributes, isOuterDefn)\n        emitAttributes(env, inner, args, program.attributes, isInnerDefn)\n      }\n      emitUniforms(env, outer, args, program.uniforms, isOuterDefn, false)\n      emitUniforms(env, inner, args, program.uniforms, isInnerDefn, true)\n      emitDraw(env, outer, inner, args)\n    }\n  }\n\n  function emitBatchProc (env, args) {\n    var batch = env.proc('batch', 2)\n    env.batchId = '0'\n\n    injectExtensions(env, batch)\n\n    // Check if any context variables depend on props\n    var contextDynamic = false\n    var needsContext = true\n    Object.keys(args.context).forEach(function (name) {\n      contextDynamic = contextDynamic || args.context[name].propDep\n    })\n    if (!contextDynamic) {\n      emitContext(env, batch, args.context)\n      needsContext = false\n    }\n\n    // framebuffer state affects framebufferWidth/height context vars\n    var framebuffer = args.framebuffer\n    var needsFramebuffer = false\n    if (framebuffer) {\n      if (framebuffer.propDep) {\n        contextDynamic = needsFramebuffer = true\n      } else if (framebuffer.contextDep && contextDynamic) {\n        needsFramebuffer = true\n      }\n      if (!needsFramebuffer) {\n        emitPollFramebuffer(env, batch, framebuffer)\n      }\n    } else {\n      emitPollFramebuffer(env, batch, null)\n    }\n\n    // viewport is weird because it can affect context vars\n    if (args.state.viewport && args.state.viewport.propDep) {\n      contextDynamic = true\n    }\n\n    function isInnerDefn (defn) {\n      return (defn.contextDep && contextDynamic) || defn.propDep\n    }\n\n    // set webgl options\n    emitPollState(env, batch, args)\n    emitSetOptions(env, batch, args.state, function (defn) {\n      return !isInnerDefn(defn)\n    })\n\n    if (!args.profile || !isInnerDefn(args.profile)) {\n      emitProfile(env, batch, args, false, 'a1')\n    }\n\n    // Save these values to args so that the batch body routine can use them\n    args.contextDep = contextDynamic\n    args.needsContext = needsContext\n    args.needsFramebuffer = needsFramebuffer\n\n    // determine if shader is dynamic\n    var progDefn = args.shader.progVar\n    if ((progDefn.contextDep && contextDynamic) || progDefn.propDep) {\n      emitBatchBody(\n        env,\n        batch,\n        args,\n        null)\n    } else {\n      var PROGRAM = progDefn.append(env, batch)\n      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);')\n      if (args.shader.program) {\n        emitBatchBody(\n          env,\n          batch,\n          args,\n          args.shader.program)\n      } else {\n        batch(env.shared.vao, '.setVAO(null);')\n        var batchCache = env.global.def('{}')\n        var PROG_ID = batch.def(PROGRAM, '.id')\n        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']')\n        batch(\n          env.cond(CACHED_PROC)\n            .then(CACHED_PROC, '.call(this,a0,a1);')\n            .else(\n              CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=',\n              env.link(function (program) {\n                return createBody(emitBatchBody, env, args, program, 2)\n              }), '(', PROGRAM, ');',\n              CACHED_PROC, '.call(this,a0,a1);'))\n      }\n    }\n\n    if (Object.keys(args.state).length > 0) {\n      batch(env.shared.current, '.dirty=true;')\n    }\n\n    if (env.shared.vao) {\n      batch(env.shared.vao, '.setVAO(null);')\n    }\n  }\n\n  // ===================================================\n  // ===================================================\n  // SCOPE COMMAND\n  // ===================================================\n  // ===================================================\n  function emitScopeProc (env, args) {\n    var scope = env.proc('scope', 3)\n    env.batchId = 'a2'\n\n    var shared = env.shared\n    var CURRENT_STATE = shared.current\n\n    emitContext(env, scope, args.context)\n\n    if (args.framebuffer) {\n      args.framebuffer.append(env, scope)\n    }\n\n    sortState(Object.keys(args.state)).forEach(function (name) {\n      var defn = args.state[name]\n      var value = defn.append(env, scope)\n      if (isArrayLike(value)) {\n        value.forEach(function (v, i) {\n          scope.set(env.next[name], '[' + i + ']', v)\n        })\n      } else {\n        scope.set(shared.next, '.' + name, value)\n      }\n    })\n\n    emitProfile(env, scope, args, true, true)\n\n    ;[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(\n      function (opt) {\n        var variable = args.draw[opt]\n        if (!variable) {\n          return\n        }\n        scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope))\n      })\n\n    Object.keys(args.uniforms).forEach(function (opt) {\n      var value = args.uniforms[opt].append(env, scope)\n      if (Array.isArray(value)) {\n        value = '[' + value.join() + ']'\n      }\n      scope.set(\n        shared.uniforms,\n        '[' + stringStore.id(opt) + ']',\n        value)\n    })\n\n    Object.keys(args.attributes).forEach(function (name) {\n      var record = args.attributes[name].append(env, scope)\n      var scopeAttrib = env.scopeAttrib(name)\n      Object.keys(new AttributeRecord()).forEach(function (prop) {\n        scope.set(scopeAttrib, '.' + prop, record[prop])\n      })\n    })\n\n    if (args.scopeVAO) {\n      scope.set(shared.vao, '.targetVAO', args.scopeVAO.append(env, scope))\n    }\n\n    function saveShader (name) {\n      var shader = args.shader[name]\n      if (shader) {\n        scope.set(shared.shader, '.' + name, shader.append(env, scope))\n      }\n    }\n    saveShader(S_VERT)\n    saveShader(S_FRAG)\n\n    if (Object.keys(args.state).length > 0) {\n      scope(CURRENT_STATE, '.dirty=true;')\n      scope.exit(CURRENT_STATE, '.dirty=true;')\n    }\n\n    scope('a1(', env.shared.context, ',a0,', env.batchId, ');')\n  }\n\n  function isDynamicObject (object) {\n    if (typeof object !== 'object' || isArrayLike(object)) {\n      return\n    }\n    var props = Object.keys(object)\n    for (var i = 0; i < props.length; ++i) {\n      if (dynamic.isDynamic(object[props[i]])) {\n        return true\n      }\n    }\n    return false\n  }\n\n  function splatObject (env, options, name) {\n    var object = options.static[name]\n    if (!object || !isDynamicObject(object)) {\n      return\n    }\n\n    var globals = env.global\n    var keys = Object.keys(object)\n    var thisDep = false\n    var contextDep = false\n    var propDep = false\n    var objectRef = env.global.def('{}')\n    keys.forEach(function (key) {\n      var value = object[key]\n      if (dynamic.isDynamic(value)) {\n        if (typeof value === 'function') {\n          value = object[key] = dynamic.unbox(value)\n        }\n        var deps = createDynamicDecl(value, null)\n        thisDep = thisDep || deps.thisDep\n        propDep = propDep || deps.propDep\n        contextDep = contextDep || deps.contextDep\n      } else {\n        globals(objectRef, '.', key, '=')\n        switch (typeof value) {\n          case 'number':\n            globals(value)\n            break\n          case 'string':\n            globals('\"', value, '\"')\n            break\n          case 'object':\n            if (Array.isArray(value)) {\n              globals('[', value.join(), ']')\n            }\n            break\n          default:\n            globals(env.link(value))\n            break\n        }\n        globals(';')\n      }\n    })\n\n    function appendBlock (env, block) {\n      keys.forEach(function (key) {\n        var value = object[key]\n        if (!dynamic.isDynamic(value)) {\n          return\n        }\n        var ref = env.invoke(block, value)\n        block(objectRef, '.', key, '=', ref, ';')\n      })\n    }\n\n    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {\n      thisDep: thisDep,\n      contextDep: contextDep,\n      propDep: propDep,\n      ref: objectRef,\n      append: appendBlock\n    })\n    delete options.static[name]\n  }\n\n  // ===========================================================================\n  // ===========================================================================\n  // MAIN DRAW COMMAND\n  // ===========================================================================\n  // ===========================================================================\n  function compileCommand (options, attributes, uniforms, context, stats) {\n    var env = createREGLEnvironment()\n\n    // link stats, so that we can easily access it in the program.\n    env.stats = env.link(stats)\n\n    // splat options and attributes to allow for dynamic nested properties\n    Object.keys(attributes.static).forEach(function (key) {\n      splatObject(env, attributes, key)\n    })\n    NESTED_OPTIONS.forEach(function (name) {\n      splatObject(env, options, name)\n    })\n\n    var args = parseArguments(options, attributes, uniforms, context, env)\n\n    emitDrawProc(env, args)\n    emitScopeProc(env, args)\n    emitBatchProc(env, args)\n\n    return extend(env.compile(), {\n      destroy: function () {\n        args.shader.program.destroy()\n      }\n    })\n  }\n\n  // ===========================================================================\n  // ===========================================================================\n  // POLL / REFRESH\n  // ===========================================================================\n  // ===========================================================================\n  return {\n    next: nextState,\n    current: currentState,\n    procs: (function () {\n      var env = createREGLEnvironment()\n      var poll = env.proc('poll')\n      var refresh = env.proc('refresh')\n      var common = env.block()\n      poll(common)\n      refresh(common)\n\n      var shared = env.shared\n      var GL = shared.gl\n      var NEXT_STATE = shared.next\n      var CURRENT_STATE = shared.current\n\n      common(CURRENT_STATE, '.dirty=false;')\n\n      emitPollFramebuffer(env, poll)\n      emitPollFramebuffer(env, refresh, null, true)\n\n      // Refresh updates all attribute state changes\n      var INSTANCING\n      if (extInstancing) {\n        INSTANCING = env.link(extInstancing)\n      }\n\n      // update vertex array bindings\n      if (extensions.oes_vertex_array_object) {\n        refresh(env.link(extensions.oes_vertex_array_object), '.bindVertexArrayOES(null);')\n      }\n      for (var i = 0; i < limits.maxAttributes; ++i) {\n        var BINDING = refresh.def(shared.attributes, '[', i, ']')\n        var ifte = env.cond(BINDING, '.buffer')\n        ifte.then(\n          GL, '.enableVertexAttribArray(', i, ');',\n          GL, '.bindBuffer(',\n          GL_ARRAY_BUFFER$2, ',',\n          BINDING, '.buffer.buffer);',\n          GL, '.vertexAttribPointer(',\n          i, ',',\n          BINDING, '.size,',\n          BINDING, '.type,',\n          BINDING, '.normalized,',\n          BINDING, '.stride,',\n          BINDING, '.offset);'\n        ).else(\n          GL, '.disableVertexAttribArray(', i, ');',\n          GL, '.vertexAttrib4f(',\n          i, ',',\n          BINDING, '.x,',\n          BINDING, '.y,',\n          BINDING, '.z,',\n          BINDING, '.w);',\n          BINDING, '.buffer=null;')\n        refresh(ifte)\n        if (extInstancing) {\n          refresh(\n            INSTANCING, '.vertexAttribDivisorANGLE(',\n            i, ',',\n            BINDING, '.divisor);')\n        }\n      }\n      refresh(\n        env.shared.vao, '.currentVAO=null;',\n        env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);')\n\n      Object.keys(GL_FLAGS).forEach(function (flag) {\n        var cap = GL_FLAGS[flag]\n        var NEXT = common.def(NEXT_STATE, '.', flag)\n        var block = env.block()\n        block('if(', NEXT, '){',\n          GL, '.enable(', cap, ')}else{',\n          GL, '.disable(', cap, ')}',\n          CURRENT_STATE, '.', flag, '=', NEXT, ';')\n        refresh(block)\n        poll(\n          'if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){',\n          block,\n          '}')\n      })\n\n      Object.keys(GL_VARIABLES).forEach(function (name) {\n        var func = GL_VARIABLES[name]\n        var init = currentState[name]\n        var NEXT, CURRENT\n        var block = env.block()\n        block(GL, '.', func, '(')\n        if (isArrayLike(init)) {\n          var n = init.length\n          NEXT = env.global.def(NEXT_STATE, '.', name)\n          CURRENT = env.global.def(CURRENT_STATE, '.', name)\n          block(\n            loop(n, function (i) {\n              return NEXT + '[' + i + ']'\n            }), ');',\n            loop(n, function (i) {\n              return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];'\n            }).join(''))\n          poll(\n            'if(', loop(n, function (i) {\n              return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']'\n            }).join('||'), '){',\n            block,\n            '}')\n        } else {\n          NEXT = common.def(NEXT_STATE, '.', name)\n          CURRENT = common.def(CURRENT_STATE, '.', name)\n          block(\n            NEXT, ');',\n            CURRENT_STATE, '.', name, '=', NEXT, ';')\n          poll(\n            'if(', NEXT, '!==', CURRENT, '){',\n            block,\n            '}')\n        }\n        refresh(block)\n      })\n\n      return env.compile()\n    })(),\n    compile: compileCommand\n  }\n}\n\nfunction stats () {\n  return {\n    vaoCount: 0,\n    bufferCount: 0,\n    elementsCount: 0,\n    framebufferCount: 0,\n    shaderCount: 0,\n    textureCount: 0,\n    cubeCount: 0,\n    renderbufferCount: 0,\n    maxTextureUnits: 0\n  }\n}\n\nvar GL_QUERY_RESULT_EXT = 0x8866\nvar GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867\nvar GL_TIME_ELAPSED_EXT = 0x88BF\n\nvar createTimer = function (gl, extensions) {\n  if (!extensions.ext_disjoint_timer_query) {\n    return null\n  }\n\n  // QUERY POOL BEGIN\n  var queryPool = []\n  function allocQuery () {\n    return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT()\n  }\n  function freeQuery (query) {\n    queryPool.push(query)\n  }\n  // QUERY POOL END\n\n  var pendingQueries = []\n  function beginQuery (stats) {\n    var query = allocQuery()\n    extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query)\n    pendingQueries.push(query)\n    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats)\n  }\n\n  function endQuery () {\n    extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT)\n  }\n\n  //\n  // Pending stats pool.\n  //\n  function PendingStats () {\n    this.startQueryIndex = -1\n    this.endQueryIndex = -1\n    this.sum = 0\n    this.stats = null\n  }\n  var pendingStatsPool = []\n  function allocPendingStats () {\n    return pendingStatsPool.pop() || new PendingStats()\n  }\n  function freePendingStats (pendingStats) {\n    pendingStatsPool.push(pendingStats)\n  }\n  // Pending stats pool end\n\n  var pendingStats = []\n  function pushScopeStats (start, end, stats) {\n    var ps = allocPendingStats()\n    ps.startQueryIndex = start\n    ps.endQueryIndex = end\n    ps.sum = 0\n    ps.stats = stats\n    pendingStats.push(ps)\n  }\n\n  // we should call this at the beginning of the frame,\n  // in order to update gpuTime\n  var timeSum = []\n  var queryPtr = []\n  function update () {\n    var ptr, i\n\n    var n = pendingQueries.length\n    if (n === 0) {\n      return\n    }\n\n    // Reserve space\n    queryPtr.length = Math.max(queryPtr.length, n + 1)\n    timeSum.length = Math.max(timeSum.length, n + 1)\n    timeSum[0] = 0\n    queryPtr[0] = 0\n\n    // Update all pending timer queries\n    var queryTime = 0\n    ptr = 0\n    for (i = 0; i < pendingQueries.length; ++i) {\n      var query = pendingQueries[i]\n      if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {\n        queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT)\n        freeQuery(query)\n      } else {\n        pendingQueries[ptr++] = query\n      }\n      timeSum[i + 1] = queryTime\n      queryPtr[i + 1] = ptr\n    }\n    pendingQueries.length = ptr\n\n    // Update all pending stat queries\n    ptr = 0\n    for (i = 0; i < pendingStats.length; ++i) {\n      var stats = pendingStats[i]\n      var start = stats.startQueryIndex\n      var end = stats.endQueryIndex\n      stats.sum += timeSum[end] - timeSum[start]\n      var startPtr = queryPtr[start]\n      var endPtr = queryPtr[end]\n      if (endPtr === startPtr) {\n        stats.stats.gpuTime += stats.sum / 1e6\n        freePendingStats(stats)\n      } else {\n        stats.startQueryIndex = startPtr\n        stats.endQueryIndex = endPtr\n        pendingStats[ptr++] = stats\n      }\n    }\n    pendingStats.length = ptr\n  }\n\n  return {\n    beginQuery: beginQuery,\n    endQuery: endQuery,\n    pushScopeStats: pushScopeStats,\n    update: update,\n    getNumPendingQueries: function () {\n      return pendingQueries.length\n    },\n    clear: function () {\n      queryPool.push.apply(queryPool, pendingQueries)\n      for (var i = 0; i < queryPool.length; i++) {\n        extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i])\n      }\n      pendingQueries.length = 0\n      queryPool.length = 0\n    },\n    restore: function () {\n      pendingQueries.length = 0\n      queryPool.length = 0\n    }\n  }\n}\n\nvar GL_COLOR_BUFFER_BIT = 16384\nvar GL_DEPTH_BUFFER_BIT = 256\nvar GL_STENCIL_BUFFER_BIT = 1024\n\nvar GL_ARRAY_BUFFER = 34962\n\nvar CONTEXT_LOST_EVENT = 'webglcontextlost'\nvar CONTEXT_RESTORED_EVENT = 'webglcontextrestored'\n\nvar DYN_PROP = 1\nvar DYN_CONTEXT = 2\nvar DYN_STATE = 3\n\nfunction find (haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction wrapREGL (args) {\n  var config = parseArgs(args)\n  if (!config) {\n    return null\n  }\n\n  var gl = config.gl\n  var glAttributes = gl.getContextAttributes()\n  var contextLost = gl.isContextLost()\n\n  var extensionState = createExtensionCache(gl, config)\n  if (!extensionState) {\n    return null\n  }\n\n  var stringStore = createStringStore()\n  var stats$$1 = stats()\n  var extensions = extensionState.extensions\n  var timer = createTimer(gl, extensions)\n\n  var START_TIME = clock()\n  var WIDTH = gl.drawingBufferWidth\n  var HEIGHT = gl.drawingBufferHeight\n\n  var contextState = {\n    tick: 0,\n    time: 0,\n    viewportWidth: WIDTH,\n    viewportHeight: HEIGHT,\n    framebufferWidth: WIDTH,\n    framebufferHeight: HEIGHT,\n    drawingBufferWidth: WIDTH,\n    drawingBufferHeight: HEIGHT,\n    pixelRatio: config.pixelRatio\n  }\n  var uniformState = {}\n  var drawState = {\n    elements: null,\n    primitive: 4, // GL_TRIANGLES\n    count: -1,\n    offset: 0,\n    instances: -1\n  }\n\n  var limits = wrapLimits(gl, extensions)\n  var bufferState = wrapBufferState(\n    gl,\n    stats$$1,\n    config,\n    destroyBuffer)\n  var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1)\n  var attributeState = wrapAttributeState(\n    gl,\n    extensions,\n    limits,\n    stats$$1,\n    bufferState,\n    elementState,\n    drawState)\n  function destroyBuffer (buffer) {\n    return attributeState.destroyBuffer(buffer)\n  }\n  var shaderState = wrapShaderState(gl, stringStore, stats$$1, config)\n  var textureState = createTextureSet(\n    gl,\n    extensions,\n    limits,\n    function () { core.procs.poll() },\n    contextState,\n    stats$$1,\n    config)\n  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config)\n  var framebufferState = wrapFBOState(\n    gl,\n    extensions,\n    limits,\n    textureState,\n    renderbufferState,\n    stats$$1)\n  var core = reglCore(\n    gl,\n    stringStore,\n    extensions,\n    limits,\n    bufferState,\n    elementState,\n    textureState,\n    framebufferState,\n    uniformState,\n    attributeState,\n    shaderState,\n    drawState,\n    contextState,\n    timer,\n    config)\n  var readPixels = wrapReadPixels(\n    gl,\n    framebufferState,\n    core.procs.poll,\n    contextState,\n    glAttributes, extensions, limits)\n\n  var nextState = core.next\n  var canvas = gl.canvas\n\n  var rafCallbacks = []\n  var lossCallbacks = []\n  var restoreCallbacks = []\n  var destroyCallbacks = [config.onDestroy]\n\n  var activeRAF = null\n  function handleRAF () {\n    if (rafCallbacks.length === 0) {\n      if (timer) {\n        timer.update()\n      }\n      activeRAF = null\n      return\n    }\n\n    // schedule next animation frame\n    activeRAF = raf.next(handleRAF)\n\n    // poll for changes\n    poll()\n\n    // fire a callback for all pending rafs\n    for (var i = rafCallbacks.length - 1; i >= 0; --i) {\n      var cb = rafCallbacks[i]\n      if (cb) {\n        cb(contextState, null, 0)\n      }\n    }\n\n    // flush all pending webgl calls\n    gl.flush()\n\n    // poll GPU timers *after* gl.flush so we don't delay command dispatch\n    if (timer) {\n      timer.update()\n    }\n  }\n\n  function startRAF () {\n    if (!activeRAF && rafCallbacks.length > 0) {\n      activeRAF = raf.next(handleRAF)\n    }\n  }\n\n  function stopRAF () {\n    if (activeRAF) {\n      raf.cancel(handleRAF)\n      activeRAF = null\n    }\n  }\n\n  function handleContextLoss (event) {\n    event.preventDefault()\n\n    // set context lost flag\n    contextLost = true\n\n    // pause request animation frame\n    stopRAF()\n\n    // lose context\n    lossCallbacks.forEach(function (cb) {\n      cb()\n    })\n  }\n\n  function handleContextRestored (event) {\n    // clear error code\n    gl.getError()\n\n    // clear context lost flag\n    contextLost = false\n\n    // refresh state\n    extensionState.restore()\n    shaderState.restore()\n    bufferState.restore()\n    textureState.restore()\n    renderbufferState.restore()\n    framebufferState.restore()\n    attributeState.restore()\n    if (timer) {\n      timer.restore()\n    }\n\n    // refresh state\n    core.procs.refresh()\n\n    // restart RAF\n    startRAF()\n\n    // restore context\n    restoreCallbacks.forEach(function (cb) {\n      cb()\n    })\n  }\n\n  if (canvas) {\n    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false)\n    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false)\n  }\n\n  function destroy () {\n    rafCallbacks.length = 0\n    stopRAF()\n\n    if (canvas) {\n      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss)\n      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored)\n    }\n\n    shaderState.clear()\n    framebufferState.clear()\n    renderbufferState.clear()\n    attributeState.clear()\n    textureState.clear()\n    elementState.clear()\n    bufferState.clear()\n\n    if (timer) {\n      timer.clear()\n    }\n\n    destroyCallbacks.forEach(function (cb) {\n      cb()\n    })\n  }\n\n  function compileProcedure (options) {\n    check$1(!!options, 'invalid args to regl({...})')\n    check$1.type(options, 'object', 'invalid args to regl({...})')\n\n    function flattenNestedOptions (options) {\n      var result = extend({}, options)\n      delete result.uniforms\n      delete result.attributes\n      delete result.context\n      delete result.vao\n\n      if ('stencil' in result && result.stencil.op) {\n        result.stencil.opBack = result.stencil.opFront = result.stencil.op\n        delete result.stencil.op\n      }\n\n      function merge (name) {\n        if (name in result) {\n          var child = result[name]\n          delete result[name]\n          Object.keys(child).forEach(function (prop) {\n            result[name + '.' + prop] = child[prop]\n          })\n        }\n      }\n      merge('blend')\n      merge('depth')\n      merge('cull')\n      merge('stencil')\n      merge('polygonOffset')\n      merge('scissor')\n      merge('sample')\n\n      if ('vao' in options) {\n        result.vao = options.vao\n      }\n\n      return result\n    }\n\n    function separateDynamic (object, useArrays) {\n      var staticItems = {}\n      var dynamicItems = {}\n      Object.keys(object).forEach(function (option) {\n        var value = object[option]\n        if (dynamic.isDynamic(value)) {\n          dynamicItems[option] = dynamic.unbox(value, option)\n          return\n        } else if (useArrays && Array.isArray(value)) {\n          for (var i = 0; i < value.length; ++i) {\n            if (dynamic.isDynamic(value[i])) {\n              dynamicItems[option] = dynamic.unbox(value, option)\n              return\n            }\n          }\n        }\n        staticItems[option] = value\n      })\n      return {\n        dynamic: dynamicItems,\n        static: staticItems\n      }\n    }\n\n    // Treat context variables separate from other dynamic variables\n    var context = separateDynamic(options.context || {}, true)\n    var uniforms = separateDynamic(options.uniforms || {}, true)\n    var attributes = separateDynamic(options.attributes || {}, false)\n    var opts = separateDynamic(flattenNestedOptions(options), false)\n\n    var stats$$1 = {\n      gpuTime: 0.0,\n      cpuTime: 0.0,\n      count: 0\n    }\n\n    var compiled = core.compile(opts, attributes, uniforms, context, stats$$1)\n\n    var draw = compiled.draw\n    var batch = compiled.batch\n    var scope = compiled.scope\n\n    // FIXME: we should modify code generation for batch commands so this\n    // isn't necessary\n    var EMPTY_ARRAY = []\n    function reserve (count) {\n      while (EMPTY_ARRAY.length < count) {\n        EMPTY_ARRAY.push(null)\n      }\n      return EMPTY_ARRAY\n    }\n\n    function REGLCommand (args, body) {\n      var i\n      if (contextLost) {\n        check$1.raise('context lost')\n      }\n      if (typeof args === 'function') {\n        return scope.call(this, null, args, 0)\n      } else if (typeof body === 'function') {\n        if (typeof args === 'number') {\n          for (i = 0; i < args; ++i) {\n            scope.call(this, null, body, i)\n          }\n        } else if (Array.isArray(args)) {\n          for (i = 0; i < args.length; ++i) {\n            scope.call(this, args[i], body, i)\n          }\n        } else {\n          return scope.call(this, args, body, 0)\n        }\n      } else if (typeof args === 'number') {\n        if (args > 0) {\n          return batch.call(this, reserve(args | 0), args | 0)\n        }\n      } else if (Array.isArray(args)) {\n        if (args.length) {\n          return batch.call(this, args, args.length)\n        }\n      } else {\n        return draw.call(this, args)\n      }\n    }\n\n    return extend(REGLCommand, {\n      stats: stats$$1,\n      destroy: function () {\n        compiled.destroy()\n      }\n    })\n  }\n\n  var setFBO = framebufferState.setFBO = compileProcedure({\n    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')\n  })\n\n  function clearImpl (_, options) {\n    var clearFlags = 0\n    core.procs.poll()\n\n    var c = options.color\n    if (c) {\n      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0)\n      clearFlags |= GL_COLOR_BUFFER_BIT\n    }\n    if ('depth' in options) {\n      gl.clearDepth(+options.depth)\n      clearFlags |= GL_DEPTH_BUFFER_BIT\n    }\n    if ('stencil' in options) {\n      gl.clearStencil(options.stencil | 0)\n      clearFlags |= GL_STENCIL_BUFFER_BIT\n    }\n\n    check$1(!!clearFlags, 'called regl.clear with no buffer specified')\n    gl.clear(clearFlags)\n  }\n\n  function clear (options) {\n    check$1(\n      typeof options === 'object' && options,\n      'regl.clear() takes an object as input')\n    if ('framebuffer' in options) {\n      if (options.framebuffer &&\n          options.framebuffer_reglType === 'framebufferCube') {\n        for (var i = 0; i < 6; ++i) {\n          setFBO(extend({\n            framebuffer: options.framebuffer.faces[i]\n          }, options), clearImpl)\n        }\n      } else {\n        setFBO(options, clearImpl)\n      }\n    } else {\n      clearImpl(null, options)\n    }\n  }\n\n  function frame (cb) {\n    check$1.type(cb, 'function', 'regl.frame() callback must be a function')\n    rafCallbacks.push(cb)\n\n    function cancel () {\n      // FIXME:  should we check something other than equals cb here?\n      // what if a user calls frame twice with the same callback...\n      //\n      var i = find(rafCallbacks, cb)\n      check$1(i >= 0, 'cannot cancel a frame twice')\n      function pendingCancel () {\n        var index = find(rafCallbacks, pendingCancel)\n        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1]\n        rafCallbacks.length -= 1\n        if (rafCallbacks.length <= 0) {\n          stopRAF()\n        }\n      }\n      rafCallbacks[i] = pendingCancel\n    }\n\n    startRAF()\n\n    return {\n      cancel: cancel\n    }\n  }\n\n  // poll viewport\n  function pollViewport () {\n    var viewport = nextState.viewport\n    var scissorBox = nextState.scissor_box\n    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0\n    contextState.viewportWidth =\n      contextState.framebufferWidth =\n      contextState.drawingBufferWidth =\n      viewport[2] =\n      scissorBox[2] = gl.drawingBufferWidth\n    contextState.viewportHeight =\n      contextState.framebufferHeight =\n      contextState.drawingBufferHeight =\n      viewport[3] =\n      scissorBox[3] = gl.drawingBufferHeight\n  }\n\n  function poll () {\n    contextState.tick += 1\n    contextState.time = now()\n    pollViewport()\n    core.procs.poll()\n  }\n\n  function refresh () {\n    textureState.refresh()\n    pollViewport()\n    core.procs.refresh()\n    if (timer) {\n      timer.update()\n    }\n  }\n\n  function now () {\n    return (clock() - START_TIME) / 1000.0\n  }\n\n  refresh()\n\n  function addListener (event, callback) {\n    check$1.type(callback, 'function', 'listener callback must be a function')\n\n    var callbacks\n    switch (event) {\n      case 'frame':\n        return frame(callback)\n      case 'lost':\n        callbacks = lossCallbacks\n        break\n      case 'restore':\n        callbacks = restoreCallbacks\n        break\n      case 'destroy':\n        callbacks = destroyCallbacks\n        break\n      default:\n        check$1.raise('invalid event, must be one of frame,lost,restore,destroy')\n    }\n\n    callbacks.push(callback)\n    return {\n      cancel: function () {\n        for (var i = 0; i < callbacks.length; ++i) {\n          if (callbacks[i] === callback) {\n            callbacks[i] = callbacks[callbacks.length - 1]\n            callbacks.pop()\n            return\n          }\n        }\n      }\n    }\n  }\n\n  var regl = extend(compileProcedure, {\n    // Clear current FBO\n    clear: clear,\n\n    // Short cuts for dynamic variables\n    prop: dynamic.define.bind(null, DYN_PROP),\n    context: dynamic.define.bind(null, DYN_CONTEXT),\n    this: dynamic.define.bind(null, DYN_STATE),\n\n    // executes an empty draw command\n    draw: compileProcedure({}),\n\n    // Resources\n    buffer: function (options) {\n      return bufferState.create(options, GL_ARRAY_BUFFER, false, false)\n    },\n    elements: function (options) {\n      return elementState.create(options, false)\n    },\n    texture: textureState.create2D,\n    cube: textureState.createCube,\n    renderbuffer: renderbufferState.create,\n    framebuffer: framebufferState.create,\n    framebufferCube: framebufferState.createCube,\n    vao: attributeState.createVAO,\n\n    // Expose context attributes\n    attributes: glAttributes,\n\n    // Frame rendering\n    frame: frame,\n    on: addListener,\n\n    // System limits\n    limits: limits,\n    hasExtension: function (name) {\n      return limits.extensions.indexOf(name.toLowerCase()) >= 0\n    },\n\n    // Read pixels\n    read: readPixels,\n\n    // Destroy regl and all associated resources\n    destroy: destroy,\n\n    // Direct GL state manipulation\n    _gl: gl,\n    _refresh: refresh,\n\n    poll: function () {\n      poll()\n      if (timer) {\n        timer.update()\n      }\n    },\n\n    // Current time\n    now: now,\n\n    // regl Statistics Information\n    stats: stats$$1\n  })\n\n  config.onDone(null, regl)\n\n  return regl\n}\n\nreturn wrapREGL;\n\n})));\n//# sourceMappingURL=regl.js.map\n","const setC2 = (out, x, y) => (!out && (out = []), out[0] = x, out[1] = y, out);\nconst setC3 = (out, x, y, z) => (!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out);\nconst setC4 = (out, x, y, z, w) => (!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out[3] = w, out);\nconst setC6 = (out, a, b, c, d, e, f) => (!out && (out = []), out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = f, out);\nconst setC = (out, ...values) => {\n  if (!out) return values;\n  for (let i = 0, n = values.length; i < n; i++) {\n    out[i] = values[i];\n  }\n  return out;\n};\nexport {\n  setC,\n  setC2,\n  setC3,\n  setC4,\n  setC6\n};\n","import { defMathOpN } from \"./compile/emit.js\";\nconst [mulN, mulN2, mulN3, mulN4] = defMathOpN(\"*\");\nexport {\n  mulN,\n  mulN2,\n  mulN3,\n  mulN4\n};\n","import { comp } from \"@thi.ng/transducers/comp\";\nimport { map } from \"@thi.ng/transducers/map\";\nimport { mapIndexed } from \"@thi.ng/transducers/map-indexed\";\nimport { range } from \"@thi.ng/transducers/range\";\nimport { str } from \"@thi.ng/transducers/str\";\nimport { take } from \"@thi.ng/transducers/take\";\nimport { transduce } from \"@thi.ng/transducers/transduce\";\nimport { zip } from \"@thi.ng/transducers/zip\";\nimport { vop } from \"../vop.js\";\nimport {\n  ARGS_V,\n  ARGS_VN,\n  ARGS_VV,\n  DEFAULT_OUT,\n  FN,\n  MATH,\n  MATH_N,\n  SARGS_VV,\n  SIGNED,\n  SIGNED_N,\n  UNSIGNED,\n  UNSIGNED_N\n} from \"./templates.js\";\nconst __lookup = (sym) => (i) => i > 1 ? `${sym}[i${sym}+${i}*s${sym}]` : i == 1 ? `${sym}[i${sym}+s${sym}]` : `${sym}[i${sym}]`;\nconst __indicesStrided = (sym) => map(__lookup(sym), range());\nconst __indices = (sym) => map((i) => `${sym}[${i}]`, range());\nconst __assemble = (dim, tpl, syms, ret = \"a\", opJoin = \"\", pre = \"\", post = \"\", strided = false) => [\n  pre,\n  transduce(\n    comp(\n      take(dim),\n      mapIndexed((i, x) => tpl(x, i))\n    ),\n    str(opJoin),\n    zip.apply(\n      null,\n      syms.split(\",\").map(strided ? __indicesStrided : __indices)\n    )\n  ),\n  post,\n  ret !== \"\" ? `return ${ret};` : \"\"\n];\nconst __assembleG = (tpl, syms, ret = \"a\", pre, post, strided = false) => [\n  pre,\n  \"for(let i=a.length;--i>=0;) {\",\n  tpl(\n    syms.split(\",\").map(strided ? (x) => `${x}[i${x}+i*s${x}]` : (x) => `${x}[i]`)\n  ),\n  \"}\",\n  post,\n  ret !== null ? `return ${ret};` : \"\"\n];\nconst __assembleS = (tpl, syms = ARGS_VV, ret = \"o\", pre = DEFAULT_OUT, post) => [\n  pre,\n  \"while(k-->0) {\",\n  tpl(syms.split(\",\").map((x) => `${x}[i${x}+k*s${x}]`)),\n  \"}\",\n  post,\n  ret !== null ? `return ${ret};` : \"\"\n];\nconst __defaultOut = (o, args) => `!${o} && (${o}=${args.split(\",\")[1]});`;\nconst compile = (dim, tpl, args, syms = args, ret = \"a\", opJoin, pre, post, strided = false) => new Function(\n  args,\n  __assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")\n);\nconst compileHOF = (dim, fns, tpl, hofArgs, args, syms = args, ret = \"a\", opJoin = \"\", pre, post, strided = false) => {\n  return new Function(\n    hofArgs,\n    `return (${args})=>{${__assemble(\n      dim,\n      tpl,\n      syms,\n      ret,\n      opJoin,\n      pre,\n      post,\n      strided\n    ).join(\"\")}}`\n  )(...fns);\n};\nconst compileG = (tpl, args, syms = args, ret = \"a\", pre, post, strided = false) => new Function(\n  args,\n  __assembleG(tpl, syms, ret, pre, post, strided).join(\"\")\n);\nconst compileS = (tpl, args, syms = args, ret, pre, post) => new Function(args, __assembleS(tpl, syms, ret, pre, post).join(\"\"));\nconst compileGHOF = (fns, tpl, hofArgs, args, syms = args, ret = \"a\", pre, post, strided = false) => new Function(\n  hofArgs,\n  `return (${args})=>{${__assembleG(\n    tpl,\n    syms,\n    ret,\n    pre,\n    post,\n    strided\n  ).join(\"\")}}`\n)(...fns);\nconst defOp = (tpl, args = ARGS_VV, syms, ret = \"o\", dispatch = 1, pre) => {\n  syms = syms || args;\n  pre = pre != null ? pre : __defaultOut(ret, args);\n  const fn = vop(dispatch);\n  const $ = (dim) => fn.add(dim, compile(dim, tpl, args, syms, ret, \"\", pre));\n  fn.default(compileG(tpl, args, syms, ret, pre));\n  return [fn, $(2), $(3), $(4)];\n};\nconst defFnOp = (op) => defOp(FN(op), ARGS_V);\nconst defHofOp = (op, tpl, args = ARGS_V, syms, ret = \"o\", dispatch = 1, pre) => {\n  const _tpl = tpl || FN(\"op\");\n  syms = syms || args;\n  pre = pre != null ? pre : __defaultOut(ret, args);\n  const fn = vop(dispatch);\n  const $ = (dim) => fn.add(\n    dim,\n    compileHOF(dim, [op], _tpl, \"op\", args, syms, ret, \"\", pre)\n  );\n  fn.default(compileGHOF([op], _tpl, \"op\", args, syms, ret, pre));\n  return [fn, $(2), $(3), $(4)];\n};\nconst defOpS = (tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n  compileS(tpl, `${args},k,${idxArgs}`, syms, ret, pre),\n  ...sizes.map(\n    (dim) => compile(\n      dim,\n      tpl,\n      `${args},${idxArgs}`,\n      syms,\n      ret,\n      \"\",\n      pre != null ? pre : __defaultOut(ret, args),\n      \"\",\n      true\n    )\n  )\n];\nconst defHofOpS = (op, tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n  new Function(\n    \"op\",\n    `return (${args},k,${idxArgs})=>{${__assembleS(\n      tpl,\n      syms,\n      ret,\n      pre\n    ).join(\"\")}}`\n  )(op),\n  ...sizes.map(\n    (dim) => compileHOF(\n      dim,\n      [op],\n      tpl,\n      \"op\",\n      `${args},${idxArgs}`,\n      syms,\n      ret,\n      \"\",\n      pre != null ? pre : __defaultOut(ret, args),\n      \"\",\n      true\n    )\n  )\n];\nconst defMathOp = (op) => defOp(MATH(op));\nconst defMathOpN = (op) => defOp(MATH_N(op), ARGS_VN);\nconst defBitOp = (op, signed = false) => defOp((signed ? SIGNED : UNSIGNED)(op));\nconst defBitOpN = (op, signed = false) => defOp((signed ? SIGNED_N : UNSIGNED_N)(op), ARGS_VN);\nexport {\n  __defaultOut,\n  compile,\n  compileG,\n  compileGHOF,\n  compileHOF,\n  compileS,\n  defBitOp,\n  defBitOpN,\n  defFnOp,\n  defHofOp,\n  defHofOpS,\n  defMathOp,\n  defMathOpN,\n  defOp,\n  defOpS\n};\n","import { comp as _comp } from \"@thi.ng/compose/comp\";\nimport { ensureTransducer } from \"./ensure.js\";\nfunction comp(...fns) {\n  fns = fns.map(ensureTransducer);\n  return _comp.apply(null, fns);\n}\nexport {\n  comp\n};\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nfunction comp(...fns) {\n  let [a, b, c, d, e, f, g, h, i, j] = fns;\n  switch (fns.length) {\n    case 0:\n      illegalArity(0);\n    case 1:\n      return a;\n    case 2:\n      return (...args) => a(b(...args));\n    case 3:\n      return (...args) => a(b(c(...args)));\n    case 4:\n      return (...args) => a(b(c(d(...args))));\n    case 5:\n      return (...args) => a(b(c(d(e(...args)))));\n    case 6:\n      return (...args) => a(b(c(d(e(f(...args))))));\n    case 7:\n      return (...args) => a(b(c(d(e(f(g(...args)))))));\n    case 8:\n      return (...args) => a(b(c(d(e(f(g(h(...args))))))));\n    case 9:\n      return (...args) => a(b(c(d(e(f(g(h(i(...args)))))))));\n    case 10:\n    default:\n      const fn = (...args) => a(b(c(d(e(f(g(h(i(j(...args))))))))));\n      return fns.length === 10 ? fn : comp(fn, ...fns.slice(10));\n  }\n}\nfunction compLeft(...fns) {\n  return comp.apply(null, fns.reverse());\n}\nconst compL = compLeft;\nfunction compAsync(...fns) {\n  return async (...args) => {\n    let n = fns.length - 1;\n    let res = fns[n](...args);\n    while (n-- > 0) {\n      res = await fns[n](res);\n    }\n    return res;\n  };\n}\nexport {\n  comp,\n  compAsync,\n  compL,\n  compLeft\n};\n","import { defError } from \"./deferror.js\";\nconst IllegalArityError = defError(() => \"illegal arity\");\nconst illegalArity = (n) => {\n  throw new IllegalArityError(n);\n};\nexport {\n  IllegalArityError,\n  illegalArity\n};\n","const defError = (prefix, suffix = (msg) => msg !== void 0 ? \": \" + msg : \"\") => class extends Error {\n  origMessage;\n  constructor(msg) {\n    super(prefix(msg) + suffix(msg));\n    this.origMessage = msg !== void 0 ? String(msg) : \"\";\n  }\n};\nexport {\n  defError\n};\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nconst ensureTransducer = (x) => implementsFunction(x, \"xform\") ? x.xform() : x;\nexport {\n  ensureTransducer\n};\n","const implementsFunction = (x, fn) => x != null && typeof x[fn] === \"function\";\nexport {\n  implementsFunction\n};\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator1 } from \"./iterator.js\";\nfunction map(fn, src) {\n  return isIterable(src) ? iterator1(map(fn), src) : (rfn) => {\n    const r = rfn[2];\n    return compR(rfn, (acc, x) => r(acc, fn(x)));\n  };\n}\nconst mapA = (fn, src) => [\n  ...map(fn, src)\n];\nexport {\n  map,\n  mapA\n};\n","const isIterable = (x) => x != null && typeof x[Symbol.iterator] === \"function\";\nexport {\n  isIterable\n};\n","const compR = (rfn, fn) => [rfn[0], rfn[1], fn];\nexport {\n  compR\n};\n","import { NO_OP, SEMAPHORE } from \"@thi.ng/api/api\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { push } from \"./push.js\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nfunction* iterator(xform, src) {\n  const rfn = ensureTransducer(xform)(push());\n  const complete = rfn[1];\n  const reduce = rfn[2];\n  for (let x of src) {\n    const y = reduce([], x);\n    if (isReduced(y)) {\n      yield* unreduced(complete(y.deref()));\n      return;\n    }\n    if (y.length) {\n      yield* y;\n    }\n  }\n  yield* unreduced(complete([]));\n}\nfunction* iterator1(xform, src) {\n  const reduce = ensureTransducer(xform)([NO_OP, NO_OP, (_, x) => x])[2];\n  for (let x of src) {\n    let y = reduce(SEMAPHORE, x);\n    if (isReduced(y)) {\n      y = unreduced(y.deref());\n      if (y !== SEMAPHORE) {\n        yield y;\n      }\n      return;\n    }\n    if (y !== SEMAPHORE) {\n      yield y;\n    }\n  }\n}\nconst __iter = (xform, args, impl = iterator1) => {\n  const n = args.length - 1;\n  return isIterable(args[n]) ? args.length > 1 ? impl(xform.apply(null, args.slice(0, n)), args[n]) : impl(xform(), args[0]) : void 0;\n};\nexport {\n  __iter,\n  iterator,\n  iterator1\n};\n","const DEFAULT_EPS = 1e-6;\nconst SEMAPHORE = Symbol();\nconst NO_OP = () => {\n};\nconst EVENT_ALL = \"*\";\nconst EVENT_ENABLE = \"enable\";\nconst EVENT_DISABLE = \"disable\";\nexport {\n  DEFAULT_EPS,\n  EVENT_ALL,\n  EVENT_DISABLE,\n  EVENT_ENABLE,\n  NO_OP,\n  SEMAPHORE\n};\n","import { reducer } from \"./reduce.js\";\nfunction push(src) {\n  return src ? [...src] : reducer(\n    () => [],\n    (acc, x) => (acc.push(x), acc)\n  );\n}\nexport {\n  push\n};\n","import { identity } from \"@thi.ng/api/fn\";\nimport { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { isArrayLike } from \"@thi.ng/checks/is-arraylike\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nconst __parseArgs = (args) => args.length === 2 ? [void 0, args[1]] : args.length === 3 ? [args[1], args[2]] : illegalArity(args.length);\nfunction reduce(...args) {\n  const rfn = args[0];\n  const init = rfn[0];\n  const complete = rfn[1];\n  const reduce2 = rfn[2];\n  args = __parseArgs(args);\n  const acc = args[0] == null ? init() : args[0];\n  const src = args[1];\n  return unreduced(\n    complete(\n      implementsFunction(src, \"$reduce\") ? src.$reduce(reduce2, acc) : isArrayLike(src) ? __reduceArray(reduce2, acc, src) : __reduceIterable(reduce2, acc, src)\n    )\n  );\n}\nfunction reduceRight(...args) {\n  const [init, complete, reduce2] = args[0];\n  args = __parseArgs(args);\n  let acc = args[0] == null ? init() : args[0];\n  const src = args[1];\n  for (let i = src.length; i-- > 0; ) {\n    acc = reduce2(acc, src[i]);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return unreduced(complete(acc));\n}\nconst __reduceArray = (rfn, acc, src) => {\n  for (let i = 0, n = src.length; i < n; i++) {\n    acc = rfn(acc, src[i]);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return acc;\n};\nconst __reduceIterable = (rfn, acc, src) => {\n  for (let x of src) {\n    acc = rfn(acc, x);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return acc;\n};\nconst reducer = (init, rfn) => [init, identity, rfn];\nconst $$reduce = (rfn, args) => {\n  const n = args.length - 1;\n  return isIterable(args[n]) ? args.length > 1 ? reduce(rfn.apply(null, args.slice(0, n)), args[n]) : reduce(rfn(), args[0]) : void 0;\n};\nexport {\n  $$reduce,\n  reduce,\n  reduceRight,\n  reducer\n};\n","const identity = (x) => x;\nconst always = () => true;\nconst never = () => false;\nexport {\n  always,\n  identity,\n  never\n};\n","const isArrayLike = (x) => x != null && typeof x !== \"function\" && x.length !== void 0;\nexport {\n  isArrayLike\n};\n","class Reduced {\n  value;\n  constructor(val) {\n    this.value = val;\n  }\n  deref() {\n    return this.value;\n  }\n}\nconst reduced = (x) => new Reduced(x);\nconst isReduced = (x) => x instanceof Reduced;\nconst ensureReduced = (x) => x instanceof Reduced ? x : new Reduced(x);\nconst unreduced = (x) => x instanceof Reduced ? x.deref() : x;\nexport {\n  Reduced,\n  ensureReduced,\n  isReduced,\n  reduced,\n  unreduced\n};\n","import { compR } from \"./compr.js\";\nimport { __iter } from \"./iterator.js\";\nfunction mapIndexed(...args) {\n  return __iter(mapIndexed, args) || ((rfn) => {\n    const r = rfn[2];\n    const fn = args[0];\n    let i = args[1] || 0;\n    return compR(rfn, (acc, x) => r(acc, fn(i++, x)));\n  });\n}\nexport {\n  mapIndexed\n};\n","import { isReduced, Reduced } from \"./reduced.js\";\nfunction range(from, to, step) {\n  return new Range(from, to, step);\n}\nclass Range {\n  from;\n  to;\n  step;\n  constructor(from, to, step) {\n    if (from === void 0) {\n      from = 0;\n      to = Infinity;\n    } else if (to === void 0) {\n      to = from;\n      from = 0;\n    }\n    step = step === void 0 ? from < to ? 1 : -1 : step;\n    this.from = from;\n    this.to = to;\n    this.step = step;\n  }\n  *[Symbol.iterator]() {\n    let { from, to, step } = this;\n    if (step > 0) {\n      while (from < to) {\n        yield from;\n        from += step;\n      }\n    } else if (step < 0) {\n      while (from > to) {\n        yield from;\n        from += step;\n      }\n    }\n  }\n  $reduce(rfn, acc) {\n    const step = this.step;\n    if (step > 0) {\n      for (let i = this.from, n = this.to; i < n && !isReduced(acc); i += step) {\n        acc = rfn(acc, i);\n      }\n    } else {\n      for (let i = this.from, n = this.to; i > n && !isReduced(acc); i += step) {\n        acc = rfn(acc, i);\n      }\n    }\n    return acc;\n  }\n}\nexport {\n  Range,\n  range\n};\n","import { reducer } from \"./reduce.js\";\nfunction str(sep, src) {\n  sep = sep || \"\";\n  let first = true;\n  return src ? [...src].join(sep) : reducer(\n    () => \"\",\n    (acc, x) => (acc = first ? acc + x : acc + sep + x, first = false, acc)\n  );\n}\nexport {\n  str\n};\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator } from \"./iterator.js\";\nimport { ensureReduced, reduced } from \"./reduced.js\";\nfunction take(n, src) {\n  return isIterable(src) ? iterator(take(n), src) : (rfn) => {\n    const r = rfn[2];\n    let m = n;\n    return compR(\n      rfn,\n      (acc, x) => --m > 0 ? r(acc, x) : m === 0 ? ensureReduced(r(acc, x)) : reduced(acc)\n    );\n  };\n}\nexport {\n  take\n};\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { map } from \"./map.js\";\nimport { reduce, reduceRight } from \"./reduce.js\";\nfunction transduce(...args) {\n  return $transduce(transduce, reduce, args);\n}\nfunction transduceRight(...args) {\n  return $transduce(transduceRight, reduceRight, args);\n}\nconst $transduce = (tfn, rfn, args) => {\n  let acc, src;\n  switch (args.length) {\n    case 4:\n      src = args[3];\n      acc = args[2];\n      break;\n    case 3:\n      src = args[2];\n      break;\n    case 2:\n      return map((x) => tfn(args[0], args[1], x));\n    default:\n      illegalArity(args.length);\n  }\n  return rfn(ensureTransducer(args[0])(args[1]), acc, src);\n};\nexport {\n  transduce,\n  transduceRight\n};\n","function* zip(...src) {\n  const iters = src.map((s) => s[Symbol.iterator]());\n  while (true) {\n    const tuple = [];\n    for (let i of iters) {\n      let v = i.next();\n      if (v.done) {\n        return;\n      }\n      tuple.push(v.value);\n    }\n    yield tuple;\n  }\n}\nexport {\n  zip\n};\n","import { unsupported } from \"@thi.ng/errors/unsupported\";\nconst vop = (dispatch = 0) => {\n  const impls = new Array(5);\n  let fallback;\n  const fn = (...args) => {\n    const g = impls[args[dispatch].length] || fallback;\n    return g ? g(...args) : unsupported(`no impl for vec size ${args[dispatch].length}`);\n  };\n  fn.add = (dim, fn2) => impls[dim] = fn2;\n  fn.default = (fn2) => fallback = fn2;\n  fn.impl = (dim) => impls[dim] || fallback;\n  return fn;\n};\nexport {\n  vop\n};\n","import { defError } from \"./deferror.js\";\nconst UnsupportedOperationError = defError(\n  () => \"unsupported operation\"\n);\nconst unsupported = (msg) => {\n  throw new UnsupportedOperationError(msg);\n};\nexport {\n  UnsupportedOperationError,\n  unsupported\n};\n","const ARGS_V = \"o,a\";\nconst ARGS_VV = \"o,a,b\";\nconst ARGS_VVV = \"o,a,b,c\";\nconst ARGS_VN = \"o,a,n\";\nconst ARGS_VNV = \"o,a,n,b\";\nconst ARGS_VVN = \"o,a,b,n\";\nconst SARGS_V = \"io=0,ia=0,so=1,sa=1\";\nconst SARGS_VV = \"io=0,ia=0,ib=0,so=1,sa=1,sb=1\";\nconst SARGS_VVV = \"io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1\";\nconst DEFAULT_OUT = \"!o&&(o=a);\";\nconst NEW_OUT = \"!o&&(o=[]);\";\nconst NEW_OUT_A = \"!a&&(a=[]);\";\nconst MATH = (op) => ([o, a, b]) => `${o}=${a}${op}${b};`;\nconst MATH_N = (op) => ([o, a]) => `${o}=${a}${op}n;`;\nconst MATH2 = (op1, op2) => ([o, a, b, c]) => `${o}=(${a}${op1}${b})${op2}${c};`;\nconst MATH2_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}${b})${op2}n;`;\nconst MATH2A_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}n)${op2}${b};`;\nconst SIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})|0;`;\nconst UNSIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})>>>0;`;\nconst SIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)|0;`;\nconst UNSIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)>>>0;`;\nconst FN = (op = \"op\") => ([o, a]) => `${o}=${op}(${a});`;\nconst FN2 = (op = \"op\") => ([o, a, b]) => `${o}=${op}(${a},${b});`;\nconst FN3 = (op = \"op\") => ([o, a, b, c]) => `${o}=${op}(${a},${b},${c});`;\nconst FN5 = (op = \"op\") => ([o, a, b, c, d, e]) => `${o}=${op}(${a},${b},${c},${d},${e});`;\nconst FN_N = (op = \"op\") => ([o, a]) => `${o}=${op}(${a},n);`;\nconst DOT = ([a, b]) => `${a}*${b}`;\nconst DOT_G = ([a, b]) => `s+=${a}*${b};`;\nconst SET = ([o, a]) => `${o}=${a};`;\nconst SET_N = ([a]) => `${a}=n;`;\nconst MIX = ([o, a, b, c]) => `${o}=${a}+(${b}-${a})*${c};`;\nconst MIX_N = ([o, a, b]) => `${o}=${a}+(${b}-${a})*n;`;\nexport {\n  ARGS_V,\n  ARGS_VN,\n  ARGS_VNV,\n  ARGS_VV,\n  ARGS_VVN,\n  ARGS_VVV,\n  DEFAULT_OUT,\n  DOT,\n  DOT_G,\n  FN,\n  FN2,\n  FN3,\n  FN5,\n  FN_N,\n  MATH,\n  MATH2,\n  MATH2A_N,\n  MATH2_N,\n  MATH_N,\n  MIX,\n  MIX_N,\n  NEW_OUT,\n  NEW_OUT_A,\n  SARGS_V,\n  SARGS_VV,\n  SARGS_VVV,\n  SET,\n  SET_N,\n  SIGNED,\n  SIGNED_N,\n  UNSIGNED,\n  UNSIGNED_N\n};\n","import { defMathOpN } from \"./compile/emit.js\";\nconst [divN, divN2, divN3, divN4] = defMathOpN(\"/\");\nexport {\n  divN,\n  divN2,\n  divN3,\n  divN4\n};\n","import { defOp } from \"./compile/emit.js\";\nconst [invert, invert2, invert3, invert4] = defOp(\n  ([o, a]) => `${o}=1/${a};`\n);\nexport {\n  invert,\n  invert2,\n  invert3,\n  invert4\n};\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like list.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @see Array.prototype.map\n * @see [reduce]{@link ./reduce.js}\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, and any given `to`.\n * @param {array|*} a The list to map over, array or array-like.\n * @param {false|*} [to=[]] The initial accumulator, if given; `a` if falsey; or\n *     a new array if not given.\n *\n * @returns {*} The result of mapping `to` through the iteratee function over\n *     the `a` list.\n */\nexport const map = (f, a, to = []) => reduce((to, v, i) => {\n        to[i] = f(v, i, a, to);\n\n        return to;\n    },\n    a, (to || a));\n\nexport default map;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like list.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @see Array.prototype.reduce\n *\n * @param {function} f Iteratee function, called as `Array`'s `reduce` does.\n * @param {array|*} a List to reduce over, array or array-like.\n * @param {*} [to] The initial accumulator, if any; handled like `Array`'s\n *     `reduce` does, given or not.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, to) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((to === undefined)? r.call(a, f) : r.call(a, f, to));\n\nexport default reduce;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @see Array.prototype.forEach\n *\n * @param {function} f The iteratee function.\n * @param {array|*} a List to iterate over, array or array-like.\n *\n * @returns {array|*} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n","import wrapIndex from './wrap-index';\n\n/**\n * Gives an index wrapped over a given length, or the entry at the wrapped\n * index in a given list; wrapped backwards, forwards, never exceeding bounds.\n *\n * @see [wrapIndex]{@link ./wrap-index.js}\n *\n * @param {number} i The index to wrap.\n * @param {number|array|*} l List to index, array or array-like; or numeric\n *     length for a numeric `wrapIndex` result instead.\n * @param {number} [end=l.length] Length to wrap the index over; allows wrapping\n *     over a sub-range of a list; if not given, tries the list's length.\n *\n * @returns {number|*} The index wrapped over the given length by `wrapIndex`;\n *     or the list entry at the wrapped index, if given a list.\n */\nexport const wrap = (i, l, end = l.length) =>\n    ((end || (end === 0))? l[wrapIndex(i, end)] : wrapIndex(i, l));\n\nexport default wrap;\n","/**\n * Wraps an index over a given length, so that indexes greater than the length\n * loop back past `0`, and indexes less than `0` loop backward from the length.\n * Similar to the indexing behaviour of `Array`'s `slice`.\n * Indexing is the equivalent of a true _modulo_ operator, where JavaScript's\n * `%` operator is actually a _remainder_ operator.\n *\n * @see Array.prototpye.slice\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\n *\n * @param {number} i Index to wrap.\n * @param {number} l Length to wrap the index over.\n *\n * @returns {number} The index wrapped over the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\nexport default wrapIndex;\n","const { fill } = Array.prototype;\nconst { isFinite } = Number;\nconst { floor } = Math;\n\n/**\n * Fills list with the given items filled via `Array`'s `fill`.\n *\n * @see Array.constructor\n * @see Array.prototype.fill\n * @see Number.isFinite\n *\n * @param {number|array|*} [l=0] How many items to create, or existing list.\n * @param {*} [value] A value to fill the array with; for `Array`'s `fill`.\n * @param {number} [start] Start index, inclusive; for `Array`'s `fill`.\n * @param {number} [end] End index, exclusive; for `Array`'s `fill`.\n *\n * @returns {array|*} List with items filled as given.\n */\nexport const range = (l = 0, value, start, end) =>\n    fill.call(((isFinite(l))? Array(floor(l)) : l), value, start, end);\n\nexport default range;\n","/**\r\n * @module fps-indicator\r\n */\r\n'use strict'\r\n\r\n\r\nvar raf = require('raf')\r\nvar now = require('right-now')\r\nvar css = require('to-css')\r\n\r\nmodule.exports = fps\r\n\r\n\r\n\r\nfunction fps (opts) {\r\n\tif (!(this instanceof fps)) return new fps(opts)\r\n\r\n\tif (typeof opts === 'string') {\r\n\t\tif (positions[opts]) opts = {position: opts}\r\n\t\telse opts = {container: opts}\r\n\t}\r\n\topts = opts || {}\r\n\r\n\tif (opts.container) {\r\n\t\tif (typeof opts.container === 'string') {\r\n\t\t\tthis.container = document.querySelector(opts.container)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.container = opts.container\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tthis.container = document.body || document.documentElement\r\n\t}\r\n\r\n\t//init fps\r\n\tthis.element = document.createElement('div')\r\n\tthis.element.className = 'fps'\r\n\tthis.element.innerHTML = [\r\n\t\t'<div class=\"fps-bg\"></div>',\r\n\t\t'<canvas class=\"fps-canvas\"></canvas>',\r\n\t\t'<span class=\"fps-text\">fps <span class=\"fps-value\">60.0</span></span>'\r\n\t].join('')\r\n\tthis.container.appendChild(this.element)\r\n\r\n\tthis.canvas = this.element.querySelector('.fps-canvas')\r\n\tthis.textEl = this.element.querySelector('.fps-text')\r\n\tthis.valueEl = this.element.querySelector('.fps-value')\r\n\tthis.bgEl = this.element.querySelector('.fps-bg')\r\n\r\n\tvar style = opts.css || opts.style || ''\r\n\tif (typeof style === 'object') style = css(style)\r\n\r\n\tvar posCss = ''\r\n\tposCss = positions[opts.position] || positions['top-left']\r\n\r\n\tthis.element.style.cssText = [\r\n\t\t'line-height: 1;',\r\n\t\t'position: fixed;',\r\n\t\t'font-family: Roboto, sans-serif;',\r\n\t\t'z-index: 1;',\r\n\t\t'font-weight: 300;',\r\n\t\t'font-size: small;',\r\n\t\t'padding: 1rem;',\r\n\t\tposCss,\r\n\t\topts.color ? ('color:' + opts.color) : '',\r\n\t\tstyle\r\n\t].join('')\r\n\r\n\tthis.canvas.style.cssText = [\r\n\t\t'position: relative;',\r\n\t\t'width: 2em;',\r\n\t\t'height: 1em;',\r\n\t\t'display: block;',\r\n\t\t'float: left;',\r\n\t\t'margin-right: .333em;'\r\n\t].join('')\r\n\r\n\tthis.bgEl.style.cssText = [\r\n\t\t'position: absolute;',\r\n\t\t'height: 1em;',\r\n\t\t'width: 2em;',\r\n\t\t'background: currentcolor;',\r\n\t\t'opacity: .1;'\r\n\t].join('')\r\n\r\n\tthis.canvas.width = parseInt(getComputedStyle(this.canvas).width) || 1\r\n\tthis.canvas.height = parseInt(getComputedStyle(this.canvas).height) || 1\r\n\r\n\tthis.context = this.canvas.getContext('2d')\r\n\r\n\tvar ctx = this.context\r\n\tvar w = this.canvas.width\r\n\tvar h = this.canvas.height\r\n\tvar count = 0\r\n\tvar lastTime = 0\r\n\tvar values = opts.values || Array(this.canvas.width)\r\n\tvar period = opts.period || 1000\r\n\tvar max = opts.max || 100\r\n\r\n\t//enable update routine\r\n\tvar that = this\r\n\traf(function measure () {\r\n\t\tcount++\r\n\t\tvar t = now()\r\n\r\n\t\tif (t - lastTime > period) {\r\n\t\t\tlastTime = t\r\n\t\t\tvalues.push(count / (max * period * 0.001))\r\n\t\t\tvalues = values.slice(-w)\r\n\t\t\tcount = 0\r\n\r\n\t\t\tctx.clearRect(0, 0, w, h)\r\n\t\t\tctx.fillStyle = getComputedStyle(that.canvas).color\r\n\t\t\tfor (var i = w; i--;) {\r\n\t\t\t\tvar value = values[i]\r\n\t\t\t\tif (value == null) break\r\n\t\t\t\tctx.fillRect(i, h - h * value, 1, h * value)\r\n\t\t\t}\r\n\r\n\t\t\tthat.valueEl.innerHTML = (values[values.length - 1]*max).toFixed(1)\r\n\t\t}\r\n\r\n\t\traf(measure)\r\n\t})\r\n}\r\n\r\n\r\nvar positions = {\r\n\t'top-left': 'left: 0; top: 0;',\r\n\t'top-right': 'right: 0; top: 0;',\r\n\t'bottom-right': 'right: 0; bottom: 0;',\r\n\t'bottom-left': 'left: 0; bottom: 0;'\r\n}\r\n","var now = require('performance-now')\n  , root = typeof window === 'undefined' ? global : window\n  , vendors = ['moz', 'webkit']\n  , suffix = 'AnimationFrame'\n  , raf = root['request' + suffix]\n  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]\n\nfor(var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix]\n  caf = root[vendors[i] + 'Cancel' + suffix]\n      || root[vendors[i] + 'CancelRequest' + suffix]\n}\n\n// Some versions of FF have rAF but not cAF\nif(!raf || !caf) {\n  var last = 0\n    , id = 0\n    , queue = []\n    , frameDuration = 1000 / 60\n\n  raf = function(callback) {\n    if(queue.length === 0) {\n      var _now = now()\n        , next = Math.max(0, frameDuration - (_now - last))\n      last = next + _now\n      setTimeout(function() {\n        var cp = queue.slice(0)\n        // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n        queue.length = 0\n        for(var i = 0; i < cp.length; i++) {\n          if(!cp[i].cancelled) {\n            try{\n              cp[i].callback(last)\n            } catch(e) {\n              setTimeout(function() { throw e }, 0)\n            }\n          }\n        }\n      }, Math.round(next))\n    }\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    })\n    return id\n  }\n\n  caf = function(handle) {\n    for(var i = 0; i < queue.length; i++) {\n      if(queue[i].handle === handle) {\n        queue[i].cancelled = true\n      }\n    }\n  }\n}\n\nmodule.exports = function(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn)\n}\nmodule.exports.cancel = function() {\n  caf.apply(root, arguments)\n}\nmodule.exports.polyfill = function(object) {\n  if (!object) {\n    object = root;\n  }\n  object.requestAnimationFrame = raf\n  object.cancelAnimationFrame = caf\n}\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","if performance? and performance.now\n  module.exports = -> performance.now()\nelse if process? and process.hrtime\n  module.exports = -> (getNanoSeconds() - nodeLoadTime) / 1e6\n  hrtime = process.hrtime\n  getNanoSeconds = ->\n    hr = hrtime()\n    hr[0] * 1e9 + hr[1]\n  moduleLoadTime = getNanoSeconds()\n  upTime = process.uptime() * 1e9\n  nodeLoadTime = moduleLoadTime - upTime\nelse if Date.now\n  module.exports = -> Date.now() - loadTime\n  loadTime = Date.now()\nelse\n  module.exports = -> new Date().getTime() - loadTime\n  loadTime = new Date().getTime()\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","'use strict';\nvar repeatString = require('repeat-string');\nvar objectAssign = require('object-assign');\nvar arrify = require('arrify');\n\nmodule.exports = function toCss(object, opts) {\n\topts = objectAssign({\n\t\tindent: '',\n\t\tproperty: identity,\n\t\tvalue: identity,\n\t\tselector: identity\n\t}, opts);\n\n\tif (typeof opts.indent === 'number') {\n\t\topts.indent = repeatString(' ', opts.indent);\n\t}\n\n\tfunction props(prop, val) {\n\t\treturn arrify(prop).reduce(function (props, p) {\n\t\t\treturn props.concat(opts.property(p, val));\n\t\t}, []);\n\t}\n\n\tfunction values(val, prop) {\n\t\treturn arrify(val).reduce(function (vals, v) {\n\t\t\treturn vals.concat(opts.value(v, prop));\n\t\t}, []);\n\t}\n\n\tfunction selectors(sel, value) {\n\t\treturn arrify(sel).reduce(function (sels, s) {\n\t\t\treturn sels.concat(opts.selector(s, value));\n\t\t}, []);\n\t}\n\n\tfunction _toCss(obj, level) {\n\t\tvar str = '';\n\t\tObject.keys(obj).forEach(function (sel) {\n\t\t\tvar value = obj[sel];\n\t\t\tif (isLastLevel(value)) {\n\t\t\t\tstr += rule(props(sel, value), values(value, sel), opts.indent, level - 1);\n\t\t\t\treturn;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(function (val) {\n\t\t\t\t\tstr += _toCss(nest(sel, val), level);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tselectors(sel, value).forEach(function (selector) {\n\t\t\t\tstr += start(selector, opts.indent, level);\n\t\t\t\tObject.keys(value).forEach(function (prop) {\n\t\t\t\t\tvar value = obj[sel][prop];\n\t\t\t\t\tif (oneMoreLevelExists(value)) {\n\t\t\t\t\t\tstr += _toCss(nest(prop, value), level + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr += rule(props(prop, value), values(value, prop), opts.indent, level);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tstr += end(opts.indent, level);\n\t\t\t});\n\t\t});\n\t\treturn str;\n\t}\n\n\treturn arrify(object)\n\t\t.map(function (o) {\n\t\t\treturn _toCss(o, 0);\n\t\t})\n\t\t.join(lineEnd(opts.indent));\n};\n\nfunction nest(prop, val) {\n\tvar tmp = {};\n\ttmp[prop] = val;\n\treturn tmp;\n}\n\nfunction isLastLevel(val) {\n\treturn typeof val === 'string' || Array.isArray(val) && val.length && typeof val[0] !== 'object';\n}\n\nfunction oneMoreLevelExists(val) {\n\treturn typeof val === 'object' && !Array.isArray(val);\n}\n\nfunction identity(v) {\n\treturn v;\n}\n\nfunction lineStart(indent, level) {\n\treturn indent ? repeatString(indent, level) : '';\n}\n\nfunction space(indent) {\n\treturn indent ? ' ' : '';\n}\n\nfunction lineEnd(indent) {\n\treturn indent ? '\\n' : '';\n}\n\nfunction start(sel, indent, level) {\n\treturn lineStart(indent, level) + sel + space(indent) + '{' + lineEnd(indent);\n}\n\nfunction end(indent, level) {\n\treturn lineStart(indent, level) + '}' + lineEnd(indent);\n}\n\nfunction rule(props, values, indent, level) {\n\tvar linestart = lineStart(indent, level + 1);\n\tvar lineend = lineEnd(indent);\n\tvar s = space(indent);\n\n\tvar str = '';\n\n\tfor (var i = 0, propLength = props.length; i < propLength; i++) {\n\t\tfor (var j = 0, valueLength = values.length; j < valueLength; j++) {\n\t\t\tstr += linestart + props[i] + (isAtRule(props[i]) ? ' ' : ':') + s + values[j] + ';' + lineend;\n\t\t}\n\t}\n\n\treturn str;\n}\n\nfunction isAtRule(prop) {\n\treturn prop.indexOf('@') === 0;\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","'use strict';\nmodule.exports = function (val) {\n\tif (val === null || val === undefined) {\n\t\treturn [];\n\t}\n\n\treturn Array.isArray(val) ? val : [val];\n};\n","/**\n * **Main `index.js` - see [`readme`](..)**\n *\n * [![`gl-gpgpu` particles demo](media://demo-particles-regl-frames.png)](..)\n *\n * [GPGPU](https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units)\n * state-stepping - declaratively maps optimal draw passes, shaders, `GL`\n * resources, inputs, outputs - lets you focus on your logic, BYO-renderer.\n *\n * Decouples logic from rendering approach/engine.\n * Each module and hook may be used as given, or piecemeal, or overridden.\n *\n * @module (root)\n * @category Root\n * @category JS\n *\n * @todo Add a way to look up values from previous passes in the current step:\n *   - We have `past` state inputs and the `next` state outputs, so adjacent\n *     states in the current pass can be called `got` states.\n *   - All states are already accessible in the shader, just need a way to\n *     declare the lookup is desired; maybe a negative index in `derives` should\n *     signify that, and be handled in the `tapStates` macros?\n * @todo Add a way to resize all `gpgpu` resources in one convenient function.\n * @todo Handle values with more channels than `channelsMax`...\n */\n\nimport './api';\nimport { glslRx } from './const';\nimport { mapStep } from './maps';\nimport { toData } from './data';\nimport { toUniforms } from './uniforms';\nimport { toStep } from './step';\n\nconst { isFinite } = Number;\n\n/**\n * Parse a `GLSL` version into a `number`.\n *\n * @see {@link const.glslRx}\n *\n * @param {string|number} version A `GLSL` version `string`, expected in a `GL`\n *   parameter `SHADING_LANGUAGE_VERSION` format to parse into a `number`, from\n *   any first found version number or the full given `string` otherwise; or a\n *   `number`, to use as-is.\n *\n * @returns {number} A `GLSL` version `number`, parsed from the given `version`.\n */\nexport const getGLSL = (version) =>\n  ((isFinite(version))? version\n  : parseFloat(version?.match?.(glslRx)?.[0] ?? version, 10));\n\n/**\n * Sets up all the maps, data, inputs, and commands for a `gpgpu` process.\n *\n * Hooks up each main part in order into the complete process. Each part may\n * also be used individually for more custom behaviour; see their documentation.\n *\n * @see {@link maps.mapStep}\n * @see {@link maps.mapGroups}\n * @see {@link maps.mapSamples}\n * @see {@link maps.useBuffers}\n * @see {@link data.toData}\n * @see {@link uniforms.toUniforms}\n * @see {@link step.toStep}\n * @see {@link macros.macroPass}\n *\n * @param {object} api An API for `GL` resources. See `toData` and `toStep`.\n * @param {object} [api.limits=api] A map of `GL` resource limits.\n * @param {number} [api.limits.maxDrawbuffers] The maximum number of `GL`\n *   `texture`s a `framebuffer` can bind in a single draw call.\n * @param {object} [state=\\{\\}] State properties to set up; a new `object` by\n *   default. See `toData`, `toUniforms`, and `toStep`.\n * @param {object} [state.maps] How values are grouped per-`texture` per-pass\n *   per-step. Sets up new maps if not given or missing its mapped properties.\n *   See `mapStep`.\n * @param {number|false} [state.maps.buffersMax=api.limits.maxDrawbuffers]\n *   Maximum `texture`s that may be bound as buffer outputs per-pass. Multiple\n *   passes per-step are needed to output all `values` if they're spread across\n *   more `textures` than this `number`. Uses one pass and binds no output if\n *   given `false`y; useful for side-effects with no state outputs, like\n *   rendering. See `useBuffers`, `mapGroups`, and `toData`.\n * @param {object} [to=state] The `object` to set up. Modifies the given `state`\n *   object by default.\n *\n * @returns {object} The given `to` data `object`; set up with data resources\n *   for a `gpgpu` process. See `mapStep`, `toData`, `toUniforms`, `toStep`.\n */\nexport function gpgpu(api, state = {}, to = state) {\n  const { maxDrawbuffers, glsl: apiGLSL } = api.limits ?? api;\n  const { maps = {}, glsl = apiGLSL } = state;\n  const { buffersMax } = maps;\n\n  /** The parsed `GLSL` version. */\n  to.glsl = getGLSL(glsl);\n\n  /** Any `maps.buffersMax` supersedes any `maxDrawbuffers` from the `api`. */\n  maps.buffersMax ??= maxDrawbuffers;\n  state.maps = mapStep(maps, to.maps ??= {});\n\n  toData(api, state, to);\n  toUniforms(state, to.uniforms ??= {});\n  toStep(api, state, to);\n\n  return to;\n}\n\nexport default gpgpu;\n","/**\n * Description of the `api` hooks for `gpgpu`, to interact with `GL` resources.\n *\n * Not implemented within the `gpgpu` library.\n *\n * Based on [`regl`](https://github.com/regl-project/regl/)'s API; but can be\n * use any `GL` renderer, given hooks matching these implementations.\n *\n * @module\n * @category API Hooks\n *\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n */\n\n/**\n * @callback getFramebuffer\n * A `function` to create or update a `GL` `framebuffer`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link framebuffer}\n * - {@link data.toData}\n *\n * **This**\n *\n * Updates any `this` value's `framebuffer` in-place (or similar handling);\n * otherwise if `null`ish, returns a new `framebuffer`.\n *\n * **Returns**\n *\n * A `GL` `framebuffer` created or updated by any given `options`, or an\n * `object` serving that purpose.\n *\n * @param {{\n *     depth?:object,\n *     stencil?:object,\n *     width?:number,\n *     height?:number,\n *     color?:texture[]\n *   }} options Options to create or update a `GL` `framebuffer`; with:\n *   - `depth`: Any `framebuffer` depth attachment, or a flag for whether it\n *     should be created.\n *   - `stencil`: Any `framebuffer` stencil attachment, or a flag for whether it\n *     should be created.\n *   - `width`: The width of the `framebuffer`.\n *   - `height`: The height of the `framebuffer`.\n *   - `color`: The `texture` attachments to use.\n *\n * @returns {framebuffer}\n */\n\n/**\n * @callback useFramebuffer\n * Bind a `GL` `framebuffer` while calling a given `function`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link framebuffer}\n * - {@link step.toStep}\n *\n * **This**\n *\n * Uses any `this` value's `framebuffer` (or similar handling).\n *\n * @param {()=>void} hook A `function` to call while the `framebuffer` is bound.\n */\n\n/**\n * @typedef {object} framebuffer\n * A `GL` `framebuffer`, or an `object` serving that purpose; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link getFramebuffer}\n * - {@link data.toData}\n *\n * @prop {getFramebuffer} call Update this `framebuffer` in-place.\n * @prop {useFramebuffer} use Bind this `framebuffer` for the given `function`.\n */\n\n/**\n * @callback getTexture\n * A `function` hook to create or update a `GL` `texture`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link api}\n * - {@link texture}\n * - {@link data.toData}\n *\n * **Returns**\n *\n * A `GL` `texture`, or an `object` serving that purpose.\n *\n * @param {string} type Any `texture` data type value.\n * @param {string} min Any `texture` minification filter value.\n * @param {string} mag Any `texture` magnification filter value.\n * @param {string} wrap Any `texture` wrap mode value.\n * @param {number} width The width of the `texture`.\n * @param {number} height The height of the `texture`.\n * @param {number} channels The number of channels of the `texture`.\n *\n * @returns {texture}\n */\n\n/**\n * @callback subimage\n * Copy from a given source `texture` to part of `this` output `texture`; via\n * a `GL` `api`.\n *\n * **See**\n *\n * - {@link api}\n * - {@link texture}\n * - {@link getTexture}\n * - {@link step.toStep}\n *\n * **Returns**\n *\n * The output `texture`, `this`; the source `texture` copied to part of it.\n *\n * **This**\n *\n * Uses any `this` value's `texture` as the output to copy into.\n *\n * @param {texture} source A `texture` to copy to part of the output `texture`.\n * @param {number} [x=0] Offset along the output `texture`'s x-axis.\n * @param {number} [y=0] Offset along the output `texture`'s y-axis.\n *\n * @returns {texture}\n */\n\n/**\n * @typedef {object} texture\n * A `GL` `texture`, or an `object` serving that purpose; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link getTexture}\n * - {@link data.toData}\n *\n * @prop {getTexture} call Update this `texture` in-place.\n * @prop {subimage} subimage Copy from a source `texture` into part of `this`\n *   destination `texture`.\n */\n\n/**\n * @callback getBuffer\n * A `function` to set up a `GL` buffer; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link buffer}\n * - {@link attributes.getAttributes}\n *\n * @param {number[]|{[k:string|number]:number}|buffer} data Data to create a new\n *   `buffer`; or an existing `buffer` to use as-is.\n *\n * @returns {buffer}\n */\n\n/**\n * @typedef {object} buffer\n * A `GL` `buffer` for vertex `attribute`s, or an `object` serving that purpose;\n * via a `GL` `api`.\n */\n\n/**\n * @callback clear\n * A `function` to clear `GL` output view or `framebuffer`; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link framebuffer}\n * - {@link step.toStep}\n *\n * @param {{\n *     color?:number[],\n *     depth?:number,\n *     stencil?:number,\n *     framebuffer?:framebuffer\n *   }} options Options to clear `GL`; with:\n *   - `color`: The values to clear any color buffers with.\n *   - `depth`: The value to clear any depth buffer with.\n *   - `stencil`: The value to clear any stencil buffer with.\n *   - `framebuffer`: Any `framebuffer` to clear; if not given, clears any\n *     `framebuffer` already bound, or the view if none are bound.\n */\n\n/**\n * @callback command\n * A `function` to create a `GL` render pass execution `function`, to be called\n * later, given options, for a render pass; via a `GL` `api`.\n *\n * **See**\n *\n * - {@link buffer}\n * - {@link attributes}\n * - {@link framebuffer}\n * - {@link step.toStep}\n * - {@link uniforms.toUniforms}\n * - {@link uniforms.getUniform}\n *\n * **Returns**\n *\n * A `function` to execute a `GL` render pass, given options.\n *\n * @param {{\n *     vert?:(context,state)=>string,\n *     frag?:(context,state)=>string,\n *     count?:number,\n *     attributes?:{[k:string]:buffer},\n *     uniforms?:{[k:string]:getUniform},\n *     depth?:{[k:string]:boolean|{}},\n *     framebuffer?:(context,state)=>framebuffer\n *   }} options Options to create a `GL` render pass `function`; with:\n *   - `vert`: Hook to get any `GLSL` vertex shader `string`.\n *   - `frag`: Hook to get any `GLSL` fragment shader `string`.\n *   - `count`: Any `number` of elements to render.\n *   - `attributes`: Map of any `GL` `attribute` `buffer`s.\n *     See `attributes`, `buffer`, `toStep`.\n *   - `uniforms`: Map of any `GL` `uniform` hooks.\n *     See `uniforms`, `toUniforms`, and `getUniform`.\n *   - `depth`: Any `GL` depth settings (e.g: `options.depth.enable`).\n *   - `framebuffer`: Hook to get any `framebuffer` to render into.\n *     See `framebuffer`.\n *\n * @returns {(context,state)=>void}\n */\n\n/**\n * @typedef {{\n *     framebuffer:getFramebuffer,\n *     texture:getTexture,\n *     buffer:getBuffer,\n *     clear:clear,\n *     command:command,\n *     call:command\n *   }} api\n * An API `object` given to `gpgpu`, to interact with `GL` resources.\n *\n * Based on [`regl`](https://github.com/regl-project/regl/)'s API; but can be\n * use any `GL` renderer, given hooks matching these implementations.\n */\n\n/** @ignore */\nexport default null;\n","/**\n * Default properties for `gpgpu` and `GL` capabilities and resources.\n *\n * @module\n * @category JS\n */\nimport { positions, count } from '@epok.tech/gl-screen-triangle';\n\nimport vertGLSL from './index.vert.glsl';\n\n/** Default vertex shader `GLSL` code. */\nexport const vertDef = vertGLSL;\n\n/**\n * Default vertex positions `attribute`; 3 points of a large flat triangle.\n *\n * @see {@link step.toStep}\n */\nexport const positionsDef = () => [...positions];\n\n/**\n * Default vertex `count`; 3 points of a large flat triangle.\n *\n * @see {@link step.toStep}\n */\nexport const countDef = count;\n\n// The required and optional `GL` extensions for a `gpgpu` state.\n\n/** Default required `GL` extensions to render to `float` buffers. */\nexport const extensionsFloat = () =>\n  ['oes_texture_float', 'webgl_color_buffer_float'];\n\n/** Default required `GL` extensions to render to `half float` buffers. */\nexport const extensionsHalfFloat = () =>\n  ['oes_texture_half_float', 'ext_color_buffer_half_float'];\n\n/** Default optional `GL` extensions; update more data in one render pass. */\nexport const extensionsDrawBuffers = () => ['webgl_draw_buffers'];\n\n/** Default required `GL` extensions; none. */\nexport const extensions = () => [];\n\n/** Default optional `GL` extensions. */\nexport const optionalExtensions = extensionsDrawBuffers;\n\nexport const extensionsOptional = optionalExtensions;\n\n/**\n * Prefix namespace to avoid naming clashes; recommended.\n *\n * @see {@link index.vert.glsl}\n */\nexport const preDef = 'gpgpu_';\n\n/**\n * Default minimum allowable channels for `framebuffer` attachments.\n * This avoids `RGB32F` `framebuffer` attachments, which errors on Firefox.\n *\n * @see {@link state.framebuffer}\n * @see [Firefox `RGB32F` bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)\n */\nexport const channelsMinDef = 4;\n\n/**\n * Default maximum allowable channels for `framebuffer` attachments.\n * This avoids `RGB32F` `framebuffer` attachments, which errors on Firefox.\n *\n * @see {@link state.framebuffer}\n * @see [Firefox `RGB32F` bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)\n */\nexport const channelsMaxDef = 4;\n\n/**\n * Default maximum `texture`s that may be bound as buffer outputs per-pass.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const buffersMaxDef = 1;\n\n/**\n * Default how many steps are bound as outputs, unavailable as input; for\n * platforms forbidding read/write of same buffer.\n */\nexport const boundDef = 1;\n\n/**\n * Default length of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to this power.\n */\nexport const scaleDef = 0;\n\n/**\n * Default width of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to the default scale.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const widthDef = 2**scaleDef;\n\n/**\n * Default height of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to the default scale.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const heightDef = 2**scaleDef;\n\n/** Default number steps of state to track. */\nexport const stepsDef = 2;\n/** Default values to track; gives 1 set of `texture` channels. */\nexport const valuesDef = () => [channelsMaxDef];\n\n// `GL` resource format defaults.\n\n/**\n * Default `texture` data type.\n *\n * @see {@link state.texture}\n */\nexport const typeDef = 'float';\n\n/**\n * Default `texture` minification filter.\n *\n * @see {@link state.texture}\n */\nexport const minDef = 'nearest';\n\n/**\n * Default `texture` magnification filter.\n *\n * @see {@link state.texture}\n */\nexport const magDef = 'nearest';\n\n/**\n * Default `texture` wrap mode, avoid `WebGL1` needing power-of-2 `texture`.\n *\n * @see {@link state.texture}\n */\nexport const wrapDef = 'clamp';\n\n/**\n * Default `framebuffer` depth attachment.\n *\n * @see {@link state.framebuffer}\n */\nexport const depthDef = false;\n\n/**\n * Default `framebuffer` stencil attachment.\n *\n * @see {@link state.framebuffer}\n */\nexport const stencilDef = false;\n\n/**\n * A `RegExp` to find the `GLSL` version `number` in a `GL` parameter\n * `SHADING_LANGUAGE_VERSION` formatted `string`.\n */\nexport const glslRx = /[0-9\\.]+/;\n\n/**\n * Set a maximum to guard against number overflow.\n *\n * @todo Should be `(2**15)-1` for `mediump`, but seems to fail above `2**13`.\n * @see [SO](https://stackoverflow.com/a/67791670/716898)\n */\nexport const stepMaxDef = 2**13;\n\n/**\n * Default clear settings to clear each pass's `framebuffer`.\n *\n * @see {@link step.toStep}\n * @see {@link api.clear}\n * @see {@link api.framebuffer}\n *\n * @type {{color:[0,0,0,0],depth:1,stencil:0,framebuffer?:framebuffer}}\n * @prop {framebuffer} [framebuffer] Any `framebuffer` to clear, set upon each\n *   pass.\n */\nexport const clearPassDef = () =>\n  ({ color: [0, 0, 0, 0], depth: 1, stencil: 0 });\n\n/**\n * Default `texture.subimage` options, to bind a given `color`.\n *\n * @see {@link step.updateMerge}\n * @see {@link api.texture}\n * @see {@link api.subimage}\n *\n * @prop {true} copy Indicates `texture.subimage` should copy data from the\n *   currently-bound `framebuffer`.\n */\nexport const copyImageDef = () => ({ copy: true });\n","/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","/**\n * Default `gpgpu` vertex shader.\n *\n * @see [@epok.tech/gl-screen-triangle/uv-texture.vert.glsl](https://github.com/keeffEoghan/gl-screen-triangle/tree/master/uv-texture.vert.glsl)\n */\n\nprecision highp float;\n\n/**\n * Uses the default prefix namespace; replaced with any given prefix if this\n * shader's used during `toStep`.\n *\n * @see {@link const.preDef}\n * @see {@link step.toStep}\n */\nattribute vec2 gpgpu_position;\n\nvarying vec2 gpgpu_uv;\n\nvoid main() {\n  // Texture coordinates, range `[0, 1]`, y-axis points upwards.\n  gpgpu_uv = (gpgpu_position*0.5)+0.5;\n  gl_Position = vec4(gpgpu_position, 0, 1);\n}\n","/**\n * The `gpgpu` maps of data for optimal inputs/outputs on a platform.\n *\n * These maps show how to make optimal use of a platform's supported features,\n * how to pack/unpack their data from `framebuffer`s/`texture`s, perform minimal\n * needed samples to retrieve any past values they must derive from, etc.\n *\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular platform resources they're using.\n *\n * Platform limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, `texture` samples, etc).\n *\n * @module\n * @category JS\n *\n * @todo Allow passes within/across `texture`s; separate data/`texture` shapes.\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { valuesDef, channelsMaxDef, buffersMaxDef } from './const';\n\nconst { isInteger } = Number;\nconst { isArray } = Array;\n\n/**\n * Determines whether a given value is valid and can be stored within the\n * channels available.\n *\n * @param {number} value A value to validate.\n * @param {number} [channelsMax] The maximum channels available to store values.\n *\n * @returns {boolean} Whether the given `value` is valid.\n */\nexport const validValue = (value, channelsMax = channelsMaxDef) =>\n  ((1 <= value) || (value <= channelsMax) ||\n    !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the `+\n      `range of channels available, \\`[1, ${channelsMax}]\\` inclusive.`,\n      value, channelsMax));\n\n/**\n * Whether to use buffers to output state `values` in passes per-step, or no\n * output buffers in one pass as a side-effect not updating state `values`.\n *\n * @param {number|false} buffersMax Maximum `texture`s that may be bound as\n *   buffer outputs per-pass.\n *\n * @returns {boolean} Whether to use output buffers in passes, or no output\n *   buffers in one pass.\n */\nexport const useBuffers = (buffersMax) =>\n  isInteger(buffersMax) && (0 < buffersMax) && (buffersMax < Infinity);\n\n/**\n * Minimise resource usage, order `values` to pack into blocks of `channelsMax`;\n * interpreted as indexes into the given `values`.\n *\n * @see {@link mapGroups}\n *\n * @example ```\n *   packValues([1, 2, 3], 4, []); // =>\n *   [2, 0, 1];\n *\n *   packValues([3, 2, 1], 4, []); // =>\n *   [0, 2, 1];\n *\n *   packValues([4, 3, 2], 4, []); // =>\n *   [0, 1, 2];\n *\n *   packValues([1, 1, 4, 2], 4, []); // =>\n *   [2, 3, 0, 1];\n * ```\n *\n * @param {array.<number>} values Each entry is how many interdependent channels\n *   are grouped into one texture in one pass, separate entries may be across\n *   one or more textures/passes. See `mapGroups`.\n * @param {number} [channelsMax=channelsMaxDef] The maximum number of channels\n *   per texture. See `mapGroups`.\n * @param {array} [to=[]] An `array` to store the result; a new `array` if not\n *   given.\n *\n * @returns {array.<number>} `to` The indexes of the given `values`, reordered\n *   to pack into the fewest buckets of `channelsMax` size or less; stored in\n *   the given `to` array.\n */\nexport function packValues(values, channelsMax = channelsMaxDef, to = []) {\n  // Fill `to` with indexes of `values`, and ensure it's the same length.\n  map((_, i) => i, values, to).length = values.length;\n\n  /** Counts the number of empty channels in the current group. */\n  let channels = channelsMax;\n  /** How many values have already been packed. */\n  let packed = 0;\n  /** Tracks the value that best fits the free channels (fills it tightest). */\n  let fitIndex = 0;\n  let fitSize = Infinity;\n\n  for(let i = 0; packed < values.length;) {\n    const v = packed+i;\n    const value = values[to[v]];\n\n    if(!validValue(value, channelsMax)) { return to; }\n\n    // Check how value fits the channels - valid is >= 0, perfect is 0.\n    const fit = channels-value;\n\n    if((fit >= 0) && (fit < fitSize)) {\n      fitSize = fit;\n      fitIndex = v;\n    }\n\n    // Not a perfect fit and can keep searching for better fits - continue.\n    if((fitSize !== 0) && (v < values.length-1)) { ++i; }\n    else {\n      // Got a perfect fit or the search ended - swap in best fit value.\n      const pack = to[fitIndex];\n\n      to[fitIndex] = to[packed];\n      to[packed] = pack;\n\n      // Reduce the free channels by the best value, reset if needed.\n      ((channels -= values[pack]) > 0) || (channels = channelsMax);\n      // Start the search again over the remaining unpacked entries.\n      fitIndex = ++packed;\n      fitSize = Infinity;\n      i = 0;\n    }\n  }\n\n  return to;\n}\n\n/**\n * Groups the `values` of `gpgpu` data across draw passes and data textures.\n *\n * @see {@link packValues}\n * @see {@link data.toData}\n *\n * @example ```\n *   const x = 2;\n *   const y = 4;\n *   const z = 1;\n *   const maps = { values: [x, y, z], channelsMax: 4 };\n *\n *   // No optimisations - values not packed, single texture output per pass.\n *   mapGroups({ ...maps, buffersMax: 1, packed: false }); // =>\n *   {\n *     ...maps, packed: false,\n *     textures: [[0], [1], [2]], // length === 3\n *     passes: [[0], [1], [2]], // length === 3\n *     valueToTexture: [0, 1, 2], valueToPass: [0, 1, 2],\n *     textureToPass: [0, 1, 2]\n *   };\n *\n *   // Automatically packed values - values across fewer textures/passes.\n *   mapGroups({ ...maps, buffersMax: 1 }); // =>\n *   {\n *     ...maps, packed: [1, 0, 2],\n *     textures: [[1], [0, 2]], // length === 2\n *     passes: [[0], [1]], // length === 2\n *     valueToTexture: [1, 0, 1], valueToPass: [1, 0, 1],\n *     textureToPass: [0, 1]\n *   };\n *\n *   // Can bind more texture outputs per pass - values across fewer passes.\n *   mapGroups({ ...maps, buffersMax: 4 }); // =>\n *   {\n *     ...maps, packed: [1, 0, 2],\n *     textures: [[1], [0, 2]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [1, 0, 1], valueToPass: [0, 0, 0],\n *     textureToPass: [0, 0]\n *   };\n *\n *   // Custom packed values - fuller control.\n *   mapGroups({ ...maps, buffersMax: 4, packed: [0, 2, 1] }); // =>\n *   {\n *     ...maps, packed: [0, 2, 1],\n *     textures: [[0, 2], [1]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [0, 1, 0], valueToPass: [0, 0, 0],\n *     textureToPass: [0, 0]\n *   };\n *\n *   // Merge dependent values - fuller control, but no map for merged values.\n *   mapGroups({ ...maps, values: [x+z, y], buffersMax: 4 }); // =>\n *   {\n *     ...maps, packed: [1, 0],\n *     textures: [[1], [0]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [1, 0], valueToPass: [0, 0],\n *     textureToPass: [0, 0]\n *   };\n * ```\n *\n * @param {object} [maps=\\{\\}] Initial maps settings; new `object` if not given.\n *\n * @param {array.<number>} [maps.values=valuesDef()] An `array` where each\n *   `number` denotes how many value channels are grouped into one data-texture\n *   in one draw pass (where any value map logic isn't handled here); each\n *   separate number may be computed across one or more data-textures/passes.\n *\n *   Each value denotes the number of dependent channels to compute together;\n *   separate values denote channels that are independent, and may be drawn in\n *   the same or separate passes, depending on settings/support.\n *\n *   The order may affect the number of textures/passes needed; can maintain\n *   order as-is, or use a more efficient `packed` order. See `packValues`.\n *\n * @param {number} [maps.channelsMax=channelsMaxDef] Maximum channels\n *   per-`texture`.\n * @param {number|false} [maps.buffersMax=buffersMaxDef] Maximum `texture`s that\n *   may be bound as buffer outputs per-pass. Maps multiple passes per-step to\n *   output all `values` if they're spread across more `textures` than this\n *   `number`. Uses one pass and binds no output if given `false`y; useful for\n *   side-effects with no state outputs, like rendering. See `toData`.\n * @param {array.<number>} [maps.packed] An `array` of indexes into `values`\n *   packed into an order that best fits into blocks of `channelsMax` to\n *   minimise resources; or `false`y to use `values` in their given order; uses\n *   `packValues` if not given.\n * @param {object} [to=maps] An `object` to contain the results; modifies `maps`\n *   if not given.\n *\n * @returns {object} `to` The given `to` `object`; how `values` are grouped\n *   per-texture per-pass per-step, meta information, and given parameters.\n * @returns {array.<array.<number>>} `to.passes` Textures grouped into passes,\n *   as `arrays` corresponding to `framebuffer`s in separate draw passes; whose\n *   values are indexes into `to.textures`.\n * @returns {array.<array.<number>>} `to.textures` Values grouped into\n *   textures, as `array`s corresponding to `framebuffer` attachments, into\n *   which `values` are drawn; whose values are indexes into `to.values`.\n * @returns {array.<number>} `to.values` The `values`, as given.\n * @returns {number} `to.buffersMax` Maximum `texture`s that may be bound as\n *   buffer outputs per-pass, as given.\n * @returns {number} `to.channelsMax` Maximum channels per-`texture`, as given.\n * @returns {array.<number>} `to.valueToTexture` Inverse map from each index of\n *   `to.values` to the index of the data-texture containing it.\n * @returns {array.<number>} `to.valueToPass` Inverse map from each index of\n *   `to.values` to the index of the pass containing it.\n * @returns {array.<number>} `to.textureToPass` Inverse map from each index of\n *   `to.textures` to the index of the pass containing it.\n */\nexport function mapGroups(maps = {}, to = maps) {\n  const {\n      values = valuesDef(),\n      buffersMax = buffersMaxDef, channelsMax = channelsMaxDef,\n      // Pack `values` into blocks of `channelsMax` to minimise resources.\n      packed = packValues(values, channelsMax)\n    } = maps;\n\n  // Ensure any properties changed are included.\n  to.values = values;\n  to.buffersMax = buffersMax;\n  to.channelsMax = channelsMax;\n  to.packed = packed;\n\n  const passes = to.passes = [[]];\n  const textures = to.textures = [[]];\n  const valueToTexture = to.valueToTexture = [];\n  const valueToPass = to.valueToPass = [];\n  const textureToPass = to.textureToPass = [];\n\n  /** Whether to use output buffers in passes, or no buffers in one pass. */\n  const output = !!buffersMax;\n  /** Counts the number of channels written in a single draw pass. */\n  let channels = 0;\n  /** Get the index, via any `packed`, from `values`. */\n  const getIndex = ((packed)? ((i) => packed[i]) : ((i) => i));\n  /** Get the value, via any `packed`, from `values`. */\n  const getValue = ((packed)? ((_, i) => values[i]) : ((v) => v));\n\n  return reduce((to, v, i) => {\n      const index = getIndex(i);\n      const value = getValue(v, index);\n\n      if(!validValue(value, channelsMax)) { return to; }\n\n      let p = passes.length-1;\n      let pass = passes[p];\n      let t = textures.length-1;\n      let texture = textures[t];\n\n      if((channels += value) > channelsMax) {\n        channels = value;\n        t = textures.push(texture = [])-1;\n        output && (pass.length >= buffersMax) && (p = passes.push(pass = [])-1);\n        pass.push(t);\n        textureToPass.push(p);\n      }\n      else if(pass.length === 0) {\n        pass.push(t);\n        textureToPass.push(p);\n      }\n\n      texture.push(index);\n      valueToTexture[index] = t;\n      valueToPass[index] = p;\n\n      return to;\n    },\n    values, to);\n}\n\n/**\n * Maps the minimal set of texture reads to derive the next state of values from\n * a past state of values they depend upon.\n *\n * @see {@link mapGroups}\n *\n * @example ```\n *   const maps = mapGroups({\n *     // See `mapGroups` examples for resulting maps.\n *     values: [2, 4, 1], channelsMax: 4, buffersMax: 1, packed: false,\n *     // Derived step/value indexes, per-value; sample entries include:\n *     derives: [\n *       // Single...\n *       2,\n *       // Empty...\n *       ,\n *       // Multiple...\n *       [\n *         // Defined step...\n *         { value: 1, step: 0 },\n *         // All values at any given level/step...\n *         true\n *       ]\n *     ]\n *   });\n *\n *   mapSamples(maps); // =>\n *   {\n *     ...maps,\n *     // Minimum texture samples for values; nested per-pass, per-value.\n *     // Deepest arrays are step/texture index pairs into `maps.textures`.\n *     samples: [\n *       [[0, 2]],\n *       null,\n *       [[1, 0], [0, 0], [0, 1], [0, 2]]\n *     ],\n *     // Value indexes into `to.samples`; nested per-pass, per-value.\n *     // Map from a value index to data it needs in the minimal samples.\n *     reads: [\n *       [[0]],\n *       null,\n *       [null, null, [0, 1, 2, 3]]\n *     ]\n *   };\n * ```\n *\n * @param {object} maps How values are grouped per-`texture` per-pass per-step.\n *   See `mapGroups`.\n *\n * @param {derives} [maps.derives] How the next output state `values` derive\n *   from any past input `values`. If given no `derives`, or a\n *   `false`y-non-integer, no samples are mapped, `to` is returned unchanged.\n *\n * @param {array.<array.<number>>} maps.passes Textures grouped into passes. See\n *   `mapGroups`.\n * @param {array.<array.<number>>} maps.textures Values grouped into textures. See\n *   `mapGroups`.\n * @param {array.<number>} maps.valueToTexture Inverse map from each value index\n *   to the data texture index containing it.\n * @param {object} [to=maps] The object to store the result in; `maps` if not\n *   given.\n *\n * @returns {object} `to` The given `to` object, with resulting maps added for\n *   any given `maps.derives`.\n * @returns {array.<array.<array.<number>>>} `[to.samples]` Map of the minimum\n *   set of indexes into `maps.textures` that need to be sampled per-pass,\n *   to get all `derives` needed for each value of `maps.values` of each\n *   pass of `maps.passes`.\n * @returns {array.<array.<array.<number>>>} `[to.reads]` Sparse map from\n *   each value of `derives` to its step and texture indexes in `to.samples`.\n * @returns {derives} `[to.derives]` How new values derive from past values, as\n *   given.\n */\nexport function mapSamples(maps = {}, to = maps) {\n  const { derives, passes, textures, valueToTexture } = maps;\n\n  if(!derives && (derives !== 0)) { return to; }\n\n  const reads = to.reads = [];\n  const readsToValue = to.readsToValue = [];\n  const cache = {};\n\n  const allStepSamples = (step) =>\n    cache[step] ??= map((t, value) => ({ step, value }), valueToTexture);\n\n  const getAddSample = (pass, valueNext) => function add(set, derive, d) {\n    /** The past step to derive from. */\n    let step = 0;\n    /** The past value to derive from. */\n    let dp = derive;\n\n    // Derive from any specified `value` and `step` nested properties.\n    (derives !== true) && !isInteger(derives) &&\n      ({ value: dp = dp, step = step } = derive);\n\n    // Derive from all samples at the given or most recent step if given `true`.\n    if(dp === true) { return reduce(add, allStepSamples(step), set); }\n\n    // Derive from the given sample.\n    const texture = valueToTexture[dp];\n\n    if(!(isInteger(step) && isInteger(texture))) {\n      return console.error('`mapSamples`: invalid map for sample',\n        derives, maps, pass, valueNext, derive, d, step, texture, dp);\n    }\n\n    // Create the set if not already created.\n    const to = (set || []);\n    // Check for any existing matching step/texture read in the set.\n    const i = to.findIndex(([s, t]) => (s === step) && (t === texture));\n\n    // Add the read for this next value in this pass; creating any needed maps.\n    ((reads[pass] ??= [])[valueNext] ??= [])\n      // A new read as needed, or any existing matching read.\n      .push((i < 0)? to.push([step, texture])-1 : i);\n\n    // Add a reverse lookup from read index to value index.\n    ((readsToValue[pass] ??= [])[valueNext] ??= []).push(dp);\n\n    return to;\n  };\n\n  const getAddSamples = (pass) => (set, valueNext) => {\n    /** Derive next output value from any given past input values. */\n    const dn = ((isArray(derives))? derives[valueNext] : derives);\n\n    return (((!dn && (dn !== 0))? set\n      : (((dn !== derives) && isArray(dn))?\n        reduce(getAddSample(pass, valueNext), dn, set)\n      : getAddSample(pass, valueNext)(set, dn))));\n  }\n\n  to.samples = map((pass, p) => reduce((set, texture) =>\n        reduce(getAddSamples(p), textures[texture], set),\n      pass, null),\n    passes, []);\n\n  return to;\n}\n\n/**\n * Maps a full step, creates maps grouping given values per-`texture` per-pass\n * per-step, and minimal samples and reads if new values derive from past ones.\n *\n * @see {@link mapGroups}\n * @see {@link mapSamples}\n *\n * @param {object} [maps] Input value maps and settings.\n * @param {object} [to=maps] An `object` to contain the results; modifies `maps`\n *   if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *   per-`texture` per-pass per-step, meta information, and given parameters;\n *   and minimal samples and reads for any given `maps.derives`.\n */\nexport const mapStep = (maps, to = maps) => mapSamples(mapGroups(maps, to), to);\n\n/**\n * @typedef {derive|array.<derive|array.<derive>>>} derives\n * Denotes how next output `values` derive from any past input `values`.\n *\n * A nested hierarchy of the form\n * `all-next-from-past[any-next-from-past[any-next-from-any-past]]`; each\n * nesting level denotes how to derive:\n * 0. `all-next-from-past`: to all next `values`, from one/all past `value`/s.\n * 1. `any-next-from-past`: to any given next `values` (by sparse `array`\n *   indexes in `values` order), from one/all past `value`/s.\n * 2. `any-next-from-any-past`: to any given next `values` (by its `array` index\n *   in parent level 1), from any past `value`/s in this level 2 `array`.\n *\n * The `array`s are sparse, with empty or `false`y-non-integer entries ignored.\n *\n * See `derive` for how to denote past input `values`.\n *\n * **See**\n *\n * - {@link derive}\n */\n\n/**\n * @typedef {true|number|{value:true|number,step?:number}} derive\n * Denotes any past input `values` (and optional past `step`), that next output\n * `values` derive from.\n *\n * A nested hierarchy of the form `any-value-past[any-value-step-past]`,\n * indexing `values`, each nesting level denotes how to derive from:\n * 0. `any-value-past`: any/all past input `value`/s, at 1st `step` past.\n * 1. `any-value-step-past`: any/all past input `value`/s, at any given `step`\n *   past.\n *\n * The `value`/s to derive from may be given as:\n * - `true`: derives from all `values`.\n * - `number`: derives from the given `values` index.\n *\n * If given a `true` or `number` (denoting `value`/s but no `step`), the next\n * output `value` derives from the given `values` at the 1st `step` past.\n *\n * To specify a different `step`, pass an `object` denoting both the `value` (as\n * above) along with a `step`; in the form `{value:true|number,step?:number}`,\n * to derive from the `value` at any given `step` past (or the 1st `step` past\n * if not given).\n *\n * Any omitted `values` are ignored.\n *\n * See `derives` for more on how these are derived by the next output `values`.\n *\n * **See**\n *\n * - {@link derives}\n */\n\nexport default mapStep;\n","/**\n * The `gpgpu` state and `GL` data resources.\n *\n * Handles `framebuffer`s, `texture`s; and the main meta info.\n *\n * @module\n * @category JS\n *\n * @todo Allow passes into or across `texture`s; separate shapes of data and\n *   `texture`s.\n * @todo In-place updates of complex resources and meta info.\n */\n\nimport range from '@epok.tech/fn-lists/range';\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { toShape } from './size';\n\nimport {\n    stepsDef, valuesDef, channelsMinDef, buffersMaxDef,\n    typeDef, minDef, magDef, wrapDef, depthDef, stencilDef\n  } from './const';\n\nconst { max } = Math;\nconst { isInteger } = Number;\n\n/**\n * Whether all states merge into one data-`texture` or remain separate by\n * default, according to the number of `steps` and `textures` to be tracked.\n *\n * Uses separate data-`texture`s when the `steps` and `textures` are few enough\n * to allow it without issue on all platforms; otherwise merges data-`texture`s.\n *\n * @param {number} [steps] How many `steps` of state to track.\n * @param {number} [textures] How many data-`textures` to track per-step.\n *\n * @returns {boolean} Whether to merge states to one data-`texture` by default.\n */\nconst mergeDef = (steps, textures) => ((steps > 2) && (textures > 1));\n\n/**\n * Set up the `gpgpu` resources and meta info for a state of a number data.\n *\n * @example ```\n *   const api = {\n *     framebuffer: ({ depth, stencil, width, height, color }) => null,\n *     texture: ({ type, min, mag, wrap, width, height, channels }) => null\n *   };\n *\n *   // Example with `webgl_draw_buffers` extension support, for 4 buffers.\n *   let maps = mapGroups({ values: [1, 2, 3], buffersMax: 4, packed: 0 });\n *   let state = { steps: 2, side: 10, maps };\n *\n *   const s0 = toData(api, state, {}); // =>\n *   {\n *     ...state,\n *     size: {\n *       steps: 2, passes: 2, textures: 4,\n *       width: 10, height: 10, shape: [10, 10], entries: 100\n *     },\n *     steps: [[s0.passes[0][0].framebuffer], [s0.passes[1][0].framebuffer]],\n *     // This setup results in fewer passes, as more buffers can be bound.\n *     passes: [\n *       [\n *         {\n *           framebuffer: api.framebuffer(s0.passes[0][0]),\n *           color: [s0.textures[0][0].texture, s0.textures[0][1].texture],\n *           map: [0, 1], // maps.passes[0]\n *           entry: 0, index: 0, step: 0,\n *           depth: false, stencil: false, width: 10, height: 10\n *         }\n *       ],\n *       [\n *         {\n *           framebuffer: api.framebuffer(s0.passes[1][0]),\n *           color: [s0.textures[1][0].texture, s0.textures[1][1].texture],\n *           map: [0, 1], // maps.passes[0]\n *           entry: 1, index: 0, step: 1,\n *           depth: false, stencil: false, width: 10, height: 10\n *         }\n *       ]\n *     ],\n *     textures: [\n *       [\n *         {\n *           texture: api.texture(s0.textures[0][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 0, index: 0, step: 0, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s0.textures[0][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 1, index: 1, step: 0, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ],\n *       [\n *         {\n *           texture: api.texture(s0.textures[1][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 2, index: 0, step: 1, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s0.textures[1][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 3, index: 1, step: 1, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ]\n *     ]\n *   };\n *\n *   // Example with no `webgl_draw_buffers` extension support, only 1 buffer.\n *   maps = mapGroups({ values: [1, 2, 3], buffersMax: 1, packed: 0 });\n *   state = { type: 'uint8', steps: 2, scale: 5, maps };\n *\n *   const s1 = toData(api, state, {}); // =>\n *   {\n *     ...state,\n *     size: {\n *       steps: 2, passes: 4, textures: 4,\n *       width: 32, height: 32, shape: [32, 32], entries: 1024\n *     },\n *     steps: [\n *       [s1.passes[0][0].framebuffer, s1.passes[0][1].framebuffer],\n *       [s1.passes[1][0].framebuffer, s1.passes[1][1].framebuffer]\n *     ],\n *     // This setup results in more passes, as fewer buffers can be bound.\n *     passes: [\n *       [\n *         {\n *           framebuffer: api.framebuffer(s1.passes[0][0]),\n *           color: [s1.textures[0][0].texture],\n *           map: [0], // maps.passes[0]\n *           entry: 0, index: 0, step: 0,\n *           depth: false, stencil: false, width: 32, height: 32\n *         },\n *         {\n *           framebuffer: api.framebuffer(s1.passes[0][1]),\n *           color: [s1.textures[0][1].texture],\n *           map: [1], // maps.passes[1]\n *           entry: 1, index: 1, step: 0,\n *           depth: false, stencil: false, width: 32, height: 32\n *         }\n *       ],\n *       [\n *         {\n *           framebuffer: api.framebuffer(s1.passes[1][0]),\n *           color: [s1.textures[1][0].texture],\n *           map: [0], // maps.passes[0]\n *           entry: 2, index: 0, step: 1,\n *           depth: false, stencil: false, width: 32, height: 32\n *         },\n *         {\n *           framebuffer: api.framebuffer(s1.passes[1][1]),\n *           color: [s1.textures[1][1].texture],\n *           map: [1], // maps.passes[1]\n *           entry: 3, index: 1, step: 1,\n *           depth: false, stencil: false, width: 32, height: 32\n *         }\n *       ]\n *     ],\n *     textures: [\n *       [\n *         {\n *           texture: api.texture(s1.textures[0][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 0, index: 0, step: 0, pass: 0,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s1.textures[0][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 1, index: 1, step: 0, pass: 1,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ],\n *       [\n *         {\n *           texture: api.texture(s1.textures[1][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 2, index: 0, step: 1, pass: 0,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s1.textures[1][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 3, index: 1, step: 1, pass: 1,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ]\n *     ]\n *   };\n * ```\n *\n * @todo Example using `merge`.\n *\n * @see {@link api.texture}\n * @see {@link api.framebuffer}\n * @see {@link maps.mapGroups}\n * @see {@link maps.mapSamples}\n * @see {@link maps.useBuffers}\n * @see {@link step.toStep}\n * @see {@link macros.macroSamples}\n * @see {@link macros.macroTaps}\n * @see {@link macros.macroPass}\n * @see {@link size.getWidth}\n * @see {@link size.getHeight}\n * @see {@link size.toScaled}\n *\n * @see [`sampler array index must be a literal expression`](https://stackoverflow.com/a/60110986/716898)\n * @see [`sampler2DArray`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)\n * @see [`sampler3D`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)\n *\n * @param {object} api The API for `GL` resources.\n * @param {texture} [api.texture] Function creating `GL` `texture`s.\n * @param {framebuffer} [api.framebuffer] Function creating `GL` `framebuffer`s.\n * @param {object} [state=\\{\\}] The state parameters.\n *\n * @param {number} [state.width=widthDef] Data width, aliases follow in order\n *   of precedence. See `getWidth`.\n * @param {number} [state.w] Alias of `state.width`. See `getWidth`.\n * @param {number} [state.x] Alias of `state.width`. See `getWidth`.\n * @param {number} [state.ʼ0ʼ] Alias of `state.width`. See `getWidth`.\n *\n * @param {number} [state.height=heightDef] Data height, aliases follow in order\n *   of precedence. See `getHeight`.\n * @param {number} [state.h] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.y] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.ʼ1ʼ] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.shape] Data size. See `getWidth` and `getHeight`.\n * @param {number} [state.size] Data size. See `getWidth` and `getHeight`.\n * @param {number} [state.side] Data size of width/height.\n *   See `getWidth` and `getHeight`.\n * @param {number} [state.scale=scaleDef] Data size of width/height as a square\n *   power-of-two size, 2 raised to this power. See `toScaled`.\n *\n * @param {number|array} [state.steps=stepsDef] How many steps of state to\n *   track, or the list of states if already set up.\n * @param {object} [state.maps] How `state.maps.values` are grouped\n *   per-`texture` per-pass per-step. See `mapGroups`.\n * @param {array.<number>} [state.maps.values=valuesDef()] How `values` of each\n *   data item may be grouped into `texture`s across passes; set up here if not\n *   given. See `mapGroups`.\n * @param {number} [state.maps.channelsMin=channelsMinDef] The minimum allowed\n *   channels for `framebuffer` attachments; allocates unused channels as needed\n *   to reach this limit.\n * @param {number|false} [maps.buffersMax=buffersMaxDef] Maximum `texture`s that\n *   may be bound as buffer outputs per-pass. Binds no output `framebuffer`s if\n *   given `false`y; useful for side-effects with no state outputs, like\n *   rendering. See `mapGroups`.\n * @param {number} [state.maps.textures] How `values` are grouped into\n *   data-`texture`s. See `mapGroups`.\n * @param {number} [state.maps.passes] How data-`textures` are grouped into\n *   separate `framebuffer` passes. See `mapGroups`.\n *\n * @param {string} [state.type=typeDef] Any `texture` data type value.\n * @param {string} [state.min=minDef] Any `texture` minification filter value.\n * @param {string} [state.mag=magDef] Any `texture` magnification filter value.\n * @param {string} [state.wrap=wrapDef] Any `texture` wrap mode value.\n * @param {object} [state.depth=depthDef] Any `framebuffer` depth attachment, or\n *   a flag for whether it should be created.\n * @param {object} [state.stencil=stencilDef] Any `framebuffer` stencil\n *   attachment, or a flag for whether it should be created.\n *\n * @param {object} [state.merge=mergeDef(state.maps)] Whether to merge states\n *   into one data-`texture`; `true`y handles merging here, with any given\n *   properties used as-is (the merged data-`texture` already set up); `false`y\n *   uses un-merged `array`s of `texture`s.\n *\n *   Merging allows shaders to access past steps by non-constant lookups; e.g:\n *   attributes cause `\"sampler array index must be a literal expression\"` on\n *   `GLSL3` spec and some platforms (e.g: `D3D`); but takes more work to copy\n *   the last pass's bound `texture`/s to merge into the past `texture`, so\n *   should be used to variably access past steps or avoid limits of `array`s of\n *   `texture`s.\n *   Only this merged past `texture` and those bound in an active pass are\n *   created, as upon each pass the output will be copied to the past `texture`,\n *   and bound `texture`s reused in the next pass.\n *   If not merging, all state is as output by its pass in its own one of the\n *   `array`s of `texture`s.\n *\n *   The default merged `texture` is laid out as `[texture, step]` on the\n *   `[x, y]` axes, respectively; if other layouts are needed, the merge\n *   `texture` can be given here to be used as-is, and the merging/copying and\n *   lookup logic in their respective hooks. See `toStep` and `macroTaps`.\n *   If a merge `texture` is given, size information is interpreted in a similar\n *   way and precedence as it is from `state`. See `getWidth` and `getHeight`.\n *\n * @param {number} [state.merge.width] Merged data width, aliases follow in\n *   order of precedence. See `state`.\n * @param {number} [state.merge.w] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.x] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.ʼ0ʼ] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.height] Merged data height, aliases follow in\n *   order of precedence. See `state`.\n * @param {number} [state.merge.h] Alias of `state.merge.height`. See `state`.\n * @param {number} [state.merge.y] Alias of `state.merge.height`. See `state`.\n *   See `state`.\n * @param {number} [state.merge.ʼ1ʼ] Alias of `state.merge.height`. See `state`.\n * @param {number} [state.merge.shape] Merged data size. See `state`.\n * @param {number} [state.merge.size] Merged data size. See `state`.\n * @param {number} [state.merge.side] Merged data size of width/height.\n * @param {number} [state.merge.scale] Merged data size of width/height as a\n *   square power-of-two size, 2 raised to this power. See `state`.\n *\n * @param {object} [to=state] The state object to set up. Modifies the given\n *   `state` object by default.\n *\n * @returns {object} `to` The state object, set up with the data resources and\n *   meta information, for use with `toStep` and drawing:\n * @returns {object.<number,array.<number,array.<number>>>} `to.maps` Any given\n *   `state.maps`. See `mapGroups`.\n * @returns {array.<array.<object.<texture,string,number,array.<number>>>>}\n *   `to.textures` The `texture`s per-step, as `array`s of objects of `texture`s\n *   and meta info. See `to.maps.textures`.\n * @returns {array.<array.<object.<framebuffer,number,array.<number>>>>}\n *   `to.passes` Passes per step, as `array`s of objects of `framebuffer`s,\n *   referencing `to.textures`, and meta info. See `to.maps.passes`.\n * @returns {array.<framebuffer<array.<texture>>>} `to.steps`\n *   Hierarchy of steps of state, as an `array` of `framebuffer`s from\n *   `to.passes`, with `array`s of `texture`s from `to.textures`, and meta\n *   information; set up here, or the given `state.steps` if it's an `array`.\n *   State data may be drawn into the `framebuffer`s accordingly.\n *   See `mapGroups` and `toStep`.\n * @returns {object|undefined} `[to.merge]` If merging, a given or new merged\n *   `texture` and copier `framebuffer`, with meta info. See `toStep` and\n *   `macroTaps`.\n * @returns {object.<texture,string,number>|undefined} `[to.merge.all]` Any\n *   given `state.merge.all`, or newly-created merged `texture` and meta info.\n * @returns {object.<framebuffer,string,number>|undefined} `[to.merge.next]` Any\n *   given `state.merge.next`, or newly-created `framebuffer` and meta info; for\n *   copying each pass's data into the `merge`d `texture`.\n * @returns {object} `to.size` Size/type information of the created resources.\n * @returns {string} `to.size.type` Data type of `framebuffer`s and `texture`s.\n * @returns {boolean} `to.size.depth` Whether `framebuffer`s attach depth.\n * @returns {boolean} `to.size.stencil` Whether `framebuffer`s attach stencil.\n * @returns {number} `to.size.channelsMin` Minimum channels in any `texture`.\n * @returns {number} `to.size.steps` Number of `to.steps` in the main flow.\n * @returns {number} `to.size.passes` Number of `to.passes` in `to.steps`.\n * @returns {number} `to.size.framebuffers` Number of `framebuffer`s created.\n * @returns {number} `to.size.textures` Number of `to.textures` in `to.passes`.\n * @returns {number} `to.size.colors` Number of `texture`s created.\n * @returns {number} `to.size.width` Width of `framebuffer`s and `texture`s.\n * @returns {number} `to.size.height` Height of `framebuffer`s and `texture`s.\n * @returns {array.<number>} `to.size.shape` Shape of `framebuffer`s and\n *   `texture`s, as `[to.size.width, to.size.height]`.\n * @returns {number} `to.size.entries` Number of entries in each `texture`.\n * @returns {object.<number,string,array.<number>>|undefined} `[to.size.merge]`\n *   Any size/type information about any created or given `merge`d `texture`.\n */\nexport function toData({ texture, framebuffer }, state = {}, to = state) {\n  const {\n      maps, steps = stepsDef,\n      // Resource format settings.\n      type = typeDef, min = minDef, mag = magDef, wrap = wrapDef,\n      depth = depthDef, stencil = stencilDef\n    } = state;\n\n  const shape = toShape(state);\n  const [width, height] = shape;\n\n  const {\n      values = maps.values = valuesDef(),\n      channelsMin = maps.channelsMin = channelsMinDef,\n      buffersMax = maps.buffersMax = buffersMaxDef,\n      textures: texturesMap, passes: passesMap\n    } = maps;\n\n  const stepsL = steps.length ?? steps;\n  const { merge = mergeDef(stepsL, texturesMap.length) } = state;\n\n  // Ensure any properties changed are included.\n  to.steps = steps;\n  to.merge = merge;\n  to.type = type;\n  to.min = min;\n  to.mag = mag;\n  to.wrap = wrap;\n  to.depth = depth;\n  to.stencil = stencil;\n  to.width = width;\n  to.height = height;\n\n  /** Whether to use output buffers in passes, or no buffers in one pass. */\n  const output = buffersMax || null;\n\n  /**\n   * All `framebuffer` attachments need the same number of channels; enough to\n   * hold all values a pass holds, or all passes hold if merging and reusing.\n   */\n  const passChannels = (pass, min) =>\n    reduce((min, t) =>\n        max(min, reduce((sum, v) => sum+values[v], texturesMap[t], 0)),\n      pass, min);\n\n  /**\n   * If merging past `texture`s and reusing `texture` attachments in each pass's\n   * `framebuffer`, pre-compute the minimum channels for a reusable pool of\n   * `texture` attachments that can hold any pass's values; since all a\n   * `framebuffer`'s attachments also need the same number of channels, this is\n   * also the same number of channels across all passes.\n   */\n  const mergeChannels = ((!merge)? null\n    : reduce((min, p) => passChannels(p, min), passesMap, channelsMin));\n\n  /** Size of the created resources. */\n  const size = to.size ??= {};\n\n  size.shape ??= shape;\n  size.entries ??= (size.width ??= width)*(size.height ??= height);\n  size.type ??= type;\n  size.channelsMin ??= mergeChannels ?? channelsMin;\n  size.steps ??= stepsL;\n  size.passes ??= 0;\n  size.framebuffers ??= 0;\n  size.textures ??= 0;\n  size.colors ??= 0;\n\n  /** The `texture`s created for the `step`/`pass` render flow. */\n  const textures = to.textures = [];\n  /** The passes created for the `step`/`pass` render flow. */\n  const passes = to.passes = [];\n  /** The `texture`s bound to the next pass; reused if merging. */\n  let colorPool;\n\n  /**\n   * Add a `texture` attachment and meta info to `texture`s if applicable; to\n   * return its new `texture` or a reused one to bind to a pass in `passes`.\n   */\n  const addTexture = (channels, w, h, step, pass) => (index, c, _, color) => {\n    /** Properties passed for `texture` creation, then meta info. */\n    const to = { channels, width: w, height: h, type, min, mag, wrap };\n\n    // Resources.\n\n    /**\n     * Add/reuse `texture` color attachments as needed; add minimal `texture`s.\n     * If merging, passes may reuse any pass's existing `texture` attachments;\n     * otherwise, each pass has its own dedicated `texture` attachments.\n     */\n    let entry = c;\n    let t = color?.[entry];\n\n    // Only create new `texture`s if existing ones can't be reused.\n    if(!t) {\n      t = texture?.(to);\n      entry = size.textures++;\n    }\n\n    // Add meta info.\n\n    /** Check if this is bound to a pass. */\n    const s = isInteger(step);\n    const p = isInteger(pass);\n    const i = isInteger(index);\n\n    /** Denotes attached `texture`; if merging, `texture`s are reused. */\n    to.texture = t;\n    /** Denotes attached `texture` entry; if merging, `texture`s are reused. */\n    to.entry = entry;\n\n    s && (to.step = step);\n\n    if(p) {\n      /** Denotes `framebuffer` attachments; may reuse underlying `texture`s. */\n      to.color = size.colors++;\n      to.pass = pass;\n    }\n\n    i && (to.map = texturesMap[to.index = index]);\n\n    // Check whether this `texture` is part of the `step`/`pass` render flow.\n    // If so, add to `textures`, return its `texture` to bind to a pass.\n    // If not, return the entire object.\n    return ((s && p && i)? ((textures[step] ??= [])[index] = to).texture : to);\n  };\n\n  /**\n   * Add a pass to `passes`, with its `texture`s bound; to return its\n   * `framebuffer` to one of `steps`.\n   */\n  const addPass = (step, color) => (pass, index) => {\n    /**\n     * All a `framebuffer`'s attachments need the same number of channels;\n     * superseded by any given `color`'s value.\n     */\n    const channels = ((color != null)? 0\n      : mergeChannels ??\n          ((pass)? passChannels(pass, channelsMin) : channelsMin));\n\n    // Resources.\n\n    /** Properties passed for `framebuffer` creation, then meta info. */\n    const to = {\n      depth, stencil, width, height,\n      /** Map the pass's `texture` color attachments and their meta info. */\n      color: color ??\n        ((pass)?\n          map(addTexture(channels, width, height, step, index), pass,\n            // Reuse any existing color attachments if merging; otherwise make\n            // dedicated color attachments for each pass.\n            ((merge)? colorPool ??= [] : []))\n        : [])\n    };\n\n    /**\n     * The `framebuffer` for this pass; don't create or bind if `buffersMax`\n     * is `false`y.\n     */\n    to.framebuffer = output && framebuffer?.(to);\n\n    // Add meta info.\n\n    /** Denotes any attached `framebuffer` entry. */\n    to.entry = output && size.framebuffers++;\n\n    if(pass) {\n      to.map = pass;\n      to.pass = size.passes++;\n    }\n\n    const s = isInteger(step);\n    const i = isInteger(index);\n\n    s && (to.step = step);\n    i && (to.index = index);\n\n    // Check whether this pass is part of the `step`/`pass` render flow.\n    // If so, add to `passes`, return its `framebuffer` for its step.\n    return ((pass && s && i)? ((passes[step] ??= [])[index] = to).framebuffer\n        // If not, return the entire object.\n      : to);\n  };\n\n  /**\n   * Set up resources needed to store data per-`texture` per-pass per-step.\n   * Use any given steps/passes or create new ones.\n   */\n  to.steps = map((passes, step) => passes || map(addPass(step), passesMap),\n    ((isInteger(steps))? range(steps) : steps), 0);\n\n  /** Resize `texture`s, `framebuffer`s, and update `size`. */\n  to.resize = (value = to, state = to) => {\n    const { size, passes, textures, merge } = state;\n    const [w, h] = toShape(value ?? state, size.shape ??= []);\n\n    size.entries = (size.width = w)*(size.height = h);\n\n    each((s) => each((p) => p.framebuffer.resize(p.width = w, p.height = h), s),\n      passes);\n\n    each((p) => each((t) => t.texture.resize(t.width = w, t.height = h), p),\n      textures);\n\n    return merge?.resize?.(value, state) ?? state;\n  };\n\n  // Finish here if merge is disabled.\n  if(!merge) { return to; }\n\n  // Set up the `texture` for states to be merged into.\n\n  const m = to.merge = { ...merge };\n  const { all: mAll, next: mNext } = m;\n  const ms = size.merge = m.size ??= {};\n\n  /** Use any given size info, or merge along `[texture, step]` axes. */\n  ms.width ??= texturesMap.length*width;\n  ms.height ??= stepsL*height;\n\n  const [mw, mh] = toShape(m, ms.shape ??= []);\n\n  ms.entries ??= (ms.width = mw)*(ms.height = mh);\n  /** New merge `texture` and info, or use any given merge `texture`. */\n  m.all = mAll ?? addTexture(mergeChannels, mw, mh)();\n  /** Empty `framebuffer`, to copy data from each `texture` of each pass. */\n  m.next = mNext ?? addPass(null, colorPool[0])();\n\n  /** Resize `texture`s, `framebuffer`s, and update `size`. */\n  m.resize = (value = to, state = to) => {\n    const { merge, size, maps } = state;\n    const { size: ms = size.merge = {}, all, next } = merge;\n    const { textures: texturesMap } = maps;\n    const shape = toShape(value ?? state, ms.shape ??= []);\n    const [w, h] = shape;\n\n    next.framebuffer.resize(next.width = w, next.height = h);\n    ms.width = texturesMap.length*w;\n    ms.height = size.steps*h;\n\n    const [mw, mh] = toShape(ms, shape);\n\n    ms.entries = (ms.width = mw)*(ms.height = mh);\n    all.texture.resize(all.width = mw, all.height = mh);\n\n    return state;\n  };\n\n  return to;\n}\n\nexport default toData;\n","/**\n * @module\n * @category JS\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport range from '@epok.tech/fn-lists/range';\n\nimport { widthDef, heightDef } from './const';\n\nconst { floor } = Math;\nconst { isFinite, isInteger } = Number;\n\n/**\n * Returns the given width, for various properties in order of precedence.\n *\n * @see {@link data.toData}\n *\n * @param {object} value Size (width) `number`, or an `object` containing it.\n * @param {object} [value.size] Size (width) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.width] Width; supersedes further aliases.\n * @param {number} [value.w] Alias of `width`; supersedes further aliases.\n * @param {number} [value.x] Alias of `width`; supersedes further aliases.\n * @param {object} [value.shape] Shape (width) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.side] Width and height; supersedes further aliases.\n * @param {number} [value.0] Alias of `width`; supersedes `value` itself.\n *\n * @returns {number} The width as given in one of the expected properties, or\n *   any given `value` number, or `null`ish if no width could be resolved.\n */\nexport function getWidth(value) {\n  const { width, w, x, shape, size, side, 0: v0 } = value;\n\n  return (size && getWidth(size)) ?? width ?? w ?? x ??\n    (shape && getWidth(shape)) ??\n    side ?? v0 ?? ((isFinite(value))? value : null);\n}\n\n/**\n * Returns the given height, for various properties in order of precedence.\n *\n * @see {@link data.toData}\n *\n * @param {object} value Size (height) `number`, or an `object` containing it.\n * @param {object} [value.size] Size (height) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.height] Height; supersedes further aliases.\n * @param {number} [value.h] Alias of `height`; supersedes further aliases.\n * @param {number} [value.y] Alias of `height`; supersedes further aliases.\n * @param {object} [value.shape] Shape (height) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.side] Width and height; supersedes further aliases.\n * @param {number} [value.1] Alias of `height`; supersedes `value` itself.\n *\n * @returns {number} The height as given in one of the expected properties, or\n *   any given `value` number, or `null`ish if no height could be resolved.\n */\nexport function getHeight(value) {\n  const { height, h, y, shape, size, side, 1: v1 } = value;\n\n  return (size && getHeight(size)) ?? height ?? h ?? y ??\n    (shape && getHeight(shape)) ??\n    side ?? v1 ?? ((isFinite(value))? value : null);\n}\n\n/**\n * Gives the number of entries to draw a full state, for various parameters.\n * Effectively equivalent to `gl_VertexID` in `WebGL2`.\n *\n * @see {@link getWidth}\n * @see {@link getHeight}\n * @see {@link data.toData}\n *\n * @param {object} [size=1] Size `number` of data resources, or an `object`\n *   containing it; width if `height` is given as a second parameter.\n *   See `getWidth` and `getHeight`.\n * @param {number} [size.entries] The `number` of entries of data resources.\n * @param {object} [height=1] Height `number` of data resources, or an `object`\n *   containing it.\n *\n * @returns {number} The number of entries needed to draw a full state; each\n *   entry of a data-texture (its area, equivalent to `state.size.entries`).\n */\nexport const countDrawEntries = (size = 1, height = 1) =>\n  size?.entries ?? (getWidth(size) ?? 1)*(getHeight(height) ?? 1);\n\n/**\n * Gives the `array` of indexes needed to draw a full state.\n *\n * @param {object} size The `number` of entries in each data-`texture`; or an\n *   `object` of size/type of data resources.\n *\n * @returns {array.<number>} An `array` of indexes for drawing all\n *   data-`texture` entries, numbered `0` to `size-1`.\n */\nexport const getDrawIndexes = (size) =>\n  map((_, i) => i, range(isInteger(size)? size : countDrawEntries(size)), 0);\n\n/**\n * 2 raised to the given numeric power, or `null` if not given.\n *\n * @param {number} [scale] The power to raise 2 to.\n *\n * @returns 2 raised to the given numeric power, or `null` if not given.\n */\nexport const toScaled = (scale) => ((isFinite(scale))? 2**scale : null);\n\nexport function toShape(value, to = []) {\n  let s;\n\n  to[0] = floor(getWidth(value) ?? (s ??= toScaled(value.scale)) ?? widthDef);\n  to[1] = floor(getHeight(value) ?? (s ??= toScaled(value.scale)) ?? heightDef);\n\n  return to;\n}\n","/**\n * The `gpgpu` inputs for `GL` `uniform`s.\n *\n * @module\n * @category JS\n */\n\nimport { setC2, setC4 } from '@thi.ng/vectors/setc';\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport { boundDef, preDef } from './const';\n\n/**\n * Sets up `GL` `uniform` inputs for `gpgpu` calls, such as in `toStep`.\n *\n * The `uniform`s are defined as callback hooks to be called on each render pass\n * with global context and local state `object`s, allowing the use of different\n * `GL` APIs or author-defined hooks.\n *\n * Handles inputs of states as `array`s of data-`texture`s, or merged into one\n * data-`texture`; for `array`s of `texture`s, this arranges them on each step\n * so `GLSL` can dynamically sample the flattened `array` of `texture`s by a\n * constant step index; otherwise the single merged `texture` is bound once, and\n * `GLSL` can use a dynamic step index to sample states.\n *\n * @example ```javascript\n * const state = { pre: '', steps: 2, maps: mapStep({ values: [1, 2, 3] }) };\n * const api = {};\n *\n * toUniforms(toData(api, { ...state, merge: false }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Separate state data-`texture`s in an `array` (e.g: `sampler2D[]`).\n *   // State data-`texture`s for the 1st step ago, not bound as outputs.\n *   'states[0]': (context, state) => {},\n *   'states[1]': (context, state) => {},\n *   // Merged `texture` not used.\n *   states: (context, state) => null\n * };\n *\n * toUniforms(toData(api, { ...state, steps: 3, merge: false }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Separate state data-`texture`s in an `array` (e.g: `sampler2D[]`).\n *   // State data-`texture`s for the 1st step ago, not bound as outputs.\n *   'states[0]': (context, state) => {},\n *   'states[1]': (context, state) => {}\n *   // State data-`texture`s for the 2nd step ago, not bound as outputs.\n *   'states[2]': (context, state) => {},\n *   'states[3]': (context, state) => {},\n *   // Merged `texture` not used.\n *   states: (context, state) => null\n * };\n *\n * toUniforms(toData(api, { ...state, merge: true }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Merged states in one data-`texture` upon every pass (e.g: `sampler2D`,\n *   // or `sampler3D`/`sampler2DArray` where supported).\n *   states: (context, state) => {},\n *   // Separate data-`texture`s not used.\n *   'states[0]': (context, state) => null,\n *   'states[1]': (context, state) => null\n * };\n * ```\n *\n * @see {@link step.toStep}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroSamples}\n * @see {@link macros.macroTaps}\n *\n * @param {object} state The `gpgpu` state. See `toData` and `mapGroups`.\n * @param {array|number} state.steps The `array` of steps, or number of steps.\n *   See `toData`.\n * @param {{textures?:number[][]}} state.maps How values are grouped into\n *   data-`texture`s (per-pass per-step). See `mapGroups`.\n * @param {string} [state.pre=preDef] Namespace prefix; `preDef` if not given.\n * @param {{all?:{texture?:object}}} [state.merge] Any merged state `texture`;\n *   uses separate state data-`texture`s if not given. See `toData`.\n *\n * @param {{shape?:number[],merge?:{shape?:number[]}}} [state.size] Any size of\n *   `state` data-`texture`s (as `vec2(width, height)`); with:\n *   - `shape`: Any `state` shape.\n *   - `merge.shape`: Any merged `states` shape, otherwise `state` shape.\n *\n *   See `toData`.\n *\n * @param {number} [state.bound=boundDef] Number of steps bound for output, not\n *   used for input; for platforms preventing read/write of the same `texture`.\n * @param {uniforms|object} [state.uniforms] Any `object` to merge the new\n *   `uniforms` into. See `to`.\n * @param {uniforms|object} [to=state.uniforms] Any `object` to contain the\n *   `uniform` hooks; modifies any `state.uniforms`, or a new `object` if not\n *   given. See `state.uniforms` and `uniforms`.\n *\n * @returns {{\n *     stepNow:(c,state:{stepNow:number})=>number,\n *     stateShape:(c,state:{size:{number}})=>[number,number,number,number],\n *     viewShape:(\n *       context:{drawingBufferWidth:number,drawingBufferHeight:number},s?\n *     )=>[number,number],\n *     states:()=>([])\n *   }}\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` `state`); with:\n *   - `stepNow`: The current step of the `gpgpu` `state`.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n *   The `to` set up with `uniform` callback hooks for the given `state`, to\n *   be called on each render pass for the latest `uniform` values; with:\n *   - `stepNow`: Gives any current step. See `toStep`.\n *   - `stateShape`: Gives any shape of any data-`texture`s; as\n *     `vec4(vec2(width, height), vec2(width, height))`; channels are `null`ish\n *     if there's no valid shape; with:\n *     - Any `state` shape; in `xy` channels.\n *     - Any merged `states` shape, otherwise `state` shape; in `zw` channels.\n *   - `viewShape`: Gives the `GL` viewport shape; as `vec2(width, height)`;\n *     given a `context` parameter with:\n *     - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *     - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *   - `states`: Gives the past steps data-`texture`s; as either:\n *     - Any merged data-`texture` as a single `GLSL` `sampler` (e.g: `2D`/\n *       `2DArray`/`3D`; up to to the `GL` API for `texture`); otherwise `null`.\n *     - Any separate data-`texture`s as a `GLSL` `array` of `sampler`s (e.g:\n *       `sampler2D[]`), each part/all of a `gpgpu` step's data and accessible\n *       by constant index (steps ago); otherwise `null`.\n *\n *   These property names may be prefixed with any given `state.pre`.\n *   See `toData` and `toStep`.\n */\nexport function toUniforms(state = {}, to = state.uniforms ??= {}) {\n  const { steps, maps, pre: n = preDef, bound = boundDef } = state;\n  const { textures } = maps;\n  const stepsL = steps.length ?? steps;\n  const texturesL = textures.length;\n  // Local caches.\n  const stateShape = [];\n  const viewShape = [];\n\n  /** Gives any current step. */\n  to[n+'stepNow'] = (_, s) => s.stepNow;\n\n  /** Gives any shape of `state` and any merged `states` data-`texture`s. */\n  to[n+'stateShape'] = (_, { size: { shape: s, merge: m } }) =>\n    ((s)? setC4(stateShape, ...s, ...(m?.shape ?? s)) : setC4(stateShape));\n\n  /** Gives the shape of the `GL` viewport. */\n  to[n+'viewShape'] = ({ drawingBufferWidth: w, drawingBufferHeight: h }) =>\n    setC2(viewShape, w, h);\n\n  /**\n   * Gives all `states` merged in one `texture`, if using `merge`;\n   * otherwise gives `null`.\n   */\n  to[n+'states'] = (_, s) => s.merge?.all?.texture ?? null;\n\n  /**\n   * Past steps, each some steps `ago`, from the current active step at `0`, as\n   * `[0,... stepsL-1-bound]`.\n   */\n  const addTextures = (ago) =>\n    /**\n     * Hooks to pull a given `texture` by the active pass `state`; lets `GLSL`\n     * access the `array` of `texture`s by constant index (steps ago).\n     * Only returns a value if not using a `merge`d `texture`; otherwise `null`.\n     */\n    each((_, t) => to[n+`states[${(ago*texturesL)+t}]`] =\n        (_, { merge: m, stepNow: s = 0, bound: b = bound, textures: ts }) =>\n          ((m)? null : wrap(s-b-ago, ts)?.[t]?.texture),\n      textures);\n\n  /** Flatten all input `texture`s, as `uniform`s are kept in flat `array`s. */\n  for(let ago = 0, pl = stepsL-bound; ago < pl; ++ago) { addTextures(ago); }\n\n  return to;\n}\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback getUniform\n * A `function` hook to update a `GL` `uniform` value for a render pass.\n *\n * **See**\n * - {@link toUniforms}\n * - {@link data.toData}\n * - {@link api.texture}\n *\n * **Returns**\n * A `GL` uniform to be bound via a `GL` API.\n *\n * @param {{\n *     drawingBufferWidth:number,\n *     drawingBufferHeight:number\n *   }} context General or global properties; with:\n *   - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *   - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` state); with:\n *   - `stepNow`: The current step of the `gpgpu` state.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n * @returns {number|number[]|texture|object}\n */\n","const setC2 = (out, x, y) => (!out && (out = []), out[0] = x, out[1] = y, out);\nconst setC3 = (out, x, y, z) => (!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out);\nconst setC4 = (out, x, y, z, w) => (!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out[3] = w, out);\nconst setC6 = (out, a, b, c, d, e, f) => (!out && (out = []), out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = f, out);\nconst setC = (out, ...values) => {\n  if (!out) return values;\n  for (let i = 0, n = values.length; i < n; i++) {\n    out[i] = values[i];\n  }\n  return out;\n};\nexport {\n  setC,\n  setC2,\n  setC3,\n  setC4,\n  setC6\n};\n","/**\n * The `gpgpu` update step.\n *\n * Connects inputs to the `GL` state and renders an update step.\n *\n * @module\n * @category JS\n *\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n */\n\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport { macroPass } from './macros';\n\nimport {\n    vertDef, preDef, positionsDef, countDef, stepMaxDef, copyImageDef,\n    clearPassDef\n  } from './const';\n\nconst { call } = Function;\n\n/**\n * Convenience to get the currently active `framebuffer`.\n *\n * @see {@link toStep}\n * @see {@link data.toData}\n *\n * @param {object} state The `gpgpu` state.\n * @param {object[][]} state.passes Passes per step. See `toData`.\n * @param {number} [state.stepNow] Any active state step index. See `toStep`.\n * @param {number} [state.passNow] Any active draw pass index. See `toStep`.\n *\n * @returns {object} Any active step's active pass object, of the given `state`.\n */\nexport const getPass = ({ passes: ps, stepNow: s, passNow: p }) =>\n  wrap(s, ps)?.[p];\n\n/**\n * Resolve a shader given as either a `string` or `function`.\n *\n * @param {string|(*,*)=>string} shader A shader `string`, or a `function` that\n *   returns one when given the `context` and `state` arguments.\n * @param {*} [context] A `context` passed to `shader` if it's a `function`.\n * @param {*} [state] A `state` passed to `shader` if it's a `function`.\n *\n * @returns {string} The given `shader` if it's a `string`; otherwise if it's a\n *   `function` the `string` returned by calling it with `context` and `state`.\n */\nexport const toShader = (shader, context, state) =>\n  ((shader.call === call)? shader(context, state) : shader);\n\n/**\n * Merged `texture` update, called upon each pass.\n *\n * Copies the active pass's output into the merged `texture`, from each of its\n * `framebuffer` attachments one by one (to support multiple draw buffers).\n * Matches the lookup logic defined in `macroTaps`.\n *\n * @todo Update docs.\n *\n * @see [SO reading from multiple `framebuffer`s](https://stackoverflow.com/a/34160982/716898)\n * @see {@link getPass}\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroTaps}\n *\n * @param {object} state A `gpgpu` state of the active pass.\n * @param {{color:texture[],map:number[]}[][]} state.passes Passes per\n *   step; any active one's found via `getPass`, with:\n *   - `color`: `array` of data-`texture`s.\n *   - `map`: `array` of `number`s, showing how the `texture`s are grouped\n *     per-pass. See `getPass`, `toData`, and `mapGroups`.\n * @param {merge} state.merge The merged `texture` to update.\n * @param {number} [state.stepNow] The currently active state step, if any.\n *\n * @returns {texture} The merged `texture`, updated by the active pass's output;\n *   matches the lookup logic defined in `macroTaps`.\n */\nexport function updateMerge(state) {\n  const {\n      merge, stepNow: s, size,\n      copyImage: ci = state.copyImage = copyImageDef()\n    } = state;\n\n  const { color: cs, map: pass } = getPass(state);\n  const { all: { texture: t }, next } = merge;\n  const sub = t?.subimage;\n  const { color } = next;\n  let f = next.framebuffer;\n\n  /** Handle `object`s or `regl`-like extended `function`s. */\n  (f?.call !== Function.call) && (f = f?.call);\n\n  // Silent exit if there's not enough info ready now to perform the update.\n  if(!(sub && f && cs && pass && (s || (s === 0)))) { return t; }\n\n  const { steps: sl, width: w, height: h } = size;\n  /** Start at the top of the `texture`, move down row-per-step and wrap. */\n  const y = wrap(s, sl)*h;\n\n  /**\n   * Reusable `framebuffer` binds and copies each of the pass `texture`s along\n   * the merged `texture`.\n   */\n  each((c, i) =>\n    (next.color = c) &&\n      f.call(f, next).use.call(f, () => sub.call(t, ci, pass[i]*w, y)),\n    cs);\n\n  /** Reset any changed properties. */\n  next.color = color;\n  f.call(f, next);\n\n  return t;\n}\n\n/**\n * Creates a `gpgpu` update step function, for use with a `gpgpu` state object.\n *\n * @todo Make this fully and consistently extensible; improve `pipeline`.\n * @todo Example.\n *\n * @see {@link buffer}\n * @see {@link command}\n * @see {@link subimage}\n * @see {@link onStep}\n * @see {@link onPass}\n * @see {@link getPass}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroPass}\n * @see {@link inputs.toUniforms}\n *\n * @param {object} api An API for `GL` resources.\n * @param {buffer} [api.buffer] Function to set up a `GL` buffer.\n * @param {clear} [api.clear] Function to clear `GL` view or `framebuffer`.\n * @param {command} [api.command=api] Function to create a `GL` render pass,\n *   given options, to be called later with options; `api` if not given.\n * @param {object} state The `gpgpu` state to use. See `toData` and `mapGroups`.\n * @param {object} state.maps How values are grouped per-`texture` per-pass\n *   per-step. See `mapGroups`.\n * @param {number[][]} state.maps.passes How textures are grouped into passes.\n *   See `mapGroups`.\n * @param {object} [state.merge] Any merged state `texture`; uses separate state\n *   textures if not given.\n * @param {object} [state.merge.texture] Any `GL` `texture` of `state.merge`.\n * @param {subimage} [state.merge.texture.subimage] A function to update part of\n *   the merge `GL` `texture` object data. See `subimage`.\n * @param {function} [state.merge.update] Hook to update, if any; if not given,\n *   `state.merge.texture` is updated here with active states upon each pass.\n *\n *   The default merged `texture` is laid out as `[texture, step]` on the\n *   `[x, y]` axes, respectively; if other layouts are needed, this merge update\n *   hook can be given to use as-is, and the setup and lookup logic in their\n *   respective hooks.\n *\n *   See `toData` and `macroTaps`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {string} [state.vert=vertDef] The step vertex shader `GLSL`; a\n *   simple flat screen shader if not given.\n * @param {string} state.frag The step fragment shader `GLSL`.\n * @param {object} [state.uniforms=toUniforms(state)] The step uniforms;\n *   modifies any given. See `toUniforms`.\n * @param {number[]|buffer} [state.positions=positionsDef()] The step position\n *   `attribute`s; 3 points of a large flat triangle if not given.\n * @param {number} [state.count=state.positions.length*0.5] The `number` of\n *   elements/`attribute`s to draw.\n * @param {object} [state.pipeline] Any `GL` command properties to mix in\n *   overriding those ones added here; all passed to `api.command`.\n * @param {string} [state.vert=vertDef] Vertex `GLSL` code to prepend `macro`s.\n * @param {string[]} [state.verts] Preprocesses and caches vertex `GLSL`\n *   code per-pass if given, otherwise processes just-in-time before each pass.\n * @param {string} [state.frag] Fragment `GLSL` to prepend `macro`s.\n * @param {string[]} [state.frags] Preprocesses and caches fragment `GLSL`\n *   code per-pass, otherwise processes just-in-time before each pass.\n * @param {onStep} [onStep] Callback upon each step.\n * @param {onPass} [onPass] Callback upon each pass.\n * @param {object} [to=state] The `object` to set up. Modifies the given `state`\n *   `object` by default.\n *\n * @returns {object} `to` The given `to` `object`; set up with a `gpgpu` step\n *   `function` and related properties, to use with the `gpgpu` state.\n * @returns {string} `to.vert` The given/new `state.vert` vertex shader `GLSL`.\n * @returns {string} `to.frag` The given `state.frag` fragment shader `GLSL`.\n * @returns {string[]} `[to.verts]` Any cached pre-processed vertex shaders\n *   `GLSL`, if `state.verts` was given.\n * @returns {string[]} `[to.frags]` Any cached pre-processed fragment shaders\n *   `GLSL`, if `state.verts` was given.\n * @returns {object} `to.uniforms` The given `state.uniforms`.\n * @returns {number} `to.count` The given or new `state.count`.\n * @returns {buffer} `to.positions` The given or new `state.positions`; via\n *   `api.buffer`.\n * @returns {command} `to.pass` A `GL` command `function` to draw a given pass;\n *   via `api`/`api.command`.\n * @returns {function} `to.step` The main `function` to perform all the draw\n *   pass `GL` commands for a given state step.\n */\nexport function toStep(api, state = {}, to = state) {\n  /** Handle `object`s or `regl`-like extended `function`s, for `command`. */\n  const { buffer, clear, command = api } = api;\n\n  const {\n      merge, pipeline, verts, frag, frags, uniforms, attributes, maps,\n      // Update any default vertex `shader` to use the given `pre`.\n      pre: n = preDef, vert = vertDef.replaceAll(preDef, n || ''),\n      // Any vertex `count`, and `positions` to be passed to `buffer`.\n      count = countDef, positions = positionsDef(),\n      clearPass = null\n    } = state;\n\n  // Ensure any properties changed are included.\n  to.pre = n;\n  to.vert = vert;\n  to.count = count;\n  to.positions = buffer(positions);\n  to.clearPass = clearPass;\n\n  // May pre-process and keep the `shader`s for all passes in advance.\n  if(verts || frags) {\n    // Keep the current pass.\n    const { passNow } = state;\n\n    verts && (to.verts = verts);\n    frags && (to.frags = frags);\n\n    each((pass, p) => {\n        // Create `macro`s for this pass in advance.\n        state.passNow = p;\n\n        // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n        verts &&\n          (verts[p] ??= macroPass(state, 'vert')+toShader(vert, null, state));\n\n        // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n        frags &&\n          (frags[p] ??= macroPass(state, 'frag')+toShader(frag, null, state));\n      },\n      maps.passes);\n\n    // Set the pass back to what it was.\n    state.passNow = passNow;\n  }\n\n  /** A `command` to render `pass` updates via a `GL` `pipeline` description. */\n  to.pass = command(to.pipeline = {\n    // Uses the full-screen vertex `shader` state by default.\n    vert(c, s) {\n      const { passNow: p, step: { vert: v = vert, verts: vs = verts } } = state;\n\n      // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n      return vs?.[p] ?? macroPass(s, 'vert')+toShader(v, c, s);\n    },\n    frag(c, s) {\n      const { passNow: p, step: { frag: f = frag, frags: fs = frags } } = state;\n\n      // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n      return fs?.[p] ?? macroPass(s, 'frag')+toShader(f, c, s);\n    },\n    /** Need an active `pass` with `framebuffer`, or may draw to the screen. */\n    framebuffer: (_, s) => getPass(s)?.framebuffer,\n    count, uniforms,\n    attributes: {\n      [n+'position']: (_, s) => s.positions,\n      ...attributes\n    },\n    depth: { enable: false },\n    blend: { enable: false },\n    /** Any `pipeline` properties shallow-override others of the same name. */\n    ...pipeline\n  });\n\n  /** Any merged `texture`'s update, set up if not already given. */\n  merge && ((to.merge = merge).update ??= updateMerge);\n\n  /** Guard for number overflow; set to `0` to ignore or handle in `GLSL`. */\n  to.stepBy = (state = to, by = 1) => {\n    const { stepNow = 0, stepMax = stepMaxDef } = state;\n\n    state.stepNow = wrap(stepNow+by, stepMax || Infinity);\n\n    return state;\n  };\n\n  /** Executes the next step and all its passes. */\n  to.step = (state = to) => {\n    const stepState = state.onStep?.(state) ?? state;\n\n    const {\n        steps, merge, pass, onPass, stepBy,\n        clearPass = stepState.clearPass = clearPassDef()\n      } = stepState;\n\n    const mergeUpdate = merge?.update;\n\n    stepBy(stepState);\n\n    each((p, i) => {\n        stepState.passNow = i;\n\n        const passState = onPass?.(stepState, p) ?? stepState;\n\n        /** Only call `clear` if specified, can just use blending otherwise. */\n        clearPass &&\n          (clearPass.framebuffer = getPass(passState)?.framebuffer) &&\n          clear(clearPass);\n\n        pass(passState);\n        // Update any merged `texture` upon each pass.\n        mergeUpdate?.(passState);\n      },\n      stepState.maps.passes);\n\n    delete clearPass?.framebuffer;\n\n    return stepState;\n  };\n\n  return to;\n}\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onStep\n * Callback upon each step.\n *\n * **See**\n * - {@link toStep}\n * - {@link data.toData}\n * - {@link state.framebuffer}\n *\n * **Returns**\n * - A `stepState` object to use for each of the step's next passes; or\n *   `null`ish to use the given `props`.\n *\n * @param {object} [props] The `props` passed to `run`.\n * @param {framebuffer[]} step The `framebuffer`s for `props.stepNow` from\n *   `props.steps`, where the next state step will be drawn. See `toData`.\n *\n * @returns {object}\n */\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onPass\n * Callback upon each pass.\n *\n * **See**\n * - {@link toStep}\n * - {@link maps.mapGroups}\n *\n * **Returns**\n * - A `passState` object to use for the render `command` call; or `null`ish to\n *   use the given `stepState`.\n *\n * @param {object} [stepState] The `props` passed to `run` via any `onStep`.\n * @param {number[]} pass The maps for the next pass. See `mapGroups`.\n *\n * @returns {object}\n */\n\n/** A wrapper around `updateMerge`, handy for testing. */\nfunction updateMergeTest(state, update = updateMerge, after = 2) {\n  const { color, map: pass } = getPass(state);\n  const { merge: { all, next }, stepNow: s, passNow: p, size, maps } = state;\n  const { channels } = all;\n  const { steps: sl, shape: [w, h], merge: { shape: [wl, hl] } } = size;\n  const tl = maps.textures.length;\n  const y = (s%sl)*h;\n  const lc = y*tl*w;\n  const to = update(state);\n  let f = next?.framebuffer;\n\n  /** Handle `object`s or `regl`-like extended `function`s. */\n  (f.call !== call) && (f = f?.call);\n\n  console.warn(s, p, pass, ':');\n  console.warn('- l', 0, 'r', tl*w, 'w', w, 'wl', wl);\n  console.warn('- t', y, 'b', y+h, 'h', h, 'hl', hl);\n  console.warn('- c', channels, 'lc', lc*channels, 'rc', (lc+(w*h))*channels,\n    'sc', w*h*channels, 'slc', wl*hl*channels);\n\n  f.call(f, { color: to }).use.call(f, () =>\n    console.warn(Array.prototype.reduce.call(regl.read(), (o, v, i) =>\n        o+((i)? ',\\t' : '')+\n        ((!i)? ''\n        : ((i%(tl*w*h*channels) === 0)?\n            `\\n${'='.repeat(100)}step${'='.repeat(100)}\\n`\n        : ((i%(tl*w*channels) === 0)? '\\n'\n        : ((i%(w*channels) === 0)? ' || \\t'\n        : ((i%channels === 0)? ' / \\t' : '')))))+\n        (i*1e-3).toFixed(3).slice(2)+': '+((v)? v.toFixed(2) : '___'),\n      '\\n')));\n\n  if(s && after && s%(sl*after) === 0) { debugger; }\n\n  return to;\n}\n\nexport default toStep;\n","/**\n * The `GLSL` preprocessor macros for working with the `gpgpu` state and maps.\n *\n * Each set of different macros will result in new shader compilations - for\n * optimal performance, the fewest macros possible should be created, one per\n * each given set of inputs, ideally; caches here can be used for efficiency.\n *\n * @module\n * @category JS\n *\n * @todo Redo examples, especially `macroTaps` and `macroPass`.\n * @todo Ensure the `output_N` in `macroOutput` can work with `WebGL2`; look at\n *   using `layout(location=attach_N) out data_N`, not `gl_FragData[attach_N]`.\n *   - [SO: Multiple output textures from the same program](https://stackoverflow.com/questions/51793336/multiple-output-textures-from-the-same-program)\n *   - [SO: GL FragData must be constant zero](https://stackoverflow.com/questions/46740817/gl-fragdata-must-be-constant-zero)\n *   - [SO: How are layout qualifiers better than getAttribLocation in WebGL2](https://stackoverflow.com/questions/50258822/how-are-layout-qualifiers-better-than-getattriblocation-in-webgl2)\n */\n\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport { type } from '@epok.tech/is-type/type';\n\nimport { preDef, boundDef } from './const';\n\n/** Escaped line-feed for easier reading. */\nexport const lineFeed = ' \\\\\\n';\nconst lf = lineFeed;\n\n/** The channels denoted for texture input/output. */\nexport const rgba = 'rgba';\n/** Simple shared cache for temporary or reusable objects. */\nexport const cacheDef = {};\n/** Gives cache keys from simple plain `object` inputs. */\nconst id = JSON.stringify;\n\n/** Names for each part of the macro handling process available to hooks. */\nexport const hooks = {\n  /** The full set of macros. */\n  macroPass: '',\n  /** Each part of the set of macros. */\n  macroValues: 'values', macroOutput: 'output',\n  macroSamples: 'samples', macroTaps: 'taps'\n};\n\n/**\n * Whether handling macros here; or the result of a given hook to handle it.\n *\n * Allows macros of the given key to be handled by external named hooks, to\n * replace any part of the functionality here in overall or granular ways.\n *\n * The macro names checked in this module are found in `hooks`.\n *\n * @example ```javascript\n * // Macros to be handled here, the default.\n * hasMacros() == null;\n * hasMacros({}) == null;\n * hasMacros({ macros: true }) == null;\n *\n * // Macros to be handled here, with prefix `'pre_'` instead of `'preDef'`.\n * hasMacros({ pre: 'pre_' }) == null;\n *\n * // Macros not created.\n * hasMacros({ macros: false }) === '';\n * hasMacros({ macros: 0 }) === '';\n *\n * // Macros for `'a'` handled by external `string` hook, not here.\n * hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n * // Macros for `'b'` handled by external `function` hook, not here.\n * hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n * // Macros specified `on` a `'frag'` not created.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, '', 'frag') === '';\n * // Macros specified `on` a `'vert'` handled here.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, '', 'vert') == null;\n * // Macros of `'values'`/`hooks.values` handled here.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, 'values', '') == null;\n * // Macros of `'values'`/`hooks.values` specified `on` a `'vert'` not created.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, 'values', 'vert') === '';\n * ```\n *\n * @see hooks\n *\n * @param {object} [state] Any `object` whose properties may handle macros.\n * @param {string} [key] Any name to check granularly within `macros`. See `hooks`.\n * @param {string} [on=''] Any further macro name specifier; if given, `key`\n *   itself and with this specifier are checked (i.e: `key` then `key+'_'+on`).\n *\n * @param {false|string|((...)=>string|null)|{}} [macros=state.macros] How\n *   macros should be handled, according to their type, in order of precedence:\n *   - `null`ish: macros to be handled here, `null`ish returned.\n *   - `true`: macros to be handled here, `null`ish returned.\n *   - `false`y: no macros to be handled here, empty `''` `string` returned.\n *   - `string`: no macros to be handled here, this hook value's used instead.\n *   - `function`: external `hasMacros`-like `function` hook, called with\n *     `macros(state, key, on, macros)`, the returned value used as shown here.\n *   - `object`: recurses with any value at the given `key`, with\n *     `hasMacros(state, key, on, macros[key])`.\n *   - Otherwise, macros to be handled here, `null`ish returned.\n *\n * @returns {null|string} Either the result of the macros handled elsewhere,\n *   or `null`ish if macros should be handled here.\n */\nexport function hasMacros(state, key, on = '', macros = state?.macros) {\n  if((macros ?? true) === true) { return null; }\n  else if(!macros) { return ''; }\n\n  const t = type(macros);\n\n  return ((t === 'String')? macros\n    : ((t === 'Function')?\n      hasMacros(state, key, on, macros(state, key, on, macros))\n    : (((macros instanceof Object) && (key in macros))?\n      hasMacros(state, key, on, macros[key])\n    : ((on)? hasMacros(state, ((key)? key+'_'+on : on), '', macros)\n    : null))));\n}\n\n/**\n * Generates an `array`-like declaration, as a `GLSL` syntax `string` compatible\n * with versions 1-3.\n *\n * Works around the lack of `const` `array`s in `GLSL` < 3. Used as the base for\n * the other `GLSL` version list types, ensuring a common standard while\n * offering further language features where available.\n *\n * @example ```javascript\n * getGLSLListBase('float', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = float(0);'+lf+\n * 'const int list_1 = float(1);'+lf+\n * 'const int list_2 = float(2);';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,number[]>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array-like declaration string.\n */\nexport const getGLSLListBase = (type, name, a, qualify = '', init = type) =>\n  `const int ${name}_l = ${a.length};`+\n  reduce((s, v, i) =>\n      s+lf+(qualify && qualify+' ')+type+\n        ` ${name}_${i} = ${init}(${v.join?.(', ') ?? v});`,\n    a, '');\n\n/**\n * Generates an array-like declaration, as a `GLSL1` syntax string.\n *\n * Workaround for lack of `const` arrays in `GLSL` < 3. Adds a lookup macro\n * function; slow here, but standard.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL1ListLike('float', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = float(0);'+lf+\n * 'const int list_1 = float(1);'+lf+\n * 'const int list_2 = float(2);\\n'+\n * '// Index macro `list_i` (e.g: `list_i(0)`) may be slow, `+\n *   'use name (e.g: `list_0`) if possible.\\n'+\n * '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array-like declaration string.\n */\nexport const getGLSL1ListLike = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+'\\n\\n'+\n  // @todo Would ideally use the concatenation macro, but can't in GLSL 1.\n  // `#define ${name}_i(i) ${name}_##i`;\n  `/**\\n`+\n  ` * Index function \\`${name}_i\\` (e.g: \\`${name}_i(0)\\`) may be slow.\\n`+\n  ` * Use name (e.g: \\`${name}_0\\`) if possible.\\n`+\n  ` */\\n`+\n  `#define ${name}_i(i) ${reduce((s, v, i) =>\n      ((i)? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`),\n    a, '')}\\n`;\n\n/**\n * Generates an array declaration, as a `GLSL1` syntax string.\n *\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]); // =>\n * 'const int list_l = 3;'+lf+\n * 'vec3 list_0 = vec3(1, 0, 0);'+lf+\n * 'vec3 list_1 = vec3(0, 2, 0);'+lf+\n * 'vec3 list_2 = vec3(0, 0, 3);'+lf+\n * 'vec3 list[list_l];'+lf+\n * 'list[0] = list_0;'+lf+\n * 'list[1] = list_1;'+lf+\n * 'list[2] = list_2;\\n'+\n * '#define list_i(i) list[i]\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array declaration string.\n */\nexport const getGLSL1ListArray = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+lf+\n  (qualify && qualify+' ')+type+` ${name}[${name}_l];`+\n  reduce((s, _, i) => s+lf+name+`[${i}] = ${name}_${i};`, a, '')+'\\n'+\n  `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array declaration, as a `GLSL3` syntax string.\n *\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL3List('int', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = int(0);'+lf+\n * 'const int list_1 = int(1);'+lf+\n * 'const int list_2 = int(2);'+lf+\n * 'const int list[list_l] = int[list_l](list_0, list_1, list_2);\\n'+\n * '#define list_i(i) list[i]\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL3` array declaration string.\n */\nexport const getGLSL3List = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+lf+\n  (qualify && qualify+' ')+type+` ${name}[${name}_l] = ${init}[${name}_l](${\n    reduce((s, _, i) => (s && s+', ')+name+'_'+i, a, '')});\\n`+\n  `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Creates a `GLSL` definition of an array, and initialises it with the given\n * values, type, and variable name.\n *\n * The initialisation is valid `GLSL1` or greater syntax; but is written with\n * escaped new-lines so it may be used in a single-line (e.g: for preprocessor\n * macros).\n *\n * For a `qualify` of `const` on any `GLSL` < 3, falls back to using non-array\n * variables with the index appended to `name`, since `const` arrays aren't\n * supported before `GLSL3`.\n *\n * @see {@link getGLSL3List}\n * @see {@link getGLSL1ListLike}\n * @see {@link getGLSL1ListArray}\n *\n * @example ```javascript\n * getGLSLList('int', 'test', [0, 1]); // =>\n * 'const int test_l = 2;'+lf+\n * 'int test_0 = int(0);'+lf+\n * 'int test_1 = int(1);'+lf+\n * 'int test[test_l];'+lf+\n * 'test[0] = test_0;'+lf+\n * 'test[1] = test_1;\\n'+\n * '#define test_i(i) test[i]\\n';\n *\n * getGLSLList('ivec2', 'vecs', [[1, 0], [0, 1]], 'const', 3); // =>\n * 'const int vecs_l = 2;'+lf+\n * 'ivec2 vecs_0 = ivec2(1, 0);'+lf+\n * 'ivec2 vecs_1 = ivec2(0, 1);'+lf+\n * 'const ivec2 vecs[vecs_l] = ivec2[vecs_l](vecs_0, vecs_1);\\n'+\n * '#define vecs_i(i) vecs[i]\\n';\n *\n * getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n * 'const int listLike_l = 2;'+lf+\n * 'const int listLike_0 = int(0);'+lf+\n * 'const int listLike_1 = int(1);\\n'+\n * '// Index macro `listLike_i` (e.g: `listLike_i(0)`) may be slow, `+\n *   'use name (e.g: `listLike_0`) if possible.\\n'+\n * '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed (e.g: `const`).\n * @param {number} [glsl=1] The `GLSL` version to target, if specified.\n * @param {string} [init] A data-type initialiser.\n *\n * @returns {string} The `GLSL` (1 or 3) array or array-like declaration string.\n */\nexport const getGLSLList = (type, name, a, qualify = '', glsl = 1, init) =>\n  ((glsl >= 3)? getGLSL3List\n  : ((qualify.trim() === 'const')? getGLSL1ListLike : getGLSL1ListArray))\n    (type, name, a, qualify, init);\n\n/**\n * Defines the values within textures per-step, as `GLSL` preprocessor macros.\n *\n * These macros define mappings from values to their textures and channels.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link maps.mapGroups}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const state = { pre: '', steps: 2 };\n * const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * state.maps = mapGroups({ ...maps, buffersMax: 1, packed: 0 });\n * macroValues(state); // =>\n * '#define texture_0 0\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_1 1\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_2 2\\n'+\n * '#define channels_2 r\\n'+\n * '\\n'+\n * '#define textures 3\\n'+\n * '#define passes 3\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 1 });\n * state.size = { entries: 2**5 };\n * macroValues(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 2\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n *\n * // Can bind more texture outputs per pass - values across fewer passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * macroValues(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 1\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled\n *   or prefixed. See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {object} state.maps How values are grouped per-`texture` per-pass\n *   per-step.\n * @param {array.<number>} state.maps.values How values of each data item are\n *   grouped into `texture`s. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.textures The groupings of values\n *   into `texture`s. See `mapGroups`.\n * @param {array} state.maps.passes Passes drawn per-step. See `mapGroups`.\n * @param {array|number} state.steps States drawn across frames. See `toData`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *   unavailable as inputs.\n * @param {object} [state.size] Any size information about the GL resources.\n * @param {number} [state.size.entries] The number of data entries per state,\n *   if given. See `toData`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} The `GLSL` preprocessor macros defining the maps from\n *   values to `texture`s and channels.\n */\nexport function macroValues(state, on) {\n  const key = hooks.macroValues;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      maps, steps, bound = boundDef, merge, size, pre: n = preDef,\n      cache = cacheDef\n    } = state;\n\n  const { values, textures, passes: { length: passesL }, alias } = maps;\n  const stepsL = steps.length ?? steps;\n  const entries = size?.entries;\n  const split = !merge;\n\n  const c = cache &&\n    `macro@${key}@${n}|${bound}|${id(values)}|${id(textures)}|${stepsL}|${\n      passesL}|${entries}|${split}|${id(alias)}`;\n\n  if((to = cache?.[c]) != null) { return to; }\n\n  const texturesL = textures.length;\n  const stepsPast = stepsL-bound;\n\n  to = reduce((s, texture, t, _, i = 0) => reduce((s, v) => {\n          const to = s+\n            `#define ${n}texture_${v} ${t}\\n`+\n            `#define ${n}channels_${v} ${rgba.slice(i, i += values[v])}\\n\\n`;\n\n          if(!alias) { return to; }\n\n          const a = alias[v];\n\n          return to+\n            `#define ${n}texture_${a} ${n}texture_${v}\\n`+\n            `#define ${n}channels_${a} ${n}channels_${v}\\n\\n`;\n        },\n        texture, s),\n      textures, '')+\n    ((entries || (entries === 0))? `#define ${n}entries ${entries}\\n` : '')+\n    `#define ${n}textures ${texturesL}\\n`+\n    `#define ${n}passes ${passesL}\\n`+\n    `#define ${n}bound ${bound}\\n`+\n    `#define ${n}steps ${stepsL}\\n`+\n    `#define ${n}stepsPast ${stepsPast}\\n`+\n    `#define ${n}${(split)? `splits` : `merged`} ${texturesL*stepsPast}\\n\\n`;\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the outputs being drawn to per-pass, as `GLSL` preprocessor macros.\n *\n * These macros define mappings from values to their outputs, if bound.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link maps.mapGroups}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state = {\n *   pre: '', passNow: 0,\n *   maps: mapGroups({ ...maps, buffersMax: 1, packed: 0 })\n * };\n *\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_0 0\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 1 });\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_1 0\\n'+\n * '#define attach_1 0\\n'+\n * '#define output_1 gl_FragData[attach_1].rgba\\n'+\n * '\\n';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroOutput(state); // =>\n * '#define passNow 1\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 0\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n';\n *\n * // Can bind more texture outputs per pass - values across fewer passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_1 0\\n'+\n * '#define attach_1 0\\n'+\n * '#define output_1 gl_FragData[attach_1].rgba\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 1\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 1\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties for generating the macros. See `toData`:\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `pre` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<number>} state.maps.values How values of each data item may be\n *   grouped into textures across passes. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.textures The groupings of values\n *   into textures. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.passes The groupings of textures\n *   into passes. See `mapGroups`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} `GLSL` preprocessor macros for the pass's bound outputs.\n */\nexport function macroOutput(state, on) {\n  const key = hooks.macroOutput;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const { passNow: p, maps, pre: n = preDef, cache = cacheDef } = state;\n  const { values, textures, passes, alias } = maps;\n  const pass = passes[p];\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(values)}|${id(textures)}|${id(passes)}|${\n      id(alias)}`;\n\n  to = cache?.[c] ??\n    `#define ${n}passNow ${p}\\n${\n    reduce((s, texture, bound, _, i = 0) => reduce((s, v) => {\n          const to = s+'\\n'+\n            `#define ${n}bound_${v} ${texture}\\n`+\n            `#define ${n}attach_${v} ${bound}\\n`+\n            `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${\n              rgba.slice(i, i += values[v])}\\n`;\n\n          if(!alias) { return to; }\n\n          const a = alias[v];\n\n          return to+'\\n'+\n            `#define ${n}bound_${a} ${n}bound_${v}\\n`+\n            `#define ${n}attach_${a} ${n}attach_${v}\\n`+\n            `#define ${n}output_${a} ${n}output_${v}\\n`;\n        },\n        textures[texture], s),\n      pass, '')}\\n`;\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the texture samples/reads per-pass, as `GLSL` preprocessor macros.\n *\n * The macros define the mapping between the values and those they derive from,\n * as step/texture locations in a `samples` list, and indexes to read values\n * from sampled data in a `reads` list (once sampled into a `data` list, as in\n * `macroTaps` or similar).\n *\n * They're set up as function-like macros that may be called from the shader to\n * initialise the mappings arrays with a given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link macroTaps}\n * @see {@link hasMacros}\n * @see {@link getGLSLList}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n * const maps = { values, derives, channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state =\n *   { pre: '', maps: mapStep({ ...maps, buffersMax: 1, packed: 0 }) };\n *\n * // Uses the first pass by default.\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 1;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 2);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) samples_0\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n';\n *\n * // Next pass in this step - no derives, no samples nor reads.\n * state.passNow = 1;\n * macroSamples(state); // =>\n * '';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 4;'+lf+\n *   'const ivec2 samples_0 = ivec2(1, 0);'+lf+\n *   'const ivec2 samples_1 = ivec2(0, 0);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_3 = ivec2(0, 2);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) ((i == 3)? samples_3 : ((i == 2)? samples_2 '+\n *   ': ((i == 1)? samples_1 : samples_0)))\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(0);'+lf+\n *   'const int reads_2_1 = int(1);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(3);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * // Can bind more texture outputs per pass - values across fewer passes.\n * // Also fewer samples where values share derives or textures.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 3;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_1 = ivec2(1, 1);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) '+\n *   '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(1);'+lf+\n *   'const int reads_2_1 = int(0);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(0);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both the\n *   hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} [state.passNow=0] The index of the currently active pass;\n *   uses the first pass if not given.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<array.<array.<number>>>} [state.maps.samples] The minimal set\n *   of texture samples to use. See `mapSamples`.\n * @param {array.<array.<array.<number>>>} [state.maps.reads] The mappings from\n *   values to the corresponding `state.samples`. See `mapSamples`.\n * @param {number} [state.glsl=1] The `GLSL` language version.\n *   See `getGLSLList`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} `GLSL` preprocessor macros defining the mappings for\n *   samples and reads, for each value.\n */\nexport function macroSamples(state, on) {\n  const key = hooks.macroSamples;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      passNow: p = 0, maps, steps, bound = boundDef,\n      glsl, pre: n = preDef, cache = cacheDef\n    } = state;\n\n  const { samples, reads, readsToValue, alias } = maps;\n  const passSamples = samples?.[p];\n  const passReads = reads?.[p];\n  const passReadsToValue = readsToValue?.[p];\n  const stepsPast = ((alias)? (steps.length ?? steps)-bound : null);\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(passSamples)}|${id(passReads)}|${\n      id(passReadsToValue)}|${id(alias)}|${stepsPast}|${glsl}`;\n\n  to = cache?.[c] ??\n    ((!passSamples)? ''\n    : `#define ${n}useSamples${lf+\n        getGLSLList('ivec2', n+'samples', passSamples, 'const', glsl)}\\n`)+\n    ((!passReads)? ''\n    : reduce((s, reads, v) => {\n          const to = `${s}#define ${n}useReads_${v}${lf+\n            getGLSLList('int', n+'reads_'+v, reads, 'const', glsl)}\\n`;\n\n          if(!alias) { return to; }\n\n          const valueReadsToValue = passReadsToValue[v];\n          const va = alias[v];\n          const nra = `${n}reads_${va}`;\n          const nrv = `${n}reads_${v}`;\n\n          return to+\n            `/**\\n`+\n            ` * Alias reads, depends on index reads \\`${n}useReads_${v}\\`.\\n`+\n            ` * If using both alias and index reads, only use this not both.\\n`+\n            ` */\\n`+\n            `#define ${n}useReads_${va}${lf\n            }${n}useReads_${v}${\n            reduce((s, read, r) => {\n                const ra = alias[valueReadsToValue[r]];\n                const n = passSamples[read][0];\n                const o = stepsPast-n-1;\n                const to = `${nrv}_${r}`;\n                let d;\n\n                return s+lf+\n                  ((s.indexOf(d = `const int ${nra}_${ra}_new_${n}`) >= 0)? ''\n                  : `/** Alias and step past, count from new to old. */${lf+\n                    d} = ${to};${lf}`)+\n                  ((s.indexOf(d = `const int ${nra}_${ra}_old_${o}`) >= 0)? ''\n                  : `/** Alias and step last, count from old to new. */${lf+\n                    d} = ${to};${lf}`)+\n                  ((n || (s.indexOf(d = `const int ${nra}_${ra}_new`) >= 0))? ''\n                  : `/** Alias with implied newest step past. */${lf+\n                    d} = ${to};${lf}`)+\n                  ((n || (s.indexOf(d = `const int ${nra}_${ra}`) >= 0))? ''\n                  : `/** Alias with implied newest. */${lf+\n                    d} = ${to};${lf}`)+\n                  ((o || (s.indexOf(d = `const int ${nra}_${ra}_old`) >= 0))? ''\n                  : `/** Alias with implied oldest step last. */${lf+\n                    d} = ${to};${lf}`);\n              },\n              reads, ((reads.length)? lf : ''))}${lf\n            }const int ${nra}_l = ${nrv}_l;${lf\n            }int ${nra}_i(int i) { return ${nrv}_i(i); }\\n\\n`;\n        },\n        passReads, ''));\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the samples of textures per-pass, as `GLSL` preprocessor macros.\n *\n * The macros define the minimal sampling of textures for the data the active\n * pass's values derive from; creates a `data` list containing the samples; the\n * `samples` list variable names are required as created by `macroSamples`.\n *\n * Handles sampling states in a flat array of textures, or merged in one texture\n * (in both `sampler2D`, and `sampler3D`/`sampler2DArray` where supported).\n * Merging allows shaders to access past steps by non-constant lookups; e.g:\n * attributes cause `sampler array index must be a literal expression` on\n * `GLSL3` spec and other platforms (e.g: `D3D`); note these need texture repeat\n * wrapping.\n *\n * They're set up as function-like macros that may be called from the shader to\n * initialise the mappings arrays with a given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see [`sampler array index must be a literal expression`](https://stackoverflow.com/a/60110986/716898)\n * @see [`sampler2DArray`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)\n * @see [`sampler3D`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)\n *\n * @see {@link macroSamples}\n * @see {@link hasMacros}\n * @see {@link getGLSLList}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n * @see {@link inputs.toUniforms}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n * const maps = { values, derives, channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state =\n *   { pre: '', maps: mapStep({ ...maps, buffersMax: 1, packed: 0 }) };\n *\n * // Uses the first pass by default.\n * macroTaps(state); // =>\n * '@todo';\n *\n * // Next pass in this step - no derives, no samples nor reads.\n * state.passNow = 1;\n * macroTaps(state); // =>\n * '';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroTaps(state); // =>\n * '@todo';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * // Can bind more texture outputs per pass - values across fewer passes.\n * // Also fewer samples where values share derives or textures.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroTaps(state); // =>\n * '@todo';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} [state.passNow=0] The index of the currently active pass;\n *   uses the first pass if not given.\n * @param {object} state.maps How `values` are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<array.<array.<number>>>} [state.maps.samples] The minimal set\n *   of texture samples to use. See `mapSamples`.\n * @param {object} [state.merge] Any merged state texture; uses separate state\n *   textures if not given. See `toData`.\n * @param {number} [state.glsl=1] The `GLSL` language version.\n *   See `getGLSLList`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} The `GLSL` preprocessor macros defining the minimal\n *   sampling of textures, to suit how states are stored (array of textures, or\n *   all merged into one texture) and supported `GLSL` language features.\n */\nexport function macroTaps(state, on) {\n  const key = hooks.macroTaps;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      passNow: p = 0, maps, merge, glsl, pre: n = preDef,\n      cache = cacheDef\n    } = state;\n\n  const passSamples = maps.samples?.[p];\n  const split = !merge;\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(passSamples)}|${split}|${glsl}`;\n\n  if((to = cache?.[c]) != null) { return to; }\n\n  const glsl3 = (glsl >= 3);\n  /** Which texture sampling function is available. */\n  const texture = 'texture'+((glsl3)? '' : '2D');\n  /** Short and common names for functions and parameters. */\n  const f = n+'tapState';\n  const def = '#define '+f;\n  /** Common parameters, passed as `(..., stepBy, textureBy)` */\n  const bs = 'stepBy';\n  const bt = 'textureBy';\n  const by = `${bs}, ${bt}`;\n  /** Aliases default names for brevity, main functions offer more control. */\n  const aka = `#define ${f}(uv)`+lf+f;\n  const akaBy = `#define ${f}By(uv, ${by})`+lf+f;\n  /** The current `sample`, as `[step, texture]`. */\n  const st = n+'samples_';\n  /** Prefix for private temporary variables. */\n  const t = '_'+n;\n  /** A temporary `array` to pass to `getGLSLList`. */\n  const tapsSamples = cache[key+':tapsSamples'] ??= [];\n  const tapsL = tapsSamples.length = passSamples?.length ?? 0;\n\n  /** The main `texture`-sampling logic. */\n  to = ((!tapsL)? ''\n    : ((split)?\n      /** Split un-merged `texture`s accessed by constant index. */\n      `/**\\n`+\n      ` * States in a \\`sampler2D[]\\`; looks up 1D index and 2D \\`uv\\`.\\n`+\n      ` * Past steps go later in the list.\\n`+\n      ` * States may also be sampled by shifted step/texture.\\n`+\n      ` * Pass constant array index values; \\`textures, ${by}\\`.\\n`+\n      ` * Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      ` */\\n`+\n      def+`sBy(uv, states, textures, ${by})`+lf+\n        // Compute before the loop for lighter work.\n        `const int ${t}tl = int(textures);`+lf+\n        `vec2 ${t}uv = vec2(uv);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          map((_, i) =>\n              texture+'(states['+\n                  // Offset step.\n                  `((int(${st+i}.s)+int(${bs}))*${t}tl)+`+\n                  // Offset `texture`.\n                  `int(${st+i}.t)+int(${bt})`+\n                `], ${t}uv)`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      `/** Sample the states as given without shifting by any offsets. */\\n`+\n      def+`s(uv, states, textures)`+lf+\n      f+`sBy(uv, states, textures, 0, 0)\\n\\n`+\n      `/** Preferred aliases: index suits states array constant access. */\\n`+\n      aka+`s(uv, ${n}states, ${n}textures)\\n`+\n      akaBy+`sBy(uv, ${n}states, ${n}textures, ${by})\\n`\n    : /** Merged 2D `texture`. */\n      `/**\\n`+\n      ` * States merged in a \\`sampler2D\\`.\\n`+\n      ` * Scales the 2D \\`uv\\` lookup over \\`[textures, steps]\\`.\\n`+\n      ` * Step from now into the past going upwards in the texture.\\n`+\n      ` * States may also be sampled by shifted step/texture.\\n`+\n      ` * Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      ` */\\n`+\n      def+`2By(uv, states, stepNow, steps, textures, ${by})`+lf+\n        // Compute before the loop for lighter work.\n        `vec2 ${t}l = vec2(textures, steps);`+lf+\n        `vec2 ${t}uv = vec2(uv)/${t}l;`+lf+\n        // Steps advance in reverse, top-to-bottom.\n        `vec2 ${t}s = vec2(1, -1)/${t}l;`+lf+\n        // Offset `texture`, step.\n        // Each step stored in `texture` top downward at `-stepNow`.\n        // Most recent step to look up is at `-stepNow+1`.\n        `vec2 ${t}i = (vec2(${by}).ts+vec2(0, 1))-vec2(0, stepNow);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          // Would repeat wrap; but `WebGL1` needs power-of-2.\n          map((_, i) =>\n              texture+`(states, `+\n                // Offset `texture`, step.\n                `fract(${t}uv+fract((vec2(${st+i}).ts+${t}i)*${t}s)))`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      `/** Sample the states as given without shifting by any offsets. */\\n`+\n      def+`2(uv, states, stepNow, steps, textures)`+lf+\n      f+`2By(uv, states, stepNow, steps, textures, 0, 0)\\n\\n`+\n      ((!glsl3)?\n        `/** Preferred aliases: 2D suits merged texture in \\`GLSL\\` < 1. */\\n`+\n        aka+`2(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n`+\n        akaBy+\n          `2By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`\n      : /**\n         * Merged 3D `texture` types, supported from `GLSL3`.\n         * @todo Check and finish this.\n         */\n        `/**\\n`+\n        ` * States merged to \\`sampler3D\\` or \\`sampler2DArray\\`.\\n`+\n        ` * 2D \\`uv\\` to 3D.\\n`+\n        ` * Scales \\`x\\` over \\`textures\\`, \\`z\\` over \\`steps\\` as:\\n`+\n        ` * - \\`sampler3D\\`: the number of steps; depth, \\`[0, 1]\\`.\\n`+\n        ` * - \\`sampler2DArray\\`: \\`1\\` or less; layer, \\`[0, steps-1]\\`.\\n`+\n        ` * States may also be sampled by shifted step/texture.\\n`+\n        ` * Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n        ` */\\n`+\n        def+`3By(uv, states, stepNow, steps, textures, ${by})`+lf+\n          /** @see `...2By()` above. */\n          // Compute before the loop for lighter work.\n          `vec2 ${t}l = vec2(textures, steps);`+lf+\n          `vec2 ${t}uv = (vec2(uv)+vec2(textureBy, 0))/${t}l;`+lf+\n          // Offset `texture`.\n          `float ${t}sx = 1.0/${t}l.x;`+lf+\n          // Offset step.\n          `float ${t}s = float(stepBy)-float(stepNow);`+lf+\n          `float ${t}sz = -1.0/${t}l;`+lf+\n          // Sample into the `data` output list.\n          getGLSLList('vec4', n+'data',\n            // Would repeat wrap; but `sampler2DArray` layer can't.\n            map((_, i) =>\n                texture+'(states, fract(vec3('+\n                  // Offset `texture`.\n                  `${t}uv.x+(float(${st+i}.t)*${t}sx), ${t}uv.y, `+\n                  // Offset step: `sampler3D` depth, `[0, 1]`;\n                  // `sampler2DArray` layer, `[0, steps-1]`.\n                  `(float(${st+i}.s)+${t}s)*${t}sz)))`,\n              passSamples, tapsSamples),\n            '', glsl)+'\\n'+\n        `/** Sample the states as given without shifting by any offsets. */\\n`+\n        def+`3(uv, states, stepNow, steps, textures)`+lf+\n        f+`3(uv, states, stepNow, steps, textures)\\n\\n`+\n        `/** Preferred aliases: 3D suits merged texture in \\`GLSL\\` 3+. */\\n`+\n        aka+`3(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n`+\n        akaBy+\n          `3By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`\n      ))+'\\n');\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines all `GLSL` preprocessor macro values, `texture` samples, and outputs\n * for the active pass.\n *\n * The macros define the mapping between the active values, their `texture`s and\n * channels, bound outputs, and other macros useful for a draw pass.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link macroValues}\n * @see {@link macroOutput}\n * @see {@link macroTaps}\n * @see {@link macroSamples}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n *\n * // Automatically packed values - values across fewer `texture`s/passes.\n * // Only a single `texture` output per pass - values across more passes.\n * const state = {\n *   passNow: 0, steps: 2, size: { entries: 2**5 },\n *   maps: mapStep({ values, derives, channelsMax: 4, buffersMax: 1 })\n * };\n *\n * macroPass(state); // =>\n * '#define gpgpu_texture_1 0\\n'+\n * '#define gpgpu_channels_1 rgba\\n'+\n * '\\n'+\n * '#define gpgpu_texture_0 1\\n'+\n * '#define gpgpu_channels_0 rg\\n'+\n * '\\n'+\n * '#define gpgpu_texture_2 1\\n'+\n * '#define gpgpu_channels_2 b\\n'+\n * '\\n'+\n * '#define gpgpu_entries 32\\n'+\n * '#define gpgpu_textures 2\\n'+\n * '#define gpgpu_passes 2\\n'+\n * '#define gpgpu_stepsPast 1\\n'+\n * '#define gpgpu_steps 2\\n'+\n * '\\n'+\n * '#define gpgpu_passNow 0\\n'+\n * '\\n'+\n * '#define gpgpu_bound_1 0\\n'+\n * '#define gpgpu_attach_1 0\\n'+\n * '#define gpgpu_output_1 gl_FragData[gpgpu_attach_1].rgba\\n'+\n * '\\n';\n *\n * // Next pass and extra step.\n * ++state.steps;\n * ++state.passNow;\n * state.pre = '';\n * macroPass(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 2\\n'+\n * '#define stepsPast 2\\n'+\n * '#define steps 3\\n'+\n * '\\n'+\n * '#define passNow 1\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 0\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n'+\n * '#define useSamples'+lf+\n *   'const int samples_l = 3;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_1 = ivec2(1, 1);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i)'+lf+\n *   '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(1);'+lf+\n *   'const int reads_2_1 = int(0);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(0);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n'+\n * '// States in a `sampler2D[]`; looks up 1D index and 2D `uv`.\\n'+\n * '@todo';\n * ```\n *\n * @param {object} state Properties for generating the macros. See `toData`\n *   and `mapGroups`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n *\n * @returns {string} The `GLSL` preprocessor macros defining the mappings for\n *   values, `texture`s, channels, bound outputs of the active pass, etc. See\n *   `macroValues`, `macroOutput`, and `macroSamples`.\n */\nexport const macroPass = (state, on) =>\n  hasMacros(state, hooks.macroPass, on) ??\n    macroValues(state, on)+macroOutput(state, on)+\n    macroSamples(state, on)+macroTaps(state, on);\n\nexport default macroPass;\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","/**\n * @todo Move most properties up to the `to` level, it's not very relevant from\n *   outside which step of the internal MPM process they belong to.\n */\n\nimport { range } from '@epok.tech/fn-lists/range';\nimport { map } from '@epok.tech/fn-lists/map';\nimport { reduce } from '@epok.tech/fn-lists/reduce';\nimport { each } from '@epok.tech/fn-lists/each';\nimport { wrap } from '@epok.tech/fn-lists/wrap';\nimport { timer } from '@epok.tech/fn-time';\nimport { clamp } from '@thi.ng/math/interval';\nimport { subS2 } from '@thi.ng/vectors/subs';\nimport { mulN4 } from '@thi.ng/vectors/muln';\nimport { addN } from '@thi.ng/vectors/addn';\nimport { rad } from '@thi.ng/math/angle';\nimport { hsl, srgb } from '@thi.ng/color';\nimport { MKS } from 'gsl-const';\n\nimport gpgpu from '@epok.tech/gl-gpgpu/src';\nimport { macroPass } from '@epok.tech/gl-gpgpu/src/macros';\nimport { mapStep } from '@epok.tech/gl-gpgpu/src/maps';\nimport { toUniforms } from '@epok.tech/gl-gpgpu/src/uniforms';\nimport { getDrawIndexes, toShape } from '@epok.tech/gl-gpgpu/src/size';\nimport { getPass } from '@epok.tech/gl-gpgpu/src/step';\nimport indexForms from '@epok.tech/gl-gpgpu/src/index-forms';\n\nimport {\n    extensionsHalfFloat as extendHalfFloat, extensionsFloat as extendFloat,\n    extensionsDrawBuffers as extendDrawBuffers\n  } from '@epok.tech/gl-gpgpu/src/const';\n  // @todo Why doesn't this import work...?\n  // from '@epok.tech/gl-gpgpu/esm/const';\n\nimport gridFrag from './grid/index.frag.glsl';\n\nimport gridToPointsFrag from './grid-to-points/index.frag.glsl';\n\nimport pointsToGridVert from './points-to-grid/index.vert.glsl';\nimport pointsToGridFrag from './points-to-grid/index.frag.glsl';\n\nimport gridToScreenFrag from './grid-to-screen/index.frag.glsl';\n\nimport pointsToScreenVert from './points-to-screen/index.vert.glsl';\nimport pointsToScreenFrag from './points-to-screen/index.frag.glsl';\n\nconst { keys, assign } = Object;\nconst { floor, min, max, abs, random, sign, sin } = Math;\nconst { GRAV_ACCEL: g } = MKS;\n\nconst cache = {};\n\nexport const extensionsHalfFloat = extendHalfFloat;\nexport const extensionsFloat = extendFloat;\nexport const extensionsDrawBuffers = extendDrawBuffers;\nexport const extensionsInstances = () => ['angle_instanced_arrays'];\n\nexport const extensions = extensionsHalfFloat;\n\nexport const extensionsOptional = () => [\n  ...cache.extensionsFloat ??= extensionsFloat(),\n  ...cache.extensionsDrawBuffers ??= extensionsDrawBuffers(),\n  ...cache.extensionsInstances ??= extensionsInstances()\n];\n\nexport const optionalExtensions = extensionsOptional;\n\n/** Convenience for setting up named `gpgpu` fields. */\nexport function toFields(fields, to = {}) {\n  const vs = to.values = [];\n  const index = to.index = {};\n  const alias = to.alias = [];\n\n  (to.fields = fields).forEach((v, k) => alias[index[k] = vs.push(v)-1] = k);\n\n  return to;\n}\n\n/**\n * Convenience for setting up `gpgpu` inputs to link between processes.\n *\n * @todo Handle vertex and fragment shaders.\n * @todo Handle passes.\n */\nexport function toLink(state, at, to = {}) {\n  const uniforms = toUniforms(to.state = state);\n\n  to.macros ??= macroPass(state);\n\n  if(!at) { return to; }\n\n  /** Override uniforms to prefix the right property paths. */\n  for(let k in uniforms) {\n    const u = uniforms[k];\n\n    uniforms[k] = (c, p, b) => u(c, at(c, p, b), b);\n  }\n\n  return to;\n}\n\n/**\n * Link all but the bound data in one pass.\n * @todo Ensure the right `bound` value is used for output.\n */\nexport const linkPast = { stepNow: 0, passNow: 0, bound: 1 };\n\n/** Link all data in one pass. */\nexport const linkFull =\n  { stepNow: 0, passNow: 0, bound: 0, maps: { buffersMax: 0 } };\n\nexport function mpm(api, to = {}) {\n  console.log('mpm', to);\n\n  const {\n      command = api, buffer, elements, clear, hasExtension, now, limits\n    } = to.api = api;\n\n  const { pointSizeDims, lineWidthDims } = limits;\n\n  const hasInstances = (cache.extensionsInstances ??= extensionsInstances())\n    .every(hasExtension);\n\n  to.support = { hasInstances };\n\n  const vertex = to.vertex = [[1, 1], [1, 0], [0, 0], [0, 1]];\n  const quad = to.quad = [[0, 1, 2], [2, 3, 0]];\n\n  // const timestep = to.timer?.step ?? 1e3/120;\n  // const timestep = to.timer?.step ?? 1e3/60;\n  const timestep = to.timer?.step ?? 1e3/30;\n  // const timestep = to.timer?.step ?? 0;\n\n  /** Time control and state. */\n  to.timer = timer({\n    to,\n    now: ((timestep)? undefined : () => now()*1e3),\n    period: 1e6,\n    ...to.timer,\n    // Fixed-step (add-step), or real-time (variable delta-time).\n    step: timestep || '-'\n  });\n\n  /** Target offset position `x` and `y`, magnitude `z`. */\n  // to.g = assign([0.5, 0.5, g*1e2], to.g);\n  // to.g = assign([0.5, 0.5, 0], to.g);\n  to.g = assign([0.5, -1e9, g*1e2], to.g);\n\n  /** Exponential-notation scaling for storage spatial numerical accuracy. */\n  const rescale = to.rescale = {\n    // mass: [1, 0],\n    mass: [1, 0],\n    // position: [1, 0],\n    position: [1, 0],\n    // motion: [1, -6],\n    motion: [1, 0],\n    // affine: [1, -6],\n    affine: [1, 0],\n    // deform: [1, -6],\n    deform: [1, 0],\n    // stress: [1, -6],\n    stress: [1, 0],\n    ...to.rescale\n  };\n\n  /** Header of common settings prepended to each shader. */\n  to.head = {\n    to,\n    test: '',\n    kernelType: '',\n    // kernelType: 'Centre',\n    kernelSize: 3,\n    rescales: keys(rescale),\n\n    glsl:\n      ({ test, kernelType, kernelSize, rescales, to: { rescale } } = to.head) =>\n        ((test)? `#define test ${test}\\n` : '')+\n        ((kernelType)? `#define kernelType ${kernelType}\\n` : '')+\n        ((kernelSize)? `#define kernelSize ${kernelSize}\\n` : '')+\n        reduce((rs, r) => {\n            const [b, p] = rescale[r];\n\n            return rs+((b*(10**p) === 1)? '' : `#define rescale_${r}\\n`);\n          },\n          rescales, '')+\n        `\\n`,\n\n    ...to.head\n  };\n\n  /** Grid data. */\n  const grid = to.grid = {\n    to,\n    frag: gridFrag,\n\n    detail: 1e2,\n\n    limit: 1e9,\n    bounds: [-1, -1, 1, 1],\n\n    boundsIn: [1, 1, -1, -1],\n\n    boundsHit: 1,\n    // boundsHit: -1,\n\n    on: true,\n\n    ...to.grid\n  };\n\n  const { detail: gDetail, limit: gLimit, bounds: gBounds } = grid;\n\n  mulN4(null, gBounds, gLimit);\n\n  const gFields = grid.fields = toFields((new Map())\n    /** @todo Use inverse mass to allow for infinite mass objects? */\n    .set('mass', 1)\n    /** Using the term `motion` since it's variously velocity or momentum. */\n    // .set('motionFull', 3)\n    .set('motionFull', 2)\n    /** Using the term `motion` since it's variously velocity or momentum. */\n    // .set('motionBase', 3)\n    .set('motionBase', 2));\n\n  const gPre = 'grid_';\n  const gDerives = [];\n  const { index: gIndex, values: gValues, alias: gAlias } = gFields;\n\n  const { mass: gMass, motionFull: gMotionFull, motionBase: gMotionBase } =\n    gIndex;\n\n  gDerives[gMotionFull] = [gMotionFull, gMass];\n  gDerives[gMotionBase] = [gMotionBase, gMass];\n\n  const gMaps = { values: gValues, alias: gAlias, derives: gDerives };\n  const gSteps = grid.gpgpu?.steps ?? 2;\n\n  const gGPGPU = grid.gpgpu = gpgpu(api, {\n    to,\n    pre: gPre, maps: gMaps, stepNow: 0, steps: gSteps, stepMax: gSteps,\n    side: gDetail,\n\n    macros: { vert: 0 },\n\n    frag: (c, { to: { grid: g, head: h } }) => h.glsl(h)+g.frag,\n\n    uniforms: {\n      boundsIn: (c, p) => p.to.grid.boundsIn,\n      boundsHit: (c, p) => p.to.grid.boundsHit,\n      dt: (c, p) => p.to.timer.dt,\n      g: (c, p) => p.to.g,\n      rescaleMass: (c, p) => p.to.rescale.mass,\n      rescaleMotion: (c, p) => p.to.rescale.motion\n    },\n\n    ...grid.gpgpu\n  });\n\n  const gMerge = gGPGPU.merge;\n\n  grid.step = (state = grid) => {\n    const s = state.onStep?.(state) ?? state;\n    const { on, gpgpu } = s;\n\n    on && gpgpu.step(gpgpu);\n\n    return s;\n  };\n\n  grid.clears = { color: [0, 0, 0, 0], depth: 1, framebuffer: null };\n\n  grid.clear = ({ clears: c, gpgpu: g } = grid) =>\n    each((p, i) => {\n        g.passNow = i;\n        (c.framebuffer = getPass(g)?.framebuffer) && clear(c);\n      },\n      g.maps.passes);\n\n  /** Material points data. */\n  const points = to.points = { to };\n\n  const pFields = points.fields = toFields((new Map())\n    // .set('position', 3)\n    .set('position', 2)\n    /** Using the term `motion` since it's variously velocity or momentum. */\n    // .set('motion', 3)\n    .set('motion', 2)\n    .set('mass', 1)\n    /**\n     * Affine momentum matrix.\n     *\n     * @todo Need to pack a 3*3 matrix into fewer channels or across texels.\n     */\n    // .set('affine', 3*3)\n    .set('affine', 2*2)\n    /**\n     * Deformation gradient, its determinant is the volume change.\n     *\n     * @todo Need to pack a 3*3 matrix into fewer channels or across texels.\n     */\n    // .set('deform', 3*3)\n    .set('deform', 2*2)\n    /**\n     * Stress gradient, derived from deformation, cached to use across steps.\n     *\n     * @todo Need to pack a 3*3 matrix into fewer channels or across texels.\n     */\n    // .set('stress', 3*3)\n    .set('stress', 2*2));\n\n  /**\n   * The `motion` and `affine` values derive from shared grid data.\n   * Other values derive from the next `motion` and `affine` values.\n   *\n   * @todo In `gl-gpgpu`, add a way to group passes in order if needed, so a\n   *   next pass can read values from the past pass if reliant on current\n   *   values it `got` from the past pass in the current step.\n   * @todo For now, add 2 `gl-gpgpu` processes here if needed:\n   *   - If there aren't enough output data channels to do it in one pass,\n   *     split the grid-to-points step into 2 parts: update the next values,\n   *     then update the values that derive from those in the same step.\n   *   - If there are enough output data channels, the step can be combined.\n   */\n  const gridToPoints = to.gridToPoints = {\n    to,\n    frag: gridToPointsFrag,\n\n    /**\n     * @todo Are mass or volume responsible for particle collision?\n     * @todo Move to looking up material types?\n     */\n    // mass: 1,\n    // mass: 1e2,\n    mass: 1,\n    // mass: 1e4,\n    // mass: 1e-1,\n\n    // volume: null,\n    // volume: 7e-4,\n    // volume: 7e-2,\n    // volume: 1e-4,\n    volume: 5e-4,\n    // volume: 1e-3,\n    // volume: 1,\n    // volume: 1e-5,\n\n    /** Thresholds used to test if the material is separating. */\n    volumeSplit: [1e-6, -1e-3],\n\n    /** ASFLIP motion adjustment. */\n    motionAdjust: 0.97,\n    // motionAdjust: 0,\n\n    /** ASFLIP position adjustment range. */\n    positionAdjusts: [0, 1],\n\n    /**\n     * Mechanics parameters.\n     *\n     * @todo Move to individual particles looking up material types?\n     */\n\n    /** Young's modulus */\n    youngMod: 5e5,\n    // youngMod: 1e6,\n    /** Poisson's ratio. */\n    poissonRatio: 0.3,\n    // poissonRatio: 0.4,\n    /** Bulk modulus. */\n    bulkMod: null,\n    /** Shear modulus. */\n    shearMod: null,\n\n    /**\n     * Plasticity parameters.\n     *\n     * @todo Move to individual particles looking up material types?\n     */\n    frictionAngle: rad(40),\n    // frictionAngle: rad(80),\n    // frictionAngle: rad(10),\n\n    materialFriction: null,\n\n    boundsClamp: true,\n    // boundsClamp: false,\n\n    spawnOn: {\n      // any: true,\n      any: false,\n      out: true,\n      slow: false,\n      centre: false\n    },\n\n    wander: [0, 0],\n    // wander: [1, 2e5],\n    // wander: [1e3, 1e5],\n    // wander: [1, 2e12],\n\n    on: true,\n\n    ...to.gridToPoints\n  };\n\n  gridToPoints.volume ??= (() => {\n    /** @todo Better volume estimate based on number of particles and size. */\n    const { volume: v, volumeScale: vs } = gridToPoints;\n\n    if(v != null) { return v; }\n\n    const [gw, gh] = grid.gpgpu.size.shape;\n    // const [pw, ph] = gridToPoints.gpgpu.size.shape;\n\n    return (vs/gw)*(vs/gh);\n    // return (vs/(gw/pw))*(vs/(gh/ph));\n  })();\n\n  const { index: pIndex, values: pValues, alias: pAlias } = pFields;\n\n  const {\n      position: pPosition, motion: pMotion, mass: pMass,\n      affine: pAffine, deform: pDeform, stress: pStress\n    } = pIndex;\n\n  const pDerives = [];\n\n  pDerives[pPosition] = [pPosition, pMotion, pMass]; // +got [pAffine, pDeform]\n  pDerives[pMotion] = [pMotion, pPosition];\n  pDerives[pMass] = null;\n  pDerives[pAffine] = [pPosition];\n  pDerives[pDeform] = [pDeform]; // +got [pAffine]\n  pDerives[pStress] = null; // +got [pDeform]\n\n  const pMaps = { values: pValues, derives: pDerives, alias: pAlias };\n  const pPre = 'points_';\n\n  /** Inputs to map points data correctly. */\n\n  const gpLinkG = toLink({\n      ...linkPast,\n      pre: gPre, steps: gSteps, merge: gMerge,\n      macros: { output: 0 },\n      maps: mapStep({\n        ...gMaps, ...linkPast.maps, derives: [[gMotionFull, gMotionBase]]\n      })\n    },\n    (c, p) => p.to.grid.gpgpu);\n\n  gridToPoints.link = { grid: gpLinkG };\n\n  /**\n   * @todo Broke this somehow, only 2 steps works, may be a `gpgpu` index issue.\n   * @todo Lines don't work for 2 steps but work for 3.\n   */\n  const pSteps = gridToPoints.gpgpu?.steps ?? 2;\n  // const pSteps = gridToPoints.gpgpu?.steps ?? 3;\n\n  /**\n   * Grid-to-points `gpgpu` step, gather from `grid` data, render to step\n   * `points` data.\n   */\n  const gpGPGPU = gridToPoints.gpgpu = gpgpu(api, {\n    to, pre: pPre, maps: pMaps, stepNow: 0, steps: pSteps, stepMax: pSteps,\n\n    // scale: 10,\n    // scale: 9,\n    // scale: 8.5,\n    scale: 8,\n    // scale: 7,\n    // scale: 4,\n    // scale: 1,\n\n    macros: { vert: 0 },\n\n    frag: (c, { to: { gridToPoints: { frag: f, link: l }, head: h } }) =>\n      h.glsl(h)+l.grid.macros+f,\n\n    uniforms: {\n      ...gpLinkG.state.uniforms,\n      mass: (c, p) => p.to.gridToPoints.mass,\n      volume: (c, p) => p.to.gridToPoints.volume,\n      volumeSplit: (c, p) => p.to.gridToPoints.volumeSplit,\n      motionAdjust: (c, p) => p.to.gridToPoints.motionAdjust,\n      positionAdjusts: (c, p) => p.to.gridToPoints.positionAdjusts,\n\n      bulkMod(c, { to: { gridToPoints: gp } }) {\n        const { bulkMod: bm, youngMod: ym, poissonRatio: pr } = gp;\n\n        return bm ?? ym/(3*(1-(pr*2)));\n      },\n      shearMod(c, { to: { gridToPoints: gp } }) {\n        const { shearMod: sm, youngMod: ym, poissonRatio: pr } = gp;\n\n        return sm ?? ym/(2*(1+pr));\n      },\n      materialFriction(c, { to: { gridToPoints: gp } }) {\n        const { materialFriction: mf, frictionAngle: fa } = gp;\n\n        if(mf != null) { return mf; }\n\n        const sfa = sin(fa);\n\n        return (1.633*sfa)/(3-sfa);\n      },\n\n      boundsClamp: (c, p) => +(p.to.gridToPoints.boundsClamp || 0),\n      spawnOnAny: (c, p) => +(p.to.gridToPoints.spawnOn.any || 0),\n      spawnOnOut: (c, p) => +(p.to.gridToPoints.spawnOn.out || 0),\n      spawnOnSlow: (c, p) => +(p.to.gridToPoints.spawnOn.slow || 0),\n      spawnOnCentre: (c, p) => +(p.to.gridToPoints.spawnOn.centre || 0),\n      wander: (c, p) => p.to.gridToPoints.wander,\n\n      dt: (c, p) => p.to.timer.dt,\n      bounds: (c, p) => p.to.grid.bounds,\n      chaos: (c, p) => p.to.chaos,\n      rescaleMass: (c, p) => p.to.rescale.mass,\n      rescalePosition: (c, p) => p.to.rescale.position,\n      rescaleMotion: (c, p) => p.to.rescale.motion,\n      rescaleAffine: (c, p) => p.to.rescale.affine,\n      rescaleDeform: (c, p) => p.to.rescale.deform,\n      rescaleStress: (c, p) => p.to.rescale.stress\n    },\n\n    ...gridToPoints.gpgpu\n  });\n\n  const { size: gpSize, merge: pMerge, bound: pBound } = gpGPGPU;\n  const { entries: pl } = gpSize;\n\n  gridToPoints.step = (state = gridToPoints) => {\n    const s = state.onStep?.(state) ?? state;\n    const { on, gpgpu } = s;\n\n    on && gpgpu.step(gpgpu);\n\n    return s;\n  };\n\n  /**\n   * Points-to-grid render, splat from `points` data to render `grid` data.\n   * @todo How to map `grid` textures correctly in 3x3 quads?\n   */\n  const pointsToGrid = to.pointsToGrid = {\n    to,\n    vert: pointsToGridVert,\n    frag: pointsToGridFrag,\n\n    stretch: 1, turn: 1,\n    on: true,\n\n    /** Straight-alpha additive blending with no multiplying channels. */\n    blend: { enable: true, func: { src: 1, dst: 1 } },\n    depth: { enable: false },\n\n    ...to.pointsToGrid\n  };\n\n  const {\n      [gMass]: gMassPass,\n      [gMotionFull]: gMotionFullPass, [gMotionBase]: gMotionBasePass\n    } = gMaps.valueToPass;\n\n  const pgSize = pointsToGrid.size = {};\n\n  const pgSplats = pointsToGrid.splats = (new Set())\n    .add(gMassPass).add(gMotionFullPass).add(gMotionBasePass);\n\n  const pgSplatsL = pgSize.splats = pgSplats.size;\n\n  /**\n   * Splats per point, in the shader center on the point and scale to extend\n   * as far as the neighbouring 3 nodes.\n   *\n   * @todo Draw to all the needed grid passes, framebuffer-per-splat.\n   */\n  const pgInstancesL = pgSize.instances = pl*pgSplatsL;\n\n  /**\n   * Inputs to map points data correctly.\n   *\n   * @todo Handle vertex and fragment shaders.\n   * @todo Handle passes.\n   */\n\n  const pgLinkP = toLink({\n      ...linkPast,\n      pre: pPre, steps: pSteps, merge: pMerge,\n      macros: { output: 0 },\n      maps: mapStep({\n        ...pMaps, ...linkPast.maps,\n        derives: [[pPosition, pMotion, pMass, pAffine, pStress]]\n      })\n    },\n    (c, p) => p.to.gridToPoints.gpgpu);\n\n  const pgLinkG = toLink({\n      ...linkPast,\n      pre: gPre, steps: gSteps, merge: gMerge,\n      macros: { samples: 0, taps: 0 },\n      maps: mapStep({ ...gMaps, ...linkPast.maps, derives: null })\n    },\n    (c, p) => p.to.grid.gpgpu);\n\n  pointsToGrid.link = { points: pgLinkP, grid: pgLinkG };\n\n  /** If using points, they're square and seem small, seems just big render? */\n  // pointsToGrid.quads = true;\n  // pointsToGrid.instanced = false;\n  // pointsToGrid.instanced = true;\n  // pointsToGrid.batch = true;\n  // pointsToGrid.batch = false;\n  // pointsToGrid.order = 'point-splat';\n  // pointsToGrid.order = 'splat-point';\n\n  /** Whether to draw using quads or points. */\n  const pgQuads = pointsToGrid.quads ??= (pointSizeDims[1] < 3);\n  /** Whether to draw using instancing. */\n  const pgInstanced = pointsToGrid.instanced ??= hasInstances && pgQuads;\n  /** Iterate, whether to batch-draw. */\n  const pgBatch = pointsToGrid.batch ??= !pgInstanced && (pgSplatsL > 1);\n\n  /** Iterate, splats-then-points or points-then-splats. */\n  const pgOrder = pointsToGrid.order ??=\n    ((pgInstanced)? 'point-splat' : 'splat-point');\n\n  /** The form to use, suitable for `elements`. */\n  const pgForm = pointsToGrid.form ??= ((pgQuads)? quad : null);\n  /** The number of parts per-form. */\n  const pgFormsL = pgSize.forms = pgForm?.length ?? 1;\n  /** The number of vertexes per-form. */\n  const pgFormVertexesL = pgSize.formVertexes = pgForm?.[0]?.length ?? 1;\n\n  /** The form vertex source to use. */\n  const pgFormSource = pointsToGrid.formSource ??=\n    ((pgQuads)? vertex : [[0.5, 0.5]]);\n\n  /** The number of vertexes per-source. */\n  const pgFormSourcesL = pgSize.formSources = pgFormSource.length;\n\n  /** The number of vertexes per-point. */\n  pgSize.pointVertexes = pgFormsL*pgFormVertexesL;\n\n  /** The number of sources overall. */\n  const pgFormSourcesSplatsL = pgSize.formSourcesSplats =\n    pgFormSourcesL*pgSplatsL;\n\n  /** The number of sources overall. */\n  const pgInstancesSourceL = pgSize.instancesSources =\n    pgInstancesL*pgFormSourcesL;\n\n  /**\n   * @todo Change this to a grid `gpgpu`, overriding all the attributes and\n   *   both shaders, but reusing the framebuffer passes logic to draw all the\n   *   needed grid passes correctly.\n   */\n  pointsToGrid.pass = command(pointsToGrid.pipeline = {\n    vert: (c, { vert: v, quads: q, link: { points, grid }, to: { head: h } }) =>\n      h.glsl(h)+\n      ((q)? '#define points_grid_quads\\n\\n' : '')+\n      points.macros+grid.macros+v,\n\n    frag: (c, { frag: f, quads: q, link: l, to: { head: h } }) =>\n      h.glsl(h)+\n      ((q)? '#define points_grid_quads\\n\\n' : '')+\n      l.grid.macros+f,\n\n    primitive: (c, p) => ((p.quads)? 'triangles' : 'points'),\n\n    attributes: {\n      /** Vertex only for drawing quads. */\n      vertex: ((!pgQuads)? pointsToGrid.vertex = { constant: pgFormSource }\n        : buffer(pointsToGrid.vertex = ((pgInstanced || pgBatch)? pgFormSource\n            : map((v, i) => wrap(i, pgFormSource),\n                range(pgInstancesSourceL), 0)))),\n\n      /** Index of each point. */\n      index: ((pgInstanced)?\n          {\n            ...(pointsToGrid.index = ((pgOrder === 'splat-point')?\n              // Splats-then-points, more data overall.\n              {\n                buffer: map((v, i) => i, range(pl), 0),\n                divisor: pgSplatsL\n              }\n            : // Points-then-splats, less data overall.\n              {\n                buffer: map((v, i) => i%pl, range(pgInstancesL), 0),\n                divisor: 1\n              })),\n            buffer: buffer(pointsToGrid.index.buffer)\n          }\n        : (pgBatch)?\n          (pgOrder === 'splat-point') &&\n            // Splats-then-points, batches.\n            ((c, p, b) =>\n              (pointsToGrid.index ??= [])[b] ??=\n                { constant: floor(b/p.splats.size) })\n        : (pgOrder === 'splat-point') &&\n            // Splats-then-points, once, more data overall.\n            buffer(pointsToGrid.index =\n              map((v, i) => floor(i/pgFormSourcesSplatsL),\n                range(pgInstancesSourceL), 0))),\n\n      /** Index of each splat. */\n      splat: ((pgInstanced)?\n          {\n            ...(pointsToGrid.splat = ((pgOrder === 'splat-point')?\n              // Splats-then-points, more data overall.\n              {\n                buffer: map((v, i) => i%pgSplatsL, range(pgInstancesL), 0),\n                divisor: 1\n              }\n            : // Points-then-splats, less data overall.\n              {\n                buffer: map((v, i) => i, range(pgSplatsL), 0),\n                divisor: pl\n              })),\n            buffer: buffer(pointsToGrid.splat.buffer)\n          }\n        : (pgBatch)?\n          (pgOrder === 'splat-point') &&\n            // Splats-then-points, batches, less data overall.\n            ((c, p, b) =>\n              (pointsToGrid.splat ??= [])[b] ??= { constant: b%p.splats.size })\n        : (pgOrder === 'splat-point') &&\n            // Splats-then-points, once, more data overall.\n            buffer(pointsToGrid.splat =\n              map((v, i) => i%pgFormSourcesSplatsL,\n                range(pgInstancesSourceL), 0)))\n    },\n    uniforms: {\n      ...pgLinkP.state.uniforms, ...pgLinkG.state.uniforms,\n      stretch: (c, p) => p.stretch,\n      turn: (c, p) => p.turn,\n      bounds: (c, p) => p.to.grid.bounds,\n      rescaleMotion: (c, p) => p.to.rescale.motion,\n      rescaleMass: (c, p) => p.to.rescale.mass,\n      rescaleAffine: (c, p) => p.to.rescale.affine,\n      rescaleStress: (c, p) => p.to.rescale.stress,\n\n      // Test\n      loop: (c, p) => p.to.timer.loop\n    },\n    blend: {\n      enable: (c, p) => p.blend.enable,\n      func: {\n        srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } }) => s ?? o,\n        srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } }) => s ?? o,\n        dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } }) => s ?? o,\n        dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } }) => s ?? o\n      }\n    },\n\n    depth: { enable: (c, p) => p.depth.enable },\n\n    /** A form at a time; or all forms together. */\n    elements: ((!pgForm)? pointsToGrid.elements = null\n      : elements(pointsToGrid.elements =\n        ((pgInstanced || pgBatch)? pgForm\n        : map((v, i) =>\n              addN([], wrap(i, pgForm), floor(i/pgFormsL)*pgFormSourcesL),\n            range(pgInstancesL*pgFormsL), 0)))),\n\n    count: (c, { instanced, batch, size: { pointVertexes, instances } }) =>\n      pointVertexes*((instanced || batch)? 1 : instances),\n\n    instances: (c, { instanced: i, size: s }) => ((i)? s.instances : 1),\n\n    framebuffer: (c, { to, framebuffer: f = getPass(to.grid.gpgpu) }) =>\n      f?.framebuffer\n  });\n\n  /** @todo Draw to all the needed grid passes, framebuffer-per-splat. */\n  pointsToGrid.step = (state = pointsToGrid) => {\n    const s = state.onStep?.(state) ?? state;\n    const { on, batch: b, pass, size, to } = s;\n\n    if(!on) { return s; }\n\n    const { gpgpu: gGPGPU, fields: gf } = to.grid;\n    let p = s;\n\n    b && range(p = s.batchStates ??= [], s, 0, p.length = size.instances);\n    pass(p);\n    gGPGPU.merge?.update?.(gGPGPU);\n\n    return s;\n  };\n\n  /** Render to the screen. */\n  const screen = to.screen = {\n    to,\n    size: [1, 1], aspect: [1, 1],\n    clears: { color: [0, 0, 0, 0], depth: 1 },\n    clear: (s = screen) => clear(s.clears)\n  };\n\n  /** Render the grid to the screen. */\n  const gridToScreen = to.gridToScreen = {\n    to,\n    frag: gridToScreenFrag,\n\n    paceLinear: false,\n    // paceLinear: true,\n\n    /** Squared or linear pace, picked by `paceLinear`. */\n    ranges: [\n      // [0, 9e12],\n      [0, 1e10],\n      // [0, 9e6]\n      [0, 1e5]\n    ],\n\n    /**\n     * Squared or linear pace, picked by `paceLinear`.\n     *\n     * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n     * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n     */\n    curves: [\n      // [[0, 0], [0.2, 0.8], [1, 1], [1, 1]],\n      map((v, i, a) => range(2, i/(a.length-1)), range(4), 0),\n      // [[0, 0], [0.5, 0.2], [0.9, 0.9], [1, 1]]\n      map((v, i, a) => range(2, i/(a.length-1)), range(4), 0)\n    ],\n\n    // colorHi: srgb('#0055ff55').buf,\n    colorHi: [1, 1, 1, 0.15],\n    colorLo: [0, 0, 0, 0],\n    angleHSLA: hsl('hsla(0deg, 80%, 70%, 0.5)').buf,\n    // angleHSLA: [0, 0, 0, 0],\n\n    on: true,\n\n    ...to.gridToScreen\n  };\n\n  /** Inputs to map grid data correctly. */\n\n  const gsLinkG = toLink({\n      ...linkFull,\n      /**\n       * Draw all states with none bound as outputs.\n       * @todo Errors without `merge`; why, if the framebuffer isn't bound?\n       */\n      bound: +(!gMerge),\n      pre: gPre, steps: gSteps, merge: gMerge,\n      macros: { output: 0 },\n      maps: mapStep({ ...gMaps, ...linkFull.maps, derives: [[gMotionFull]] })\n    },\n    (c, p) => p.to.grid.gpgpu);\n\n  gridToScreen.link = { grid: gsLinkG };\n\n  gridToScreen.pass = command(gridToScreen.pipeline = {\n    vert: (c, { link: l, to: { head: h, grid: g } }) =>\n      h.glsl(h)+l.grid.macros+g.gpgpu.vert,\n\n    frag: (c, { frag: f, link: l, to: { head: h }, angleHSLA, paceLinear }) =>\n      h.glsl(h)+l.grid.macros+\n      ((angleHSLA?.[3])? '#define angleHSLA angleHSLA\\n\\n' : '')+\n      ((paceLinear)? '#define paceLinear\\n\\n' : '')+\n      f,\n\n    attributes: { [gPre+'position']: gGPGPU.positions },\n    uniforms: {\n      ...gsLinkG.state.uniforms,\n      angleHSLA: (c, p) => p.angleHSLA,\n      range: (c, { ranges: rs, paceLinear: p }) => rs[+p],\n\n      ...reduce((to, _, i) => {\n          to[`curve[${i}]`] = (c, { curves: cs, paceLinear: p }) => cs[+p][i];\n\n          return to;\n        },\n        gridToScreen.curves[0], {}),\n\n      colorHi: (c, p) => p.colorHi,\n      colorLo: (c, p) => p.colorLo,\n\n      aspect: (c, p) => p.to.screen.aspect,\n      rescaleMotion: (c, p) => p.to.rescale.motion\n    },\n    /** @see [Premultiplied vs straight-alpha blending](https://limnu.com/webgl-blending-youre-probably-wrong/) */\n    blend: { enable: true, func: { src: 1, dst: 'one minus src alpha' } },\n    depth: { enable: false },\n    count: gGPGPU.count,\n    framebuffer: (c, p) => p.framebuffer\n  });\n\n  gridToScreen.draw = (state = gridToScreen) => {\n    const s = state.onDraw?.(state) ?? state;\n    const { on, pass } = s;\n\n    on && pass(s);\n\n    return s;\n  };\n\n  /**\n   * Render the points to the screen.\n   *\n   * @todo Set up a separate `gpgpu` with its own steps, to copy point position\n   *   and/or advect from the grid while staying close to source point, to track\n   *   many steps of state  without using loads of extra data.\n   */\n  const pointsToScreen = to.pointsToScreen = {\n    to,\n    vert: pointsToScreenVert,\n    frag: pointsToScreenFrag,\n\n    form: 1,\n    // form: 2,\n\n    // colorHi: srgb('#ff4400cc').buf,\n    colorHi: [1, 1, 1, 0.5],\n\n    // colorLo: srgb('#75000066').buf,\n    colorLo: [0, 0, 0, 0],\n\n    colorImage: null,\n    colorBy: [0, 0],\n    flip: [1, -1],\n    offset: [0, 0, 0, 0],\n    aspectImage: [1, 1],\n\n    useDiscard: false,\n    lengthLinear: false,\n\n    wideHi: [4e-3, 4e-6],\n    // wideHi: [6e-3, 6e-6],\n    // wideHi: [6e-2, 6e-4],\n    // wideHi: [511, 255],\n    // wideHi: [pointSizeDims[1], pointSizeDims[1]],\n\n    wideLo: [2e-3, 2e-6],\n    // wideLo: [2e-3, 2e-6],\n    // wideLo: [2e-2, 2e-4],\n    // wideLo: [1, 1e-1],\n    // wideLo: [pointSizeDims[0], pointSizeDims[0]],\n\n    widths: [, pointSizeDims, lineWidthDims],\n    primitives: [, 'points', 'lines'],\n\n    /** @see [Premultiplied vs straight-alpha blending](https://limnu.com/webgl-blending-youre-probably-wrong/) */\n    // blend: { enable: true, func: { src: 1, dst: 'one minus src alpha' } },\n    blend: { enable: true, func: { src: 1, dst: 1 } },\n    depth: { enable: false },\n    count: null,\n\n    on: true,\n\n    ...to.pointsToScreen\n  };\n\n  /** Inputs to map points data correctly. */\n\n  /**\n   * Draw all states with none bound as outputs.\n   *\n   * @todo Errors without `merge`; why, if the framebuffer isn't bound?\n   * @todo Lines don't work for 2 steps but work for 3.\n   */\n  const psLinkPBound = +(!pMerge);\n  const psDrawSteps = pSteps-psLinkPBound;\n\n  const psLinkP = toLink({\n      ...linkFull,\n      bound: psLinkPBound,\n      pre: pPre, steps: pSteps, merge: pMerge,\n      macros: { output: 0 },\n      maps: mapStep({\n        ...pMaps, ...linkFull.maps, derives: [[pPosition, pMass]]\n      })\n    },\n    (c, p) => p.to.gridToPoints.gpgpu);\n\n  pointsToScreen.link = { points: psLinkP };\n\n  /** @todo Lines don't work for 2 steps but work for 3. */\n  const psCounts = pointsToScreen.counts =\n    map((_, f) => f && indexForms(psDrawSteps, f, pl), range(3), 0);\n\n  pointsToScreen.pass = command(pointsToScreen.pipeline = {\n    vert: (c, { vert: v, colorImage: ci, link: l, to: { head: h } }) =>\n      h.glsl(h)+\n      ((ci)? '#define colorImage colorImage\\n\\n' : '')+\n      l.points.macros+\n      v,\n\n    frag: (c, { frag: f, link, to: { head: h }, useDiscard, lengthLinear }) =>\n      h.glsl(h)+link.points.macros+\n      ((useDiscard)? '#define useDiscard\\n\\n' : '')+\n      ((lengthLinear)? '#define lengthLinear\\n\\n' : '')+\n      f,\n\n    primitive: (c, { form: f, primitives: ps }) => ps[f],\n    attributes: { index: getDrawIndexes(max(...psCounts)) },\n\n    uniforms: {\n      ...psLinkP.state.uniforms,\n      form: (c, p) => p.form,\n      colorHi: (c, p) => p.colorHi,\n      colorLo: (c, p) => p.colorLo,\n\n      colorImage: (c, p) => p.colorImage,\n      colorBy: (c, p) => p.colorBy,\n      flip: (c, p) => p.flip,\n      offset: (c, p) => p.offset,\n      aspectImage: (c, p) => p.aspectImage,\n\n      wideHi: (c, { wideHi: wls, lengthLinear: l, widths: wfs, form: f, to }) =>\n        clamp(wls[+l]*min(...to.screen.size), ...wfs[f]),\n\n      wideLo: (c, { wideLo: wls, lengthLinear: l, widths: wfs, form: f, to }) =>\n        clamp(wls[+l]*min(...to.screen.size), ...wfs[f]),\n\n      widths: (c, { widths: wfs, form: f }) => wfs[f],\n\n      size: (c, p) => p.to.screen.size,\n      aspectScreen: (c, p) => p.to.screen.aspect,\n      dt: (c, p) => p.to.timer.dt,\n      bounds: (c, p) => p.to.grid.bounds,\n      rescaleMass: (c, p) => p.to.rescale.mass,\n      rescalePosition: (c, p) => p.to.rescale.position\n    },\n\n    lineWidth: (c, { wideHi: wls, lengthLinear: l, widths: wfs, to }) =>\n      clamp(wls[+l]*min(...to.screen.size), ...wfs[2]),\n\n    blend: {\n      enable: (c, p) => p.blend.enable,\n      func: {\n        srcRGB: (c, { blend: { func: { src: o, srcRGB: s } } }) => s ?? o,\n        srcAlpha: (c, { blend: { func: { src: o, srcAlpha: s } } }) => s ?? o,\n        dstRGB: (c, { blend: { func: { dst: o, dstRGB: s } } }) => s ?? o,\n        dstAlpha: (c, { blend: { func: { dst: o, dstAlpha: s } } }) => s ?? o\n      }\n    },\n\n    depth: { enable: (c, p) => p.depth.enable },\n    count: (_, { count: c, counts: cs, form: f }) => c ?? cs[f],\n    framebuffer: (c, p) => p.framebuffer\n  });\n\n  pointsToScreen.draw = (state = pointsToScreen) => {\n    const s = state.onDraw?.(state) ?? state;\n    const { on, pass } = s;\n\n    on && pass(s);\n\n    return s;\n  };\n\n  /** Which parts of a `pass` are used. */\n  to.uses = {\n    /** Whether a `pass` ticks the `timer`. */\n    tick: true,\n    /** Whether a `pass` clears the screen. */\n    clear: true,\n    /** Whether a `pass` updates the data. */\n    update: true,\n    /** Whether a `pass` draws to the screen. */\n    draw: true,\n    /** Whether a `pass` runs any post-processes or cleanup. */\n    post: true,\n    ...to.uses\n  };\n\n  /** How much a `pass` steps each `gpgpu` before the next links use them. */\n  to.linksBy ??= 1;\n  // to.linksBy ??= 0;\n  /** How many partial-time-step `pass`es to do per-`step` for accuracy. */\n  // to.passes ??= 1;\n  // to.passes ??= 4;\n  to.passes ??= 6;\n  // to.passes ??= 9;\n  to.passAt = 0;\n\n  to.tick = (state = to) => {\n    const s = state.onTick?.(state) ?? state;\n    const { uses, timer: t } = s;\n\n    if(!uses.tick) { return s; }\n\n    const { time, period: p } = timer(t);\n\n    t.loop = abs(((time+p)%(p*2))-p);\n\n    return s;\n  };\n\n  to.clear = (state = to) => {\n    const s = state.onClear?.(state) ?? state;\n    const { uses, screen } = s;\n\n    uses.clear && screen.clear(screen);\n\n    return s;\n  };\n\n  to.update = (state = to) => {\n    const s = state.onUpdate?.(state) ?? state;\n    const { uses, pointsToGrid, grid, gridToPoints, linksBy } = s;\n\n    if(!uses.update) { return s; }\n\n    const { step: gStep, gpgpu: gGPGPU, clear: gClear } = grid;\n    const { step: gpStep, gpgpu: gpGPGPU } = gridToPoints;\n\n    s.chaos = random();\n    /** Clear the grid output, as `pointsToGrid` can use additive blending. */\n    gClear(grid);\n    /** Update the data from points-to-grid. */\n    pointsToGrid.step(pointsToGrid);\n    /** Update the data from grid-to-grid. */\n    gStep(grid);\n    /** Advance `stepNow` for any next linked steps. */\n    linksBy && gGPGPU.stepBy(gGPGPU, linksBy);\n    /** Update the data from grid-to-points. */\n    gpStep(gridToPoints);\n    /** Advance `stepNow` for any next linked steps. */\n    linksBy && gpGPGPU.stepBy(gpGPGPU, linksBy);\n\n    return s;\n  };\n\n  to.draw = (state = to) => {\n    const s = state.onDraw?.(state) ?? state;\n    const { uses, gridToScreen, pointsToScreen } = s;\n\n    if(!uses.draw) { return s; }\n\n    gridToScreen.draw(gridToScreen);\n    pointsToScreen.draw(pointsToScreen);\n\n    return s;\n  };\n\n  to.post = (state = to) => {\n    const s = state.onPost?.(state) ?? state;\n    const { uses, grid, gridToPoints, linksBy } = s;\n\n    if(!uses.post) { return s; }\n\n    /** Reset `stepNow` for any next linked steps. */\n    if(linksBy) {\n      const gGPGPU = grid.gpgpu;\n      const gpGPGPU = gridToPoints.gpgpu;\n\n      gGPGPU.stepBy(gGPGPU, -linksBy);\n      gpGPGPU.stepBy(gpGPGPU, -linksBy);\n    }\n\n    return s;\n  };\n\n  to.pass = (state = to) => {\n    const s = state.onPass?.(state) ?? state;\n    const { tick, clear, update, draw, post } = s;\n\n    tick(s);\n    clear(s);\n    update(s);\n    draw(s);\n    post(s);\n\n    return s;\n  };\n\n  to.step = (state = to) => {\n    const s = state.onStep?.(state) ?? state;\n    const { passes, pass, timer, tick, clear, update, draw, post } = s;\n\n    if(passes === 1) { return pass(s); }\n\n    const { time: t0 } = timer;\n    const { time: t1, dt } = tick(s).timer;\n    const dtp = timer.dt = dt/passes;\n\n    // Data passes, no draw, sub-steps.\n    timer.time = t0;\n    clear(s);\n\n    for(s.passAt = 0; s.passAt < passes; ++s.passAt) {\n      timer.time += dtp;\n      update(s);\n    }\n\n    // Draw pass, no data, full-step.\n    timer.time = t1;\n    timer.dt = dt;\n    s.passAt = 0;\n    draw(s);\n    post(s);\n\n    return s;\n  };\n\n  to.frame = () => to.step();\n\n  return to;\n}\n\nexport default mpm;\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: '-', dt: '-', '⏳': '-',\n    pause: 0, '⏸': 0,\n    add: '+', '⏭': '+'\n};\n\nexport const stepDef = steps.diff;\nexport const startDef = 0;\nexport const nowDef = { [steps.diff]: Date.now, [steps.add]: 1e3/60 };\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways:\n * - Time-difference or time-advance stepping.\n * - Step forwards or backwards in time or pause it.\n * - Current time can be a number or function; or the object's fixed time-step.\n * - Override property, pass the result to new objects.\n *\n * @example\n *     // Initial call sets up properties.\n *     const diff0 = timer({ step: '-' }, 200);\n *     // => { step: '-', time: 200, dt: 200 };\n *     const add0 = timer({ step: 200 });\n *     // => { step: 200, time: 200, dt: 200 };\n *\n *     // Subsequent calls advance time and track difference.\n *\n *     // No time difference here.\n *     timer(diff0, 200); // => { step: '-', time: 200, dt: 0 };\n *     timer(add0, 0); // => { step: 200, time: 200, dt: 0 };\n *\n *     // Time-difference here with a change or step, into a new result target.\n *     const diff1 = timer(diff0, 300, {});\n *     // => { step: '-', time: 300, dt: 100 };\n *     const add1 = timer(add0, null, {});\n *     // => { step: 200, time: 400, dt: 200 };\n *\n *     diff1.time-diff0.time === diff1.dt; // => true;\n *     add1.time-add0.time === add1.dt; // => true;\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Difference since last `time`: `'diff'`/`'dt'`/`'-'`/`'⏳'`.\n *     - Pause: `'pause'`/`'⏸'`, or number zero (`0`).\n *     - Add `time` step: `'add'`/`'+'`/`'⏭'`, or non-zero number (step size).\n * @param {number|function} [now] The time now (clock/frame/step/etc), or a\n *     function giving it; if not given, uses `state.step` if numeric or\n *     `nowDef[state.step]` otherwise.\n * @param {object|false} [out=state] The state to set up; modifies `state` if\n *     not given.\n *\n * @returns {object|number} The given `out` set up with its initial `time`; or\n *     if `out` is falsey, returns the relevant calculated unknown value:\n *     - The difference since last `time` for `diff` step.\n *     - The updated `time` for `add` or `pause` step.\n */\nexport function timer(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef, now: n } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (steps[step] ?? step);\n    const diff = (s === steps.diff);\n    const t = (now ?? n ?? nowDef[s] ?? s);\n\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = ((!s)? t0 : ((diff)? 0 : t0)+((isNaN(t))? t() : t));\n    const dt = t1-t0;\n\n    // If only returning a value, return the relevant calculated unknown.\n    if(!out) { return ((diff)? dt : t1); }\n\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n\n    return out;\n}\n\nexport default timer;\n","const clamp = (x, min, max) => x < min ? min : x > max ? max : x;\nconst clamp0 = (x) => x > 0 ? x : 0;\nconst clamp01 = (x) => x < 0 ? 0 : x > 1 ? 1 : x;\nconst clamp11 = (x) => x < -1 ? -1 : x > 1 ? 1 : x;\nconst clamp05 = (x) => x < 0 ? 0 : x > 0.5 ? 0.5 : x;\nconst minMax = (x, y) => x < y ? [x, y] : [y, x];\nconst wrap = (x, min, max) => {\n  if (min === max) return min;\n  if (x > max) {\n    const d = max - min;\n    x -= d;\n    if (x > max) x -= d * ((x - min) / d | 0);\n  } else if (x < min) {\n    const d = max - min;\n    x += d;\n    if (x < min) x += d * ((min - x) / d + 1 | 0);\n  }\n  return x;\n};\nconst wrapOnce = (x, min, max) => x < min ? x - min + max : x > max ? x - max + min : x;\nconst wrap01 = (x) => x < 0 ? x + 1 : x > 1 ? x - 1 : x;\nconst wrap11 = (x) => x < -1 ? x + 2 : x > 1 ? x - 2 : x;\nconst min2id = (a, b) => a <= b ? 0 : 1;\nconst min3id = (a, b, c) => a <= b ? a <= c ? 0 : 2 : b <= c ? 1 : 2;\nconst min4id = (a, b, c, d) => a <= b ? a <= c ? a <= d ? 0 : 3 : c <= d ? 2 : 3 : b <= c ? b <= d ? 1 : 3 : c <= d ? 2 : 3;\nconst max2id = (a, b) => a >= b ? 0 : 1;\nconst max3id = (a, b, c) => a >= b ? a >= c ? 0 : 2 : b >= c ? 1 : 2;\nconst max4id = (a, b, c, d) => a >= b ? a >= c ? a >= d ? 0 : 3 : c >= d ? 2 : 3 : b >= c ? b >= d ? 1 : 3 : c >= d ? 2 : 3;\nconst minNonZero2 = (a, b) => a !== 0 ? b !== 0 ? Math.min(a, b) : a : b;\nconst minNonZero3 = (a, b, c) => minNonZero2(minNonZero2(a, b), c);\nconst smin = (a, b, k) => smax(a, b, -k);\nconst smax = (a, b, k) => {\n  const ea = Math.exp(a * k);\n  const eb = Math.exp(b * k);\n  return (a * ea + b * eb) / (ea + eb);\n};\nconst sclamp = (x, min, max, k) => smin(smax(x, min, k), max, k);\nconst absMin = (a, b) => Math.abs(a) < Math.abs(b) ? a : b;\nconst absMax = (a, b) => Math.abs(a) > Math.abs(b) ? a : b;\nconst foldback = (e, x) => x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;\nconst foldback01 = (x) => (x = Math.abs(x) % 2) > 1 ? 2 - x : x;\nconst inRange = (x, min, max) => x >= min && x <= max;\nconst inOpenRange = (x, min, max) => x > min && x < max;\nexport {\n  absMax,\n  absMin,\n  clamp,\n  clamp0,\n  clamp01,\n  clamp05,\n  clamp11,\n  foldback,\n  foldback01,\n  inOpenRange,\n  inRange,\n  max2id,\n  max3id,\n  max4id,\n  min2id,\n  min3id,\n  min4id,\n  minMax,\n  minNonZero2,\n  minNonZero3,\n  sclamp,\n  smax,\n  smin,\n  wrap,\n  wrap01,\n  wrap11,\n  wrapOnce\n};\n","import { defMathOpN } from \"./compile/emit.js\";\nconst [addN, addN2, addN3, addN4] = defMathOpN(\"+\");\nexport {\n  addN,\n  addN2,\n  addN3,\n  addN4\n};\n","import { DEG2RAD, HALF_PI, INV_HALF_PI, PI, RAD2DEG, TAU } from \"./api.js\";\nconst sincos = (theta, n = 1) => [\n  Math.sin(theta) * n,\n  Math.cos(theta) * n\n];\nconst cossin = (theta, n = 1) => [\n  Math.cos(theta) * n,\n  Math.sin(theta) * n\n];\nconst absTheta = (theta) => (theta %= TAU, theta < 0 ? TAU + theta : theta);\nconst absInnerAngle = (theta) => (theta = Math.abs(theta), theta > PI ? TAU - theta : theta);\nconst angleDist = (a, b) => absInnerAngle(absTheta(b % TAU - a % TAU));\nconst atan2Abs = (y, x) => absTheta(Math.atan2(y, x));\nconst quadrant = (theta) => absTheta(theta) * INV_HALF_PI | 0;\nconst deg = (theta) => theta * RAD2DEG;\nconst rad = (theta) => theta * DEG2RAD;\nconst csc = (theta) => 1 / Math.sin(theta);\nconst sec = (theta) => 1 / Math.cos(theta);\nconst cot = (theta) => 1 / Math.tan(theta);\nconst loc = (a, b, gamma) => Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));\nconst normCos = (x) => {\n  const x2 = x * x;\n  return 1 + x2 * (-4 + 2 * x2);\n};\nconst __fastCos = (x) => {\n  const x2 = x * x;\n  return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);\n};\nconst fastCos = (theta) => {\n  theta %= TAU;\n  theta < 0 && (theta = -theta);\n  switch (theta * INV_HALF_PI | 0) {\n    case 0:\n      return __fastCos(theta);\n    case 1:\n      return -__fastCos(PI - theta);\n    case 2:\n      return -__fastCos(theta - PI);\n    default:\n      return __fastCos(TAU - theta);\n  }\n};\nconst fastSin = (theta) => fastCos(HALF_PI - theta);\nconst fromDMS = (deg2, min, sec2) => deg2 + min / 60 + sec2 / 3600;\nconst toDMS = (theta) => {\n  const sign = Math.sign(theta);\n  theta = Math.abs(theta);\n  const deg2 = Math.trunc(theta);\n  theta = (theta - deg2) * 60;\n  const min = Math.trunc(theta);\n  return [deg2 * sign, min, (theta - min) * 60];\n};\nexport {\n  absInnerAngle,\n  absTheta,\n  angleDist,\n  atan2Abs,\n  cossin,\n  cot,\n  csc,\n  deg,\n  fastCos,\n  fastSin,\n  fromDMS,\n  loc,\n  normCos,\n  quadrant,\n  rad,\n  sec,\n  sincos,\n  toDMS\n};\n","const PI = Math.PI;\nconst TAU = PI * 2;\nconst HALF_PI = PI / 2;\nconst THIRD_PI = PI / 3;\nconst QUARTER_PI = PI / 4;\nconst SIXTH_PI = PI / 6;\nconst INV_PI = 1 / PI;\nconst INV_TAU = 1 / TAU;\nconst INV_HALF_PI = 1 / HALF_PI;\nconst DEG2RAD = PI / 180;\nconst RAD2DEG = 180 / PI;\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst SQRT2 = Math.SQRT2;\nconst SQRT3 = Math.sqrt(3);\nconst SQRT2_2 = SQRT2 / 2;\nconst SQRT3_2 = SQRT3 / 2;\nconst THIRD = 1 / 3;\nconst TWO_THIRD = 2 / 3;\nconst SIXTH = 1 / 6;\nlet EPS = 1e-6;\nexport {\n  DEG2RAD,\n  EPS,\n  HALF_PI,\n  INV_HALF_PI,\n  INV_PI,\n  INV_TAU,\n  PHI,\n  PI,\n  QUARTER_PI,\n  RAD2DEG,\n  SIXTH,\n  SIXTH_PI,\n  SQRT2,\n  SQRT2_2,\n  SQRT3,\n  SQRT3_2,\n  TAU,\n  THIRD,\n  THIRD_PI,\n  TWO_THIRD\n};\n","import { defColor } from \"../defcolor.js\";\nimport { hsvHsl } from \"../hsv/hsv-hsl.js\";\nimport { lchLab } from \"../lab/lab-lch.js\";\nimport { labRgb } from \"../lab/lab-rgb.js\";\nimport { rgbHsl } from \"../rgb/rgb-hsl.js\";\nimport { rgbSrgb } from \"../rgb/rgb-srgb.js\";\nimport { hslRgb } from \"./hsl-rgb.js\";\nconst hsl = defColor({\n  mode: \"hsl\",\n  channels: { h: { hue: true } },\n  order: [\"h\", \"s\", \"l\", \"alpha\"],\n  from: {\n    rgb: rgbHsl,\n    srgb: rgbHsl,\n    hsv: hsvHsl,\n    lch: [lchLab, labRgb, rgbSrgb, rgbHsl]\n  },\n  toRgb: hslRgb\n});\nexport {\n  hsl\n};\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { isArrayLike } from \"@thi.ng/checks/is-arraylike\";\nimport { isNumber } from \"@thi.ng/checks/is-number\";\nimport { isString } from \"@thi.ng/checks/is-string\";\nimport { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";\nimport { EPS } from \"@thi.ng/math/api\";\nimport { fract } from \"@thi.ng/math/prec\";\nimport { vector } from \"@thi.ng/strings/vector\";\nimport { mapStridedBuffer } from \"@thi.ng/vectors/buffer\";\nimport { clamp4 } from \"@thi.ng/vectors/clamp\";\nimport { declareIndices } from \"@thi.ng/vectors/compile/accessors\";\nimport { eqDelta4 } from \"@thi.ng/vectors/eqdelta\";\nimport { stridedValues } from \"@thi.ng/vectors/iterator\";\nimport { randMinMax } from \"@thi.ng/vectors/rand-minmax\";\nimport { set4 } from \"@thi.ng/vectors/set\";\nimport { convert, defConversions } from \"./convert.js\";\nimport { parseCss } from \"./css/parse-css.js\";\nimport { intArgb32Srgb } from \"./int/int-srgb.js\";\nimport { __ensureArgs } from \"./internal/ensure.js\";\nconst defColor = (spec) => {\n  const channels = spec.channels || {};\n  const order = spec.order;\n  const numChannels = order.length;\n  order.reduce((acc, id) => {\n    acc[id] = {\n      range: [0, 1],\n      ...channels[id]\n    };\n    return acc;\n  }, channels);\n  const min = Object.freeze(order.map((id) => channels[id].range[0]));\n  const max = Object.freeze(order.map((id) => channels[id].range[1]));\n  const minR = set4([], min);\n  const maxR = set4([], max);\n  minR[numChannels - 1] = 1;\n  const hueChanID = order.findIndex((id) => !!channels[id].hue);\n  const $Color = class {\n    constructor(buf, offset = 0, stride = 1) {\n      this.offset = offset;\n      this.stride = stride;\n      this.buf = buf || [0, 0, 0, 0];\n      this.offset = offset;\n      this.stride = stride;\n    }\n    buf;\n    get mode() {\n      return spec.mode;\n    }\n    get length() {\n      return numChannels;\n    }\n    get range() {\n      return [min, max];\n    }\n    get [Symbol.toStringTag]() {\n      return spec.mode;\n    }\n    get xyz() {\n      return [this[0], this[1], this[2]];\n    }\n    [Symbol.iterator]() {\n      return stridedValues(\n        this.buf,\n        this.length,\n        this.offset,\n        this.stride\n      );\n    }\n    copy() {\n      return new $Color(this.deref());\n    }\n    copyView() {\n      return new $Color(this.buf, this.offset, this.stride);\n    }\n    empty() {\n      return new $Color();\n    }\n    deref() {\n      return [this[0], this[1], this[2], this[3]];\n    }\n    set(src) {\n      return set4(this, src);\n    }\n    clamp() {\n      hueChanID >= 0 && (this[hueChanID] = fract(this[hueChanID]));\n      clamp4(null, this, min, max);\n      return this;\n    }\n    eqDelta(o, eps = EPS) {\n      return eqDelta4(this, o, eps);\n    }\n    randomize(rnd) {\n      return randMinMax(this, minR, maxR, rnd);\n    }\n    toJSON() {\n      return this.deref();\n    }\n    toString() {\n      return vector(4, 4)(this);\n    }\n  };\n  declareIndices($Color.prototype, order);\n  defConversions(spec.mode, spec.from);\n  defConversions(\"rgb\", { [spec.mode]: spec.toRgb });\n  const fromColor = (src, mode, args) => {\n    const res = new $Color(...args);\n    return mode !== spec.mode ? convert(res, src, spec.mode, mode) : res.set(src);\n  };\n  const factory = (src, ...args) => src == null ? new $Color() : isString(src) ? factory(parseCss(src), ...args) : isArrayLike(src) ? isString(src.mode) ? fromColor(src, src.mode, args) : new $Color(src, ...args) : implementsFunction(src, \"deref\") ? fromColor(src.deref(), src.mode, args) : isNumber(src) ? args.length && args.every(isNumber) ? new $Color(...__ensureArgs([src, ...args])) : fromColor(intArgb32Srgb([], src), \"srgb\", args) : illegalArgs(`can't create a ${spec.mode} color from: ${src}`);\n  factory.class = $Color;\n  factory.range = [min, max];\n  factory.random = (rnd, buf, idx, stride) => new $Color(buf, idx, stride).randomize(rnd);\n  factory.mapBuffer = (buf, num = buf.length / numChannels | 0, start = 0, cstride = 1, estride = numChannels) => mapStridedBuffer($Color, buf, num, start, cstride, estride);\n  return factory;\n};\nexport {\n  defColor\n};\n","const implementsFunction = (x, fn) => x != null && typeof x[fn] === \"function\";\nexport {\n  implementsFunction\n};\n","const isArrayLike = (x) => x != null && typeof x !== \"function\" && x.length !== void 0;\nexport {\n  isArrayLike\n};\n","const isNumber = (x) => typeof x === \"number\";\nexport {\n  isNumber\n};\n","const isString = (x) => typeof x === \"string\";\nexport {\n  isString\n};\n","import { defError } from \"./deferror.js\";\nconst IllegalArgumentError = defError(() => \"illegal argument(s)\");\nconst illegalArgs = (msg) => {\n  throw new IllegalArgumentError(msg);\n};\nexport {\n  IllegalArgumentError,\n  illegalArgs\n};\n","const defError = (prefix, suffix = (msg) => msg !== void 0 ? \": \" + msg : \"\") => class extends Error {\n  origMessage;\n  constructor(msg) {\n    super(prefix(msg) + suffix(msg));\n    this.origMessage = msg !== void 0 ? String(msg) : \"\";\n  }\n};\nexport {\n  defError\n};\n","const PI = Math.PI;\nconst TAU = PI * 2;\nconst HALF_PI = PI / 2;\nconst THIRD_PI = PI / 3;\nconst QUARTER_PI = PI / 4;\nconst SIXTH_PI = PI / 6;\nconst INV_PI = 1 / PI;\nconst INV_TAU = 1 / TAU;\nconst INV_HALF_PI = 1 / HALF_PI;\nconst DEG2RAD = PI / 180;\nconst RAD2DEG = 180 / PI;\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst SQRT2 = Math.SQRT2;\nconst SQRT3 = Math.sqrt(3);\nconst SQRT2_2 = SQRT2 / 2;\nconst SQRT3_2 = SQRT3 / 2;\nconst THIRD = 1 / 3;\nconst TWO_THIRD = 2 / 3;\nconst SIXTH = 1 / 6;\nlet EPS = 1e-6;\nexport {\n  DEG2RAD,\n  EPS,\n  HALF_PI,\n  INV_HALF_PI,\n  INV_PI,\n  INV_TAU,\n  PHI,\n  PI,\n  QUARTER_PI,\n  RAD2DEG,\n  SIXTH,\n  SIXTH_PI,\n  SQRT2,\n  SQRT2_2,\n  SQRT3,\n  SQRT3_2,\n  TAU,\n  THIRD,\n  THIRD_PI,\n  TWO_THIRD\n};\n","import { EPS } from \"./api.js\";\nconst mod = (a, b) => a - b * Math.floor(a / b);\nconst fract = (x) => x - Math.floor(x);\nconst trunc = (x) => x < 0 ? Math.ceil(x) : Math.floor(x);\nconst roundTo = (x, prec = 1) => Math.round(x / prec) * prec;\nconst floorTo = (x, prec = 1) => Math.floor(x / prec) * prec;\nconst ceilTo = (x, prec = 1) => Math.ceil(x / prec) * prec;\nconst roundEps = (x, eps = EPS) => {\n  const f = fract(x);\n  return f <= eps || f >= 1 - eps ? Math.round(x) : x;\n};\nexport {\n  ceilTo,\n  floorTo,\n  fract,\n  mod,\n  roundEps,\n  roundTo,\n  trunc\n};\n","import { memoizeJ } from \"@thi.ng/memoize/memoizej\";\nimport { float } from \"./float.js\";\nconst vector = memoizeJ(\n  (size, prec = 3, d = \",\", pre = \"[\", post = \"]\") => {\n    const f = typeof prec === \"number\" ? float(prec) : prec;\n    switch (size) {\n      case 1:\n        return (v) => `${pre}${f(v[0])}${post}`;\n      case 2:\n        return (v) => `${pre}${f(v[0])}${d}${f(v[1])}${post}`;\n      case 3:\n        return (v) => `${pre}${f(v[0])}${d}${f(v[1])}${d}${f(v[2])}${post}`;\n      case 4:\n        return (v) => `${pre}${f(v[0])}${d}${f(v[1])}${d}${f(v[2])}${d}${f(\n          v[3]\n        )}${post}`;\n      default:\n        return (v) => {\n          const res = [];\n          for (let i = 0; i < v.length; i++) {\n            res.push(f(v[i]));\n          }\n          return `${pre}${res.join(d)}${post}`;\n        };\n    }\n  }\n);\nexport {\n  vector\n};\n","function memoizeJ(fn, cache = /* @__PURE__ */ Object.create(null)) {\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (key !== void 0) {\n      return key in cache ? cache[key] : cache[key] = fn.apply(null, args);\n    }\n    return fn.apply(null, args);\n  };\n}\nexport {\n  memoizeJ\n};\n","import { memoizeJ } from \"@thi.ng/memoize/memoizej\";\nimport { padLeft } from \"./pad-left.js\";\nconst float = memoizeJ(\n  (prec, special = false) => special ? (x) => __nanOrInf(x) || x.toFixed(prec) : (x) => x.toFixed(prec)\n);\nconst floatFixedWidth = memoizeJ((width, prec = 3) => {\n  const l = width - prec - 1;\n  const pl = Math.pow(10, l);\n  const pln = -Math.pow(10, l - 1);\n  const pr = Math.pow(10, -(prec - 1));\n  const pad = padLeft(width);\n  return (x) => {\n    const ax = Math.abs(x);\n    return pad(\n      __nanOrInf(x) || (x === 0 ? \"0\" : ax < pr || ax >= pl ? __exp(x, width) : x.toFixed(prec - (x < pln ? 1 : 0)))\n    );\n  };\n});\nconst __exp = (x, w) => x.toExponential(\n  Math.max(\n    w - 4 - (Math.log(Math.abs(x)) / Math.LN10 >= 10 ? 2 : 1) - (x < 0 ? 1 : 0),\n    0\n  )\n);\nconst __nanOrInf = (x) => isNaN(x) ? \"NaN\" : x === Infinity ? \"+\\u221E\" : x === -Infinity ? \"-\\u221E\" : void 0;\nexport {\n  float,\n  floatFixedWidth\n};\n","import { memoizeJ } from \"@thi.ng/memoize/memoizej\";\nimport { repeat } from \"./repeat.js\";\nconst padLeft = memoizeJ((n, ch = \" \") => {\n  const buf = repeat(String(ch), n);\n  return (x, len) => {\n    if (x == null) return buf;\n    x = x.toString();\n    len = len !== void 0 ? len : x.length;\n    return len < n ? buf.substring(len) + x : x;\n  };\n});\nconst Z2 = padLeft(2, \"0\");\nconst Z3 = padLeft(3, \"0\");\nconst Z4 = padLeft(4, \"0\");\nexport {\n  Z2,\n  Z3,\n  Z4,\n  padLeft\n};\n","import { memoizeJ } from \"@thi.ng/memoize/memoizej\";\nconst repeat = memoizeJ(\n  (ch, n) => ch.repeat(n)\n);\nexport {\n  repeat\n};\n","import { SIZEOF, typedArray } from \"@thi.ng/api/typedarray\";\nconst mapBuffer = (type, buf, num, size, byteOffset = 0, byteStride = size * SIZEOF[type]) => {\n  const res = [];\n  for (; num-- > 0; byteOffset += byteStride) {\n    res.push(typedArray(type, buf, byteOffset, size));\n  }\n  return res;\n};\nconst intoBuffer = (type, buf, src, byteOffset, byteStride) => {\n  const view = typedArray(type, buf);\n  const size = SIZEOF[type];\n  byteOffset /= size;\n  byteStride /= size;\n  for (let x of src) {\n    view.set(x, byteOffset);\n    byteOffset += byteStride;\n  }\n};\nconst mapStridedBuffer = (ctor, buf, num, start, cstride, estride) => {\n  const res = [];\n  while (num-- > 0) {\n    res.push(new ctor(buf, start, cstride));\n    start += estride;\n  }\n  return res;\n};\nconst intoStridedBuffer = (set, buf, src, start, cstride, estride) => {\n  for (let v of src) {\n    set(buf, v, start, 0, cstride, 1);\n    start += estride;\n  }\n  return buf;\n};\nexport {\n  intoBuffer,\n  intoStridedBuffer,\n  mapBuffer,\n  mapStridedBuffer\n};\n","var GLType = /* @__PURE__ */ ((GLType2) => {\n  GLType2[GLType2[\"I8\"] = 5120] = \"I8\";\n  GLType2[GLType2[\"U8\"] = 5121] = \"U8\";\n  GLType2[GLType2[\"I16\"] = 5122] = \"I16\";\n  GLType2[GLType2[\"U16\"] = 5123] = \"U16\";\n  GLType2[GLType2[\"I32\"] = 5124] = \"I32\";\n  GLType2[GLType2[\"U32\"] = 5125] = \"U32\";\n  GLType2[GLType2[\"F32\"] = 5126] = \"F32\";\n  return GLType2;\n})(GLType || {});\nconst GL2TYPE = {\n  [5120 /* I8 */]: \"i8\",\n  [5121 /* U8 */]: \"u8\",\n  [5122 /* I16 */]: \"i16\",\n  [5123 /* U16 */]: \"u16\",\n  [5124 /* I32 */]: \"i32\",\n  [5125 /* U32 */]: \"u32\",\n  [5126 /* F32 */]: \"f32\"\n};\nconst TYPE2GL = {\n  i8: 5120 /* I8 */,\n  u8: 5121 /* U8 */,\n  u8c: 5121 /* U8 */,\n  i16: 5122 /* I16 */,\n  u16: 5123 /* U16 */,\n  i32: 5124 /* I32 */,\n  u32: 5125 /* U32 */,\n  f32: 5126 /* F32 */,\n  f64: void 0\n};\nconst SIZEOF = {\n  u8: 1,\n  u8c: 1,\n  i8: 1,\n  u16: 2,\n  i16: 2,\n  u32: 4,\n  i32: 4,\n  i64: 8,\n  u64: 8,\n  f32: 4,\n  f64: 8\n};\nconst BIT_SHIFTS = {\n  i8: 0,\n  u8: 0,\n  u8c: 0,\n  i16: 1,\n  u16: 1,\n  i32: 2,\n  u32: 2,\n  i64: 3,\n  u64: 3,\n  f32: 2,\n  f64: 3\n};\nconst FLOAT_ARRAY_CTORS = {\n  f32: Float32Array,\n  f64: Float64Array\n};\nconst INT_ARRAY_CTORS = {\n  i8: Int8Array,\n  i16: Int16Array,\n  i32: Int32Array\n};\nconst UINT_ARRAY_CTORS = {\n  u8: Uint8Array,\n  u8c: Uint8ClampedArray,\n  u16: Uint16Array,\n  u32: Uint32Array\n};\nconst BIGINT_ARRAY_CTORS = {\n  i64: BigInt64Array,\n  u64: BigUint64Array\n};\nconst TYPEDARRAY_CTORS = {\n  ...FLOAT_ARRAY_CTORS,\n  ...INT_ARRAY_CTORS,\n  ...UINT_ARRAY_CTORS\n};\nconst asNativeType = (type) => {\n  const t = GL2TYPE[type];\n  return t !== void 0 ? t : type;\n};\nconst asGLType = (type) => {\n  const t = TYPE2GL[type];\n  return t !== void 0 ? t : type;\n};\nconst asInt = (...args) => args.map((x) => x | 0);\nconst sizeOf = (type) => SIZEOF[type] || SIZEOF[asNativeType(type)];\nfunction typedArray(type, ...args) {\n  const ctor = BIGINT_ARRAY_CTORS[type];\n  return new (ctor || TYPEDARRAY_CTORS[asNativeType(type)])(...args);\n}\nfunction typedArrayOfVec(type, data, stride) {\n  const $data = Array.isArray(data) ? data : [...data];\n  if (stride === void 0) stride = $data[0].length;\n  const num = $data.length;\n  const res = typedArray(type, num * stride);\n  for (let i = 0, j = 0; i < num; i++, j += stride) {\n    res.set($data[i], j);\n  }\n  return res;\n}\nconst typedArrayType = (x) => {\n  if (Array.isArray(x)) return \"f64\";\n  for (let id in TYPEDARRAY_CTORS) {\n    if (x instanceof TYPEDARRAY_CTORS[id]) return id;\n  }\n  return \"f64\";\n};\nconst uintTypeForSize = (x) => x <= 256 ? \"u8\" : x <= 65536 ? \"u16\" : \"u32\";\nconst intTypeForSize = (x) => x >= -128 && x < 128 ? \"i8\" : x >= -32768 && x < 32768 ? \"i16\" : \"i32\";\nconst uintTypeForBits = (x) => x > 16 ? \"u32\" : x > 8 ? \"u16\" : \"u8\";\nconst intTypeForBits = (x) => x > 16 ? \"i32\" : x > 8 ? \"i16\" : \"i8\";\nconst narrowInt = (t) => t === \"i64\" ? \"i32\" : t === \"i32\" ? \"i16\" : t === \"i16\" ? \"i8\" : \"i8\";\nconst widenInt = (t) => t === \"i8\" ? \"i16\" : t === \"i16\" ? \"i32\" : t === \"i32\" ? \"i64\" : \"i64\";\nconst narrowUint = (t) => t === \"u64\" ? \"u32\" : t === \"u32\" ? \"u16\" : t === \"u16\" ? \"u8\" : \"u8\";\nconst widenUint = (t) => t === \"u8\" || t === \"u8c\" ? \"u16\" : t === \"u16\" ? \"u32\" : t === \"u32\" ? \"u64\" : \"u64\";\nconst narrowFloat = (t) => t === \"f64\" ? \"f32\" : \"f32\";\nconst widenFloat = (t) => t === \"f32\" ? \"f64\" : \"f64\";\nconst narrowType = (t) => t[0] === \"i\" ? narrowInt(t) : t[0] === \"u\" ? narrowUint(t) : narrowFloat(t);\nconst widenType = (t) => t[0] === \"i\" ? widenInt(t) : t[0] === \"u\" ? widenUint(t) : widenFloat(t);\nexport {\n  BIGINT_ARRAY_CTORS,\n  BIT_SHIFTS,\n  FLOAT_ARRAY_CTORS,\n  GL2TYPE,\n  GLType,\n  INT_ARRAY_CTORS,\n  SIZEOF,\n  TYPE2GL,\n  TYPEDARRAY_CTORS,\n  UINT_ARRAY_CTORS,\n  asGLType,\n  asInt,\n  asNativeType,\n  intTypeForBits,\n  intTypeForSize,\n  narrowFloat,\n  narrowInt,\n  narrowType,\n  narrowUint,\n  sizeOf,\n  typedArray,\n  typedArrayOfVec,\n  typedArrayType,\n  uintTypeForBits,\n  uintTypeForSize,\n  widenFloat,\n  widenInt,\n  widenType,\n  widenUint\n};\n","import {\n  clamp as _clamp,\n  clamp01 as _clamp01,\n  clamp11 as _clamp11\n} from \"@thi.ng/math/interval\";\nimport { defHofOp } from \"./compile/emit.js\";\nimport { ARGS_V, ARGS_VVV, FN, FN3 } from \"./compile/templates.js\";\nconst [clamp, clamp2, clamp3, clamp4] = defHofOp(_clamp, FN3(), ARGS_VVV);\nconst [clamp01, clamp01_2, clamp01_3, clamp01_4] = defHofOp(_clamp01, FN(), ARGS_V);\nconst [clamp11, clamp11_2, clamp11_3, clamp11_4] = defHofOp(_clamp11, FN(), ARGS_V);\nexport {\n  clamp,\n  clamp01,\n  clamp01_2,\n  clamp01_3,\n  clamp01_4,\n  clamp11,\n  clamp11_2,\n  clamp11_3,\n  clamp11_4,\n  clamp2,\n  clamp3,\n  clamp4\n};\n","const clamp = (x, min, max) => x < min ? min : x > max ? max : x;\nconst clamp0 = (x) => x > 0 ? x : 0;\nconst clamp01 = (x) => x < 0 ? 0 : x > 1 ? 1 : x;\nconst clamp11 = (x) => x < -1 ? -1 : x > 1 ? 1 : x;\nconst clamp05 = (x) => x < 0 ? 0 : x > 0.5 ? 0.5 : x;\nconst minMax = (x, y) => x < y ? [x, y] : [y, x];\nconst wrap = (x, min, max) => {\n  if (min === max) return min;\n  if (x > max) {\n    const d = max - min;\n    x -= d;\n    if (x > max) x -= d * ((x - min) / d | 0);\n  } else if (x < min) {\n    const d = max - min;\n    x += d;\n    if (x < min) x += d * ((min - x) / d + 1 | 0);\n  }\n  return x;\n};\nconst wrapOnce = (x, min, max) => x < min ? x - min + max : x > max ? x - max + min : x;\nconst wrap01 = (x) => x < 0 ? x + 1 : x > 1 ? x - 1 : x;\nconst wrap11 = (x) => x < -1 ? x + 2 : x > 1 ? x - 2 : x;\nconst min2id = (a, b) => a <= b ? 0 : 1;\nconst min3id = (a, b, c) => a <= b ? a <= c ? 0 : 2 : b <= c ? 1 : 2;\nconst min4id = (a, b, c, d) => a <= b ? a <= c ? a <= d ? 0 : 3 : c <= d ? 2 : 3 : b <= c ? b <= d ? 1 : 3 : c <= d ? 2 : 3;\nconst max2id = (a, b) => a >= b ? 0 : 1;\nconst max3id = (a, b, c) => a >= b ? a >= c ? 0 : 2 : b >= c ? 1 : 2;\nconst max4id = (a, b, c, d) => a >= b ? a >= c ? a >= d ? 0 : 3 : c >= d ? 2 : 3 : b >= c ? b >= d ? 1 : 3 : c >= d ? 2 : 3;\nconst minNonZero2 = (a, b) => a !== 0 ? b !== 0 ? Math.min(a, b) : a : b;\nconst minNonZero3 = (a, b, c) => minNonZero2(minNonZero2(a, b), c);\nconst smin = (a, b, k) => smax(a, b, -k);\nconst smax = (a, b, k) => {\n  const ea = Math.exp(a * k);\n  const eb = Math.exp(b * k);\n  return (a * ea + b * eb) / (ea + eb);\n};\nconst sclamp = (x, min, max, k) => smin(smax(x, min, k), max, k);\nconst absMin = (a, b) => Math.abs(a) < Math.abs(b) ? a : b;\nconst absMax = (a, b) => Math.abs(a) > Math.abs(b) ? a : b;\nconst foldback = (e, x) => x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;\nconst foldback01 = (x) => (x = Math.abs(x) % 2) > 1 ? 2 - x : x;\nconst inRange = (x, min, max) => x >= min && x <= max;\nconst inOpenRange = (x, min, max) => x > min && x < max;\nexport {\n  absMax,\n  absMin,\n  clamp,\n  clamp0,\n  clamp01,\n  clamp05,\n  clamp11,\n  foldback,\n  foldback01,\n  inOpenRange,\n  inRange,\n  max2id,\n  max3id,\n  max4id,\n  min2id,\n  min3id,\n  min4id,\n  minMax,\n  minNonZero2,\n  minNonZero3,\n  sclamp,\n  smax,\n  smin,\n  wrap,\n  wrap01,\n  wrap11,\n  wrapOnce\n};\n","import { comp } from \"@thi.ng/transducers/comp\";\nimport { map } from \"@thi.ng/transducers/map\";\nimport { mapIndexed } from \"@thi.ng/transducers/map-indexed\";\nimport { range } from \"@thi.ng/transducers/range\";\nimport { str } from \"@thi.ng/transducers/str\";\nimport { take } from \"@thi.ng/transducers/take\";\nimport { transduce } from \"@thi.ng/transducers/transduce\";\nimport { zip } from \"@thi.ng/transducers/zip\";\nimport { vop } from \"../vop.js\";\nimport {\n  ARGS_V,\n  ARGS_VN,\n  ARGS_VV,\n  DEFAULT_OUT,\n  FN,\n  MATH,\n  MATH_N,\n  SARGS_VV,\n  SIGNED,\n  SIGNED_N,\n  UNSIGNED,\n  UNSIGNED_N\n} from \"./templates.js\";\nconst __lookup = (sym) => (i) => i > 1 ? `${sym}[i${sym}+${i}*s${sym}]` : i == 1 ? `${sym}[i${sym}+s${sym}]` : `${sym}[i${sym}]`;\nconst __indicesStrided = (sym) => map(__lookup(sym), range());\nconst __indices = (sym) => map((i) => `${sym}[${i}]`, range());\nconst __assemble = (dim, tpl, syms, ret = \"a\", opJoin = \"\", pre = \"\", post = \"\", strided = false) => [\n  pre,\n  transduce(\n    comp(\n      take(dim),\n      mapIndexed((i, x) => tpl(x, i))\n    ),\n    str(opJoin),\n    zip.apply(\n      null,\n      syms.split(\",\").map(strided ? __indicesStrided : __indices)\n    )\n  ),\n  post,\n  ret !== \"\" ? `return ${ret};` : \"\"\n];\nconst __assembleG = (tpl, syms, ret = \"a\", pre, post, strided = false) => [\n  pre,\n  \"for(let i=a.length;--i>=0;) {\",\n  tpl(\n    syms.split(\",\").map(strided ? (x) => `${x}[i${x}+i*s${x}]` : (x) => `${x}[i]`)\n  ),\n  \"}\",\n  post,\n  ret !== null ? `return ${ret};` : \"\"\n];\nconst __assembleS = (tpl, syms = ARGS_VV, ret = \"o\", pre = DEFAULT_OUT, post) => [\n  pre,\n  \"while(k-->0) {\",\n  tpl(syms.split(\",\").map((x) => `${x}[i${x}+k*s${x}]`)),\n  \"}\",\n  post,\n  ret !== null ? `return ${ret};` : \"\"\n];\nconst __defaultOut = (o, args) => `!${o} && (${o}=${args.split(\",\")[1]});`;\nconst compile = (dim, tpl, args, syms = args, ret = \"a\", opJoin, pre, post, strided = false) => new Function(\n  args,\n  __assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")\n);\nconst compileHOF = (dim, fns, tpl, hofArgs, args, syms = args, ret = \"a\", opJoin = \"\", pre, post, strided = false) => {\n  return new Function(\n    hofArgs,\n    `return (${args})=>{${__assemble(\n      dim,\n      tpl,\n      syms,\n      ret,\n      opJoin,\n      pre,\n      post,\n      strided\n    ).join(\"\")}}`\n  )(...fns);\n};\nconst compileG = (tpl, args, syms = args, ret = \"a\", pre, post, strided = false) => new Function(\n  args,\n  __assembleG(tpl, syms, ret, pre, post, strided).join(\"\")\n);\nconst compileS = (tpl, args, syms = args, ret, pre, post) => new Function(args, __assembleS(tpl, syms, ret, pre, post).join(\"\"));\nconst compileGHOF = (fns, tpl, hofArgs, args, syms = args, ret = \"a\", pre, post, strided = false) => new Function(\n  hofArgs,\n  `return (${args})=>{${__assembleG(\n    tpl,\n    syms,\n    ret,\n    pre,\n    post,\n    strided\n  ).join(\"\")}}`\n)(...fns);\nconst defOp = (tpl, args = ARGS_VV, syms, ret = \"o\", dispatch = 1, pre) => {\n  syms = syms || args;\n  pre = pre != null ? pre : __defaultOut(ret, syms);\n  const fn = vop(dispatch);\n  const $ = (dim) => fn.add(dim, compile(dim, tpl, args, syms, ret, \"\", pre));\n  fn.default(compileG(tpl, args, syms, ret, pre));\n  return [fn, $(2), $(3), $(4)];\n};\nconst defFnOp = (op) => defOp(FN(op), ARGS_V);\nconst defHofOp = (op, tpl, args = ARGS_V, syms, ret = \"o\", dispatch = 1, pre) => {\n  const _tpl = tpl || FN(\"op\");\n  syms = syms || args;\n  pre = pre != null ? pre : __defaultOut(ret, syms);\n  const fn = vop(dispatch);\n  const $ = (dim) => fn.add(\n    dim,\n    compileHOF(dim, [op], _tpl, \"op\", args, syms, ret, \"\", pre)\n  );\n  fn.default(compileGHOF([op], _tpl, \"op\", args, syms, ret, pre));\n  return [fn, $(2), $(3), $(4)];\n};\nconst defOpS = (tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n  compileS(tpl, `${args},k,${idxArgs}`, syms, ret, pre),\n  ...sizes.map(\n    (dim) => compile(\n      dim,\n      tpl,\n      `${args},${idxArgs}`,\n      syms,\n      ret,\n      \"\",\n      pre != null ? pre : __defaultOut(ret, syms),\n      \"\",\n      true\n    )\n  )\n];\nconst defHofOpS = (op, tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n  new Function(\n    \"op\",\n    `return (${args},k,${idxArgs})=>{${__assembleS(\n      tpl,\n      syms,\n      ret,\n      pre\n    ).join(\"\")}}`\n  )(op),\n  ...sizes.map(\n    (dim) => compileHOF(\n      dim,\n      [op],\n      tpl,\n      \"op\",\n      `${args},${idxArgs}`,\n      syms,\n      ret,\n      \"\",\n      pre != null ? pre : __defaultOut(ret, syms),\n      \"\",\n      true\n    )\n  )\n];\nconst defMathOp = (op) => defOp(MATH(op));\nconst defMathOpN = (op) => defOp(MATH_N(op), ARGS_VN);\nconst defBitOp = (op, signed = false) => defOp((signed ? SIGNED : UNSIGNED)(op));\nconst defBitOpN = (op, signed = false) => defOp((signed ? SIGNED_N : UNSIGNED_N)(op), ARGS_VN);\nexport {\n  __defaultOut,\n  compile,\n  compileG,\n  compileGHOF,\n  compileHOF,\n  compileS,\n  defBitOp,\n  defBitOpN,\n  defFnOp,\n  defHofOp,\n  defHofOpS,\n  defMathOp,\n  defMathOpN,\n  defOp,\n  defOpS\n};\n","import { comp as _comp } from \"@thi.ng/compose/comp\";\nimport { ensureTransducer } from \"./ensure.js\";\nfunction comp(...fns) {\n  fns = fns.map(ensureTransducer);\n  return _comp.apply(null, fns);\n}\nexport {\n  comp\n};\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nfunction comp(...fns) {\n  let [a, b, c, d, e, f, g, h, i, j] = fns;\n  switch (fns.length) {\n    case 0:\n      illegalArity(0);\n    case 1:\n      return a;\n    case 2:\n      return (...args) => a(b(...args));\n    case 3:\n      return (...args) => a(b(c(...args)));\n    case 4:\n      return (...args) => a(b(c(d(...args))));\n    case 5:\n      return (...args) => a(b(c(d(e(...args)))));\n    case 6:\n      return (...args) => a(b(c(d(e(f(...args))))));\n    case 7:\n      return (...args) => a(b(c(d(e(f(g(...args)))))));\n    case 8:\n      return (...args) => a(b(c(d(e(f(g(h(...args))))))));\n    case 9:\n      return (...args) => a(b(c(d(e(f(g(h(i(...args)))))))));\n    case 10:\n    default:\n      const fn = (...args) => a(b(c(d(e(f(g(h(i(j(...args))))))))));\n      return fns.length === 10 ? fn : comp(fn, ...fns.slice(10));\n  }\n}\nfunction compLeft(...fns) {\n  return comp.apply(null, fns.reverse());\n}\nconst compL = compLeft;\nfunction compAsync(...fns) {\n  return async (...args) => {\n    let n = fns.length - 1;\n    let res = fns[n](...args);\n    while (n-- > 0) {\n      res = await fns[n](res);\n    }\n    return res;\n  };\n}\nexport {\n  comp,\n  compAsync,\n  compL,\n  compLeft\n};\n","import { defError } from \"./deferror.js\";\nconst IllegalArityError = defError(() => \"illegal arity\");\nconst illegalArity = (n) => {\n  throw new IllegalArityError(n);\n};\nexport {\n  IllegalArityError,\n  illegalArity\n};\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nconst ensureTransducer = (x) => implementsFunction(x, \"xform\") ? x.xform() : x;\nexport {\n  ensureTransducer\n};\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator1 } from \"./iterator.js\";\nfunction map(fn, src) {\n  return isIterable(src) ? iterator1(map(fn), src) : (rfn) => {\n    const r = rfn[2];\n    return compR(rfn, (acc, x) => r(acc, fn(x)));\n  };\n}\nconst mapA = (fn, src) => [\n  ...map(fn, src)\n];\nexport {\n  map,\n  mapA\n};\n","const isIterable = (x) => x != null && typeof x[Symbol.iterator] === \"function\";\nexport {\n  isIterable\n};\n","const compR = (rfn, fn) => [rfn[0], rfn[1], fn];\nexport {\n  compR\n};\n","import { NO_OP, SEMAPHORE } from \"@thi.ng/api/api\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { push } from \"./push.js\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nfunction* iterator(xform, src) {\n  const rfn = ensureTransducer(xform)(push());\n  const complete = rfn[1];\n  const reduce = rfn[2];\n  for (let x of src) {\n    const y = reduce([], x);\n    if (isReduced(y)) {\n      yield* unreduced(complete(y.deref()));\n      return;\n    }\n    if (y.length) {\n      yield* y;\n    }\n  }\n  yield* unreduced(complete([]));\n}\nfunction* iterator1(xform, src) {\n  const reduce = ensureTransducer(xform)([NO_OP, NO_OP, (_, x) => x])[2];\n  for (let x of src) {\n    let y = reduce(SEMAPHORE, x);\n    if (isReduced(y)) {\n      y = unreduced(y.deref());\n      if (y !== SEMAPHORE) {\n        yield y;\n      }\n      return;\n    }\n    if (y !== SEMAPHORE) {\n      yield y;\n    }\n  }\n}\nconst __iter = (xform, args, impl = iterator1) => {\n  const n = args.length - 1;\n  return isIterable(args[n]) ? args.length > 1 ? impl(xform.apply(null, args.slice(0, n)), args[n]) : impl(xform(), args[0]) : void 0;\n};\nexport {\n  __iter,\n  iterator,\n  iterator1\n};\n","const DEFAULT_EPS = 1e-6;\nconst SEMAPHORE = Symbol();\nconst NO_OP = () => {\n};\nconst EVENT_ALL = \"*\";\nconst EVENT_ENABLE = \"enable\";\nconst EVENT_DISABLE = \"disable\";\nexport {\n  DEFAULT_EPS,\n  EVENT_ALL,\n  EVENT_DISABLE,\n  EVENT_ENABLE,\n  NO_OP,\n  SEMAPHORE\n};\n","import { reducer } from \"./reduce.js\";\nfunction push(src) {\n  return src ? [...src] : reducer(\n    () => [],\n    (acc, x) => (acc.push(x), acc)\n  );\n}\nexport {\n  push\n};\n","import { identity } from \"@thi.ng/api/fn\";\nimport { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { isArrayLike } from \"@thi.ng/checks/is-arraylike\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nconst __parseArgs = (args) => args.length === 2 ? [void 0, args[1]] : args.length === 3 ? [args[1], args[2]] : illegalArity(args.length);\nfunction reduce(...args) {\n  const rfn = args[0];\n  const init = rfn[0];\n  const complete = rfn[1];\n  const reduce2 = rfn[2];\n  args = __parseArgs(args);\n  const acc = args[0] == null ? init() : args[0];\n  const src = args[1];\n  return unreduced(\n    complete(\n      implementsFunction(src, \"$reduce\") ? src.$reduce(reduce2, acc) : isArrayLike(src) ? __reduceArray(reduce2, acc, src) : __reduceIterable(reduce2, acc, src)\n    )\n  );\n}\nfunction reduceRight(...args) {\n  const [init, complete, reduce2] = args[0];\n  args = __parseArgs(args);\n  let acc = args[0] == null ? init() : args[0];\n  const src = args[1];\n  for (let i = src.length; i-- > 0; ) {\n    acc = reduce2(acc, src[i]);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return unreduced(complete(acc));\n}\nconst __reduceArray = (rfn, acc, src) => {\n  for (let i = 0, n = src.length; i < n; i++) {\n    acc = rfn(acc, src[i]);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return acc;\n};\nconst __reduceIterable = (rfn, acc, src) => {\n  for (let x of src) {\n    acc = rfn(acc, x);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return acc;\n};\nconst reducer = (init, rfn) => [init, identity, rfn];\nconst $$reduce = (rfn, args) => {\n  const n = args.length - 1;\n  return isIterable(args[n]) ? args.length > 1 ? reduce(rfn.apply(null, args.slice(0, n)), args[n]) : reduce(rfn(), args[0]) : void 0;\n};\nexport {\n  $$reduce,\n  reduce,\n  reduceRight,\n  reducer\n};\n","const identity = (x) => x;\nconst always = () => true;\nconst never = () => false;\nexport {\n  always,\n  identity,\n  never\n};\n","class Reduced {\n  value;\n  constructor(val) {\n    this.value = val;\n  }\n  deref() {\n    return this.value;\n  }\n}\nconst reduced = (x) => new Reduced(x);\nconst isReduced = (x) => x instanceof Reduced;\nconst ensureReduced = (x) => x instanceof Reduced ? x : new Reduced(x);\nconst unreduced = (x) => x instanceof Reduced ? x.deref() : x;\nexport {\n  Reduced,\n  ensureReduced,\n  isReduced,\n  reduced,\n  unreduced\n};\n","import { compR } from \"./compr.js\";\nimport { __iter } from \"./iterator.js\";\nfunction mapIndexed(...args) {\n  return __iter(mapIndexed, args) || ((rfn) => {\n    const r = rfn[2];\n    const fn = args[0];\n    let i = args[1] || 0;\n    return compR(rfn, (acc, x) => r(acc, fn(i++, x)));\n  });\n}\nexport {\n  mapIndexed\n};\n","import { isReduced, Reduced } from \"./reduced.js\";\nfunction range(from, to, step) {\n  return new Range(from, to, step);\n}\nclass Range {\n  from;\n  to;\n  step;\n  constructor(from, to, step) {\n    if (from === void 0) {\n      from = 0;\n      to = Infinity;\n    } else if (to === void 0) {\n      to = from;\n      from = 0;\n    }\n    step = step === void 0 ? from < to ? 1 : -1 : step;\n    this.from = from;\n    this.to = to;\n    this.step = step;\n  }\n  *[Symbol.iterator]() {\n    let { from, to, step } = this;\n    if (step > 0) {\n      while (from < to) {\n        yield from;\n        from += step;\n      }\n    } else if (step < 0) {\n      while (from > to) {\n        yield from;\n        from += step;\n      }\n    }\n  }\n  $reduce(rfn, acc) {\n    const step = this.step;\n    if (step > 0) {\n      for (let i = this.from, n = this.to; i < n && !isReduced(acc); i += step) {\n        acc = rfn(acc, i);\n      }\n    } else {\n      for (let i = this.from, n = this.to; i > n && !isReduced(acc); i += step) {\n        acc = rfn(acc, i);\n      }\n    }\n    return acc;\n  }\n}\nexport {\n  Range,\n  range\n};\n","import { reducer } from \"./reduce.js\";\nfunction str(sep, src) {\n  sep = sep || \"\";\n  let first = true;\n  return src ? [...src].join(sep) : reducer(\n    () => \"\",\n    (acc, x) => (acc = first ? acc + x : acc + sep + x, first = false, acc)\n  );\n}\nexport {\n  str\n};\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator } from \"./iterator.js\";\nimport { ensureReduced, reduced } from \"./reduced.js\";\nfunction take(n, src) {\n  return isIterable(src) ? iterator(take(n), src) : (rfn) => {\n    const r = rfn[2];\n    let m = n;\n    return compR(\n      rfn,\n      (acc, x) => --m > 0 ? r(acc, x) : m === 0 ? ensureReduced(r(acc, x)) : reduced(acc)\n    );\n  };\n}\nexport {\n  take\n};\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { map } from \"./map.js\";\nimport { reduce, reduceRight } from \"./reduce.js\";\nfunction transduce(...args) {\n  return $transduce(transduce, reduce, args);\n}\nfunction transduceRight(...args) {\n  return $transduce(transduceRight, reduceRight, args);\n}\nconst $transduce = (tfn, rfn, args) => {\n  let acc, src;\n  switch (args.length) {\n    case 4:\n      src = args[3];\n      acc = args[2];\n      break;\n    case 3:\n      src = args[2];\n      break;\n    case 2:\n      return map((x) => tfn(args[0], args[1], x));\n    default:\n      illegalArity(args.length);\n  }\n  return rfn(ensureTransducer(args[0])(args[1]), acc, src);\n};\nexport {\n  transduce,\n  transduceRight\n};\n","function* zip(...src) {\n  const iters = src.map((s) => s[Symbol.iterator]());\n  while (true) {\n    const tuple = [];\n    for (let i of iters) {\n      let v = i.next();\n      if (v.done) {\n        return;\n      }\n      tuple.push(v.value);\n    }\n    yield tuple;\n  }\n}\nexport {\n  zip\n};\n","import { unsupported } from \"@thi.ng/errors/unsupported\";\nconst vop = (dispatch = 0) => {\n  const impls = new Array(5);\n  let fallback;\n  const fn = (...args) => {\n    const g = impls[args[dispatch].length] || fallback;\n    return g ? g(...args) : unsupported(`no impl for vec size ${args[dispatch].length}`);\n  };\n  fn.add = (dim, fn2) => impls[dim] = fn2;\n  fn.default = (fn2) => fallback = fn2;\n  fn.impl = (dim) => impls[dim] || fallback;\n  return fn;\n};\nexport {\n  vop\n};\n","import { defError } from \"./deferror.js\";\nconst UnsupportedOperationError = defError(\n  () => \"unsupported operation\"\n);\nconst unsupported = (msg) => {\n  throw new UnsupportedOperationError(msg);\n};\nexport {\n  UnsupportedOperationError,\n  unsupported\n};\n","const ARGS_V = \"o,a\";\nconst ARGS_VV = \"o,a,b\";\nconst ARGS_VVV = \"o,a,b,c\";\nconst ARGS_VN = \"o,a,n\";\nconst ARGS_VNV = \"o,a,n,b\";\nconst ARGS_VVN = \"o,a,b,n\";\nconst SARGS_V = \"io=0,ia=0,so=1,sa=1\";\nconst SARGS_VV = \"io=0,ia=0,ib=0,so=1,sa=1,sb=1\";\nconst SARGS_VVV = \"io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1\";\nconst DEFAULT_OUT = \"!o&&(o=a);\";\nconst NEW_OUT = \"!o&&(o=[]);\";\nconst NEW_OUT_A = \"!a&&(a=[]);\";\nconst MATH = (op) => ([o, a, b]) => `${o}=${a}${op}${b};`;\nconst MATH_N = (op) => ([o, a]) => `${o}=${a}${op}n;`;\nconst MATH2 = (op1, op2) => ([o, a, b, c]) => `${o}=(${a}${op1}${b})${op2}${c};`;\nconst MATH2_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}${b})${op2}n;`;\nconst MATH2A_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}n)${op2}${b};`;\nconst SIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})|0;`;\nconst UNSIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})>>>0;`;\nconst SIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)|0;`;\nconst UNSIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)>>>0;`;\nconst FN = (op = \"op\") => ([o, a]) => `${o}=${op}(${a});`;\nconst FN2 = (op = \"op\") => ([o, a, b]) => `${o}=${op}(${a},${b});`;\nconst FN3 = (op = \"op\") => ([o, a, b, c]) => `${o}=${op}(${a},${b},${c});`;\nconst FN5 = (op = \"op\") => ([o, a, b, c, d, e]) => `${o}=${op}(${a},${b},${c},${d},${e});`;\nconst FN_N = (op = \"op\") => ([o, a]) => `${o}=${op}(${a},n);`;\nconst DOT = ([a, b]) => `${a}*${b}`;\nconst DOT_G = ([a, b]) => `s+=${a}*${b};`;\nconst SET = ([o, a]) => `${o}=${a};`;\nconst SET_N = ([a]) => `${a}=n;`;\nconst MIX = ([o, a, b, c]) => `${o}=${a}+(${b}-${a})*${c};`;\nconst MIX_N = ([o, a, b]) => `${o}=${a}+(${b}-${a})*n;`;\nexport {\n  ARGS_V,\n  ARGS_VN,\n  ARGS_VNV,\n  ARGS_VV,\n  ARGS_VVN,\n  ARGS_VVV,\n  DEFAULT_OUT,\n  DOT,\n  DOT_G,\n  FN,\n  FN2,\n  FN3,\n  FN5,\n  FN_N,\n  MATH,\n  MATH2,\n  MATH2A_N,\n  MATH2_N,\n  MATH_N,\n  MIX,\n  MIX_N,\n  NEW_OUT,\n  NEW_OUT_A,\n  SARGS_V,\n  SARGS_VV,\n  SARGS_VVV,\n  SET,\n  SET_N,\n  SIGNED,\n  SIGNED_N,\n  UNSIGNED,\n  UNSIGNED_N\n};\n","const declareIndex = (proto, id, idx, strided = true, defNumeric = true) => {\n  const get = idx > 0 ? strided ? function() {\n    return this.buf[this.offset + idx * this.stride];\n  } : function() {\n    return this.buf[this.offset + idx];\n  } : function() {\n    return this.buf[this.offset];\n  };\n  const set = idx > 0 ? strided ? function(n) {\n    this.buf[this.offset + idx * this.stride] = n;\n  } : function(n) {\n    this.buf[this.offset + idx] = n;\n  } : function(n) {\n    this.buf[this.offset] = n;\n  };\n  defNumeric && Object.defineProperty(proto, idx, {\n    get,\n    set,\n    enumerable: true\n  });\n  Object.defineProperty(proto, id, {\n    get,\n    set,\n    enumerable: true\n  });\n};\nconst declareIndices = (proto, props, strided, defNumeric) => props.forEach((id, i) => declareIndex(proto, id, i, strided, defNumeric));\nexport {\n  declareIndex,\n  declareIndices\n};\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { EPS } from \"@thi.ng/math/api\";\nimport { eqDelta as _eq } from \"@thi.ng/math/eqdelta\";\nimport { compileHOF } from \"./compile/emit.js\";\nimport { vop } from \"./vop.js\";\nconst $ = (dim) => eqDelta.add(\n  dim,\n  compileHOF(\n    dim,\n    [_eq, EPS],\n    ([a, b]) => `eq(${a},${b},eps)`,\n    \"eq,_eps\",\n    \"a,b,eps=_eps\",\n    \"a,b\",\n    \"\",\n    \"&&\",\n    \"return a.length === b.length && \",\n    \";\"\n  )\n);\nconst eqDelta = vop();\neqDelta.default((v1, v2, eps = EPS) => {\n  if (implementsFunction(v1, \"eqDelta\")) {\n    return v1.eqDelta(v2, eps);\n  }\n  if (implementsFunction(v2, \"eqDelta\")) {\n    return v2.eqDelta(v1, eps);\n  }\n  return eqDeltaS(v1, v2, v1.length, eps);\n});\nconst eqDelta2 = $(2);\nconst eqDelta3 = $(3);\nconst eqDelta4 = $(4);\nconst eqDeltaS = (a, b, n, eps = EPS, ia = 0, ib = 0, sa = 1, sb = 1) => {\n  for (; n > 0; n--, ia += sa, ib += sb) {\n    if (!_eq(a[ia], b[ib], eps)) {\n      return false;\n    }\n  }\n  return true;\n};\nconst eqDeltaArray = (a, b, eps = EPS) => {\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = a.length; i-- > 0; ) {\n    if (!eqDelta(a[i], b[i], eps)) {\n      return false;\n    }\n  }\n  return true;\n};\nconst isInArray = (p, pts, eps = EPS) => {\n  for (let i = pts.length; i-- > 0; ) {\n    if (eqDelta(p, pts[i], eps)) {\n      return true;\n    }\n  }\n  return false;\n};\nexport {\n  eqDelta,\n  eqDelta2,\n  eqDelta3,\n  eqDelta4,\n  eqDeltaArray,\n  eqDeltaS,\n  isInArray\n};\n","import { EPS } from \"./api.js\";\nconst abs = Math.abs;\nconst max = Math.max;\nconst eqDelta = (a, b, eps = EPS) => abs(a - b) <= eps;\nconst eqDeltaScaled = (a, b, eps = EPS) => abs(a - b) <= eps * max(1, abs(a), abs(b));\nexport {\n  eqDelta,\n  eqDeltaScaled\n};\n","function* vecIterator(ctor, buf, num, start, cstride, estride) {\n  while (num-- > 0) {\n    yield new ctor(buf, start, cstride);\n    start += estride;\n  }\n}\nfunction* stridedValues(buf, num, start, stride) {\n  while (num-- > 0) {\n    yield buf[start];\n    start += stride;\n  }\n}\nexport {\n  stridedValues,\n  vecIterator\n};\n","import { SYSTEM } from \"@thi.ng/random/system\";\nimport { defHofOp } from \"./compile/emit.js\";\nconst [randMinMax, randMinMax2, randMinMax3, randMinMax4] = defHofOp(\n  SYSTEM,\n  ([o, a, b]) => `${o}=rnd.minmax(${a},${b});`,\n  \"o,a,b,rnd=op\",\n  \"o,a,b\"\n);\nexport {\n  randMinMax,\n  randMinMax2,\n  randMinMax3,\n  randMinMax4\n};\n","import { WrappedRandom } from \"./wrapped.js\";\nconst SYSTEM = new WrappedRandom(Math.random);\nexport {\n  SYSTEM\n};\n","import { ARandom } from \"./arandom.js\";\nclass WrappedRandom extends ARandom {\n  constructor(rnd) {\n    super();\n    this.rnd = rnd;\n  }\n  float(norm = 1) {\n    return this.rnd() * norm;\n  }\n  norm(norm = 1) {\n    return (this.rnd() - 0.5) * 2 * norm;\n  }\n  int() {\n    return this.rnd() * 4294967296 >>> 0;\n  }\n}\nexport {\n  WrappedRandom\n};\n","const INV_MAX = 1 / 2 ** 32;\nclass ARandom {\n  float(norm = 1) {\n    return this.int() * INV_MAX * norm;\n  }\n  probability(p) {\n    return this.float() < p;\n  }\n  norm(norm = 1) {\n    return (this.int() * INV_MAX - 0.5) * 2 * norm;\n  }\n  normMinMax(min, max) {\n    const x = this.minmax(min, max);\n    return this.float() < 0.5 ? x : -x;\n  }\n  minmax(min, max) {\n    return this.float() * (max - min) + min;\n  }\n  minmaxInt(min, max) {\n    min |= 0;\n    const range = (max | 0) - min;\n    return range ? min + this.int() % range : min;\n  }\n  minmaxUint(min, max) {\n    min >>>= 0;\n    const range = (max >>> 0) - min;\n    return range ? min + this.int() % range : min;\n  }\n}\nexport {\n  ARandom\n};\n","import { defOp } from \"./compile/emit.js\";\nimport { NEW_OUT, SET } from \"./compile/templates.js\";\nconst [set, set2, set3, set4] = defOp(\n  SET,\n  \"o,a\",\n  void 0,\n  \"o\",\n  1,\n  NEW_OUT\n);\nexport {\n  set,\n  set2,\n  set3,\n  set4\n};\n","import { isArray } from \"@thi.ng/checks/is-array\";\nimport { assert } from \"@thi.ng/errors/assert\";\nimport { unsupported } from \"@thi.ng/errors/unsupported\";\nconst CONVERSIONS = {};\nconst defConversions = (mode, spec) => {\n  for (let id in spec) {\n    const val = spec[id];\n    if (isArray(val)) {\n      const [a, b, c, d] = val;\n      spec[id] = val.length === 2 ? (out, src) => b(out, a(out, src)) : val.length === 3 ? (out, src) => c(out, b(out, a(out, src))) : (out, src) => d(out, c(out, b(out, a(out, src))));\n    }\n  }\n  CONVERSIONS[mode] = { ...CONVERSIONS[mode], ...spec };\n};\nconst convert = (res, src, destMode, srcMode) => {\n  const spec = CONVERSIONS[destMode];\n  assert(!!spec, `no conversions available for ${destMode}`);\n  let $convert = spec[srcMode];\n  return $convert ? $convert(res, src) : CONVERSIONS.rgb[srcMode] ? spec.rgb(res, CONVERSIONS.rgb[srcMode]([], src)) : unsupported(`can't convert: ${srcMode} -> ${destMode}`);\n};\nexport {\n  CONVERSIONS,\n  convert,\n  defConversions\n};\n","const isArray = Array.isArray;\nexport {\n  isArray\n};\n","import { defError } from \"./deferror.js\";\nconst AssertionError = defError(() => \"Assertion failed\");\nconst assert = (typeof process !== \"undefined\" && process.env !== void 0 ? process.env.NODE_ENV !== \"production\" || !!process.env.UMBRELLA_ASSERTS : import.meta.env ? import.meta.env.MODE !== \"production\" || !!import.meta.env.UMBRELLA_ASSERTS || !!import.meta.env.VITE_UMBRELLA_ASSERTS : true) ? (test, msg) => {\n  if (typeof test === \"function\" && !test() || !test) {\n    throw new AssertionError(\n      typeof msg === \"function\" ? msg() : msg\n    );\n  }\n} : () => {\n};\nexport {\n  AssertionError,\n  assert\n};\n","\"use strict\";","import { rotateRight } from \"@thi.ng/binary/rotate\";\nimport { interleave4_12_24, interleave4_16_32 } from \"@thi.ng/binary/splat\";\nimport { isString } from \"@thi.ng/checks/is-string\";\nimport { assert } from \"@thi.ng/errors/assert\";\nimport { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";\nimport { unsupported } from \"@thi.ng/errors/unsupported\";\nimport { TAU } from \"@thi.ng/math/api\";\nimport { clamp01 } from \"@thi.ng/math/interval\";\nimport { fract } from \"@thi.ng/math/prec\";\nimport { ParsedColor } from \"../api.js\";\nimport { INV8BIT } from \"../api/constants.js\";\nimport { CSS_NAMES } from \"../api/names.js\";\nimport { CSS_SYSTEM_COLORS } from \"../api/system.js\";\nimport { intArgb32Srgb } from \"../int/int-srgb.js\";\nconst parseCss = (src) => {\n  src = (isString(src) ? src : src.deref()).toLowerCase();\n  const named = CSS_NAMES[src] || CSS_SYSTEM_COLORS[src];\n  if (named || src[0] === \"#\")\n    return new ParsedColor(\n      \"srgb\",\n      intArgb32Srgb([], parseHex(named || src))\n    );\n  const parts = src.split(/[(),/ ]+/);\n  const [mode, a, b, c, d] = parts;\n  assert(parts.length === 5 || parts.length === 6, `invalid color: ${src}`);\n  switch (mode) {\n    case \"rgb\":\n    case \"rgba\":\n      return new ParsedColor(\"srgb\", [\n        __numOrPercent(a, 1, INV8BIT, true),\n        __numOrPercent(b, 1, INV8BIT, true),\n        __numOrPercent(c, 1, INV8BIT, true),\n        __alpha(d)\n      ]);\n    case \"hsl\":\n    case \"hsla\":\n      return new ParsedColor(\"hsl\", [\n        __hue(a),\n        __percent(b),\n        __percent(c),\n        __alpha(d)\n      ]);\n    case \"lab\":\n      return new ParsedColor(\"lab50\", [\n        __numOrPercent(a),\n        __numOrPercent(b, 1.25),\n        __numOrPercent(c, 1.25),\n        __alpha(d)\n      ]);\n    case \"lch\":\n      return new ParsedColor(mode, [\n        __numOrPercent(a),\n        __numOrPercent(b, 1.5),\n        __hue(c),\n        __alpha(d)\n      ]);\n    case \"oklab\":\n      return new ParsedColor(mode, [\n        __numOrPercent(a, 1, 1),\n        __numOrPercent(b, 0.4, 1),\n        __numOrPercent(c, 0.4, 1),\n        __alpha(d)\n      ]);\n    case \"oklch\":\n      return new ParsedColor(mode, [\n        __numOrPercent(a, 1, 1),\n        __numOrPercent(b, 0.4, 1),\n        __hue(c),\n        __alpha(d)\n      ]);\n    default:\n      unsupported(`color mode: ${mode}`);\n  }\n};\nconst HUE_NORMS = {\n  rad: TAU,\n  grad: 400,\n  turn: 1,\n  deg: 360\n};\nconst __hue = (x) => {\n  const match = /^(-?[0-9.]+)(deg|rad|grad|turn)?$/.exec(x);\n  assert(!!match, `expected hue, got: ${x}`);\n  return fract(parseFloat(match[1]) / (HUE_NORMS[match[2]] || 360));\n};\nconst __alpha = (x) => x ? __numOrPercent(x, 1, 1, true) : 1;\nconst __percent = (x, clamp = true) => {\n  assert(/^([0-9.]+)%$/.test(x), `expected percentage, got: ${x}`);\n  const res = parseFloat(x) / 100;\n  return clamp ? clamp01(res) : res;\n};\nconst __numOrPercent = (x, scalePerc = 1, scale = 0.01, clamp = false) => {\n  assert(/^-?[0-9.]+%?$/.test(x), `expected number or percentage, got: ${x}`);\n  const res = parseFloat(x) * (x.endsWith(\"%\") ? 0.01 * scalePerc : scale);\n  return clamp ? clamp01(res) : res;\n};\nconst parseHex = (src) => {\n  const match = /^#?([0-9a-f]{3,8})$/i.exec(src);\n  if (match) {\n    const hex = match[1];\n    const val = parseInt(hex, 16);\n    switch (hex.length) {\n      case 3:\n        return (interleave4_12_24(val) | 4278190080) >>> 0;\n      case 4:\n        return rotateRight(interleave4_16_32(val), 8);\n      case 6:\n        return (val | 4278190080) >>> 0;\n      case 8:\n        return rotateRight(val, 8);\n      default:\n    }\n  }\n  return illegalArgs(`invalid hex color: \"${src}\"`);\n};\nexport {\n  parseCss,\n  parseHex\n};\n","const rotateLeft = (x, n) => (x << n | x >>> 32 - n) >>> 0;\nconst rotateRight = (x, n) => (x >>> n | x << 32 - n) >>> 0;\nconst shiftRL = (x, n) => n < 0 ? x << -n : x >>> n;\nexport {\n  rotateLeft,\n  rotateRight,\n  shiftRL\n};\n","const splat4_24 = (x) => (x & 15) * 1118481;\nconst splat4_32 = (x) => (x & 15) * 286331153 >>> 0;\nconst splat8_24 = (x) => (x & 255) * 65793;\nconst splat8_32 = (x) => (x & 255) * 16843009 >>> 0;\nconst splat16_32 = (x) => (x &= 65535, (x << 16 | x) >>> 0);\nconst same4 = (x) => (x >> 4 & 15) === (x & 15);\nconst same8 = (x) => (x >> 8 & 255) === (x & 255);\nconst interleave4_12_24 = (x) => (x & 3840) * 4352 | (x & 240) * 272 | (x & 15) * 17;\nconst interleave4_16_32 = (x) => ((x & 61440) * 69632 | (x & 3840) * 4352 | (x & 240) * 272 | (x & 15) * 17) >>> 0;\nexport {\n  interleave4_12_24,\n  interleave4_16_32,\n  same4,\n  same8,\n  splat16_32,\n  splat4_24,\n  splat4_32,\n  splat8_24,\n  splat8_32\n};\n","var Hue = /* @__PURE__ */ ((Hue2) => {\n  Hue2[Hue2[\"RED\"] = 0] = \"RED\";\n  Hue2[Hue2[\"ORANGE\"] = 1] = \"ORANGE\";\n  Hue2[Hue2[\"YELLOW\"] = 2] = \"YELLOW\";\n  Hue2[Hue2[\"CHARTREUSE\"] = 3] = \"CHARTREUSE\";\n  Hue2[Hue2[\"GREEN\"] = 4] = \"GREEN\";\n  Hue2[Hue2[\"SPRING_GREEN\"] = 5] = \"SPRING_GREEN\";\n  Hue2[Hue2[\"CYAN\"] = 6] = \"CYAN\";\n  Hue2[Hue2[\"AZURE\"] = 7] = \"AZURE\";\n  Hue2[Hue2[\"BLUE\"] = 8] = \"BLUE\";\n  Hue2[Hue2[\"VIOLET\"] = 9] = \"VIOLET\";\n  Hue2[Hue2[\"MAGENTA\"] = 10] = \"MAGENTA\";\n  Hue2[Hue2[\"ROSE\"] = 11] = \"ROSE\";\n  return Hue2;\n})(Hue || {});\nclass ParsedColor {\n  constructor(mode, value) {\n    this.mode = mode;\n    this.value = value;\n  }\n  deref() {\n    return this.value;\n  }\n}\nexport {\n  Hue,\n  ParsedColor\n};\n","import { float } from \"@thi.ng/strings/float\";\nimport { percent } from \"@thi.ng/strings/percent\";\nconst BLACK = Object.freeze([0, 0, 0, 1]);\nconst WHITE = Object.freeze([1, 1, 1, 1]);\nconst RED = Object.freeze([1, 0, 0, 1]);\nconst GREEN = Object.freeze([0, 1, 0, 1]);\nconst BLUE = Object.freeze([0, 0, 1, 1]);\nconst CYAN = Object.freeze([0, 1, 1, 1]);\nconst MAGENTA = Object.freeze([1, 0, 1, 1]);\nconst YELLOW = Object.freeze([1, 1, 0, 1]);\nconst RGB_LUMINANCE_REC601 = [0.299, 0.587, 0.114];\nconst RGB_LUMINANCE_REC709 = [0.2126, 0.7152, 0.0722];\nconst RGB_LUMINANCE_REC2020 = [0.2627, 0.678, 0.0593];\nconst RGB_XYZ_D50 = [\n  0.4360747,\n  0.2225045,\n  0.0139322,\n  0.3850649,\n  0.7168786,\n  0.0971045,\n  0.1430804,\n  0.0606169,\n  0.7141733\n];\nconst XYZ_RGB_D50 = [\n  3.1338561,\n  -0.9787684,\n  0.0719453,\n  -1.6168667,\n  1.9161415,\n  -0.2289914,\n  -0.4906146,\n  0.033454,\n  1.4052427\n];\nconst RGB_XYZ_D65 = [\n  0.4124564,\n  0.2126729,\n  0.0193339,\n  0.3575761,\n  0.7151522,\n  0.119192,\n  0.1804375,\n  0.072175,\n  0.9503041\n];\nconst XYZ_RGB_D65 = [\n  3.2404542,\n  -0.969266,\n  0.0556434,\n  -1.5371385,\n  1.8760108,\n  -0.2040259,\n  -0.4985314,\n  0.041556,\n  1.0572252\n];\nconst BRADFORD_D50_D65 = [\n  0.9555766,\n  -0.0282895,\n  0.0122982,\n  -0.0230393,\n  1.0099416,\n  -0.020483,\n  0.0631636,\n  0.0210077,\n  1.3299098\n];\nconst BRADFORD_D65_D50 = [\n  1.0478112,\n  0.0295424,\n  -92345e-7,\n  0.0228866,\n  0.9904844,\n  0.0150436,\n  -0.050127,\n  -0.0170491,\n  0.7521316\n];\nconst D50 = [0.96422, 1, 0.82521];\nconst D65 = [0.95047, 1, 1.08883];\nconst OKLAB_M1 = [\n  0.8189330101,\n  0.0329845436,\n  0.0482003018,\n  0.3618667424,\n  0.9293118715,\n  0.2643662691,\n  -0.1288597137,\n  0.0361456387,\n  0.633851707\n];\nconst OKLAB_M2 = [\n  0.2104542553,\n  1.9779984951,\n  0.0259040371,\n  0.793617785,\n  -2.428592205,\n  0.7827717662,\n  -0.0040720468,\n  0.4505937099,\n  -0.808675766\n];\nlet FF = float(3);\nlet PC = percent(3);\nconst setPrecision = (x) => {\n  FF = float(x);\n  PC = percent(x);\n};\nconst INV8BIT = 1 / 255;\nconst EPS = 1 / 256;\nexport {\n  BLACK,\n  BLUE,\n  BRADFORD_D50_D65,\n  BRADFORD_D65_D50,\n  CYAN,\n  D50,\n  D65,\n  EPS,\n  FF,\n  GREEN,\n  INV8BIT,\n  MAGENTA,\n  OKLAB_M1,\n  OKLAB_M2,\n  PC,\n  RED,\n  RGB_LUMINANCE_REC2020,\n  RGB_LUMINANCE_REC601,\n  RGB_LUMINANCE_REC709,\n  RGB_XYZ_D50,\n  RGB_XYZ_D65,\n  WHITE,\n  XYZ_RGB_D50,\n  XYZ_RGB_D65,\n  YELLOW,\n  setPrecision\n};\n","const percent = (prec = 0) => (x) => (x * 100).toFixed(prec) + \"%\";\nexport {\n  percent\n};\n","const CSS_NAMES = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"0ff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"00f\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"0ff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkgrey: \"a9a9a9\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"f0f\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  grey: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightgrey: \"d3d3d3\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"789\",\n  lightslategrey: \"789\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"0f0\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"f0f\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  red: \"f00\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"fff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ff0\",\n  yellowgreen: \"9acd32\",\n  // additions\n  transparent: \"0000\",\n  rebeccapurple: \"639\"\n};\nexport {\n  CSS_NAMES\n};\n","let CSS_SYSTEM_COLORS = {\n  canvas: \"fff\",\n  canvastext: \"000\",\n  linktext: \"001ee4\",\n  visitedtext: \"4e2386\",\n  activetext: \"eb3323\",\n  buttonface: \"ddd\",\n  buttontext: \"000\",\n  buttonborder: \"000\",\n  field: \"fff\",\n  fieldtext: \"000\",\n  highlight: \"bbd5fb\",\n  highlighttext: \"000\",\n  mark: \"000\",\n  marktext: \"fff\",\n  graytext: \"808080\"\n};\nconst setSystemColors = (cols) => Object.assign(CSS_SYSTEM_COLORS, cols);\nexport {\n  CSS_SYSTEM_COLORS,\n  setSystemColors\n};\n","import { setC4 } from \"@thi.ng/vectors/setc\";\nimport { INV8BIT } from \"../api/constants.js\";\nconst intArgb32Srgb = (out, src) => setC4(\n  out || [],\n  (src >>> 16 & 255) * INV8BIT,\n  (src >>> 8 & 255) * INV8BIT,\n  (src & 255) * INV8BIT,\n  (src >>> 24) * INV8BIT\n);\nconst intAbgr32Srgb = (out, src) => setC4(\n  out || [],\n  (src & 255) * INV8BIT,\n  (src >>> 8 & 255) * INV8BIT,\n  (src >>> 16 & 255) * INV8BIT,\n  (src >>> 24) * INV8BIT\n);\nconst intRgb24Srgb = (out, src) => intArgb32Srgb(out, src | 4278190080);\nconst intBgr24Srgb = (out, src) => intAbgr32Srgb(out, src | 4278190080);\nexport {\n  intAbgr32Srgb,\n  intArgb32Srgb,\n  intBgr24Srgb,\n  intRgb24Srgb\n};\n","const setC2 = (out, x, y) => (!out && (out = []), out[0] = x, out[1] = y, out);\nconst setC3 = (out, x, y, z) => (!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out);\nconst setC4 = (out, x, y, z, w) => (!out && (out = []), out[0] = x, out[1] = y, out[2] = z, out[3] = w, out);\nconst setC6 = (out, a, b, c, d, e, f) => (!out && (out = []), out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = f, out);\nconst setC = (out, ...values) => {\n  if (!out) return values;\n  for (let i = 0, n = values.length; i < n; i++) {\n    out[i] = values[i];\n  }\n  return out;\n};\nexport {\n  setC,\n  setC2,\n  setC3,\n  setC4,\n  setC6\n};\n","import { clamp01 } from \"@thi.ng/math/interval\";\nconst __ensureAlpha = (x, def = 1) => x != void 0 ? clamp01(x) : def;\nconst __ensureArgs = (args) => {\n  if (typeof args[0] === \"number\") {\n    switch (args.length) {\n      case 1:\n        return args.push(0, 0, 1), [args];\n      case 2:\n        return args.push(0, 1), [args];\n      case 3:\n        return args.push(1), [args];\n      default:\n        return [args];\n    }\n  }\n  return args;\n};\nexport {\n  __ensureAlpha,\n  __ensureArgs\n};\n","import { clampH } from \"../clamp.js\";\nconst hsvHsl = (out, src) => {\n  out = clampH(out || src, src);\n  const s = out[1];\n  const v = out[2];\n  const l = (2 - s) * v / 2;\n  out[2] = l;\n  out[1] = l && l < 1 ? s * v / (l < 0.5 ? l * 2 : 2 - l * 2) : s;\n  return out;\n};\nexport {\n  hsvHsl\n};\n","import { clamp01 } from \"@thi.ng/math/interval\";\nimport { fract } from \"@thi.ng/math/prec\";\nimport { setC4 } from \"@thi.ng/vectors/setc\";\nimport { __ensureAlpha } from \"./internal/ensure.js\";\nconst clamp = (out, src, alpha = 1) => setC4(\n  out || src,\n  clamp01(src[0]),\n  clamp01(src[1]),\n  clamp01(src[2]),\n  __ensureAlpha(src[3], alpha)\n);\nconst clampH = (out, src, alpha = 1) => setC4(\n  out || src,\n  fract(src[0]),\n  clamp01(src[1]),\n  clamp01(src[2]),\n  __ensureAlpha(src[3], alpha)\n);\nexport {\n  clamp,\n  clampH\n};\n","import { atan2Abs } from \"@thi.ng/math/angle\";\nimport { INV_TAU, TAU } from \"@thi.ng/math/api\";\nimport { setC4 } from \"@thi.ng/vectors/setc\";\nimport { __ensureAlpha } from \"../internal/ensure.js\";\nconst labLch = (out, src) => {\n  const { 1: a, 2: b } = src;\n  return setC4(\n    out || src,\n    src[0],\n    Math.hypot(a, b),\n    a === 0 && b === 0 ? 0 : atan2Abs(b, a) * INV_TAU,\n    __ensureAlpha(src[3])\n  );\n};\nconst lchLab = (out, src) => {\n  let { 1: c, 2: h } = src;\n  h *= TAU;\n  const a = __ensureAlpha(src[3]);\n  return c > 0 ? setC4(out || src, src[0], Math.cos(h) * c, Math.sin(h) * c, a) : setC4(out || src, src[0], 0, 0, a);\n};\nexport {\n  labLch,\n  lchLab\n};\n","import { DEG2RAD, HALF_PI, INV_HALF_PI, PI, RAD2DEG, TAU } from \"./api.js\";\nconst sincos = (theta, n = 1) => [\n  Math.sin(theta) * n,\n  Math.cos(theta) * n\n];\nconst cossin = (theta, n = 1) => [\n  Math.cos(theta) * n,\n  Math.sin(theta) * n\n];\nconst absTheta = (theta) => (theta %= TAU, theta < 0 ? TAU + theta : theta);\nconst absInnerAngle = (theta) => (theta = Math.abs(theta), theta > PI ? TAU - theta : theta);\nconst angleDist = (a, b) => absInnerAngle(absTheta(b % TAU - a % TAU));\nconst atan2Abs = (y, x) => absTheta(Math.atan2(y, x));\nconst quadrant = (theta) => absTheta(theta) * INV_HALF_PI | 0;\nconst deg = (theta) => theta * RAD2DEG;\nconst rad = (theta) => theta * DEG2RAD;\nconst csc = (theta) => 1 / Math.sin(theta);\nconst sec = (theta) => 1 / Math.cos(theta);\nconst cot = (theta) => 1 / Math.tan(theta);\nconst loc = (a, b, gamma) => Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));\nconst normCos = (x) => {\n  const x2 = x * x;\n  return 1 + x2 * (-4 + 2 * x2);\n};\nconst __fastCos = (x) => {\n  const x2 = x * x;\n  return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);\n};\nconst fastCos = (theta) => {\n  theta %= TAU;\n  theta < 0 && (theta = -theta);\n  switch (theta * INV_HALF_PI | 0) {\n    case 0:\n      return __fastCos(theta);\n    case 1:\n      return -__fastCos(PI - theta);\n    case 2:\n      return -__fastCos(theta - PI);\n    default:\n      return __fastCos(TAU - theta);\n  }\n};\nconst fastSin = (theta) => fastCos(HALF_PI - theta);\nconst fromDMS = (deg2, min, sec2) => deg2 + min / 60 + sec2 / 3600;\nconst toDMS = (theta) => {\n  const sign = Math.sign(theta);\n  theta = Math.abs(theta);\n  const deg2 = Math.trunc(theta);\n  theta = (theta - deg2) * 60;\n  const min = Math.trunc(theta);\n  return [deg2 * sign, min, (theta - min) * 60];\n};\nexport {\n  absInnerAngle,\n  absTheta,\n  angleDist,\n  atan2Abs,\n  cossin,\n  cot,\n  csc,\n  deg,\n  fastCos,\n  fastSin,\n  fromDMS,\n  loc,\n  normCos,\n  quadrant,\n  rad,\n  sec,\n  sincos,\n  toDMS\n};\n","import { labXyz, labXyzD65 } from \"./lab-xyz.js\";\nimport { xyzRgb, xyzRgbD65 } from \"../xyz/xyz-rgb.js\";\nconst labRgb = (out, src) => xyzRgb(null, labXyz(out, src));\nconst labRgbD65 = (out, src) => xyzRgbD65(null, labXyzD65(out, src));\nexport {\n  labRgb,\n  labRgbD65\n};\n","import { setC4 } from \"@thi.ng/vectors/setc\";\nimport { D50, D65 } from \"../api/constants.js\";\nimport { __ensureAlpha } from \"../internal/ensure.js\";\nconst __transform = (x) => {\n  const y = x ** 3;\n  return y > 8856e-6 ? y : (x - 16 / 116) / 7.787;\n};\nconst labXyz = (out, src, white = D50) => {\n  const y = (src[0] + 0.16) / 1.16;\n  return setC4(\n    out || src,\n    __transform(src[1] / 5 + y) * white[0],\n    __transform(y) * white[1],\n    __transform(y - src[2] / 2) * white[2],\n    __ensureAlpha(src[3])\n  );\n};\nconst labXyzD65 = (out, src) => labXyz(out, src, D65);\nexport {\n  labXyz,\n  labXyzD65\n};\n","import { XYZ_RGB_D50, XYZ_RGB_D65 } from \"../api/constants.js\";\nimport { __mulV33 } from \"../internal/matrix-ops.js\";\nconst xyzRgb = (out, src, mat = XYZ_RGB_D50) => __mulV33(out, mat, src);\nconst xyzRgbD65 = (out, src) => xyzRgb(out, src, XYZ_RGB_D65);\nexport {\n  xyzRgb,\n  xyzRgbD65\n};\n","import { clamp01 } from \"@thi.ng/math/interval\";\nimport { dotS3, dotS4 } from \"@thi.ng/vectors/dots\";\nimport { setC4 } from \"@thi.ng/vectors/setc\";\nimport { __ensureAlpha } from \"./ensure.js\";\nconst __mulV33 = (out, mat, src, clampOut = false) => {\n  const x = dotS3(mat, src, 0, 0, 3);\n  const y = dotS3(mat, src, 1, 0, 3);\n  const z = dotS3(mat, src, 2, 0, 3);\n  const a = __ensureAlpha(src[3]);\n  return clampOut ? setC4(out || src, clamp01(x), clamp01(y), clamp01(z), a) : setC4(out || src, x, y, z, a);\n};\nconst __mulV45 = (out, mat, src, clampOut = true) => {\n  out = setC4(out || src, src[0], src[1], src[2], __ensureAlpha(src[3]));\n  const x = dotS4(out, mat, 0, 0) + mat[4];\n  const y = dotS4(out, mat, 0, 5) + mat[9];\n  const z = dotS4(out, mat, 0, 10) + mat[14];\n  const w = dotS4(out, mat, 0, 15) + mat[19];\n  return clampOut ? setC4(out, clamp01(x), clamp01(y), clamp01(z), clamp01(w)) : setC4(out, x, y, z, w);\n};\nconst __mulM45 = (a, b) => [\n  dotS4(b, a, 0, 0, 1, 5),\n  dotS4(b, a, 0, 1, 1, 5),\n  dotS4(b, a, 0, 2, 1, 5),\n  dotS4(b, a, 0, 3, 1, 5),\n  dotS4(b, a, 0, 4, 1, 5) + b[4],\n  dotS4(b, a, 5, 0, 1, 5),\n  dotS4(b, a, 5, 1, 1, 5),\n  dotS4(b, a, 5, 2, 1, 5),\n  dotS4(b, a, 5, 3, 1, 5),\n  dotS4(b, a, 5, 4, 1, 5) + b[9],\n  dotS4(b, a, 10, 0, 1, 5),\n  dotS4(b, a, 10, 1, 1, 5),\n  dotS4(b, a, 10, 2, 1, 5),\n  dotS4(b, a, 10, 3, 1, 5),\n  dotS4(b, a, 10, 4, 1, 5) + b[14],\n  dotS4(b, a, 15, 0, 1, 5),\n  dotS4(b, a, 15, 1, 1, 5),\n  dotS4(b, a, 15, 2, 1, 5),\n  dotS4(b, a, 15, 3, 1, 5),\n  dotS4(b, a, 15, 4, 1, 5) + b[19]\n];\nexport {\n  __mulM45,\n  __mulV33,\n  __mulV45\n};\n","import { compile } from \"./compile/emit.js\";\nimport { DOT, SARGS_V } from \"./compile/templates.js\";\nconst dotS = (a, b, n, ia = 0, ib = 0, sa = 1, sb = 1) => {\n  let sum = 0;\n  for (; n-- > 0; ia += sa, ib += sb) sum += a[ia] * b[ib];\n  return sum;\n};\nconst $ = (dim) => compile(dim, DOT, `o,a,${SARGS_V}`, \"o,a\", \"\", \"+\", \"return \", \";\", true);\nconst dotS2 = $(2);\nconst dotS3 = $(3);\nconst dotS4 = $(4);\nexport {\n  dotS,\n  dotS2,\n  dotS3,\n  dotS4\n};\n","import { EPS } from \"@thi.ng/math/api\";\nimport { rgbHcv } from \"./rgb-hcv.js\";\nconst rgbHsl = (out, src) => {\n  out = rgbHcv(out, src);\n  out[2] -= out[1] * 0.5;\n  out[1] /= 1 + EPS - Math.abs(out[2] * 2 - 1);\n  return out;\n};\nexport {\n  rgbHsl\n};\n","import { EPS } from \"@thi.ng/math/api\";\nimport { clamp01 } from \"@thi.ng/math/interval\";\nimport { setC3 } from \"@thi.ng/vectors/setc\";\nimport { clamp } from \"../clamp.js\";\nconst rgbHcv = (out, src) => {\n  out = clamp(out || src, src);\n  const p = out[1] < out[2] ? [out[2], out[1], -1, 2 / 3] : [out[1], out[2], 0, -1 / 3];\n  const q = out[0] < p[0] ? [p[0], p[1], p[3], out[0]] : [out[0], p[1], p[2], p[0]];\n  const c = q[0] - Math.min(q[1], q[3]);\n  return setC3(\n    out,\n    clamp01(Math.abs((q[3] - q[1]) / (6 * c + EPS) + q[2])),\n    clamp01(c),\n    clamp01(q[0])\n  );\n};\nexport {\n  rgbHcv\n};\n","import { setC4 } from \"@thi.ng/vectors/setc\";\nimport { __ensureAlpha } from \"../internal/ensure.js\";\nimport { linearSrgb } from \"../linear.js\";\nconst rgbSrgb = (out, src) => setC4(\n  out || src,\n  linearSrgb(src[0]),\n  linearSrgb(src[1]),\n  linearSrgb(src[2]),\n  __ensureAlpha(src[3])\n);\nconst GAMMA = 1 / 2.2;\nconst rgbSrgbApprox = (out, src) => setC4(\n  out || src,\n  src[0] ** GAMMA,\n  src[1] ** GAMMA,\n  src[2] ** GAMMA,\n  __ensureAlpha(src[3])\n);\nexport {\n  rgbSrgb,\n  rgbSrgbApprox\n};\n","const linearSrgb = (x) => x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055;\nconst srgbLinear = (x) => x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\nexport {\n  linearSrgb,\n  srgbLinear\n};\n","import { clamp01 } from \"@thi.ng/math/interval\";\nimport { setC3 } from \"@thi.ng/vectors/setc\";\nimport { hueRgb } from \"../rgb/hue-rgb.js\";\nimport { __ensureAlpha } from \"../internal/ensure.js\";\nconst hslRgb = (out, src) => {\n  const s = clamp01(src[1]);\n  const l = clamp01(src[2]);\n  out = hueRgb(out || src, src[0], __ensureAlpha(src[3]));\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  return setC3(\n    out,\n    (out[0] - 0.5) * c + l,\n    (out[1] - 0.5) * c + l,\n    (out[2] - 0.5) * c + l\n  );\n};\nexport {\n  hslRgb\n};\n","import { clamp01 } from \"@thi.ng/math/interval\";\nimport { fract } from \"@thi.ng/math/prec\";\nimport { setC4 } from \"@thi.ng/vectors/setc\";\nconst hueRgb = (out, hue, alpha = 1) => {\n  hue = fract(hue) * 6;\n  return setC4(\n    out || [],\n    clamp01(Math.abs(hue - 3) - 1),\n    clamp01(2 - Math.abs(hue - 2)),\n    clamp01(2 - Math.abs(hue - 4)),\n    alpha\n  );\n};\nconst namedHueRgb = (out, hue, alpha = 1) => hueRgb(out, hue / 12, alpha);\nexport {\n  hueRgb,\n  namedHueRgb\n};\n","var gsl_const = {};\n\ngsl_const.CGS = {};\ngsl_const.CGS.SPEED_OF_LIGHT =  2.99792458e+10; /* cm / s */\ngsl_const.CGS.GRAVITATIONAL_CONSTANT =  6.673e-8; /* cm^3 / g s^2 */\ngsl_const.CGS.PLANCKS_CONSTANT_H =  6.62606896e-27; /* g cm^2 / s */\ngsl_const.CGS.PLANCKS_CONSTANT_HBAR =  1.05457162825e-27; /* g cm^2 / s */\ngsl_const.CGS.ASTRONOMICAL_UNIT =  1.49597870691e+13; /* cm */\ngsl_const.CGS.LIGHT_YEAR =  9.46053620707e+17; /* cm */\ngsl_const.CGS.PARSEC =  3.08567758135e+18; /* cm */\ngsl_const.CGS.GRAV_ACCEL =  9.80665e+2; /* cm / s^2 */\ngsl_const.CGS.ELECTRON_VOLT =  1.602176487e-12; /* g cm^2 / s^2 */\ngsl_const.CGS.MASS_ELECTRON =  9.10938188e-28; /* g */\ngsl_const.CGS.MASS_MUON =  1.88353109e-25; /* g */\ngsl_const.CGS.MASS_PROTON =  1.67262158e-24; /* g */\ngsl_const.CGS.MASS_NEUTRON =  1.67492716e-24; /* g */\ngsl_const.CGS.RYDBERG =  2.17987196968e-11; /* g cm^2 / s^2 */\ngsl_const.CGS.BOLTZMANN =  1.3806504e-16; /* g cm^2 / K s^2 */\ngsl_const.CGS.MOLAR_GAS =  8.314472e7; /* g cm^2 / K mol s^2 */\ngsl_const.CGS.STANDARD_GAS_VOLUME =  2.2710981e4; /* cm^3 / mol */\ngsl_const.CGS.MINUTE =  6e1; /* s */\ngsl_const.CGS.HOUR =  3.6e3; /* s */\ngsl_const.CGS.DAY =  8.64e4; /* s */\ngsl_const.CGS.WEEK =  6.048e5; /* s */\ngsl_const.CGS.INCH =  2.54e0; /* cm */\ngsl_const.CGS.FOOT =  3.048e1; /* cm */\ngsl_const.CGS.YARD =  9.144e1; /* cm */\ngsl_const.CGS.MILE =  1.609344e5; /* cm */\ngsl_const.CGS.NAUTICAL_MILE =  1.852e5; /* cm */\ngsl_const.CGS.FATHOM =  1.8288e2; /* cm */\ngsl_const.CGS.MIL =  2.54e-3; /* cm */\ngsl_const.CGS.POINT =  3.52777777778e-2; /* cm */\ngsl_const.CGS.TEXPOINT =  3.51459803515e-2; /* cm */\ngsl_const.CGS.MICRON =  1e-4; /* cm */\ngsl_const.CGS.ANGSTROM =  1e-8; /* cm */\ngsl_const.CGS.HECTARE =  1e8; /* cm^2 */\ngsl_const.CGS.ACRE =  4.04685642241e7; /* cm^2 */\ngsl_const.CGS.BARN =  1e-24; /* cm^2 */\ngsl_const.CGS.LITER =  1e3; /* cm^3 */\ngsl_const.CGS.US_GALLON =  3.78541178402e3; /* cm^3 */\ngsl_const.CGS.QUART =  9.46352946004e2; /* cm^3 */\ngsl_const.CGS.PINT =  4.73176473002e2; /* cm^3 */\ngsl_const.CGS.CUP =  2.36588236501e2; /* cm^3 */\ngsl_const.CGS.FLUID_OUNCE =  2.95735295626e1; /* cm^3 */\ngsl_const.CGS.TABLESPOON =  1.47867647813e1; /* cm^3 */\ngsl_const.CGS.TEASPOON =  4.92892159375e0; /* cm^3 */\ngsl_const.CGS.CANADIAN_GALLON =  4.54609e3; /* cm^3 */\ngsl_const.CGS.UK_GALLON =  4.546092e3; /* cm^3 */\ngsl_const.CGS.MILES_PER_HOUR =  4.4704e1; /* cm / s */\ngsl_const.CGS.KILOMETERS_PER_HOUR =  2.77777777778e1; /* cm / s */\ngsl_const.CGS.KNOT =  5.14444444444e1; /* cm / s */\ngsl_const.CGS.POUND_MASS =  4.5359237e2; /* g */\ngsl_const.CGS.OUNCE_MASS =  2.8349523125e1; /* g */\ngsl_const.CGS.TON =  9.0718474e5; /* g */\ngsl_const.CGS.METRIC_TON =  1e6; /* g */\ngsl_const.CGS.UK_TON =  1.0160469088e6; /* g */\ngsl_const.CGS.TROY_OUNCE =  3.1103475e1; /* g */\ngsl_const.CGS.CARAT =  2e-1; /* g */\ngsl_const.CGS.UNIFIED_ATOMIC_MASS =  1.660538782e-24; /* g */\ngsl_const.CGS.GRAM_FORCE =  9.80665e2; /* cm g / s^2 */\ngsl_const.CGS.POUND_FORCE =  4.44822161526e5; /* cm g / s^2 */\ngsl_const.CGS.KILOPOUND_FORCE =  4.44822161526e8; /* cm g / s^2 */\ngsl_const.CGS.POUNDAL =  1.38255e4; /* cm g / s^2 */\ngsl_const.CGS.CALORIE =  4.1868e7; /* g cm^2 / s^2 */\ngsl_const.CGS.BTU =  1.05505585262e10; /* g cm^2 / s^2 */\ngsl_const.CGS.THERM =  1.05506e15; /* g cm^2 / s^2 */\ngsl_const.CGS.HORSEPOWER =  7.457e9; /* g cm^2 / s^3 */\ngsl_const.CGS.BAR =  1e6; /* g / cm s^2 */\ngsl_const.CGS.STD_ATMOSPHERE =  1.01325e6; /* g / cm s^2 */\ngsl_const.CGS.TORR =  1.33322368421e3; /* g / cm s^2 */\ngsl_const.CGS.METER_OF_MERCURY =  1.33322368421e6; /* g / cm s^2 */\ngsl_const.CGS.INCH_OF_MERCURY =  3.38638815789e4; /* g / cm s^2 */\ngsl_const.CGS.INCH_OF_WATER =  2.490889e3; /* g / cm s^2 */\ngsl_const.CGS.PSI =  6.89475729317e4; /* g / cm s^2 */\ngsl_const.CGS.POISE =  1e0; /* g / cm s */\ngsl_const.CGS.STOKES =  1e0; /* cm^2 / s */\ngsl_const.CGS.STILB =  1e0; /* cd / cm^2 */\ngsl_const.CGS.LUMEN =  1e0; /* cd sr */\ngsl_const.CGS.LUX =  1e-4; /* cd sr / cm^2 */\ngsl_const.CGS.PHOT =  1e0; /* cd sr / cm^2 */\ngsl_const.CGS.FOOTCANDLE =  1.076e-3; /* cd sr / cm^2 */\ngsl_const.CGS.LAMBERT =  1e0; /* cd sr / cm^2 */\ngsl_const.CGS.FOOTLAMBERT =  1.07639104e-3; /* cd sr / cm^2 */\ngsl_const.CGS.CURIE =  3.7e10; /* 1 / s */\ngsl_const.CGS.ROENTGEN =  2.58e-7; /* A s / g */\ngsl_const.CGS.RAD =  1e2; /* cm^2 / s^2 */\ngsl_const.CGS.SOLAR_MASS =  1.98892e33; /* g */\ngsl_const.CGS.BOHR_RADIUS =  5.291772083e-9; /* cm */\ngsl_const.CGS.NEWTON =  1e5; /* cm g / s^2 */\ngsl_const.CGS.DYNE =  1e0; /* cm g / s^2 */\ngsl_const.CGS.JOULE =  1e7; /* g cm^2 / s^2 */\ngsl_const.CGS.ERG =  1e0; /* g cm^2 / s^2 */\ngsl_const.CGS.STEFAN_BOLTZMANN_CONSTANT =  5.67040047374e-5; /* g / K^4 s^3 */\ngsl_const.CGS.THOMSON_CROSS_SECTION =  6.65245893699e-25; /* cm^2 */\n\ngsl_const.CGSM = {};\ngsl_const.CGSM.SPEED_OF_LIGHT = 2.99792458e10 /* cm / s */\ngsl_const.CGSM.GRAVITATIONAL_CONSTANT = 6.673e-8 /* cm^3 / g s^2 */\ngsl_const.CGSM.PLANCKS_CONSTANT_H = 6.62606896e-27 /* g cm^2 / s */\ngsl_const.CGSM.PLANCKS_CONSTANT_HBAR = 1.05457162825e-27 /* g cm^2 / s */\ngsl_const.CGSM.ASTRONOMICAL_UNIT = 1.49597870691e13 /* cm */\ngsl_const.CGSM.LIGHT_YEAR = 9.46053620707e17 /* cm */\ngsl_const.CGSM.PARSEC = 3.08567758135e18 /* cm */\ngsl_const.CGSM.GRAV_ACCEL = 9.80665e2 /* cm / s^2 */\ngsl_const.CGSM.ELECTRON_VOLT = 1.602176487e-12 /* g cm^2 / s^2 */\ngsl_const.CGSM.MASS_ELECTRON = 9.10938188e-28 /* g */\ngsl_const.CGSM.MASS_MUON = 1.88353109e-25 /* g */\ngsl_const.CGSM.MASS_PROTON = 1.67262158e-24 /* g */\ngsl_const.CGSM.MASS_NEUTRON = 1.67492716e-24 /* g */\ngsl_const.CGSM.RYDBERG = 2.17987196968e-11 /* g cm^2 / s^2 */\ngsl_const.CGSM.BOLTZMANN = 1.3806504e-16 /* g cm^2 / K s^2 */\ngsl_const.CGSM.MOLAR_GAS = 8.314472e7 /* g cm^2 / K mol s^2 */\ngsl_const.CGSM.STANDARD_GAS_VOLUME = 2.2710981e4 /* cm^3 / mol */\ngsl_const.CGSM.MINUTE = 6e1 /* s */\ngsl_const.CGSM.HOUR = 3.6e3 /* s */\ngsl_const.CGSM.DAY = 8.64e4 /* s */\ngsl_const.CGSM.WEEK = 6.048e5 /* s */\ngsl_const.CGSM.INCH = 2.54e0 /* cm */\ngsl_const.CGSM.FOOT = 3.048e1 /* cm */\ngsl_const.CGSM.YARD = 9.144e1 /* cm */\ngsl_const.CGSM.MILE = 1.609344e5 /* cm */\ngsl_const.CGSM.NAUTICAL_MILE = 1.852e5 /* cm */\ngsl_const.CGSM.FATHOM = 1.8288e2 /* cm */\ngsl_const.CGSM.MIL = 2.54e-3 /* cm */\ngsl_const.CGSM.POINT = 3.52777777778e-2 /* cm */\ngsl_const.CGSM.TEXPOINT = 3.51459803515e-2 /* cm */\ngsl_const.CGSM.MICRON = 1e-4 /* cm */\ngsl_const.CGSM.ANGSTROM = 1e-8 /* cm */\ngsl_const.CGSM.HECTARE = 1e8 /* cm^2 */\ngsl_const.CGSM.ACRE = 4.04685642241e7 /* cm^2 */\ngsl_const.CGSM.BARN = 1e-24 /* cm^2 */\ngsl_const.CGSM.LITER = 1e3 /* cm^3 */\ngsl_const.CGSM.US_GALLON = 3.78541178402e3 /* cm^3 */\ngsl_const.CGSM.QUART = 9.46352946004e2 /* cm^3 */\ngsl_const.CGSM.PINT = 4.73176473002e2 /* cm^3 */\ngsl_const.CGSM.CUP = 2.36588236501e2 /* cm^3 */\ngsl_const.CGSM.FLUID_OUNCE = 2.95735295626e1 /* cm^3 */\ngsl_const.CGSM.TABLESPOON = 1.47867647813e1 /* cm^3 */\ngsl_const.CGSM.TEASPOON = 4.92892159375e0 /* cm^3 */\ngsl_const.CGSM.CANADIAN_GALLON = 4.54609e3 /* cm^3 */\ngsl_const.CGSM.UK_GALLON = 4.546092e3 /* cm^3 */\ngsl_const.CGSM.MILES_PER_HOUR = 4.4704e1 /* cm / s */\ngsl_const.CGSM.KILOMETERS_PER_HOUR = 2.77777777778e1 /* cm / s */\ngsl_const.CGSM.KNOT = 5.14444444444e1 /* cm / s */\ngsl_const.CGSM.POUND_MASS = 4.5359237e2 /* g */\ngsl_const.CGSM.OUNCE_MASS = 2.8349523125e1 /* g */\ngsl_const.CGSM.TON = 9.0718474e5 /* g */\ngsl_const.CGSM.METRIC_TON = 1e6 /* g */\ngsl_const.CGSM.UK_TON = 1.0160469088e6 /* g */\ngsl_const.CGSM.TROY_OUNCE = 3.1103475e1 /* g */\ngsl_const.CGSM.CARAT = 2e-1 /* g */\ngsl_const.CGSM.UNIFIED_ATOMIC_MASS = 1.660538782e-24 /* g */\ngsl_const.CGSM.GRAM_FORCE = 9.80665e2 /* cm g / s^2 */\ngsl_const.CGSM.POUND_FORCE = 4.44822161526e5 /* cm g / s^2 */\ngsl_const.CGSM.KILOPOUND_FORCE = 4.44822161526e8 /* cm g / s^2 */\ngsl_const.CGSM.POUNDAL = 1.38255e4 /* cm g / s^2 */\ngsl_const.CGSM.CALORIE = 4.1868e7 /* g cm^2 / s^2 */\ngsl_const.CGSM.BTU = 1.05505585262e10; /* g cm^2 / s^2 */\ngsl_const.CGSM.THERM = 1.05506e15 /* g cm^2 / s^2 */\ngsl_const.CGSM.HORSEPOWER = 7.457e9 /* g cm^2 / s^3 */\ngsl_const.CGSM.BAR = 1e6 /* g / cm s^2 */\ngsl_const.CGSM.STD_ATMOSPHERE = 1.01325e6 /* g / cm s^2 */\ngsl_const.CGSM.TORR = 1.33322368421e3 /* g / cm s^2 */\ngsl_const.CGSM.METER_OF_MERCURY = 1.33322368421e6 /* g / cm s^2 */\ngsl_const.CGSM.INCH_OF_MERCURY = 3.38638815789e4 /* g / cm s^2 */\ngsl_const.CGSM.INCH_OF_WATER = 2.490889e3 /* g / cm s^2 */\ngsl_const.CGSM.PSI = 6.89475729317e4 /* g / cm s^2 */\ngsl_const.CGSM.POISE = 1e0 /* g / cm s */\ngsl_const.CGSM.STOKES = 1e0 /* cm^2 / s */\ngsl_const.CGSM.STILB = 1e0 /* cd / cm^2 */\ngsl_const.CGSM.LUMEN = 1e0 /* cd sr */\ngsl_const.CGSM.LUX = 1e-4 /* cd sr / cm^2 */\ngsl_const.CGSM.PHOT = 1e0 /* cd sr / cm^2 */\ngsl_const.CGSM.FOOTCANDLE = 1.076e-3 /* cd sr / cm^2 */\ngsl_const.CGSM.LAMBERT = 1e0 /* cd sr / cm^2 */\ngsl_const.CGSM.FOOTLAMBERT = 1.07639104e-3 /* cd sr / cm^2 */\ngsl_const.CGSM.CURIE = 3.7e10; /* 1 / s */\ngsl_const.CGSM.ROENTGEN = 2.58e-8 /* abamp s / g */\ngsl_const.CGSM.RAD = 1e2 /* cm^2 / s^2 */\ngsl_const.CGSM.SOLAR_MASS = 1.98892e33 /* g */\ngsl_const.CGSM.BOHR_RADIUS = 5.291772083e-9 /* cm */\ngsl_const.CGSM.NEWTON = 1e5 /* cm g / s^2 */\ngsl_const.CGSM.DYNE = 1e0 /* cm g / s^2 */\ngsl_const.CGSM.JOULE = 1e7 /* g cm^2 / s^2 */\ngsl_const.CGSM.ERG = 1e0 /* g cm^2 / s^2 */\ngsl_const.CGSM.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-5 /* g / K^4 s^3 */\ngsl_const.CGSM.THOMSON_CROSS_SECTION = 6.65245893699e-25 /* cm^2 */\ngsl_const.CGSM.BOHR_MAGNETON = 9.27400899e-21 /* abamp cm^2 */\ngsl_const.CGSM.NUCLEAR_MAGNETON = 5.05078317e-24 /* abamp cm^2 */\ngsl_const.CGSM.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-21 /* abamp cm^2 */\ngsl_const.CGSM.PROTON_MAGNETIC_MOMENT = 1.410606633e-23 /* abamp cm^2 */\ngsl_const.CGSM.FARADAY = 9.64853429775e3 /* abamp s / mol */\ngsl_const.CGSM.ELECTRON_CHARGE = 1.602176487e-20 /* abamp s */\n\n\ngsl_const.MKS = {};\ngsl_const.MKS.SPEED_OF_LIGHT = 2.99792458e8 /* m / s */\ngsl_const.MKS.GRAVITATIONAL_CONSTANT = 6.673e-11 /* m^3 / kg s^2 */\ngsl_const.MKS.PLANCKS_CONSTANT_H = 6.62606896e-34 /* kg m^2 / s */\ngsl_const.MKS.PLANCKS_CONSTANT_HBAR = 1.05457162825e-34 /* kg m^2 / s */\ngsl_const.MKS.ASTRONOMICAL_UNIT = 1.49597870691e11 /* m */\ngsl_const.MKS.LIGHT_YEAR = 9.46053620707e15 /* m */\ngsl_const.MKS.PARSEC = 3.08567758135e16 /* m */\ngsl_const.MKS.GRAV_ACCEL = 9.80665e0 /* m / s^2 */\ngsl_const.MKS.ELECTRON_VOLT = 1.602176487e-19 /* kg m^2 / s^2 */\ngsl_const.MKS.MASS_ELECTRON = 9.10938188e-31 /* kg */\ngsl_const.MKS.MASS_MUON = 1.88353109e-28 /* kg */\ngsl_const.MKS.MASS_PROTON = 1.67262158e-27 /* kg */\ngsl_const.MKS.MASS_NEUTRON = 1.67492716e-27 /* kg */\ngsl_const.MKS.RYDBERG = 2.17987196968e-18 /* kg m^2 / s^2 */\ngsl_const.MKS.BOLTZMANN = 1.3806504e-23 /* kg m^2 / K s^2 */\ngsl_const.MKS.MOLAR_GAS = 8.314472e0 /* kg m^2 / K mol s^2 */\ngsl_const.MKS.STANDARD_GAS_VOLUME = 2.2710981e-2 /* m^3 / mol */\ngsl_const.MKS.MINUTE = 6e1 /* s */\ngsl_const.MKS.HOUR = 3.6e3 /* s */\ngsl_const.MKS.DAY = 8.64e4 /* s */\ngsl_const.MKS.WEEK = 6.048e5 /* s */\ngsl_const.MKS.INCH = 2.54e-2 /* m */\ngsl_const.MKS.FOOT = 3.048e-1 /* m */\ngsl_const.MKS.YARD = 9.144e-1 /* m */\ngsl_const.MKS.MILE = 1.609344e3 /* m */\ngsl_const.MKS.NAUTICAL_MILE = 1.852e3 /* m */\ngsl_const.MKS.FATHOM = 1.8288e0 /* m */\ngsl_const.MKS.MIL = 2.54e-5 /* m */\ngsl_const.MKS.POINT = 3.52777777778e-4 /* m */\ngsl_const.MKS.TEXPOINT = 3.51459803515e-4 /* m */\ngsl_const.MKS.MICRON = 1e-6 /* m */\ngsl_const.MKS.ANGSTROM = 1e-10 /* m */\ngsl_const.MKS.HECTARE = 1e4 /* m^2 */\ngsl_const.MKS.ACRE = 4.04685642241e3 /* m^2 */\ngsl_const.MKS.BARN = 1e-28 /* m^2 */\ngsl_const.MKS.LITER = 1e-3 /* m^3 */\ngsl_const.MKS.US_GALLON = 3.78541178402e-3 /* m^3 */\ngsl_const.MKS.QUART = 9.46352946004e-4 /* m^3 */\ngsl_const.MKS.PINT = 4.73176473002e-4 /* m^3 */\ngsl_const.MKS.CUP = 2.36588236501e-4 /* m^3 */\ngsl_const.MKS.FLUID_OUNCE = 2.95735295626e-5 /* m^3 */\ngsl_const.MKS.TABLESPOON = 1.47867647813e-5 /* m^3 */\ngsl_const.MKS.TEASPOON = 4.92892159375e-6 /* m^3 */\ngsl_const.MKS.CANADIAN_GALLON = 4.54609e-3 /* m^3 */\ngsl_const.MKS.UK_GALLON = 4.546092e-3 /* m^3 */\ngsl_const.MKS.MILES_PER_HOUR = 4.4704e-1 /* m / s */\ngsl_const.MKS.KILOMETERS_PER_HOUR = 2.77777777778e-1 /* m / s */\ngsl_const.MKS.KNOT = 5.14444444444e-1 /* m / s */\ngsl_const.MKS.POUND_MASS = 4.5359237e-1 /* kg */\ngsl_const.MKS.OUNCE_MASS = 2.8349523125e-2 /* kg */\ngsl_const.MKS.TON = 9.0718474e2 /* kg */\ngsl_const.MKS.METRIC_TON = 1e3 /* kg */\ngsl_const.MKS.UK_TON = 1.0160469088e3 /* kg */\ngsl_const.MKS.TROY_OUNCE = 3.1103475e-2 /* kg */\ngsl_const.MKS.CARAT = 2e-4 /* kg */\ngsl_const.MKS.UNIFIED_ATOMIC_MASS = 1.660538782e-27 /* kg */\ngsl_const.MKS.GRAM_FORCE = 9.80665e-3 /* kg m / s^2 */\ngsl_const.MKS.POUND_FORCE = 4.44822161526e0 /* kg m / s^2 */\ngsl_const.MKS.KILOPOUND_FORCE = 4.44822161526e3 /* kg m / s^2 */\ngsl_const.MKS.POUNDAL = 1.38255e-1 /* kg m / s^2 */\ngsl_const.MKS.CALORIE = 4.1868e0 /* kg m^2 / s^2 */\ngsl_const.MKS.BTU = 1.05505585262e3 /* kg m^2 / s^2 */\ngsl_const.MKS.THERM = 1.05506e8 /* kg m^2 / s^2 */\ngsl_const.MKS.HORSEPOWER = 7.457e2 /* kg m^2 / s^3 */\ngsl_const.MKS.BAR = 1e5 /* kg / m s^2 */\ngsl_const.MKS.STD_ATMOSPHERE = 1.01325e5 /* kg / m s^2 */\ngsl_const.MKS.TORR = 1.33322368421e2 /* kg / m s^2 */\ngsl_const.MKS.METER_OF_MERCURY = 1.33322368421e5 /* kg / m s^2 */\ngsl_const.MKS.INCH_OF_MERCURY = 3.38638815789e3 /* kg / m s^2 */\ngsl_const.MKS.INCH_OF_WATER = 2.490889e2 /* kg / m s^2 */\ngsl_const.MKS.PSI = 6.89475729317e3 /* kg / m s^2 */\ngsl_const.MKS.POISE = 1e-1 /* kg m^-1 s^-1 */\ngsl_const.MKS.STOKES = 1e-4 /* m^2 / s */\ngsl_const.MKS.STILB = 1e4 /* cd / m^2 */\ngsl_const.MKS.LUMEN = 1e0 /* cd sr */\ngsl_const.MKS.LUX = 1e0 /* cd sr / m^2 */\ngsl_const.MKS.PHOT = 1e4 /* cd sr / m^2 */\ngsl_const.MKS.FOOTCANDLE = 1.076e1 /* cd sr / m^2 */\ngsl_const.MKS.LAMBERT = 1e4 /* cd sr / m^2 */\ngsl_const.MKS.FOOTLAMBERT = 1.07639104e1 /* cd sr / m^2 */\ngsl_const.MKS.CURIE = 3.7e10 /* 1 / s */\ngsl_const.MKS.ROENTGEN = 2.58e-4 /* A s / kg */\ngsl_const.MKS.RAD = 1e-2 /* m^2 / s^2 */\ngsl_const.MKS.SOLAR_MASS = 1.98892e30 /* kg */\ngsl_const.MKS.BOHR_RADIUS = 5.291772083e-11 /* m */\ngsl_const.MKS.NEWTON = 1e0 /* kg m / s^2 */\ngsl_const.MKS.DYNE = 1e-5 /* kg m / s^2 */\ngsl_const.MKS.JOULE = 1e0 /* kg m^2 / s^2 */\ngsl_const.MKS.ERG = 1e-7 /* kg m^2 / s^2 */\ngsl_const.MKS.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8 /* kg / K^4 s^3 */\ngsl_const.MKS.THOMSON_CROSS_SECTION = 6.65245893699e-29 /* m^2 */\ngsl_const.MKS.BOHR_MAGNETON = 9.27400899e-24 /* A m^2 */\ngsl_const.MKS.NUCLEAR_MAGNETON = 5.05078317e-27 /* A m^2 */\ngsl_const.MKS.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24 /* A m^2 */\ngsl_const.MKS.PROTON_MAGNETIC_MOMENT = 1.410606633e-26 /* A m^2 */\ngsl_const.MKS.FARADAY = 9.64853429775e4 /* A s / mol */\ngsl_const.MKS.ELECTRON_CHARGE = 1.602176487e-19 /* A s */\ngsl_const.MKS.VACUUM_PERMITTIVITY = 8.854187817e-12 /* A^2 s^4 / kg m^3 */\ngsl_const.MKS.VACUUM_PERMEABILITY = 1.25663706144e-6 /* kg m / A^2 s^2 */\ngsl_const.MKS.DEBYE = 3.33564095198e-30 /* A s^2 / m^2 */\ngsl_const.MKS.GAUSS = 1e-4 /* kg / A s^2 */\n\ngsl_const.MKSA = {};\ngsl_const.MKSA.SPEED_OF_LIGHT = 2.99792458e8 /* m / s */\ngsl_const.MKSA.GRAVITATIONAL_CONSTANT = 6.673e-11 /* m^3 / kg s^2 */\ngsl_const.MKSA.PLANCKS_CONSTANT_H = 6.62606896e-34 /* kg m^2 / s */\ngsl_const.MKSA.PLANCKS_CONSTANT_HBAR = 1.05457162825e-34 /* kg m^2 / s */\ngsl_const.MKSA.ASTRONOMICAL_UNIT = 1.49597870691e11 /* m */\ngsl_const.MKSA.LIGHT_YEAR = 9.46053620707e15 /* m */\ngsl_const.MKSA.PARSEC = 3.08567758135e16 /* m */\ngsl_const.MKSA.GRAV_ACCEL = 9.80665e0 /* m / s^2 */\ngsl_const.MKSA.ELECTRON_VOLT = 1.602176487e-19 /* kg m^2 / s^2 */\ngsl_const.MKSA.MASS_ELECTRON = 9.10938188e-31 /* kg */\ngsl_const.MKSA.MASS_MUON = 1.88353109e-28 /* kg */\ngsl_const.MKSA.MASS_PROTON = 1.67262158e-27 /* kg */\ngsl_const.MKSA.MASS_NEUTRON = 1.67492716e-27 /* kg */\ngsl_const.MKSA.RYDBERG = 2.17987196968e-18 /* kg m^2 / s^2 */\ngsl_const.MKSA.BOLTZMANN = 1.3806504e-23 /* kg m^2 / K s^2 */\ngsl_const.MKSA.MOLAR_GAS = 8.314472e0 /* kg m^2 / K mol s^2 */\ngsl_const.MKSA.STANDARD_GAS_VOLUME = 2.2710981e-2 /* m^3 / mol */\ngsl_const.MKSA.MINUTE = 6e1 /* s */\ngsl_const.MKSA.HOUR = 3.6e3 /* s */\ngsl_const.MKSA.DAY = 8.64e4 /* s */\ngsl_const.MKSA.WEEK = 6.048e5 /* s */\ngsl_const.MKSA.INCH = 2.54e-2 /* m */\ngsl_const.MKSA.FOOT = 3.048e-1 /* m */\ngsl_const.MKSA.YARD = 9.144e-1 /* m */\ngsl_const.MKSA.MILE = 1.609344e3 /* m */\ngsl_const.MKSA.NAUTICAL_MILE = 1.852e3 /* m */\ngsl_const.MKSA.FATHOM = 1.8288e0 /* m */\ngsl_const.MKSA.MIL = 2.54e-5 /* m */\ngsl_const.MKSA.POINT = 3.52777777778e-4 /* m */\ngsl_const.MKSA.TEXPOINT = 3.51459803515e-4 /* m */\ngsl_const.MKSA.MICRON = 1e-6 /* m */\ngsl_const.MKSA.ANGSTROM = 1e-10 /* m */\ngsl_const.MKSA.HECTARE = 1e4 /* m^2 */\ngsl_const.MKSA.ACRE = 4.04685642241e3 /* m^2 */\ngsl_const.MKSA.BARN = 1e-28 /* m^2 */\ngsl_const.MKSA.LITER = 1e-3 /* m^3 */\ngsl_const.MKSA.US_GALLON = 3.78541178402e-3 /* m^3 */\ngsl_const.MKSA.QUART = 9.46352946004e-4 /* m^3 */\ngsl_const.MKSA.PINT = 4.73176473002e-4 /* m^3 */\ngsl_const.MKSA.CUP = 2.36588236501e-4 /* m^3 */\ngsl_const.MKSA.FLUID_OUNCE = 2.95735295626e-5 /* m^3 */\ngsl_const.MKSA.TABLESPOON = 1.47867647813e-5 /* m^3 */\ngsl_const.MKSA.TEASPOON = 4.92892159375e-6 /* m^3 */\ngsl_const.MKSA.CANADIAN_GALLON = 4.54609e-3 /* m^3 */\ngsl_const.MKSA.UK_GALLON = 4.546092e-3 /* m^3 */\ngsl_const.MKSA.MILES_PER_HOUR = 4.4704e-1 /* m / s */\ngsl_const.MKSA.KILOMETERS_PER_HOUR = 2.77777777778e-1 /* m / s */\ngsl_const.MKSA.KNOT = 5.14444444444e-1 /* m / s */\ngsl_const.MKSA.POUND_MASS = 4.5359237e-1 /* kg */\ngsl_const.MKSA.OUNCE_MASS = 2.8349523125e-2 /* kg */\ngsl_const.MKSA.TON = 9.0718474e2 /* kg */\ngsl_const.MKSA.METRIC_TON = 1e3 /* kg */\ngsl_const.MKSA.UK_TON = 1.0160469088e3 /* kg */\ngsl_const.MKSA.TROY_OUNCE = 3.1103475e-2 /* kg */\ngsl_const.MKSA.CARAT = 2e-4 /* kg */\ngsl_const.MKSA.UNIFIED_ATOMIC_MASS = 1.660538782e-27 /* kg */\ngsl_const.MKSA.GRAM_FORCE = 9.80665e-3 /* kg m / s^2 */\ngsl_const.MKSA.POUND_FORCE = 4.44822161526e0 /* kg m / s^2 */\ngsl_const.MKSA.KILOPOUND_FORCE = 4.44822161526e3 /* kg m / s^2 */\ngsl_const.MKSA.POUNDAL = 1.38255e-1 /* kg m / s^2 */\ngsl_const.MKSA.CALORIE = 4.1868e0 /* kg m^2 / s^2 */\ngsl_const.MKSA.BTU = 1.05505585262e3 /* kg m^2 / s^2 */\ngsl_const.MKSA.THERM = 1.05506e8 /* kg m^2 / s^2 */\ngsl_const.MKSA.HORSEPOWER = 7.457e2 /* kg m^2 / s^3 */\ngsl_const.MKSA.BAR = 1e5 /* kg / m s^2 */\ngsl_const.MKSA.STD_ATMOSPHERE = 1.01325e5 /* kg / m s^2 */\ngsl_const.MKSA.TORR = 1.33322368421e2 /* kg / m s^2 */\ngsl_const.MKSA.METER_OF_MERCURY = 1.33322368421e5 /* kg / m s^2 */\ngsl_const.MKSA.INCH_OF_MERCURY = 3.38638815789e3 /* kg / m s^2 */\ngsl_const.MKSA.INCH_OF_WATER = 2.490889e2 /* kg / m s^2 */\ngsl_const.MKSA.PSI = 6.89475729317e3 /* kg / m s^2 */\ngsl_const.MKSA.POISE = 1e-1 /* kg m^-1 s^-1 */\ngsl_const.MKSA.STOKES = 1e-4 /* m^2 / s */\ngsl_const.MKSA.STILB = 1e4 /* cd / m^2 */\ngsl_const.MKSA.LUMEN = 1e0 /* cd sr */\ngsl_const.MKSA.LUX = 1e0 /* cd sr / m^2 */\ngsl_const.MKSA.PHOT = 1e4 /* cd sr / m^2 */\ngsl_const.MKSA.FOOTCANDLE = 1.076e1 /* cd sr / m^2 */\ngsl_const.MKSA.LAMBERT = 1e4 /* cd sr / m^2 */\ngsl_const.MKSA.FOOTLAMBERT = 1.07639104e1 /* cd sr / m^2 */\ngsl_const.MKSA.CURIE = 3.7e10 /* 1 / s */\ngsl_const.MKSA.ROENTGEN = 2.58e-4 /* A s / kg */\ngsl_const.MKSA.RAD = 1e-2 /* m^2 / s^2 */\ngsl_const.MKSA.SOLAR_MASS = 1.98892e30 /* kg */\ngsl_const.MKSA.BOHR_RADIUS = 5.291772083e-11 /* m */\ngsl_const.MKSA.NEWTON = 1e0 /* kg m / s^2 */\ngsl_const.MKSA.DYNE = 1e-5 /* kg m / s^2 */\ngsl_const.MKSA.JOULE = 1e0 /* kg m^2 / s^2 */\ngsl_const.MKSA.ERG = 1e-7 /* kg m^2 / s^2 */\ngsl_const.MKSA.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8 /* kg / K^4 s^3 */\ngsl_const.MKSA.THOMSON_CROSS_SECTION = 6.65245893699e-29 /* m^2 */\ngsl_const.MKSA.BOHR_MAGNETON = 9.27400899e-24 /* A m^2 */\ngsl_const.MKSA.NUCLEAR_MAGNETON = 5.05078317e-27 /* A m^2 */\ngsl_const.MKSA.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24 /* A m^2 */\ngsl_const.MKSA.PROTON_MAGNETIC_MOMENT = 1.410606633e-26 /* A m^2 */\ngsl_const.MKSA.FARADAY = 9.64853429775e4 /* A s / mol */\ngsl_const.MKSA.ELECTRON_CHARGE = 1.602176487e-19 /* A s */\ngsl_const.MKSA.VACUUM_PERMITTIVITY = 8.854187817e-12 /* A^2 s^4 / kg m^3 */\ngsl_const.MKSA.VACUUM_PERMEABILITY = 1.25663706144e-6 /* kg m / A^2 s^2 */\ngsl_const.MKSA.DEBYE = 3.33564095198e-30 /* A s^2 / m^2 */\ngsl_const.MKSA.GAUSS = 1e-4 /* kg / A s^2 */\n\ngsl_const.NUM = {};\ngsl_const.NUM.FINE_STRUCTURE = 7.297352533e-3 /* 1 */\ngsl_const.NUM.AVOGADRO = 6.02214199e23 /* 1 / mol */\ngsl_const.NUM.YOTTA = 1e24 /* 1 */\ngsl_const.NUM.ZETTA = 1e21 /* 1 */\ngsl_const.NUM.EXA = 1e18 /* 1 */\ngsl_const.NUM.PETA = 1e15 /* 1 */\ngsl_const.NUM.TERA = 1e12 /* 1 */\ngsl_const.NUM.GIGA = 1e9 /* 1 */\ngsl_const.NUM.MEGA = 1e6 /* 1 */\ngsl_const.NUM.KILO = 1e3 /* 1 */\ngsl_const.NUM.MILLI = 1e-3 /* 1 */\ngsl_const.NUM.MICRO = 1e-6 /* 1 */\ngsl_const.NUM.NANO = 1e-9 /* 1 */\ngsl_const.NUM.PICO = 1e-12 /* 1 */\ngsl_const.NUM.FEMTO = 1e-15 /* 1 */\ngsl_const.NUM.ATTO = 1e-18 /* 1 */\ngsl_const.NUM.ZEPTO = 1e-21 /* 1 */\ngsl_const.NUM.YOCTO = 1e-24 /* 1 */\n\nmodule.exports = gsl_const;\n","const { max } = Math;\n\n/**\n * How many vertexes for a given form to cover each entry's steps of state:\n * - If 2 states or form are given, gives a setup of pairs for a line segment\n *   between each entry's steps of state using `gl.LINES`.\n * - If fewer than 2 states or form are given, gives a setup for a point at each\n *   entry's steps of state using `gl.POINTS`.\n *\n * Possibly useful for other forms too.\n *\n * Corresponds to the indexing logic in the `indexForms` `GLSL` function.\n *\n * @module\n * @category JS\n *\n * @see {@link index-forms/index-states.glsl!}\n * @see {@link index-forms/index-entries.glsl!}\n * @see [`gl.LINES`](https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html)\n *\n * @param {number} [states=1] How many steps of state each entry has.\n * @param {number} [form=2] How many steps of state each form covers.\n * @param {number} [count=1] How many entries, if any; result to be multiplied\n *   externally if not given.\n *\n * @returns {number} The number of vertexes needed for the given `form` to cover\n *   all steps of `states`; over all `count` if given, to be multiplied\n *   externally if not given.\n *\n * @remarks [[include:src/index-forms/readme.md]]\n */\nexport const indexForms = (states = 1, form = 2, count = 1) =>\n  max(1, (states-form)+1)*form*count;\n\nexport default indexForms;\n","/** Grid fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\ngrid_useSamples\n\n#ifdef grid_output_motionFull\n  grid_useReads_motionFull\n#endif\n#ifdef grid_output_motionBase\n  grid_useReads_motionBase\n#endif\n\n/** @todo `gl-gpgpu` should skip passes with no output; here for mass. */\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  #ifdef grid_splits\n    uniform sampler2D grid_states[grid_splits];\n  #else\n    uniform sampler2D grid_states;\n  #endif\n\n  uniform float grid_stepNow;\n#endif\n#if defined(grid_output_motionFull)\n  uniform vec4 grid_stateShape;\n#endif\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  uniform vec3 g;\n  uniform float dt;\n\n  #ifdef rescale_mass\n    uniform vec2 rescaleMass;\n  #else\n    const float rescaledMass = 1.0;\n  #endif\n  #ifdef rescale_motion\n    uniform vec2 rescaleMotion;\n  #else\n    const float rescaledMotion = 1.0;\n  #endif\n\n  #pragma glslify: gt = require(glsl-conditionals/when_gt);\n\n  #pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\n  #if defined(rescale_mass) || defined(rescale_motion)\n    #pragma glslify: exponent = require(../vector/exponent);\n  #endif\n#endif\n#if defined(grid_output_motionFull)\n  uniform vec4 boundsIn;\n  uniform float boundsHit;\n\n  #pragma glslify: lt = require(glsl-conditionals/when_lt);\n  #pragma glslify: ge = require(glsl-conditionals/when_ge);\n#endif\n\nvarying vec2 grid_uv;\n\nconst vec2 v0 = vec2(0);\n\n#if defined(grid_output_motionFull)\n  const float hitStop = 0.0;\n  const float hitBack = 1.0;\n  const float hitBounce = 2.0;\n#endif\n\nvoid main() {\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef readMass\n    #elif defined(grid_output_motionFull)\n      #define readMass grid_reads_motionFull_mass\n    #elif defined(grid_output_motionBase)\n      #define readMass grid_reads_motionBase_mass\n    #endif\n\n    grid_tapState(offsetUV(grid_uv, grid_stateShape.xy));\n    // grid_tapState(grid_uv);\n\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n\n    float mass = rescaledMass*grid_data[readMass].grid_channels_mass;\n    float on = gt(mass, 0.0);\n    float massScale = 1.0/mix(1.0, mass, on);\n  #endif\n\n  #ifdef grid_output_motionFull\n    vec2 motionFull = rescaledMotion*\n      grid_data[grid_reads_motionFull_motionFull].grid_channels_motionFull;\n\n    motionFull *= massScale;\n\n    /** External forces. */\n    motionFull += normalize(g.xy-grid_uv)*g.z*dt;\n\n    /** Boundaries. */\n\n    vec2 at = grid_uv*grid_stateShape.xy;\n\n    vec4 boundsTo = vec4(boundsIn.xy, boundsIn.zw+grid_stateShape.xy)-at.xyxy;\n\n    vec4 boundsOut = vec4(gt(boundsTo.xy, v0)*lt(motionFull, v0),\n      lt(boundsTo.zw, v0)*gt(motionFull, v0));\n\n    vec2 moveStop = v0;\n    vec2 moveBack = (boundsTo.xy*boundsOut.xy)+(boundsTo.zw*boundsOut.zw);\n    vec2 moveBounce = -motionFull;\n    float geStop = ge(boundsHit, hitStop);\n    float geBack = ge(boundsHit, hitBack);\n    float geBounce = ge(boundsHit, hitBounce);\n    vec2 moveHit = motionFull;\n\n    moveHit = mix(moveHit, moveStop, geStop);\n    moveHit = mix(moveHit, moveBack, geBack);\n    moveHit = mix(moveHit, moveBounce, geBounce);\n    motionFull = mix(motionFull, moveHit, boundsOut.xy+boundsOut.zw);\n\n    // grid_output_motionFull = (on*motionFull)/rescaledMotion;\n    grid_output_motionFull = motionFull/rescaledMotion;\n  #endif\n  #ifdef grid_output_motionBase\n    vec2 motionBase = rescaledMotion*\n      grid_data[grid_reads_motionBase_motionBase].grid_channels_motionBase;\n\n    // grid_output_motionBase = (on*motionBase*massScale)/rescaledMotion;\n    grid_output_motionBase = (motionBase*massScale)/rescaledMotion;\n  #endif\n}\n","/** Grid-to-points fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n#pragma glslify: Kernel2 = require(../kernel/kernel-2);\n#pragma glslify: UP2 = require(../matrix/up-2);\n#pragma glslify: SVD2 = require(../matrix/svd-2);\n\npoints_useSamples\ngrid_useSamples\n\n#ifdef points_output_position\n  points_useReads_position\n#endif\n#ifdef points_output_motion\n  points_useReads_motion\n#endif\n#ifdef points_output_affine\n  points_useReads_affine\n#endif\n#ifdef points_output_deform\n  points_useReads_deform\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  grid_useReads_mass\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine) || defined(points_output_deform)\n  #ifdef points_splits\n    uniform sampler2D points_states[points_splits];\n  #else\n    uniform sampler2D points_states;\n  #endif\n\n  uniform float points_stepNow;\n  uniform vec4 points_stateShape;\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  #ifdef grid_splits\n    uniform sampler2D grid_states[grid_splits];\n  #else\n    uniform sampler2D grid_states;\n  #endif\n\n  uniform float grid_stepNow;\n  uniform vec4 grid_stateShape;\n#endif\n\n#if defined(points_output_mass)\n  /** @todo Move to looking up material types? */\n  uniform float mass;\n#endif\n#if defined(points_output_stress)\n  /** @todo Move to looking up material types? */\n  uniform float volume;\n#endif\n#if defined(points_output_position) || defined(points_output_motion)\n  /** Volume change threshold comparison. */\n  uniform vec2 volumeSplit;\n  /** ASFLIP motion adjustment. */\n  uniform float motionAdjust;\n  /** ASFLIP position adjustment range. */\n  uniform vec2 positionAdjusts;\n#endif\n#if defined(points_output_deform) || defined(points_output_stress)\n  /**\n  * Mechanics parameters.\n  *\n  * @todo Move to individual particles looking up material types?\n  */\n\n  /** Bulk modulus. */\n  uniform float bulkMod;\n  /** Shear modulus. */\n  uniform float shearMod;\n#endif\n#if defined(points_output_deform)\n  /**\n  * Plasticity parameters.\n  *\n  * @todo Move to individual particles looking up material types?\n  */\n  uniform float materialFriction;\n#endif\n#if defined(points_output_position)\n  uniform float boundsClamp;\n#endif\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine) || defined(points_output_deform) || \\\n    defined(points_output_stress)\n  uniform float spawnOnAny;\n  uniform float spawnOnOut;\n  uniform float spawnOnSlow;\n  uniform float spawnOnCentre;\n#endif\n#if defined(points_output_motion)\n  uniform vec2 wander;\n#endif\n\nuniform float dt;\n\nuniform vec4 bounds;\nuniform float chaos;\n\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n#ifdef rescale_position\n  uniform vec2 rescalePosition;\n#else\n  const float rescaledPosition = 1.0;\n#endif\n#ifdef rescale_motion\n  uniform vec2 rescaleMotion;\n#else\n  const float rescaledMotion = 1.0;\n#endif\n#ifdef rescale_affine\n  uniform vec2 rescaleAffine;\n#else\n  const float rescaledAffine = 1.0;\n#endif\n#ifdef rescale_deform\n  uniform vec2 rescaleDeform;\n#else\n  const float rescaledDeform = 1.0;\n#endif\n#ifdef rescale_stress\n  uniform vec2 rescaleStress;\n#else\n  const float rescaledStress = 1.0;\n#endif\n\nvarying vec2 points_uv;\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\nconst mat2 m0 = mat2(0);\n\n#pragma glslify: lt = require(glsl-conditionals/when_lt);\n#pragma glslify: le = require(glsl-conditionals/when_le);\n#pragma glslify: gt = require(glsl-conditionals/when_gt);\n#pragma glslify: ge = require(glsl-conditionals/when_ge);\n#pragma glslify: tau = require(glsl-constants/TAU);\n#pragma glslify: map = require(glsl-map);\n#pragma glslify: det = require(glsl-determinant);\n#pragma glslify: transpose = require(glsl-transpose);\n\n#pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\n#pragma glslify: trace = require(../matrix/trace);\n#pragma glslify: outerProduct = require(../vector/outer-product);\n#pragma glslify: area = require(../vector/area);\n\n#if defined(rescale_mass) || defined(rescale_position) || \\\n    defined(rescale_motion) || defined(rescale_affine) || \\\n    defined(rescale_deform) || defined(rescale_stress)\n  #pragma glslify: exponent = require(../vector/exponent);\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  #pragma glslify: toKernel = require(../kernel/to-kernel);\n  #pragma glslify: toKernelOffset = require(../kernel/to-offset);\n  #pragma glslify: toKernelDistance = require(../kernel/to-distance);\n#endif\n#if defined(points_output_deform) || defined(points_output_stress)\n  #pragma glslify: toSVD = require(../matrix/to-svd-2);\n#endif\n#if defined(points_output_motion)\n  #pragma glslify: onSphere = require(../on-sphere);\n#endif\n#if defined(points_output_deform)\n  #pragma glslify: projectDruckerPrager = require(../dynamic/drucker-prager);\n#endif\n#if defined(points_output_stress)\n  #pragma glslify: neoHookeanElastic = require(../dynamic/neo-hookean-elastic);\n#endif\n\nvoid main() {\n  #ifdef pReadPosition\n  #elif defined(points_output_position)\n    #define pReadPosition points_reads_position_position\n  #elif defined(points_output_motion)\n    #define pReadPosition points_reads_motion_position\n  #elif defined(points_output_affine)\n    #define pReadPosition points_reads_affine_position\n  #endif\n\n  #ifdef pReadMotion\n  #elif defined(points_output_position)\n    #define pReadMotion points_reads_position_motion\n  #elif defined(points_output_motion)\n    #define pReadMotion points_reads_motion_motion\n  #endif\n\n  #ifdef pReadMass\n  #elif defined(points_output_position)\n    #define pReadMass points_reads_position_mass\n  #endif\n\n  #ifdef pReadDeform\n  #elif defined(points_output_deform)\n    #define pReadDeform points_reads_deform_deform\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine) || defined(points_output_deform)\n    points_tapState(offsetUV(points_uv, points_stateShape.xy));\n    // points_tapState(points_uv);\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine)\n    #ifdef rescale_position\n      float rescaledPosition = exponent(rescalePosition);\n    #endif\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n\n    vec2 pPosition = rescaledPosition*\n      points_data[pReadPosition].points_channels_position;\n\n    /** Read grid material properties on 3 nodes in each axis. */\n    vec2 gMotionFull = v0;\n    vec2 gMotionBase = v0;\n    mat2 gAffine = m0;\n    /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\n    vec2 cellAt = map(pPosition, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\n\n    Kernel2 kernel = toKernel(cellAt);\n\n    for(int gx = 0; gx < kernelSize; ++gx) {\n      for(int gy = 0; gy < kernelSize; ++gy) {\n        vec2 offset = toKernelOffset(vec2(gx, gy));\n        /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\n        vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\n\n        grid_tapState(offsetUV(st, grid_stateShape.xy));\n        // grid_tapState(st);\n\n        vec2 cMotionFull = rescaledMotion*\n          grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n\n        vec2 cMotionBase = rescaledMotion*\n          grid_data[grid_reads_mass_motionBase].grid_channels_motionBase;\n\n        vec2 wmf = weight*cMotionFull;\n        vec2 wmb = weight*cMotionBase;\n\n        gMotionFull += wmf;\n        gMotionBase += wmb;\n\n        /** @todo Fix scaling, in both steps or one, differs to other way. */\n        // vec2 cellDist = toKernelDistance(offset, kernel.base, cellAt);\n        vec2 cellDist =\n          toKernelDistance(offset, kernel.base, cellAt)*grid_stateShape.xy;\n\n        // gAffine += 4.0*outerProduct(grid_stateShape.xy*wmf, cellDist);\n        // gAffine += 4.0*outerProduct(wmf, grid_stateShape.xy*cellDist);\n        // gAffine += 4.0*outerProduct(wmf, cellDist);\n        gAffine += 4.0*weight*outerProduct(cMotionFull, cellDist);\n      }\n    }\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion)\n    /**\n    * Mix grid and point velocities for ASFLIP, according to whether the\n    * material is separating.\n    * Mix full-grid-motion with particle-motion minus base-grid-motion - same\n    * as full-grid-motion but without stress or other effects applied, leaving\n    * only those effects when subtracted.\n    *\n    * @see [The ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\n    * @see [Taichi PyASFLIP implementation mixing old nodal motion](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L410-L415)\n    */\n    vec2 pMotion = rescaledMotion*\n      points_data[pReadMotion].points_channels_motion;\n\n    vec2 motionSplit = motionAdjust*(pMotion-gMotionBase);\n  #endif\n\n  #if defined(points_output_motion)\n    vec2 motionTo = gMotionFull+motionSplit;\n\n    // Avoid slow spots, wander force.\n\n    float wanderOn = gt(wander.x, 0.0);\n    float wanderScale = wanderOn/mix(1.0, wander.x, wanderOn);\n    float wanderSlow = 1.0-clamp(dot(motionTo, motionTo)*wanderScale, 0.0, 1.0);\n\n    motionTo += wanderOn*wanderSlow*\n      (onSphere((points_uv.x*chaos*237.378)+(points_uv.y*chaos*348.13)*tau)*wander.y);\n  #endif\n\n  #if defined(points_output_affine)\n    #ifdef rescale_affine\n      float rescaledAffine = exponent(rescaleAffine);\n    #endif\n\n    mat2 affineTo = gAffine;\n  #endif\n\n  #if defined(points_output_deform)\n    /**\n     * @todo Deformation and stress should ideally be calculated at the start of\n     *   the time-step not the end. Unsure if it matters much in practice, but\n     *   the output is used to calculate the position (deformation calculates\n     *   the volume which affects ASFLIP positional adjustment), it may be\n     *   better to move the deformation update to a separate step at the start\n     *   of each time-step.\n     *\n     * @see [Taichi PyASFLIP DruckerPrager plasticity, Neo-Hookean Elasticity](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L324-L336)\n     */\n\n    #ifdef rescale_deform\n      float rescaledDeform = exponent(rescaleDeform);\n    #endif\n\n    mat2 pDeform = rescaledDeform*\n      mat2(points_data[pReadDeform].points_channels_deform);\n\n    mat2 deformTo = (mat2(1)+(dt*affineTo))*pDeform;\n\n    SVD2 deformSVD = toSVD(deformTo);\n\n    // Plasticity flow.\n    deformSVD.sigma = projectDruckerPrager(deformSVD.sigma,\n      bulkMod, shearMod, materialFriction);\n\n    // Reconstruct elastic deformation gradient after plasticity flow.\n    deformTo = deformSVD.u*deformSVD.sigma*transpose(deformSVD.v);\n  #endif\n\n  #if defined(points_output_position)\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n\n    float pMass = rescaledMass*points_data[pReadMass].points_channels_mass;\n    /**\n     * @todo Try alternative volume ratio for materials where the stress depends\n     *   only on the volume ratio (e.g: weakly-compressible liquid), with large\n     *   timestep.\n     * @see [Equation 6 in ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\n     */\n    float volumeRatio = det(deformTo);\n    /** @todo Understand and test this material dilation term. */\n    float dilation = log(max(volumeSplit[0], volumeRatio))+(trace(affineTo)*dt);\n    float splitting = ge(dilation, volumeSplit[1]);\n    /**\n     * @todo Higher `positionAdjusts.y` causes grid artefacts; so in effect the\n     *   method can't extend from `AFLIP` to `ASFLIP` without this full\n     *   positional adjustment.\n     *   Explore if this is due to errors in the terms this relies on:\n     *   - `deform`: relied upon by `positionAdjust` directly here.\n     *   - `stress`: relied upon by `positionAdjust` via `motionFull` in P2G.\n     *   - `affine`: relied upon by `positionAdjust` via `motionFull` in P2G,\n     *     and relied upon by `deform` directly here.\n     */\n    float positionAdjust = mix(positionAdjusts.x, positionAdjusts.y, splitting);\n    vec2 positionSplit = positionAdjust*motionSplit;\n    vec2 positionTo = pPosition+((gMotionFull+positionSplit)*dt);\n\n    // Boundaries.\n    positionTo = mix(positionTo,\n      clamp(positionTo, bounds.xy, bounds.zw), boundsClamp);\n  #endif\n\n  /**\n   * @todo Seem to have tracked down the volume/collision loss\n   *   clumping/compression issues to the `stress`, try to solve it.\n   */\n  #if defined(points_output_stress)\n    #ifdef rescale_stress\n      float rescaledStress = exponent(rescaleStress);\n    #endif\n\n    /**\n     * @todo This stress update is in grid-to-points just to avoid another\n     *   `toSVD(pDeform)` in the points-to-grid step; reconsider this?\n     */\n    #ifndef points_output_deform\n      SVD2 deformSVD = toSVD(pDeform);\n      // SVD2 deformSVD = toSVD(deformTo);\n    #endif\n\n    /**\n     * `D**-1` term for APIC transfers.\n     *\n     * @see [APIC transfer `D**-1` in paragraph after Eqn. 176](file:///Users/eoghanokeeffe/Library/CloudStorage/GoogleDrive-keeffeoghan@gmail.com/My%20Drive/Read/Fluid%20Continuum%20Physics/Material%20Point%20Method/The%20Material%20Point%20Method%20for%20Simulating%20Continuum%20Materials%20(mpm.graphics).pdf)\n     *\n     * @todo `D**-1` seems to be for points-to-grid transfers, not for\n     *   grid-to-points; should this use the inverse in grid-to-points, or does\n     *   it not matter, or does an issue arise from moving this stress step from\n     *   points-to-grid to grid-to-points?\n     */\n    float dInv = 4.0*area(grid_stateShape.xy);\n    // float dInv = 1.0/(4.0*area(grid_stateShape.xy));\n    // float dInv = 1.0;\n\n    /**\n     * Neo-Hookean elasticity stress to Cauchy stress.\n     *\n     * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L100)\n     * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L334)\n     * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/2.%20MLS_MPM_NeoHookean_Multithreaded/MLS_MPM_NeoHookean_Multithreaded.cs#L262)\n     */\n    // mat2 stressTo = -dt*volume*volumeRatio*dInv*\n    mat2 stressTo = -dt*volume*dInv*\n      neoHookeanElastic(deformSVD.u, deformSVD.sigma, bulkMod, shearMod);\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine) || defined(points_output_deform) || \\\n      defined(points_output_stress)\n    vec2 spawnOut = spawnOnOut*\n      (lt(positionTo, bounds.xy)+lt(bounds.zw, positionTo));\n\n    // Avoid slow spots, respawn.\n    float spawnSlow = spawnOnSlow*lt(dot(motionTo, motionTo), spawnOnSlow);\n\n    // Avoid dead centre.\n    float spawnCentre = spawnOnCentre*\n      lt(dot(positionTo, positionTo), spawnOnCentre);\n\n    float spawn = spawnOnAny*\n      gt(spawnOut.x+spawnOut.y+spawnSlow+spawnCentre, 0.0);\n\n    float keep = 1.0-spawn;\n  #endif\n\n  #ifdef points_output_position\n    points_output_position = mix(positionTo,\n        map(points_uv, v0, v1, bounds.xy, bounds.zw),\n        max(spawn, le(pMass, 0.0)))/\n      rescaledPosition;\n  #endif\n  #ifdef points_output_motion\n    points_output_motion = (motionTo*keep)/rescaledMotion;\n  #endif\n  #ifdef points_output_mass\n    points_output_mass = (mass*keep)/rescaledMass;\n  #endif\n  #ifdef points_output_affine\n    points_output_affine =\n      mix(vec4(0), vec4(affineTo), keep)/rescaledAffine;\n      // mix(vec4(mat2(1)), vec4(affineTo), keep)/rescaledAffine;\n      // mix(vec4(1, 0, 0, 1), vec4(affineTo), keep)/rescaledAffine;\n  #endif\n  #ifdef points_output_deform\n    points_output_deform =\n      // mix(vec4(0), vec4(deformTo), keep)/rescaledDeform;\n      // mix(vec4(mat2(1)), vec4(deformTo), keep)/rescaledDeform;\n      mix(vec4(1, 0, 0, 1), vec4(deformTo), keep)/rescaledDeform;\n  #endif\n  #ifdef points_output_stress\n    points_output_stress =\n      mix(vec4(0), vec4(stressTo), keep)/rescaledStress;\n      // mix(vec4(mat2(1)), vec4(stressTo), keep)/rescaledStress;\n      // mix(vec4(1, 0, 0, 1), vec4(stressTo), keep)/rescaledStress;\n  #endif\n}\n","/** Points-to-grid vertex shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\nprecision highp float;\n\npoints_useSamples\npoints_useReads_position\n\n/** @todo Draw to all the needed grid passes. */\n\n#ifdef points_splits\n  uniform sampler2D points_states[points_splits];\n#else\n  uniform sampler2D points_states;\n#endif\n\nuniform float points_stepNow;\nuniform vec4 points_stateShape;\n\nuniform vec4 grid_stateShape;\n\nattribute vec2 vertex;\nattribute float index;\nattribute float splat;\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  /** Advection scheme parameters. */\n  uniform float stretch;\n  uniform float turn;\n#endif\n\nuniform vec4 bounds;\nuniform vec2 widths;\n\n#ifdef rescale_affine\n  uniform vec2 rescaleAffine;\n#else\n  const float rescaledAffine = 1.0;\n#endif\n\n#if test == test_p2g\n  uniform float loop;\n\n  varying vec4 color;\n#endif\n\nvarying vec2 cellAt;\nvarying vec2 cellBase;\nvarying mat3 cellWeights;\n\n#ifdef points_grid_quads\n  varying vec2 cellIndex;\n#else\n  varying vec3 point;\n#endif\n\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n    defined(grid_output_motionBase)\n  varying float mass;\n#endif\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  varying mat2 affine;\n  varying vec2 motion;\n#endif\n#if defined(grid_output_motionFull)\n  varying mat2 stress;\n#endif\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\n\n#pragma glslify: map = require(glsl-map);\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  #pragma glslify: transpose = require(glsl-transpose);\n#endif\n\n#pragma glslify: indexUV = require(@epok.tech/gl-gpgpu/src/lookup/index-uv);\n#pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\n#ifdef points_grid_quads\n  #pragma glslify: spreadUV = require(@epok.tech/gl-gpgpu/src/lookup/spread-uv);\n#endif\n\n#pragma glslify: toKernel = require(../kernel/to-kernel);\n#pragma glslify: toKernelOffset = require(../kernel/to-offset);\n\n#if defined(rescale_affine)\n  #pragma glslify: exponent = require(../vector/exponent);\n#endif\n\n/**\n * @todo Handle separate splats, by how many buffers can be drawn to.\n * @todo Separate processes according to active outputs.\n */\nvoid main() {\n  vec2 uv = indexUV(index, points_stateShape.xy);\n\n  uv = offsetUV(uv, points_stateShape.xy);\n  points_tapState(uv);\n\n  vec2 position = points_data[points_reads_position_position]\n    .points_channels_position;\n\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n      defined(grid_output_motionBase)\n    mass = points_data[points_reads_position_mass].points_channels_mass;\n  #endif\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef rescale_affine\n      float rescaledAffine = exponent(rescaleAffine);\n    #endif\n\n    vec2 advection = (stretch+vec2(turn, -turn))*0.5;\n\n    affine = rescaledAffine*\n      mat2(points_data[points_reads_position_affine].points_channels_affine);\n\n    affine = (mass*((affine*advection.x)+(transpose(affine)*advection.y)))/\n      rescaledAffine;\n\n    motion = points_data[points_reads_position_motion].points_channels_motion;\n  #endif\n  #if defined(grid_output_motionFull)\n    stress = mat2(points_data[points_reads_position_stress]\n      .points_channels_stress);\n  #endif\n\n  /** Map the position into the correct range with the proper offset. */\n  #if test != test_p2g\n    /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\n    cellAt = map(position, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\n  #else\n    // cellAt = mod((uv+(loop*9e-5))*grid_stateShape.xy, grid_stateShape.xy);\n    cellAt = uv*grid_stateShape.xy;\n    color = vec4(uv, 0.5, 1);\n  #endif\n\n  vec2 cellDiff;\n  /** Kernel weights and positions, to scale the values per-fragment. */\n  toKernel(cellAt, cellBase, cellDiff, cellWeights);\n  vec2 to = cellBase+toKernelOffset(vertex*float(kernelSize));\n\n  gl_Position = vec4(map(to, v0, grid_stateShape.xy, -v1, v1), 0, 1);\n\n  #ifdef points_grid_quads\n    /**\n     * Mask the weights by the distance from these indexes per-fragment.\n     * Account for the half-pixel offset at the fragment centre.\n     * @see [Pixel coordinates on WebGL Fundamentals](https://webglfundamentals.org/webgl/lessons/webgl-shadertoy.html#pixel-coords)\n     */\n    cellIndex = spreadUV(vertex, kernelSize-1);\n  #else\n    /**\n     * Convert vertex position to `gl_FragCoord` window-space.\n     * @see [SO](https://stackoverflow.com/a/7158573)\n     * @see [SO](https://stackoverflow.com/a/54237532/716898)\n     */\n    point = vec3(to, 0.5*(gl_PointSize = float(kernelSize)));\n  #endif\n}\n","/** Points-to-grid fragment shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n/** @todo Draw to all the needed grid passes. */\n\nuniform vec4 grid_stateShape;\n\n#ifdef rescale_motion\n  uniform vec2 rescaleMotion;\n#else\n  const float rescaledMotion = 1.0;\n#endif\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n#ifdef rescale_affine\n  uniform vec2 rescaleAffine;\n#else\n  const float rescaledAffine = 1.0;\n#endif\n#ifdef rescale_stress\n  uniform vec2 rescaleStress;\n#else\n  const float rescaledStress = 1.0;\n#endif\n\n#if test == test_p2g\n  varying vec4 color;\n#endif\n\nvarying vec2 cellAt;\nvarying vec2 cellBase;\nvarying mat3 cellWeights;\n\n#ifdef points_grid_quads\n  varying vec2 cellIndex;\n#else\n  varying vec3 point;\n#endif\n\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n    defined(grid_output_motionBase)\n  varying float mass;\n#endif\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  varying mat2 affine;\n  varying vec2 motion;\n#endif\n#if defined(grid_output_motionFull)\n  varying mat2 stress;\n#endif\n\nconst mat3 mask = mat3(vec3(0), vec3(1), vec3(2));\n\nconst vec2 eps = vec2(1e-1);\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\n\n#ifndef points_grid_quads\n  #pragma glslify: spreadUV = require(@epok.tech/gl-gpgpu/src/lookup/spread-uv);\n#endif\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  #pragma glslify: toKernelOffset = require(../kernel/to-offset);\n  #pragma glslify: toKernelDistance = require(../kernel/to-distance);\n#endif\n\n#pragma glslify: lt = require(glsl-conditionals/when_lt);\n#pragma glslify: map = require(glsl-map);\n\n#if defined(rescale_motion) || defined(rescale_mass) || \\\n  defined(rescale_affine) || defined(rescale_stress)\n  #pragma glslify: exponent = require(../vector/exponent);\n#endif\n\nvoid main() {\n  #if test == test_p2g\n    for(int t = 0; t < grid_textures; ++t) { gl_FragData[t].rgba = color; }\n\n    return;\n  #endif\n\n  #ifndef points_grid_quads\n    /**\n     * Convert vertex position to `gl_FragCoord` window-space.\n     * Mask the weights by the distance from these indexes per-fragment.\n     * Account for the half-pixel offset at the fragment centre.\n     * @see [Pixel coordinates on WebGL Fundamentals](https://webglfundamentals.org/webgl/lessons/webgl-shadertoy.html#pixel-coords)\n     * @see [SO](https://stackoverflow.com/a/7158573)\n     * @see [SO](https://stackoverflow.com/a/54237532/716898)\n     */\n    vec2 cellIndex = map(gl_FragCoord.xy-point.xy, -point.bb, point.bb, v0, v1);\n\n    cellIndex = spreadUV(cellIndex, kernelSize-1);\n  #endif\n\n  vec2 maskWeight = v0;\n\n  for(int i = 0; i < kernelSize; ++i) {\n    maskWeight += cellWeights[i].xy*lt(abs(cellIndex-mask[i].xy), eps);\n  }\n\n  float weight = maskWeight.x*maskWeight.y;\n\n  /** @todo Handle multiple passes properly. */\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n      defined(grid_output_motionBase)\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n\n    float massTo = rescaledMass*mass;\n  #endif\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n    #ifdef rescale_affine\n      float rescaledAffine = exponent(rescaleAffine);\n    #endif\n\n    vec2 motionTo = rescaledMotion*motion;\n    mat2 affineTo = rescaledAffine*affine;\n    vec2 massMotion = massTo*motionTo;\n    vec2 offset = toKernelOffset(cellIndex);\n\n    vec2 cellDist =\n      toKernelDistance(offset, cellBase, cellAt)/grid_stateShape.xy;\n  #endif\n  #if defined(grid_output_motionFull)\n    #ifdef rescale_stress\n      float rescaledStress = exponent(rescaleStress);\n    #endif\n\n    mat2 stressTo = rescaledStress*stress;\n  #endif\n\n  #ifdef grid_output_mass\n    grid_output_mass = (weight*massTo)/rescaledMass;\n  #endif\n  #ifdef grid_output_motionFull\n    grid_output_motionFull =\n      (weight*(massMotion+((stressTo+affineTo)*cellDist)))/rescaledMotion;\n  #endif\n  #ifdef grid_output_motionBase\n    grid_output_motionBase =\n      (weight*(massMotion+(affineTo*cellDist)))/rescaledMotion;\n  #endif\n}\n","/** Grid-to-screen fragment shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\nprecision highp float;\n\n#pragma glslify: Kernel2 = require(../kernel/kernel-2);\n\ngrid_useSamples\ngrid_useReads_mass\n\n#ifdef grid_splits\n  uniform sampler2D grid_states[grid_splits];\n#else\n  uniform sampler2D grid_states;\n#endif\n\nuniform float grid_stepNow;\nuniform vec4 grid_stateShape;\n\nuniform vec2 range;\nuniform vec2 curve[4];\nuniform vec4 colorLo;\nuniform vec4 colorHi;\n\n#ifdef angleHSLA\n  uniform vec4 angleHSLA;\n#endif\n\nuniform vec2 aspect;\n\n#ifdef rescale_motion\n  uniform vec2 rescaleMotion;\n#else\n  const float rescaledMotion = 1.0;\n#endif\n\nvarying vec2 grid_uv;\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\n\n#pragma glslify: lt = require(glsl-conditionals/when_lt);\n#pragma glslify: map = require(glsl-map);\n\n#ifdef angleHSLA\n  #pragma glslify: hsl = require(glsl-hsl2rgb);\n  #pragma glslify: pi = require(glsl-constants/PI);\n#endif\n\n#pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\n#pragma glslify: toKernel = require(../kernel/to-kernel);\n#pragma glslify: toKernelOffset = require(../kernel/to-offset);\n#pragma glslify: bezierXToY = require(../bezier/x-to-y, loopNewton=4);\n\n#if defined(rescale_motion)\n  #pragma glslify: exponent = require(../vector/exponent);\n#endif\n\nvoid main() {\n  #ifdef rescale_motion\n    float rescaledMotion = exponent(rescaleMotion);\n  #endif\n\n  vec2 motion;\n  /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\n  Kernel2 kernel = toKernel(grid_uv*grid_stateShape.xy);\n\n  for(int gx = 0; gx < kernelSize; ++gx) {\n    for(int gy = 0; gy < kernelSize; ++gy) {\n      vec2 offset = toKernelOffset(vec2(gx, gy));\n      /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\n      vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\n\n      st = offsetUV(st, grid_stateShape.xy);\n\n      #if test == test_p2g\n        grid_tapState(st);\n        // gl_FragColor.rgba = grid_data[0];\n\n        vec4 dc = grid_data[0]-vec4(st, 0.5, 1);\n\n        /** @todo With high scaling this is less accurate near axes cross. */\n        gl_FragColor.rgba = mix(vec4(0, 1, 0, 1), vec4(1, 0, 0, 1),\n          clamp(dot(dc, dc)*1e3, 0.0, 1.0));\n        return;\n      #else\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\n\n        #if grid_stepsPast > 1\n          for(int stepPast = 0; stepPast < grid_stepsPast; ++stepPast) {\n            float ago = float(stepPast)/float(grid_stepsPast);\n\n            grid_tapStateBy(offsetUV(st, grid_stateShape.xy), stepPast, 0);\n            // grid_tapStateBy(st, stepPast, 0);\n\n            motion += rescaledMotion*(1.0-ago)*weight*\n              grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n          }\n        #else\n          grid_tapState(offsetUV(st, grid_stateShape.xy));\n          // grid_tapState(st);\n\n          motion += rescaledMotion*weight*\n            grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n        #endif\n      #endif\n    }\n  }\n\n  #ifdef paceLinear\n    float pace = length(motion);\n  #else\n    float pace = dot(motion, motion);\n  #endif\n\n  float at = clamp(map(pace, range.x, range.y, 0.0, 1.0), 0.0, 1.0);\n  float to = bezierXToY(curve[0], curve[1], curve[2], curve[3], at);\n  // float to = at;\n  vec2 outside = lt(grid_uv, v0)+lt(v1, grid_uv);\n  float on = lt(outside.x+outside.y, 0.5);\n  vec4 color = mix(colorLo, colorHi, clamp(to, 0.0, on));\n\n  #ifdef angleHSLA\n    float hue = map(atan(motion.y, motion.x), -pi, pi, 0.0, 1.0);\n    vec3 angleColor = hsl(fract(hue+angleHSLA.x), angleHSLA.y, angleHSLA.z);\n\n    color.rgb = mix(color.rgb, angleColor, angleHSLA.a*on);\n  #endif\n\n  // #if test != test_off\n  //   vec2 line = fract(grid_uv*grid_stateShape.xy);\n\n  //   // color = mix(color, 1.0-color, lt(min(line.x, line.y), 5e-2));\n  //   color = mix(color, vec4(1, 0, 0, 1), lt(min(line.x, line.y), 0.1));\n  // #endif\n\n  gl_FragColor = clamp(color, 0.0, 1.0);\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n","/** Points-to-screen vertex shader. */\n\nprecision highp float;\n\n#define positionChannels points_channels_0\n#define massChannels points_channels_2\n\npoints_useSamples\npoints_useReads_position\n\nattribute float index;\n\n#ifdef points_splits\n  uniform sampler2D points_states[points_splits];\n#else\n  uniform sampler2D points_states;\n#endif\n\nuniform float points_stepNow;\nuniform vec4 points_stateShape;\n\nuniform float wideHi;\nuniform float wideLo;\nuniform vec2 widths;\nuniform vec4 colorHi;\nuniform vec4 colorLo;\n\n#ifdef colorImage\n  uniform sampler2D colorImage;\n  uniform vec2 colorBy;\n  uniform vec2 flip;\n  uniform vec4 offset;\n  uniform vec2 aspectImage;\n#endif\n\nuniform float dt;\nuniform vec2 size;\nuniform vec2 aspectScreen;\nuniform vec4 bounds;\nuniform float form;\n\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n#ifdef rescale_position\n  uniform vec2 rescalePosition;\n#else\n  const float rescaledPosition = 1.0;\n#endif\n\nvarying float wide;\nvarying vec3 sphere;\nvarying vec4 color;\n\n#pragma glslify: map = require(glsl-map);\n#pragma glslify: gt = require(glsl-conditionals/when_gt);\n\n#ifdef colorImage\n  #pragma glslify: ge = require(glsl-conditionals/when_ge);\n#endif\n\n#pragma glslify: indexUV = require(@epok.tech/gl-gpgpu/src/lookup/index-uv);\n#pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\n#if defined(rescale_mass) || defined(rescale_position)\n  #pragma glslify: exponent = require(../vector/exponent);\n#endif\n\n#if points_stepsPast > 1\n  #define indexFormsStates\n  #ifdef indexFormsStates\n    #pragma glslify: indexStates = require(@epok.tech/gl-gpgpu/src/index-forms/index-states)\n  #else\n    #pragma glslify: indexEntries = require(@epok.tech/gl-gpgpu/src/index-forms/index-entries)\n  #endif\n#endif\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\nconst vec4 hidden = vec4(0);\n\n#ifdef colorImage\n  const float colorByBase = 1.0;\n  const float colorByImage = 2.0;\n#endif\n\nvoid main() {\n  #if points_stepsPast > 1\n    // If multiple steps are given, find past step and entry.\n    // Lookups mostly equivalent; input and result iteration order differ.\n    #ifdef indexFormsStates\n      vec2 stepEntry = indexStates(index, points_stepsPast, form);\n    #else\n      vec2 stepEntry = indexEntries(index, points_entries, form);\n    #endif\n\n    float stepPast = stepEntry.s;\n    float entry = stepEntry.t;\n  #else\n    // If only 1 step is given, past step and entry are known.\n    float stepPast = 0.0;\n    float entry = index;\n  #endif\n\n  vec2 st =\n    offsetUV(indexUV(entry, points_stateShape.xy), points_stateShape.xy);\n  // vec2 st = indexUV(entry, points_stateShape.xy);\n\n  #if points_stepsPast > 1\n    points_tapStateBy(st, stepPast, 0);\n  #else\n    points_tapState(st);\n  #endif\n\n  #ifdef rescale_mass\n    float rescaledMass = exponent(rescaleMass);\n  #endif\n  #ifdef rescale_position\n    float rescaledPosition = exponent(rescalePosition);\n  #endif\n\n  float mass = rescaledMass*\n    points_data[points_reads_position_mass].massChannels;\n\n  vec2 position = rescaledPosition*\n    points_data[points_reads_position_position].positionChannels;\n\n  float show = gt(mass, 0.0);\n  vec2 boundSize = bounds.zw-bounds.xy;\n  vec2 to = (position/max(boundSize.x, boundSize.y))*2.0;\n  vec4 screen = mix(hidden, vec4(to, 0, 1), show);\n\n  screen.xy *= aspectScreen;\n  gl_Position = screen;\n\n  float ago = stepPast/max(float(points_stepsPast-1), 1.0);\n\n  color = mix(colorHi, colorLo, ago);\n\n  #ifdef colorImage\n    vec2 pq = ((fract(st*flip)*(aspectImage/aspectScreen))/offset.zw)-offset.xy;\n    vec4 colorPixel = texture2D(colorImage, pq);\n    float colorAt = colorBy.x;\n\n    colorAt = mix(colorAt, (1.0-color.a)+colorBy.x, ge(colorBy.y, colorByBase));\n    colorAt = mix(colorAt, colorPixel.a+colorBy.x, ge(colorBy.y, colorByImage));\n    color = mix(color, colorPixel, clamp(colorAt, 0.0, 1.0));\n  #endif\n\n  color *= show;\n\n  wide = mix(wideHi, wideLo, ago)*show;\n\n  float pointSize = gl_PointSize = 0.5*clamp(wide/screen.w, widths.s, widths.t);\n\n  /**\n   * Convert vertex position to `gl_FragCoord` window-space.\n   * @see [SO](https://stackoverflow.com/a/7158573)\n   * @see [SO](https://stackoverflow.com/a/54237532/716898)\n   * @todo Why does the correct size here seem to be half the radius?\n   */\n  sphere = vec3(size*map(screen.xy/screen.w, -v1, v1, v0, v1), pointSize*0.5);\n}\n","/** Points-to-screen fragment shader. */\n\nprecision highp float;\n\nvarying float wide;\nvarying vec3 sphere;\nvarying vec4 color;\n\n#pragma glslify: gt = require(glsl-conditionals/when_gt);\n\nvoid main() {\n  float r = sphere.p;\n  float r2 = r*r;\n  vec2 cf = gl_FragCoord.xy-sphere.xy;\n  float cfl2 = dot(cf, cf);\n  float isWide = gt(wide, 1.0);\n\n  #ifdef useDiscard\n    if(isWide*cfl2 > r2) { discard; }\n  #endif\n\n  float fade = max(r2-(isWide*cfl2), 0.0);\n\n  #ifdef lengthLinear\n    fade = sqrt(fade)/r;\n  #else\n    fade = fade/r2;\n  #endif\n\n  gl_FragColor = color*fade;\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n","/** Grid-fade fragment shader. */\n\nprecision highp float;\n\n#if defined(gridFade_output_fade)\n  #define typeHash 0\n  #define typeGauss 1\n\n  #ifndef type\n    #define type typeHash\n  #endif\n\n  #if type == typeGauss\n    #define qualityTap5 0\n    #define qualityTap9 1\n    #define qualityTap13 2\n\n    #ifndef quality\n      #define quality qualityTap5\n    #endif\n  #elif !defined(quality)\n    #define quality 3\n  #endif\n\n  gridFade_useSamples\n  gridFade_useReads_fade\n\n  #ifdef gridFade_splits\n    uniform sampler2D gridFade_states[gridFade_splits];\n  #else\n    uniform sampler2D gridFade_states;\n  #endif\n\n  uniform float gridFade_stepNow;\n  uniform vec4 gridFade_stateShape;\n\n  uniform float fade;\n  uniform float expose;\n  uniform float scale;\n\n  uniform vec4 colorLo;\n  uniform float dt;\n\n  #if type == typeHash\n    uniform float chaos;\n  #endif\n\n  varying vec2 gridFade_uv;\n\n  #if type == typeGauss\n    const vec2 axis = vec2(1, 0);\n    const float passes = 2.0;\n  #else\n    const float passes = 1.0;\n  #endif\n\n  #if type == typeGauss\n    #if quality > qualityTap9\n      #pragma glslify: blur = require(glsl-fast-gaussian-blur/13);\n    #elif quality > qualityTap5\n      #pragma glslify: blur = require(glsl-fast-gaussian-blur/9);\n    #elif quality > qualityHash\n      #pragma glslify: blur = require(glsl-fast-gaussian-blur/5);\n    #endif\n  #else\n    vec4 sampleFade(vec2 uv) {\n      gridFade_tapState(uv);\n\n      return gridFade_data[gridFade_reads_fade_fade].gridFade_channels_fade;\n    }\n\n    vec3 sampleHash(vec2 uv) { return sampleFade(uv).rgb; }\n\n    #pragma glslify: blur = require(glsl-hash-blur, sample = sampleHash, iterations = quality);\n  #endif\n\n  #pragma glslify: eq = require(glsl-conditionals/when_eq);\n#endif\n\nvoid main() {\n  #if defined(gridFade_output_fade)\n    float end = eq(fract(gridFade_stepNow/passes), 0.0);\n\n    #if type == typeGauss\n      vec4 to = blur(gridFade_states[0], gridFade_uv, gridFade_stateShape.xy,\n        mix(axis.xy, axis.yx, end)*scale);\n    #else\n      float radius = scale/max(gridFade_stateShape.x, gridFade_stateShape.y);\n      float aspect = gridFade_stateShape.x/gridFade_stateShape.y;\n\n      vec4 to = vec4(blur(gridFade_uv, radius, aspect, chaos),\n        /** @todo Can this extra tap be removed? */\n        sampleFade(gridFade_uv).a);\n    #endif\n\n    gridFade_output_fade =\n      mix(to, mix(to*(1.0+(expose*dt)), colorLo, fade*dt), end);\n  #endif\n}\n","/** Grid-fade-to-screen fragment shader. */\n\nprecision highp float;\n\ngridFade_useSamples\ngridFade_useReads_fade\n\n#ifdef gridFade_splits\n  uniform sampler2D gridFade_states[gridFade_splits];\n#else\n  uniform sampler2D gridFade_states;\n#endif\n\nuniform float gridFade_stepNow;\nuniform vec4 gridFade_stateShape;\n\nvarying vec2 gridFade_uv;\n\n#pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\nvoid main() {\n  vec2 uv = offsetUV(gridFade_uv, gridFade_stateShape.xy);\n  // vec2 uv = gridFade_uv;\n\n  gridFade_tapState(uv);\n\n  vec4 to = gridFade_data[gridFade_reads_fade_fade].gridFade_channels_fade;\n\n  gl_FragColor = to;\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n","/** Optical-flow fragment shader. */\n\nprecision highp float;\n\nuniform sampler2D next;\nuniform sampler2D past;\nuniform float gap;\nuniform float lambda;\nuniform float alpha;\nuniform vec2 aspect;\nuniform vec2 flip;\nuniform vec4 offset;\n\nvarying vec2 opticalFlow_uv;\n\n#pragma glslify: le = require(glsl-conditionals/when_le);\n\n#pragma glslify: opticalFlow = require(@epok.tech/glsl-optical-flow/index);\n\nvoid main() {\n  vec2 uv = ((fract(opticalFlow_uv*flip)*aspect)/offset.zw)-offset.xy;\n  vec2 to = opticalFlow(uv, next, past, gap, lambda);\n\n  gl_FragColor.xy = to*le(0.0, uv.x)*le(0.0, uv.y)*le(uv.x, 1.0)*le(uv.y, 1.0);\n}\n","/** Optical-flow-to-grid fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n#if defined(grid_output_motionFull)\n  uniform vec2 rescaleFlow;\n  uniform sampler2D opticalFlow;\n  uniform vec2 aspectScreen;\n  uniform float dt;\n\n  #ifdef rescale_motion\n    uniform vec2 rescaleMotion;\n  #else\n    const float rescaledMotion = 1.0;\n  #endif\n#endif\n\nvarying vec2 opticalFlow_uv;\n\n#ifdef grid_output_motionFull\n  #pragma glslify: exponent = require(../../src/vector/exponent);\n#endif\n\nvoid main() {\n  #ifdef grid_output_motionFull\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n\n    float rescaledFlow = exponent(rescaleFlow);\n\n    vec2 uv = opticalFlow_uv/aspectScreen;\n    // vec2 uv = opticalFlow_uv;\n    vec2 flow = rescaledFlow*dt*texture2D(opticalFlow, uv).xy;\n\n    grid_output_motionFull = flow/rescaledMotion;\n  #endif\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","GLType2","Hue2","$7812e353dd8d4138$var$cachedSetTimeout","$7812e353dd8d4138$var$cachedClearTimeout","$7812e353dd8d4138$var$currentQueue","$114292e15d237642$var$cache","$parcel$global","globalThis","self","window","global","$96e5255f782a85cd$exports","factory","isTypedArray","x","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","Uint8ClampedArray","extend","base","opts","keys","Object","i","length","raise","message","error","Error","console","check","pred","encolon","standardTypeEh","value","type","checkOneOf","list","indexOf","constructorKeys","leftPad","str","n","ShaderFile","name","lines","index","hasErrors","ShaderLine","number","line","errors","ShaderError","fileNumber","lineNumber","file","guessCommand","stack","toString","pat","exec","pat2","guessCallSite","parseSource","source","command","split","files","unknown","push","parts","lineNumberInfo","nameInfo","atob","forEach","saveCommandRef","object","_commandRef","commandRaise","callSite","checkCommandType","TYPE_SIZE","pixelSize","channels","isPow2","v","check$1","optional","block","parameter","param","possibilities","join","commandParameter","constructor","obj","key","commandType","data","nni","oneOf","shaderError","gl","shader","getShaderParameter","COMPILE_STATUS","result","errLog","getShaderInfoLog","typeName","FRAGMENT_SHADER","annotateFiles","errMsg","trim","strings","styles","offset","token","tokenPat","Math","max","document","chrome","log","apply","style","linkError","program","fragShader","vertShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","fragParse","header","vertParse","saveDrawInfo","uniforms","attributes","stringStore","addProps","dict","set","u","id","_fragId","static","frag","_vertId","vert","uniformSet","_uniformSet","dynamic","attributeSet","_attributeSet","_hasCount","framebufferFormat","attachment","texFormats","rbFormats","texture","_texture","internalformat","renderbuffer","_renderbuffer","format","texture2D","info","mipData","limits","w","width","h","height","c","maxTextureSize","wrapS","wrapT","mipmask","minFilter","extensions","magFilter","genMipmaps","mipimages","images","mw","mh","img","compressed","rowSize","ceil","unpackAlignment","byteLength","element","copy","textureCube","faces","face","mipmaps","j","VARIABLE_COUNTER","DynamicVariable","escapeStr","replace","define","splitParts","firstChar","charAt","lastChar","substr","concat","subparts","isDynamic","_reglType","unbox","path","Array","isArray","map","y","raf","next","requestAnimationFrame","cb","setTimeout","cancel","cancelAnimationFrame","clearTimeout","clock","performance","now","Date","parseExtensions","input","getElement","desc","querySelector","loop","f","log2","r","shift","createPool","bufferPool","alloc","sz","nextPow16","bin","pop","ArrayBuffer","free","buf","allocType","subarray","freeType","array","buffer","pool","zero","wrapLimits","maxAnisotropic","ext_texture_filter_anisotropic","getParameter","maxDrawbuffers","maxColorAttachments","webgl_draw_buffers","readFloat","oes_texture_float","readFloatTexture","createTexture","bindTexture","texImage2D","fbo","createFramebuffer","bindFramebuffer","framebufferTexture2D","checkFramebufferStatus","viewport","clearColor","clear","pixels","readPixels","getError","deleteFramebuffer","deleteTexture","isIE","navigator","test","userAgent","appVersion","npotTextureCube","cubeTexture","activeTexture","colorBits","depthBits","stencilBits","subpixelBits","filter","ext","pointSizeDims","lineWidthDims","maxViewportDims","maxCombinedTextureUnits","maxCubeMapSize","maxRenderbufferSize","maxTextureUnits","maxAttributes","maxVertexUniforms","maxVertexTextureUnits","maxVaryingVectors","maxFragmentUniforms","glsl","renderer","vendor","version","isNDArrayLike","shape","stride","values","flattenUtils","array_","flatten","out_","out","flatten1D","nx","flatten2D","ny","ptr","row","flatten3D","flattenRec","level","nz","ptr_","col","k","arrayTypes","glTypes","int8","int16","int32","uint8","uint16","uint32","float","float32","usageTypes","stream","arrayFlatten","arrayShape","DTYPES_SIZES","typedArrayCode","prototype","call","copyArray","inp","transpose","shapeX","shapeY","strideX","strideY","primTypes","points","point","triangles","triangle","FLOAT","INT","convertToHalfFloat","ushorts","isNaN","Infinity","sgn","exp","frac","s","isArrayLike","isPow2$1","MIPMAP_FILTERS","CHANNELS_FORMAT","FORMAT_CHANNELS","objectName","CANVAS_CLASS","OFFSCREENCANVAS_CLASS","CONTEXT2D_CLASS","BITMAP_CLASS","IMAGE_CLASS","VIDEO_CLASS","PIXEL_CLASSES","TYPE_SIZES","FORMAT_SIZES_SPECIAL","isNumericArray","arr","isRectArray","classString","isPixelData","className","typedArrayCode$1","preConvert","image","postConvert","getTextureSize","isMipmap","isCube","total","FORMAT_SIZES","wrapRenderbuffers","stats","config","formatTypes","ext_srgb","ext_color_buffer_half_float","webgl_color_buffer_float","formatTypesInvert","renderbufferCount","renderbufferSet","REGLRenderbuffer","refCount","profile","size","destroy","rb","handle","bindRenderbuffer","deleteRenderbuffer","decRef","getTotalRenderbufferSize","create","b","createRenderbuffer","reglRenderbuffer","options","radius","renderbufferStorage","resize","w_","h_","restore","colorTextureFormatEnums","textureFormatChannels","textureTypeSizes","colorRenderbufferFormatEnums","statusCode","VAO_OPTIONS","AttributeRecord","state","z","normalized","divisor","slice","CUTE_COMPONENTS","S_DITHER","S_BLEND_ENABLE","S_BLEND_COLOR","S_BLEND_EQUATION","S_BLEND_FUNC","S_DEPTH_ENABLE","S_DEPTH_FUNC","S_DEPTH_RANGE","S_DEPTH_MASK","S_COLOR_MASK","S_CULL_ENABLE","S_CULL_FACE","S_FRONT_FACE","S_LINE_WIDTH","S_POLYGON_OFFSET_ENABLE","S_POLYGON_OFFSET_OFFSET","S_SAMPLE_ALPHA","S_SAMPLE_ENABLE","S_SAMPLE_COVERAGE","S_STENCIL_ENABLE","S_STENCIL_MASK","S_STENCIL_FUNC","S_STENCIL_OPFRONT","S_STENCIL_OPBACK","S_SCISSOR_ENABLE","S_SCISSOR_BOX","S_VIEWPORT","S_PROFILE","S_FRAMEBUFFER","S_VERT","S_FRAG","S_ELEMENTS","S_PRIMITIVE","S_COUNT","S_OFFSET","S_INSTANCES","SUFFIX_WIDTH","SUFFIX_HEIGHT","S_FRAMEBUFFER_WIDTH","S_FRAMEBUFFER_HEIGHT","S_VIEWPORT_WIDTH","S_VIEWPORT_HEIGHT","S_DRAWINGBUFFER","S_DRAWINGBUFFER_WIDTH","S_DRAWINGBUFFER_HEIGHT","NESTED_OPTIONS","blendFuncs","invalidBlendCombinations","compareFuncs","stencilOps","shaderType","orientationType","isBufferArgs","sortState","sort","Declaration","thisDep","contextDep","propDep","append","isStatic","decl","createStaticDecl","createDynamicDecl","dyn","numArgs","subDyn","subArgs","SCOPE_DECL","createTimer","ext_disjoint_timer_query","queryPool","pendingQueries","PendingStats","startQueryIndex","endQueryIndex","sum","pendingStatsPool","pendingStats","pushScopeStats","start","end","ps","timeSum","queryPtr","beginQuery","query","createQueryEXT","beginQueryEXT","endQuery","endQueryEXT","update","queryTime","getQueryObjectEXT","startPtr","endPtr","gpuTime","getNumPendingQueries","deleteQueryEXT","CONTEXT_LOST_EVENT","CONTEXT_RESTORED_EVENT","find","haystack","needle","args","stringIds","stringValues","parseArgs","args_","container","canvas","contextAttributes","optionalExtensions","pixelRatio","devicePixelRatio","onDone","err","onDestroy","nodeName","appendChild","getBoundingClientRect","drawArrays","drawElements","toLowerCase","createCanvas","resizeObserver","createElement","innerWidth","innerHeight","body","bounds","right","left","bottom","top","border","margin","padding","position","ResizeObserver","observe","addEventListener","disconnect","removeEventListener","removeChild","undefined","premultipliedAlpha","createContext","get","getContext","e","glAttributes","getContextAttributes","contextLost","isContextLost","extensionState","createExtensionCache","tryLoadExtension","name_","getExtension","stats$$1","vaoCount","bufferCount","elementsCount","framebufferCount","shaderCount","textureCount","cubeCount","timer","START_TIME","WIDTH","drawingBufferWidth","HEIGHT","drawingBufferHeight","contextState","tick","time","viewportWidth","viewportHeight","framebufferWidth","framebufferHeight","drawState","elements","primitive","count","instances","bufferState","wrapBufferState","destroyBuffer","bufferSet","REGLBuffer","createBuffer","usage","dimension","dtype","persistentData","bind","bindBuffer","streamPool","initBufferFromTypedArray","bufferData","initBufferFromData","persist","flatData","dim","typedData","transposeData","deleteBuffer","getTotalBufferSize","deferInit","persistent","reglBuffer","setSubData","bufferSubData","_buffer","subdata","offset_","converted","createStream","destroyStream","stream$$1","getBuffer","wrapper","_initBuffer","attributeState","elementState","wrapElementsState","elementSet","elementCount","elementTypes","REGLElementBuffer","primType","vertCount","oes_element_index_uint","initElements","prim","predictedType","destroyElements","reglElements","_elements","getElements","wrapAttributeState","NUM_ATTRIBUTES","attributeBindings","vaoSet","Record","scope","currentVAO","targetVAO","extVAO","vao","refresh","createVAO","_attr","REGLVAO","updateVAO","ownsElements","bufUpdated","nattributes","spec","rec","buffers","angle_instanced_arrays","_vao","getVAO","record","disableVertexAttribArray","setVAO","bindVertexArrayOES","bindAttrs","exti","extInstanced","binding","enableVertexAttribArray","vertexAttribPointer","offfset","vertexAttribDivisorANGLE","vertexAttrib4f","oes_vertex_array_object","extension","createVertexArrayOES","attr","deleteVertexArrayOES","shaderState","wrapShaderState","fragShaders","vertShaders","ActiveInfo","location","insertActiveInfo","getShader","cache","createShader","shaderSource","compileShader","programCache","programList","PROGRAM_COUNTER","REGLProgram","fragId","vertId","uniformsCount","attributesCount","linkProgram","attributeLocations","createProgram","attachShader","bindAttribLocation","numUniforms","getActiveUniform","getUniformLocation","uniName","numAttributes","getActiveAttrib","getAttribLocation","getMaxUniformsCount","m","getMaxAttributesCount","deleteShader","deleteProgram","attribLocations","prevProgram","idx","splice","textureState","createTextureSet","reglPoll","mipmapHint","wrapModes","magFilters","minFilters","colorSpace","textureTypes","textureFormats","compressedTextureFormats","srgb","srgba","oes_texture_half_float","webgl_depth_texture","webgl_compressed_texture_s3tc","webgl_compressed_texture_atc","webgl_compressed_texture_pvrtc","webgl_compressed_texture_etc1","supportedCompressedFormats","supportedFormats","textureFormatsInvert","textureTypesInvert","magFiltersInvert","minFiltersInvert","wrapModesInvert","colorFormats","reduce","color","glenum","TexFlags","premultiplyAlpha","flipY","copyFlags","other","parseFlags","flags","alignment","hasChannels","hasFormat","formatStr","setFlags","pixelStorei","TexImage","xOffset","yOffset","needsFree","needsCopy","parseImage","viewW","viewH","convertData","shapeC","strideC","p","isCanvasElement","naturalWidth","naturalHeight","videoWidth","videoHeight","dd","allocData","setSubImage","target","miplevel","texSubImage2D","compressedTexSubImage2D","copyTexSubImage2D","imagePool","allocImage","freeImage","MipMap","parseMipMapFromShape","mipmap","parseMipMapFromObject","imgData","setMipMap","setImage","compressedTexImage2D","copyTexImage2D","mipPool","allocMipMap","freeMipMap","TexInfo","anisotropic","parseTexInfo","min","mag","wrap","optWrapS","optWrapT","hasMipMap","setTexInfo","texParameteri","hint","generateMipmap","textureSet","numTexUnits","textureUnits","REGLTexture","unit","bindCount","texInfo","tempBind","tempRestore","prev","GL_TEXTURE0$1","params","unbind","getTotalTextureSize","create2D","reglTexture2D","subimage","x_","y_","level_","imageData","_w","_h","createCube","a0","a1","a2","a3","a4","a5","reglTextureCube","faceInput","GL_TEXTURE_CUBE_MAP_POSITIVE_X$1","radius_","getTexture","tex","core","procs","poll","renderbufferState","framebufferState","wrapFBOState","cur","dirty","setFBO","colorTextureFormats","colorRenderbufferFormats","colorTypes","FramebufferAttachment","incRefAndCheckShape","tw","th","attach","framebufferRenderbuffer","parseAttachment","GL_TEXTURE_CUBE_MAP_POSITIVE_X$2","allocAttachment","isTexture","unwrapAttachment","resizeAttachment","framebufferSet","REGLFramebuffer","framebuffer","colorAttachments","depthAttachment","stencilAttachment","depthStencilAttachment","decFBORefs","updateFramebuffer","GL_COLOR_ATTACHMENT0$1","status","createFBO","reglFramebuffer","needsDepth","needsStencil","colorBuffer","colorTexture","colorFormat","colorType","colorCount","depthBuffer","stencilBuffer","depthStencilBuffer","depthStencilTexture","colors","depthTexture","depth","stencil","depthStencil","commonColorAttachmentSize","colorAttachmentSize","_framebuffer","use","getFramebuffer","reglFramebufferCube","colorCubes","cubeMapParams","cube","fb","reglCore","uniformState","blendEquations","ext_blend_minmax","extInstancing","extDrawBuffers","extVertexArrays","currentState","nextState","GL_STATE_NAMES","GL_FLAGS","GL_VARIABLES","propName","stateFlag","sname","cap","init","stateVariable","func","sharedState","context","current","draw","sharedConstants","backBuffer","drawBuffer","GL_COLOR_ATTACHMENT0$2","drawCallCounter","createREGLEnvironment","env","createEnvironment","varCounter","linkedNames","linkedValues","code","vars","arguments","def","entry","exit","entryToString","exitToString","save","prop","globalBlock","procedures","link","proc","arg","bodyToString","cond","thenBlock","elseBlock","thenToString","elseToString","then","else","elseClause","compile","src","Function","batchId","SHARED","shared","props","CHECK","commandStr","assert","nextVars","currentVars","variable","constants","JSON","stringify","invoke","argList","ref","attribCache","scopeAttribs","scopeAttrib","emitContext","CONTEXT","contextEnter","defn","emitPollFramebuffer","skipCheck","EXT_DRAW_BUFFERS","NEXT","GL","FRAMEBUFFER_STATE","DRAW_BUFFERS","BACK_BUFFER","emitPollState","CURRENT_VARS","NEXT_VARS","CURRENT_STATE","NEXT_STATE","CURRENT","ifte","emitSetOptions","flag","injectExtensions","instancing","emitProfile","useScope","incrementCounter","CPU_START","QUERY_COUNTER","USE_PROFILE","STATS","TIMER","profileArg","perfCounter","emitProfileStart","emitProfileEnd","scopeProfile","enable","emitAttributes","attribute","emitBindAttribute","ATTRIBUTE","LOCATION","BINDING","STATE","BUFFER","CONST_COMPONENTS","COMMON_KEYS","emitBuffer","SIZE","TYPE","DIVISOR","emitConstant","typeLength","emitUniforms","isBatchInnerLoop","definedArrUniforms","infix","VALUE","uniform","arrUniformName","UNIFORM","TEX_VALUE","MAT_VALUE","emitCheck","checkType","checkVector","checkTexture","unroll","TEX","matSize","pow","STORAGE","prevS","emitDraw","outer","inner","ELEMENTS","COUNT","INSTANCES","EXT_INSTANCING","DRAW_STATE","drawOptions","contextDynamic","elementsActive","emitValue","PRIMITIVE","OFFSET","MISSING","DYNAMIC","ELEMENT_TYPE","elementsStatic","vaoActive","emitInstancing","emitRegular","createBody","emitBody","parentEnv","emitDrawBody","useVAO","drawVAO","emitBatchDynamicShaderBody","all","emitBatchBody","BATCH_ID","PROPS","isInnerDefn","isOuterDefn","needsContext","needsFramebuffer","progCache","PROGRAM","progVar","PROG_ID","CACHED_PROC","splatObject","isDynamicObject","globals","objectRef","deps","INSTANCING","common","parseArguments","staticOptions","dynamicOptions","staticUniforms","dynamicUniforms","UNIFORMS","staticAttributes","dynamicAttributes","attributeDefs","staticContext","dynamicContext","KEY_NAMES","checkKeys","parseAttribLocations","sAttributes","bindings","parseFramebuffer","FRAMEBUFFER","FRAMEBUFFER_FUNC","viewportAndScissor","parseViewportScissor","parseBox","box","BOX_W","BOX_H","dynBox","BOX","BOX_X","BOX_Y","prevViewport","VIEWPORT","scissor_box","parseDraw","staticDraw","parseVAO","S_VAO","vaoRef","parseElements","IS_BUFFER_ARGS","ELEMENT_STATE","elementDefn","elementStream","parseParam","isOffset","dynValue","parsePrimitive","dynPrimitive","PRIM_TYPES","parseVertCount","dynCount","parseStatic","parseDynamic","COMPARE_FUNCS","srcRGB","srcAlpha","dstRGB","dst","dstAlpha","BLEND_FUNCS","read","prefix","suffix","INVALID_BLEND_COMBINATIONS","SRC_RGB","SRC_ALPHA","rgb","alpha","BLEND_EQUATIONS","RGB","ALPHA","checkProp","cmp","mask","fail","zfail","zpass","STENCIL_OPS","factor","units","sampleValue","sampleInvert","invert","parseProgram","parseShader","SHADER_STATE","progDef","copyBox","scopeVAO","parseProfile","profileEnable","reglType","staticBindings","constant","VALID_KEYS","isStream","BUFFER_STATE","defaultRecord","emitReadRecord","emitDrawProc","drawCache","emitScopeProc","saveShader","opt","emitBatchProc","batch","progDefn","batchCache","wrapReadPixels","readPixelsImpl","preserveDrawingBuffer","rafCallbacks","lossCallbacks","restoreCallbacks","destroyCallbacks","activeRAF","handleRAF","flush","startRAF","stopRAF","handleContextLoss","event","preventDefault","handleContextRestored","compileProcedure","separateDynamic","useArrays","staticItems","dynamicItems","option","flattenNestedOptions","merge","child","op","opBack","opFront","cpuTime","compiled","EMPTY_ARRAY","reserve","clearImpl","_","clearFlags","clearDepth","clearStencil","frame","pendingCancel","pollViewport","scissorBox","regl","framebuffer_reglType","this","framebufferCube","on","callback","callbacks","hasExtension","_gl","_refresh","$12bc9ce34a3e4340$export$dcfbb7940cfb3a48","$4947d4c86813b387$export$651a6eb01ea522f3","msg","origMessage","String","$ce536e912634ae17$export$772aa0961a81b065","$ce536e912634ae17$export$9f1b9fbfe882200d","$039138b091302394$export$c915e14294a7d06f","fn","$e4575c33b7c478d7$export$eca2c7e8e95bbf0a","xform","$db91e045104e73a2$export$9652023d9040757","Symbol","iterator","$215fb7197eb4e2a9$export$5adef4befe47917","rfn","$688fe5f7d1b77c58$export$a7d1fa727cb10b0e","$688fe5f7d1b77c58$export$ca96bc7645ad7951","$5adadce121edf83b$export$f0954fd7d5368655","$45d5856487c529d9$export$1e2f57719e155213","$573c3097877213b3$export$ce266a425291df6c","val","deref","$573c3097877213b3$export$447808b60b7559bd","$573c3097877213b3$export$ebab785f9ea33473","$573c3097877213b3$export$f2412ace46b7b087","$573c3097877213b3$export$7ca7c14b24aa137b","$e4eeba0635ad1bef$var$__parseArgs","$e4eeba0635ad1bef$export$533b26079ad0b4b","complete","reduce2","acc","$reduce","$e4eeba0635ad1bef$var$__reduceArray","$e4eeba0635ad1bef$var$__reduceIterable","$e4eeba0635ad1bef$export$1650419e431d3ba3","$7d23e39c8d8c83c9$export$a6bff14a9cefe0e8","$7d23e39c8d8c83c9$export$9b6eac2a13c3d07","impl","$5199815c15369ea2$export$871de8747c9eaa88","$53be3199915c8589$export$9a58ef0d7ad3278c","from","to","step","$73bc41c1f66e7b46$var$$transduce","tfn","$3f30e720518d525d$export$8901015135f2fb22","iters","tuple","done","$fa6410d60cd406b2$export$ab59e00737fb22e6","$fa6410d60cd406b2$export$98e633703a635f","$66a95140c244fad3$export$c37d18c23b2ea60c","dispatch","fallback","impls","g","add","fn2","$a65300e009961bba$export$ccd27f3e7091205c","$a65300e009961bba$export$6ab71ad6f57b0093","o","$a901e92356d753ce$var$__lookup","sym","$a901e92356d753ce$var$__indicesStrided","$a901e92356d753ce$var$__indices","$a901e92356d753ce$var$__assemble","tpl","syms","ret","opJoin","pre","post","strided","sep","first","$73bc41c1f66e7b46$export$9608d0eacffd6284","fns","$bf257fc715bdced6$export$1af3c925c49f37a2","d","$909460dd226a14dc$export$b7df5d561049483a","$ca9023116e29415d$export$e5bd5b3b105c2a71","$a901e92356d753ce$var$__assembleG","$a901e92356d753ce$export$326bc8646b307e15","$a901e92356d753ce$export$ef7acd7185315e22","$a901e92356d753ce$export$aeba7862bf0c66c4","$a901e92356d753ce$export$e40cf5ce9a490533","$","$a901e92356d753ce$export$24ecd06eea36a882","$c1d306ebb49d3aa4$export$523c9d3eb3d8d990","$c1d306ebb49d3aa4$export$b54ddf06b57709b1","$c1d306ebb49d3aa4$export$1c0ad2738a5ae4b0","$c1d306ebb49d3aa4$export$1f214a01989f466a","$4235b1e5a541ac0d$export$6747e444d0e25f8e","$4235b1e5a541ac0d$export$c8a0e366d15bb712","$4235b1e5a541ac0d$export$cb6d410f870ee721","$4235b1e5a541ac0d$export$9e7986c53a12814a","$eb25d460157de995$export$6897c284b6f9f4dc","$eb25d460157de995$export$eb08a4e6e8934de4","$eb25d460157de995$export$2f6df6f9964c34d8","$eb25d460157de995$export$2cac2c285d867dd","$ff8552abc90720ca$var$r","$ff8552abc90720ca$export$533b26079ad0b4b","$f06a7242e8e3a5ae$export$871de8747c9eaa88","$7c7160675eb3d972$var$e","$7c7160675eb3d972$export$79b2f7037acddd43","$b2b822c6b1c4cfb7$export$2e2bcd8739ae039","l","$71c6ad154616c491$export$4997ffc0176396a6","fill","$5ec828b9c9659fbf$var$fill","isFinite","$5ec828b9c9659fbf$var$isFinite","Number","floor","$5ec828b9c9659fbf$var$floor","$5ec828b9c9659fbf$export$d02631cccf789723","$480e37ad861582d4$exports","$f91da34ba7ed1da4$exports","$06ed83cfe38d62b2$exports","$7812e353dd8d4138$exports","$7812e353dd8d4138$var$process","$7812e353dd8d4138$var$defaultSetTimout","$7812e353dd8d4138$var$defaultClearTimeout","$7812e353dd8d4138$var$runTimeout","fun","$7812e353dd8d4138$var$queue","$7812e353dd8d4138$var$draining","$7812e353dd8d4138$var$queueIndex","$7812e353dd8d4138$var$cleanUpNextTick","$7812e353dd8d4138$var$drainQueue","timeout","len","run","$7812e353dd8d4138$var$runClearTimeout","marker","$7812e353dd8d4138$var$Item","$7812e353dd8d4138$var$noop","nextTick","title","browser","argv","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","cwd","chdir","dir","umask","getNanoSeconds","hrtime","loadTime","nodeLoadTime","moduleLoadTime","hr","uptime","getTime","$f91da34ba7ed1da4$var$root","$f91da34ba7ed1da4$var$vendors","$f91da34ba7ed1da4$var$suffix","$f91da34ba7ed1da4$var$raf","$f91da34ba7ed1da4$var$caf","$f91da34ba7ed1da4$var$i","$f91da34ba7ed1da4$var$last","$f91da34ba7ed1da4$var$id","$f91da34ba7ed1da4$var$queue","$f91da34ba7ed1da4$var$frameDuration","_now","cp","cancelled","round","polyfill","$0474abd910a8de31$exports","$cd765d230ba82a4b$exports","$114292e15d237642$exports","$114292e15d237642$var$res","num","TypeError","$dc059d989c3e6254$exports","$dc059d989c3e6254$var$getOwnPropertySymbols","getOwnPropertySymbols","$dc059d989c3e6254$var$hasOwnProperty","hasOwnProperty","$dc059d989c3e6254$var$propIsEnumerable","propertyIsEnumerable","$dc059d989c3e6254$var$shouldUseNative","assign","test1","getOwnPropertyNames","test2","fromCharCode","order2","test3","letter","symbols","$dc059d989c3e6254$var$toObject","$30707a4ac7d96d94$exports","$cd765d230ba82a4b$var$nest","tmp","$cd765d230ba82a4b$var$identity","$cd765d230ba82a4b$var$lineStart","indent","$cd765d230ba82a4b$var$lineEnd","$cd765d230ba82a4b$var$rule","linestart","lineend","propLength","valueLength","$cd765d230ba82a4b$var$isAtRule","property","vals","selector","_toCss","sel","selectors","sels","$480e37ad861582d4$var$fps","$480e37ad861582d4$var$positions","documentElement","innerHTML","textEl","valueEl","bgEl","css","posCss","cssText","parseInt","getComputedStyle","ctx","lastTime","period","that","measure","t","clearRect","fillStyle","fillRect","toFixed","$e5ed57ca4cb71184$export$ba60520149d1328e","$e5ed57ca4cb71184$export$85b9a36db797e02b","$e5ed57ca4cb71184$export$878041e1e4cd4218","flat","$a1c331d8a5ab855b$export$dc207adda608f979","$a1c331d8a5ab855b$export$cfdc3a7c4cb854c6","$a1c331d8a5ab855b$export$b4781c2237bde956","$a1c331d8a5ab855b$export$154f256b9eac9103","$a1c331d8a5ab855b$export$ff01eb58fe4e69","$a1c331d8a5ab855b$export$5544d416ac8224f1","$a1c331d8a5ab855b$export$2fcc13103217f9a3","$a1c331d8a5ab855b$export$72e520e6a70b780c","isInteger","$c474fe9e4b233a62$var$isInteger","$c474fe9e4b233a62$var$isArray","$c474fe9e4b233a62$export$5ca26c99531348ec","channelsMax","$c474fe9e4b233a62$export$798cdecdcbbf9755","maps","$c474fe9e4b233a62$export$574963e692b662ec","derives","passes","textures","valueToTexture","reads","readsToValue","allStepSamples","getAddSample","pass","valueNext","derive","dp","findIndex","getAddSamples","dn","samples","$c474fe9e4b233a62$export$96707a1f51900f3d","buffersMax","packed","$c474fe9e4b233a62$export$9d1d9285bd6d8c57","fitIndex","fitSize","fit","pack","valueToPass","textureToPass","output","getIndex","getValue","$be4163ee67d9e1b7$var$floor","$be4163ee67d9e1b7$var$isFinite","$be4163ee67d9e1b7$var$isInteger","$be4163ee67d9e1b7$export$3c49c185de0c2bfc","side","v0","$be4163ee67d9e1b7$export$c08559766941f856","v1","$be4163ee67d9e1b7$export$2815acae70277c92","entries","$be4163ee67d9e1b7$export$87ed20f81f3c66ff","$be4163ee67d9e1b7$export$19cc39c76123d7db","scale","$be4163ee67d9e1b7$export$6574bcda6112260a","$422c8e0d3f2b22ec$var$max","$422c8e0d3f2b22ec$var$isInteger","$422c8e0d3f2b22ec$var$mergeDef","steps","$50389a104b91a0fb$export$dcfbb7940cfb3a48","$50389a104b91a0fb$export$abee0037e1db715","$fec04eaf51736497$export$1aad3af825e3305b","bound","stepsL","texturesL","stateShape","viewShape","stepNow","addTextures","ago","ts","pl","$72d7b224298db0f8$var$start","$72d7b224298db0f8$var$end","$72d7b224298db0f8$export$bf9fb029d174d554","$e773ca7c5de577c2$export$4e46ac54fc82cf3b","$e773ca7c5de577c2$export$497faa7f0daf9da","$e773ca7c5de577c2$var$id","$e773ca7c5de577c2$export$feaf5ffc92c2af94","macros","$e773ca7c5de577c2$export$83d01c7b88bc16d5","qualify","$e773ca7c5de577c2$export$45db4de6da38aa8d","$e773ca7c5de577c2$export$3df19e70a88cb8cd","$e773ca7c5de577c2$export$1c7039c93eddfba","$e773ca7c5de577c2$export$c346962e7dd3191","$e773ca7c5de577c2$export$d38b14fb9031108e","$e773ca7c5de577c2$export$84186522bf5a7d4d","passesL","alias","stepsPast","$e773ca7c5de577c2$export$49873e279ff642c0","passNow","$e773ca7c5de577c2$export$9cb6037fa2a40c2e","passSamples","passReads","passReadsToValue","$e773ca7c5de577c2$var$lf","valueReadsToValue","va","nra","nrv","ra","$e773ca7c5de577c2$export$562ddd36066ad650","glsl3","bs","bt","by","aka","akaBy","st","tapsSamples","$d925fdf34359f8ed$var$call","$d925fdf34359f8ed$export$d86e3abd7686c23f","$d925fdf34359f8ed$export$95b2c9ea2de43ebb","$d925fdf34359f8ed$export$12661000d11a17d2","copyImage","ci","cs","sub","sl","$01fa3bcf865876b0$var$isFinite","$01fa3bcf865876b0$export$658d3265ca8f5f4e","parseFloat","match","$01fa3bcf865876b0$export$2e2bcd8739ae039","api","apiGLSL","colorPool","channelsMin","texturesMap","passesMap","passChannels","mergeChannels","framebuffers","addTexture","addPass","mAll","mNext","ms","pipeline","verts","frags","replaceAll","positions","clearPass","vs","fs","blend","stepBy","stepMax","stepState","onStep","onPass","mergeUpdate","passState","$f233f4aac627add4$export$be3f796aed065412","diff","dt","pause","$f233f4aac627add4$export$7548f4bc1b09ff22","$f233f4aac627add4$export$eb8a9b7a1ebec59a","$f233f4aac627add4$export$9dc4ecf953986f04","_step","ref1","t0","t1","$70c54f136464dd78$export$7d15b64cf5a3a4c4","$1c618fc32dcd31f6$export$37b75d0026f96b8d","$1c618fc32dcd31f6$export$dc78d1181d20ae9d","$1c618fc32dcd31f6$export$3566317347873a0b","$1c618fc32dcd31f6$export$49c94a8647bf28c0","$66b2efd1b0df8b3b$export$460c4029b1a54a2e","$66b2efd1b0df8b3b$export$6b5c1ceb16d01dc3","PI","$e5bff41ea21c3f60$export$29e4e862bebba87f","theta","$1c9d5dc3120ae583$export$c915e14294a7d06f","$268e552d160966af$export$1e2f57719e155213","$22b149dc5a64b464$export$7e4aa119212bc614","$42fc9d2c5cb4264a$export$844ec244b1367d54","$a830b48f05b68abc$export$651a6eb01ea522f3","$065feed0e3bfda14$export$10a4c2bfc9c71dbd","$065feed0e3bfda14$export$85f6a9f917d452ba","$7d04a51e04f01300$export$ad5b0b9ab7d48f58","$7d04a51e04f01300$export$6b5c1ceb16d01dc3","$7d04a51e04f01300$export$56469a43a57ad8b6","$4980129a1ca3bad2$export$a57bfe0eb79af278","$48bf910295afa611$export$c7d5ea85f8b34f37","$a48d9e96d41faf9e$export$76d90c956114f2c2","ch","repeat","$9c16b2c7714cf5c3$export$bc3bea8325045070","substring","$bd52a7ed31e8a610$export$6b5cd3983e3ee5ab","prec","special","$bd52a7ed31e8a610$var$__nanOrInf","pln","pr","pad","ax","abs","$bd52a7ed31e8a610$var$__exp","toExponential","LN10","$4a7258ffb7002243$export$6074e20ba5c64bef","res","$ff3cbd82a8a2ff73$export$c486935b7b0b00f7","BigInt64Array","BigUint64Array","$5cac0c3bcac622d8$export$e9242f670cb20645","ctor","cstride","estride","$b8956ce4ea21c33f$export$5c5ee632c52bc4a2","$ca16640e9b6bc4c2$export$772aa0961a81b065","$ca16640e9b6bc4c2$export$9f1b9fbfe882200d","$d418f490d65a819d$export$eca2c7e8e95bbf0a","$d4728c686b1291e2$export$9652023d9040757","$c46584edf7538d87$export$5adef4befe47917","$81bd823e74714687$export$a7d1fa727cb10b0e","$81bd823e74714687$export$ca96bc7645ad7951","$8e87b1ffbf7748ad$export$f0954fd7d5368655","$cc4b370dd08db6f5$export$ce266a425291df6c","$cc4b370dd08db6f5$export$447808b60b7559bd","$cc4b370dd08db6f5$export$ebab785f9ea33473","$cc4b370dd08db6f5$export$f2412ace46b7b087","$cc4b370dd08db6f5$export$7ca7c14b24aa137b","$18c9956d0c892038$var$__parseArgs","$18c9956d0c892038$export$533b26079ad0b4b","$18c9956d0c892038$var$__reduceArray","$18c9956d0c892038$var$__reduceIterable","$18c9956d0c892038$export$1650419e431d3ba3","$316a20c091b10096$export$a6bff14a9cefe0e8","$316a20c091b10096$export$9b6eac2a13c3d07","$06aa5eef6a6ccbf0$export$871de8747c9eaa88","$d69a617af9dcb1e8$export$9a58ef0d7ad3278c","$e981a2c2a58961c9$var$$transduce","$9d8f6b07ceb00060$export$8901015135f2fb22","$a4e281f2da1834f0$export$ab59e00737fb22e6","$a4e281f2da1834f0$export$98e633703a635f","$d682041ae3505481$export$c37d18c23b2ea60c","$7e99597777a5a4f0$export$19dc841295b49698","$7e99597777a5a4f0$export$ccd27f3e7091205c","$7e99597777a5a4f0$export$9092249dcc75f1af","$7e99597777a5a4f0$export$4061f92b6da4a345","$93098157cea38c6c$var$__lookup","$93098157cea38c6c$var$__indicesStrided","$93098157cea38c6c$var$__indices","$93098157cea38c6c$var$__assemble","$e981a2c2a58961c9$export$9608d0eacffd6284","$c805e34b428dc08a$export$1af3c925c49f37a2","$f91f589066ec68d7$export$b7df5d561049483a","$16fc3b5edd1085b0$export$e5bd5b3b105c2a71","$93098157cea38c6c$var$__assembleG","$93098157cea38c6c$export$326bc8646b307e15","$93098157cea38c6c$export$ef7acd7185315e22","$93098157cea38c6c$export$419c6ef64208ae82","hofArgs","$93098157cea38c6c$export$aeba7862bf0c66c4","$93098157cea38c6c$export$a0e9b27d920ed100","$93098157cea38c6c$export$baa6c46b014ab275","_tpl","$17b03e20e30ab1c0$export$7d15b64cf5a3a4c4","$17b03e20e30ab1c0$export$c3896cfb8a4e845c","$17b03e20e30ab1c0$export$c81ba8bb5d49ce82","$17b03e20e30ab1c0$export$4cfdf484c27efa43","$17b03e20e30ab1c0$export$5c5ee632c52bc4a2","$17b03e20e30ab1c0$export$2c56bf757f90e081","$17b03e20e30ab1c0$export$2c76e8d8a961b95d","$17b03e20e30ab1c0$export$2a3fb5efb3d259e8","$17b03e20e30ab1c0$export$2cacbc8823b89e46","$17b03e20e30ab1c0$export$389f20b157367474","$17b03e20e30ab1c0$export$4a546a4bf36db970","$17b03e20e30ab1c0$export$48b31f228d4cf960","$8a8986b640476745$export$beea375bf3818f1d","proto","defNumeric","defineProperty","enumerable","$8a8986b640476745$export$372fdd3dd278cc1c","$1abb7e4b150c6edc$var$abs","$1abb7e4b150c6edc$export$3e1b8005eb6f3d68","eps","$ea632dee3478c22f$var$$","$ea632dee3478c22f$export$3e1b8005eb6f3d68","v2","eqDelta","$ea632dee3478c22f$export$75f4a8c48213224e","$ea632dee3478c22f$export$215c4845217d5cf1","ia","ib","sa","sb","$c5729b1b3bbd3f45$var$INV_MAX","$c5729b1b3bbd3f45$export$d768fa07cecd88a","norm","int","probability","normMinMax","minmax","minmaxInt","range","minmaxUint","$630212406e5b8835$export$a3bd1ea0f114ec36","$630212406e5b8835$export$62aaebd2a7b17b1f","$630212406e5b8835$export$31e07d78cb78bebb","$630212406e5b8835$export$8027d34b10b79e76","rnd","random","$cd54e95fb0a51254$export$adaa4cf7ef1b65be","$cd54e95fb0a51254$export$55640438a4edf3d6","$cd54e95fb0a51254$export$9cbac02f28c9a9a9","$cd54e95fb0a51254$export$a7c139a4194832bf","$03ebfbcb25ee71e2$export$43bee75e5e14138e","$424269d88cf3d5bf$import_meta","url","$424269d88cf3d5bf$export$7750cdfb4db2c3d","$424269d88cf3d5bf$export$a7a9523472993e97","MODE","UMBRELLA_ASSERTS","VITE_UMBRELLA_ASSERTS","$95eb33bb0aef0a08$export$5ffd082a0121a803","$95eb33bb0aef0a08$export$b07aeb3c205b1fa7","mode","$95eb33bb0aef0a08$export$9c68d69a4c5bbcf9","destMode","srcMode","$convert","$c229907f50f070a0$export$b8ff662d454dbe46","$432d24058ce1e4ee$export$dd24dc7e49b6b0eb","$432d24058ce1e4ee$export$aea914411a6b4fb","$c7cdaa746aa0043b$export$3e22a96a58989a47","$c7cdaa746aa0043b$export$f0e1837cf5c5bd36","freeze","$1d184ab39ca2046a$export$5bd959522fbb33fb","$1d184ab39ca2046a$export$eea70998d27a3f6e","$1d184ab39ca2046a$export$e3eaf67d84630857","$986895dbf71d626a$export$f36c8c226353f2dd","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","transparent","rebeccapurple","$62234f526e377c85$export$80420cae396846ed","canvastext","linktext","visitedtext","activetext","buttonface","buttontext","buttonborder","field","fieldtext","highlight","highlighttext","mark","marktext","graytext","$8777156db716e3d5$export$ba8c70ce75474f8d","$8777156db716e3d5$export$abee0037e1db715","$3894b359725a8b8b$export$b9b70ffa6eb909fa","$8632f7cfdab39daf$export$59ad369bf4938177","named","$8632f7cfdab39daf$export$103711ef09c6edec","$8632f7cfdab39daf$var$__numOrPercent","$8632f7cfdab39daf$var$__alpha","$8632f7cfdab39daf$var$__hue","$8632f7cfdab39daf$var$__percent","$8632f7cfdab39daf$var$HUE_NORMS","rad","grad","turn","deg","clamp","scalePerc","endsWith","hex","$68fc2977bf0c4876$export$4598496351993abf","$68fc2977bf0c4876$export$be435c896a95082","$109ca59437083af7$export$7d15b64cf5a3a4c4","$109ca59437083af7$export$dd799b5658f51338","$80a0bd8d6f74390a$var$__transform","$80a0bd8d6f74390a$export$e2f27988cc5b3a12","$883aa177ee8f6de7$var$$","$883aa177ee8f6de7$export$78ae608fdbee4899","$03fdf7d033bb1d09$export$eaa9061711f71897","mat","clampOut","$40183e4ed970aff5$export$3772e887938e648f","$67a8685a3a2751bf$export$e6056cb2e71b648d","q","$b314e9c61f2f469d$export$ebedcdd15cc9bf0a","$df4c95c253866091$export$5b10bb54545ea67e","$0daaaaad33f3c135$export$3d9bf1c19a0bc433","hue","$a8263434ffd59ea1$export$8f4a7c0bb78e6ea8","order","numChannels","minR","maxR","hueChanID","$Color","toStringTag","xyz","copyView","empty","randomize","toJSON","toRgb","fromColor","every","class","mapBuffer","hsv","lch","cos","sin","$10b53d97c9b87c6a$exports","$10b53d97c9b87c6a$var$gsl_const","CGS","SPEED_OF_LIGHT","GRAVITATIONAL_CONSTANT","PLANCKS_CONSTANT_H","PLANCKS_CONSTANT_HBAR","ASTRONOMICAL_UNIT","LIGHT_YEAR","PARSEC","GRAV_ACCEL","ELECTRON_VOLT","MASS_ELECTRON","MASS_MUON","MASS_PROTON","MASS_NEUTRON","RYDBERG","BOLTZMANN","MOLAR_GAS","STANDARD_GAS_VOLUME","MINUTE","HOUR","DAY","WEEK","INCH","FOOT","YARD","MILE","NAUTICAL_MILE","FATHOM","MIL","POINT","TEXPOINT","MICRON","ANGSTROM","HECTARE","ACRE","BARN","LITER","US_GALLON","QUART","PINT","CUP","FLUID_OUNCE","TABLESPOON","TEASPOON","CANADIAN_GALLON","UK_GALLON","MILES_PER_HOUR","KILOMETERS_PER_HOUR","KNOT","POUND_MASS","OUNCE_MASS","TON","METRIC_TON","UK_TON","TROY_OUNCE","CARAT","UNIFIED_ATOMIC_MASS","GRAM_FORCE","POUND_FORCE","KILOPOUND_FORCE","POUNDAL","CALORIE","BTU","THERM","HORSEPOWER","BAR","STD_ATMOSPHERE","TORR","METER_OF_MERCURY","INCH_OF_MERCURY","INCH_OF_WATER","PSI","POISE","STOKES","STILB","LUMEN","LUX","PHOT","FOOTCANDLE","LAMBERT","FOOTLAMBERT","CURIE","ROENTGEN","RAD","SOLAR_MASS","BOHR_RADIUS","NEWTON","DYNE","JOULE","ERG","STEFAN_BOLTZMANN_CONSTANT","THOMSON_CROSS_SECTION","CGSM","BOHR_MAGNETON","NUCLEAR_MAGNETON","ELECTRON_MAGNETIC_MOMENT","PROTON_MAGNETIC_MOMENT","FARADAY","ELECTRON_CHARGE","MKS","VACUUM_PERMITTIVITY","VACUUM_PERMEABILITY","DEBYE","GAUSS","MKSA","NUM","FINE_STRUCTURE","AVOGADRO","YOTTA","ZETTA","EXA","PETA","TERA","GIGA","MEGA","KILO","MILLI","MICRO","NANO","PICO","FEMTO","ATTO","ZEPTO","YOCTO","$a08182c464031bb0$var$max","$a08182c464031bb0$export$2e2bcd8739ae039","states","form","$a55a51490c3e1d8b$exports","$834fcadedf4fafe1$exports","$a9a4a8eabee7dea9$exports","$974b845aa5371f02$exports","$3d4623c2f2b7e7e3$exports","$7d1830670886ce31$exports","$f666f2a304033264$exports","$29325f4114313b20$var$keys","$29325f4114313b20$var$assign","$29325f4114313b20$var$floor","$29325f4114313b20$var$min","$29325f4114313b20$var$max","$29325f4114313b20$var$abs","$29325f4114313b20$var$random","sign","$29325f4114313b20$var$sign","$29325f4114313b20$var$sin","$29325f4114313b20$var$g","$29325f4114313b20$var$cache","$29325f4114313b20$export$ac0cd3cc21f80dfc","$29325f4114313b20$export$fdb75c5ac32869de","$29325f4114313b20$export$bc4be2352d4c92cc","$29325f4114313b20$export$cc3e2d3244e01b7f","$29325f4114313b20$export$918e5821fc7288cd","extensionsFloat","extensionsDrawBuffers","extensionsInstances","$29325f4114313b20$export$82ee245e4549d21","fields","$29325f4114313b20$export$bd2891254e1e5b30","at","$29325f4114313b20$export$47b243153dce5032","$29325f4114313b20$export$9f9ef40fe2e7f9e0","$8867dbad34178b9a$exports","$7989cd53a482ae1e$exports","$d508adb7057fb369$exports","$eb18a40aad98e4fc$exports","$f2af27fa38b3ddf6$var$min","$f2af27fa38b3ddf6$var$max","$f2af27fa38b3ddf6$var$sign","$f2af27fa38b3ddf6$var$isFinite","createObjectURL","$f2af27fa38b3ddf6$var$createObjectURL","URL","$f2af27fa38b3ddf6$var$screenPositions","$f2af27fa38b3ddf6$export$dce0f7906c5e6747","$f2af27fa38b3ddf6$export$13fba5ef04f03938","$canvas","hasInstances","support","vertex","quad","timestep","rescale","mass","motion","affine","deform","stress","head","kernelType","kernelSize","rescales","rs","grid","detail","limit","boundsIn","boundsHit","gDetail","gLimit","gBounds","gFields","Map","gPre","gDerives","gIndex","gValues","gAlias","gMass","motionFull","gMotionFull","motionBase","gMotionBase","gMaps","gSteps","gpgpu","gGPGPU","rescaleMass","rescaleMotion","gMerge","clears","pFields","gridToPoints","volume","volumeSplit","motionAdjust","positionAdjusts","youngMod","poissonRatio","bulkMod","shearMod","frictionAngle","materialFriction","boundsClamp","spawnOn","any","slow","centre","wander","volumeScale","gw","gh","pIndex","pValues","pAlias","pPosition","pMotion","pMass","pAffine","pDeform","pStress","pDerives","pMaps","pPre","gpLinkG","pSteps","gpSize","pMerge","pBound","gp","bm","ym","sm","mf","fa","sfa","spawnOnAny","spawnOnOut","spawnOnSlow","spawnOnCentre","chaos","rescalePosition","rescaleAffine","rescaleDeform","rescaleStress","pointsToGrid","stretch","gMassPass","gMotionFullPass","gMotionBasePass","pgSize","pgSplats","splats","Set","pgSplatsL","pgInstancesL","pgLinkP","pgLinkG","taps","pgQuads","quads","pgInstanced","instanced","pgBatch","pgOrder","pgForm","pgFormsL","forms","pgFormVertexesL","formVertexes","pgFormSource","formSource","pgFormSourcesL","formSources","pointVertexes","pgFormSourcesSplatsL","formSourcesSplats","pgInstancesSourceL","instancesSources","splat","gf","batchStates","screen","aspect","gridToScreen","paceLinear","ranges","curves","colorHi","colorLo","angleHSLA","gsLinkG","onDraw","pointsToScreen","colorImage","colorBy","flip","aspectImage","useDiscard","lengthLinear","wideHi","wideLo","widths","primitives","psLinkPBound","psDrawSteps","psLinkP","psCounts","counts","wls","wfs","aspectScreen","lineWidth","uses","linksBy","passAt","onTick","onClear","onUpdate","gStep","gClear","gpStep","gpGPGPU","onPost","dtp","gSize","demo","opticalFlowVert","opticalFlow","gap","lambda","media","facingMode","video","frames","opticalFlow_position","past","opticalFlowToGrid","rescaleFlow","ofgLinkG","gm","gStepBy","setup","ar","gpOnStep","$video","play","ofStart","mq","$v","mediaDevices","getUserMedia","srcObject","warn","stop","getTracks","gridFade","fade","expose","gfPre","gfFields","gfDerives","gfIndex","gfValues","gfAlias","gfFade","gfMaps","quality","gridFadeToScreen","gfsLinkGF","lgf","gridFade_position","gsOnDraw","psOnDraw","view","vw","vh","gShape","ss","fps","frameMPM","queued","mpm","$0070d23694cd1cfa$var$max","$0070d23694cd1cfa$var$log2","$0070d23694cd1cfa$var$isFinite","$0070d23694cd1cfa$var$isInteger","$0070d23694cd1cfa$var$query","URLSearchParams","search","$0070d23694cd1cfa$var$test","$0070d23694cd1cfa$var$$canvas","imageRendering","antialias","vq","vy","pg","gs"],"version":3,"file":"index.0fa02a48.js.map"}